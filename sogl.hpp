#ifndef SOGL_HPP
#define SOGL_HPP

#if defined(_WIN32)
#define SOGL_WINDOWS
#endif
/* WARNING: Not supported yet.*/
#if defined(__linux__)
#define GLX_GLXEXT_PROTOTYPES
#include <GL/glx.h>
#include <X11/X.h>
#define SOGL_LINUX
#define __stdcall
#endif

#if defined(SOGL_WINDOWS)
#include <windows.h>
#pragma comment(lib, "opengl32.lib")
#pragma push_macro("MemoryBarrier")
#undef MemoryBarrier
#endif

/* WARNING: Not supported yet.*/
#if defined(__APPLE__)
#include <mach-o/dyld.h>
#endif
#include <GL/gl.h>
#include <iostream>
#include <cstddef>
#include <string>
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This file was generated with SOGLL*/
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#ifdef _MSC_VER
static void* soglLoad( //Call this to initialize SOGL
	int majorv = 0,
	int minorv = 0,
	bool debuggig = true,
	bool backwardsCompatible = true
); 
#endif
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//Missing typedefs: 
typedef char GLchar;
typedef unsigned long long GLuint64;
typedef long long GLint64;
typedef unsigned short GLhalf;
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;
typedef struct __GLsync* GLsync;
typedef void (__stdcall *GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);
typedef void (__stdcall *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam);


#if defined(SOGL_LINUX)
#undef GLX_3DFX_FULLSCREEN_MODE_MESA
#undef GLX_3DFX_WINDOW_MODE_MESA
#undef GLX_ACCUM_BUFFER_BIT
#undef GLX_ACCUM_BUFFER_BIT_SGIX
#undef GLX_AUX0_EXT
#undef GLX_AUX1_EXT
#undef GLX_AUX2_EXT
#undef GLX_AUX3_EXT
#undef GLX_AUX4_EXT
#undef GLX_AUX5_EXT
#undef GLX_AUX6_EXT
#undef GLX_AUX7_EXT
#undef GLX_AUX8_EXT
#undef GLX_AUX9_EXT
#undef GLX_AUX_BUFFERS_BIT
#undef GLX_AUX_BUFFERS_BIT_SGIX
#undef GLX_BACK_BUFFER_AGE_EXT
#undef GLX_BACK_LEFT_BUFFER_BIT
#undef GLX_BACK_LEFT_BUFFER_BIT_SGIX
#undef GLX_BACK_LEFT_EXT
#undef GLX_BACK_RIGHT_BUFFER_BIT
#undef GLX_BACK_RIGHT_BUFFER_BIT_SGIX
#undef GLX_BACK_RIGHT_EXT
#undef GLX_BAD_HYPERPIPE_CONFIG_SGIX
#undef GLX_BAD_HYPERPIPE_SGIX
#undef GLX_BIND_TO_MIPMAP_TEXTURE_EXT
#undef GLX_BIND_TO_TEXTURE_RGBA_EXT
#undef GLX_BIND_TO_TEXTURE_RGB_EXT
#undef GLX_BIND_TO_TEXTURE_TARGETS_EXT
#undef GLX_BLENDED_RGBA_SGIS
#undef GLX_BUFFER_CLOBBER_MASK_SGIX
#undef GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK
#undef GLX_COLOR_INDEX_BIT
#undef GLX_COLOR_INDEX_BIT_SGIX
#undef GLX_COLOR_INDEX_TYPE
#undef GLX_COLOR_INDEX_TYPE_SGIX
#undef GLX_COLOR_SAMPLES_NV
#undef GLX_CONFIG_CAVEAT
#undef GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB
#undef GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
#undef GLX_CONTEXT_CORE_PROFILE_BIT_ARB
#undef GLX_CONTEXT_DEBUG_BIT_ARB
#undef GLX_CONTEXT_ES2_PROFILE_BIT_EXT
#undef GLX_CONTEXT_ES_PROFILE_BIT_EXT
#undef GLX_CONTEXT_FLAGS_ARB
#undef GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
#undef GLX_CONTEXT_MAJOR_VERSION_ARB
#undef GLX_CONTEXT_MINOR_VERSION_ARB
#undef GLX_CONTEXT_PROFILE_MASK_ARB
#undef GLX_CONTEXT_RESET_ISOLATION_BIT_ARB
#undef GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB
#undef GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB
#undef GLX_COPY_COMPLETE_INTEL
#undef GLX_COVERAGE_SAMPLES_NV
#undef GLX_DAMAGED
#undef GLX_DAMAGED_SGIX
#undef GLX_DEPTH_BUFFER_BIT
#undef GLX_DEPTH_BUFFER_BIT_SGIX
#undef GLX_DEVICE_ID_NV
#undef GLX_DIRECT_COLOR
#undef GLX_DIRECT_COLOR_EXT
#undef GLX_DONT_CARE
#undef GLX_DRAWABLE_TYPE
#undef GLX_DRAWABLE_TYPE_SGIX
#undef GLX_EVENT_MASK
#undef GLX_EVENT_MASK_SGIX
#undef GLX_EXCHANGE_COMPLETE_INTEL
#undef GLX_FBCONFIG_ID
#undef GLX_FBCONFIG_ID_SGIX
#undef GLX_FLIP_COMPLETE_INTEL
#undef GLX_FLOAT_COMPONENTS_NV
#undef GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB
#undef GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT
#undef GLX_FRONT_LEFT_BUFFER_BIT
#undef GLX_FRONT_LEFT_BUFFER_BIT_SGIX
#undef GLX_FRONT_LEFT_EXT
#undef GLX_FRONT_RIGHT_BUFFER_BIT
#undef GLX_FRONT_RIGHT_BUFFER_BIT_SGIX
#undef GLX_FRONT_RIGHT_EXT
#undef GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV
#undef GLX_GPU_CLOCK_AMD
#undef GLX_GPU_FASTEST_TARGET_GPUS_AMD
#undef GLX_GPU_NUM_PIPES_AMD
#undef GLX_GPU_NUM_RB_AMD
#undef GLX_GPU_NUM_SIMD_AMD
#undef GLX_GPU_NUM_SPI_AMD
#undef GLX_GPU_OPENGL_VERSION_STRING_AMD
#undef GLX_GPU_RAM_AMD
#undef GLX_GPU_RENDERER_STRING_AMD
#undef GLX_GPU_VENDOR_AMD
#undef GLX_GRAY_SCALE
#undef GLX_GRAY_SCALE_EXT
#undef GLX_HEIGHT
#undef GLX_HEIGHT_SGIX
#undef GLX_HYPERPIPE_DISPLAY_PIPE_SGIX
#undef GLX_HYPERPIPE_ID_SGIX
#undef GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX
#undef GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX
#undef GLX_HYPERPIPE_RENDER_PIPE_SGIX
#undef GLX_HYPERPIPE_STEREO_SGIX
#undef GLX_LARGEST_PBUFFER
#undef GLX_LARGEST_PBUFFER_SGIX
#undef GLX_LATE_SWAPS_TEAR_EXT
#undef GLX_LOSE_CONTEXT_ON_RESET_ARB
#undef GLX_MAX_PBUFFER_HEIGHT
#undef GLX_MAX_PBUFFER_HEIGHT_SGIX
#undef GLX_MAX_PBUFFER_PIXELS
#undef GLX_MAX_PBUFFER_PIXELS_SGIX
#undef GLX_MAX_PBUFFER_WIDTH
#undef GLX_MAX_PBUFFER_WIDTH_SGIX
#undef GLX_MAX_SWAP_INTERVAL_EXT
#undef GLX_MIPMAP_TEXTURE_EXT
#undef GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS
#undef GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS
#undef GLX_NONE
#undef GLX_NONE_EXT
#undef GLX_NON_CONFORMANT_CONFIG
#undef GLX_NON_CONFORMANT_VISUAL_EXT
#undef GLX_NO_RESET_NOTIFICATION_ARB
#undef GLX_NUM_VIDEO_CAPTURE_SLOTS_NV
#undef GLX_NUM_VIDEO_SLOTS_NV
#undef GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX
#undef GLX_OPTIMAL_PBUFFER_WIDTH_SGIX
#undef GLX_PBUFFER
#undef GLX_PBUFFER_BIT
#undef GLX_PBUFFER_BIT_SGIX
#undef GLX_PBUFFER_CLOBBER_MASK
#undef GLX_PBUFFER_HEIGHT
#undef GLX_PBUFFER_SGIX
#undef GLX_PBUFFER_WIDTH
#undef GLX_PIPE_RECT_LIMITS_SGIX
#undef GLX_PIPE_RECT_SGIX
#undef GLX_PIXMAP_BIT
#undef GLX_PIXMAP_BIT_SGIX
#undef GLX_PRESERVED_CONTENTS
#undef GLX_PRESERVED_CONTENTS_SGIX
#undef GLX_PSEUDO_COLOR
#undef GLX_PSEUDO_COLOR_EXT
#undef GLX_RENDERER_ACCELERATED_MESA
#undef GLX_RENDERER_DEVICE_ID_MESA
#undef GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA
#undef GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA
#undef GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA
#undef GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA
#undef GLX_RENDERER_PREFERRED_PROFILE_MESA
#undef GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA
#undef GLX_RENDERER_VENDOR_ID_MESA
#undef GLX_RENDERER_VERSION_MESA
#undef GLX_RENDERER_VIDEO_MEMORY_MESA
#undef GLX_RENDER_TYPE
#undef GLX_RENDER_TYPE_SGIX
#undef GLX_RGBA_BIT
#undef GLX_RGBA_BIT_SGIX
#undef GLX_RGBA_FLOAT_BIT_ARB
#undef GLX_RGBA_FLOAT_TYPE_ARB
#undef GLX_RGBA_TYPE
#undef GLX_RGBA_TYPE_SGIX
#undef GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT
#undef GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT
#undef GLX_SAMPLES
#undef GLX_SAMPLES_3DFX
#undef GLX_SAMPLES_ARB
#undef GLX_SAMPLES_SGIS
#undef GLX_SAMPLE_BUFFERS
#undef GLX_SAMPLE_BUFFERS_3DFX
#undef GLX_SAMPLE_BUFFERS_ARB
#undef GLX_SAMPLE_BUFFERS_BIT_SGIX
#undef GLX_SAMPLE_BUFFERS_SGIS
#undef GLX_SAVED
#undef GLX_SAVED_SGIX
#undef GLX_SCREEN
#undef GLX_SCREEN_EXT
#undef GLX_SHARE_CONTEXT_EXT
#undef GLX_SLOW_CONFIG
#undef GLX_SLOW_VISUAL_EXT
#undef GLX_STATIC_COLOR
#undef GLX_STATIC_COLOR_EXT
#undef GLX_STATIC_GRAY
#undef GLX_STATIC_GRAY_EXT
#undef GLX_STENCIL_BUFFER_BIT
#undef GLX_STENCIL_BUFFER_BIT_SGIX
#undef GLX_STEREO_NOTIFY_EXT
#undef GLX_STEREO_NOTIFY_MASK_EXT
#undef GLX_STEREO_TREE_EXT
#undef GLX_SWAP_COPY_OML
#undef GLX_SWAP_EXCHANGE_OML
#undef GLX_SWAP_INTERVAL_EXT
#undef GLX_SWAP_METHOD_OML
#undef GLX_SWAP_UNDEFINED_OML
#undef GLX_SYNC_FRAME_SGIX
#undef GLX_SYNC_SWAP_SGIX
#undef GLX_TEXTURE_1D_BIT_EXT
#undef GLX_TEXTURE_1D_EXT
#undef GLX_TEXTURE_2D_BIT_EXT
#undef GLX_TEXTURE_2D_EXT
#undef GLX_TEXTURE_FORMAT_EXT
#undef GLX_TEXTURE_FORMAT_NONE_EXT
#undef GLX_TEXTURE_FORMAT_RGBA_EXT
#undef GLX_TEXTURE_FORMAT_RGB_EXT
#undef GLX_TEXTURE_RECTANGLE_BIT_EXT
#undef GLX_TEXTURE_RECTANGLE_EXT
#undef GLX_TEXTURE_TARGET_EXT
#undef GLX_TRANSPARENT_ALPHA_VALUE
#undef GLX_TRANSPARENT_ALPHA_VALUE_EXT
#undef GLX_TRANSPARENT_BLUE_VALUE
#undef GLX_TRANSPARENT_BLUE_VALUE_EXT
#undef GLX_TRANSPARENT_GREEN_VALUE
#undef GLX_TRANSPARENT_GREEN_VALUE_EXT
#undef GLX_TRANSPARENT_INDEX
#undef GLX_TRANSPARENT_INDEX_EXT
#undef GLX_TRANSPARENT_INDEX_VALUE
#undef GLX_TRANSPARENT_INDEX_VALUE_EXT
#undef GLX_TRANSPARENT_RED_VALUE
#undef GLX_TRANSPARENT_RED_VALUE_EXT
#undef GLX_TRANSPARENT_RGB
#undef GLX_TRANSPARENT_RGB_EXT
#undef GLX_TRANSPARENT_TYPE
#undef GLX_TRANSPARENT_TYPE_EXT
#undef GLX_TRUE_COLOR
#undef GLX_TRUE_COLOR_EXT
#undef GLX_UNIQUE_ID_NV
#undef GLX_VENDOR_NAMES_EXT
#undef GLX_VERSION_1_3
#undef GLX_VERSION_1_4
#undef GLX_VIDEO_OUT_ALPHA_NV
#undef GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV
#undef GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV
#undef GLX_VIDEO_OUT_COLOR_NV
#undef GLX_VIDEO_OUT_DEPTH_NV
#undef GLX_VIDEO_OUT_FIELD_1_NV
#undef GLX_VIDEO_OUT_FIELD_2_NV
#undef GLX_VIDEO_OUT_FRAME_NV
#undef GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV
#undef GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV
#undef GLX_VISUAL_CAVEAT_EXT
#undef GLX_VISUAL_ID
#undef GLX_VISUAL_ID_EXT
#undef GLX_VISUAL_SELECT_GROUP_SGIX
#undef GLX_WIDTH
#undef GLX_WIDTH_SGIX
#undef GLX_WINDOW
#undef GLX_WINDOW_BIT
#undef GLX_WINDOW_BIT_SGIX
#undef GLX_WINDOW_SGIX
#undef GLX_X_RENDERABLE
#undef GLX_X_RENDERABLE_SGIX
#undef GLX_X_VISUAL_TYPE
#undef GLX_X_VISUAL_TYPE_EXT
#undef GLX_Y_INVERTED_EXT
#undef GL_1PASS_EXT
#undef GL_1PASS_SGIS
#undef GL_2PASS_0_EXT
#undef GL_2PASS_0_SGIS
#undef GL_2PASS_1_EXT
#undef GL_2PASS_1_SGIS
#undef GL_2X_BIT_ATI
#undef GL_422_AVERAGE_EXT
#undef GL_422_EXT
#undef GL_422_REV_AVERAGE_EXT
#undef GL_422_REV_EXT
#undef GL_4PASS_0_EXT
#undef GL_4PASS_0_SGIS
#undef GL_4PASS_1_EXT
#undef GL_4PASS_1_SGIS
#undef GL_4PASS_2_EXT
#undef GL_4PASS_2_SGIS
#undef GL_4PASS_3_EXT
#undef GL_4PASS_3_SGIS
#undef GL_4X_BIT_ATI
#undef GL_8X_BIT_ATI
#undef GL_ABGR_EXT
#undef GL_ACCUM_ADJACENT_PAIRS_NV
#undef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#undef GL_ACTIVE_ATTRIBUTES
#undef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#undef GL_ACTIVE_PROGRAM
#undef GL_ACTIVE_PROGRAM_EXT
#undef GL_ACTIVE_RESOURCES
#undef GL_ACTIVE_STENCIL_FACE_EXT
#undef GL_ACTIVE_SUBROUTINES
#undef GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#undef GL_ACTIVE_SUBROUTINE_UNIFORMS
#undef GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#undef GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#undef GL_ACTIVE_TEXTURE
#undef GL_ACTIVE_TEXTURE_ARB
#undef GL_ACTIVE_UNIFORMS
#undef GL_ACTIVE_UNIFORM_BLOCKS
#undef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#undef GL_ACTIVE_UNIFORM_MAX_LENGTH
#undef GL_ACTIVE_VARIABLES
#undef GL_ACTIVE_VARYINGS_NV
#undef GL_ACTIVE_VARYING_MAX_LENGTH_NV
#undef GL_ACTIVE_VERTEX_UNITS_ARB
#undef GL_ADD_ATI
#undef GL_ADD_SIGNED
#undef GL_ADD_SIGNED_ARB
#undef GL_ADD_SIGNED_EXT
#undef GL_ADJACENT_PAIRS_NV
#undef GL_AFFINE_2D_NV
#undef GL_AFFINE_3D_NV
#undef GL_ALIASED_LINE_WIDTH_RANGE
#undef GL_ALIASED_POINT_SIZE_RANGE
#undef GL_ALLOW_DRAW_FRG_HINT_PGI
#undef GL_ALLOW_DRAW_MEM_HINT_PGI
#undef GL_ALLOW_DRAW_OBJ_HINT_PGI
#undef GL_ALLOW_DRAW_WIN_HINT_PGI
#undef GL_ALL_BARRIER_BITS
#undef GL_ALL_BARRIER_BITS_EXT
#undef GL_ALL_COMPLETED_NV
#undef GL_ALL_PIXELS_AMD
#undef GL_ALL_SHADER_BITS
#undef GL_ALL_STATIC_DATA_IBM
#undef GL_ALPHA12_EXT
#undef GL_ALPHA16F_ARB
#undef GL_ALPHA16I_EXT
#undef GL_ALPHA16UI_EXT
#undef GL_ALPHA16_EXT
#undef GL_ALPHA16_SNORM
#undef GL_ALPHA32F_ARB
#undef GL_ALPHA32I_EXT
#undef GL_ALPHA32UI_EXT
#undef GL_ALPHA4_EXT
#undef GL_ALPHA8I_EXT
#undef GL_ALPHA8UI_EXT
#undef GL_ALPHA8_EXT
#undef GL_ALPHA8_SNORM
#undef GL_ALPHA_FLOAT16_APPLE
#undef GL_ALPHA_FLOAT16_ATI
#undef GL_ALPHA_FLOAT32_APPLE
#undef GL_ALPHA_FLOAT32_ATI
#undef GL_ALPHA_INTEGER
#undef GL_ALPHA_INTEGER_EXT
#undef GL_ALPHA_MAX_CLAMP_INGR
#undef GL_ALPHA_MAX_SGIX
#undef GL_ALPHA_MIN_CLAMP_INGR
#undef GL_ALPHA_MIN_SGIX
#undef GL_ALPHA_REF_COMMAND_NV
#undef GL_ALPHA_SNORM
#undef GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV
#undef GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV
#undef GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV
#undef GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV
#undef GL_ALREADY_SIGNALED
#undef GL_ALWAYS_FAST_HINT_PGI
#undef GL_ALWAYS_SOFT_HINT_PGI
#undef GL_ANY_SAMPLES_PASSED
#undef GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#undef GL_ARC_TO_NV
#undef GL_ARRAY_BUFFER
#undef GL_ARRAY_BUFFER_ARB
#undef GL_ARRAY_BUFFER_BINDING
#undef GL_ARRAY_BUFFER_BINDING_ARB
#undef GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
#undef GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
#undef GL_ARRAY_OBJECT_BUFFER_ATI
#undef GL_ARRAY_OBJECT_OFFSET_ATI
#undef GL_ARRAY_SIZE
#undef GL_ARRAY_STRIDE
#undef GL_ASYNC_DRAW_PIXELS_SGIX
#undef GL_ASYNC_HISTOGRAM_SGIX
#undef GL_ASYNC_MARKER_SGIX
#undef GL_ASYNC_READ_PIXELS_SGIX
#undef GL_ASYNC_TEX_IMAGE_SGIX
#undef GL_ATOMIC_COUNTER_BARRIER_BIT
#undef GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
#undef GL_ATOMIC_COUNTER_BUFFER
#undef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#undef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#undef GL_ATOMIC_COUNTER_BUFFER_BINDING
#undef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#undef GL_ATOMIC_COUNTER_BUFFER_INDEX
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_SIZE
#undef GL_ATOMIC_COUNTER_BUFFER_START
#undef GL_ATTACHED_SHADERS
#undef GL_ATTENUATION_EXT
#undef GL_ATTRIBUTE_ADDRESS_COMMAND_NV
#undef GL_ATTRIB_ARRAY_POINTER_NV
#undef GL_ATTRIB_ARRAY_SIZE_NV
#undef GL_ATTRIB_ARRAY_STRIDE_NV
#undef GL_ATTRIB_ARRAY_TYPE_NV
#undef GL_AUTO_GENERATE_MIPMAP
#undef GL_AUX_DEPTH_STENCIL_APPLE
#undef GL_AVERAGE_EXT
#undef GL_BACK_NORMALS_HINT_PGI
#undef GL_BACK_PRIMARY_COLOR_NV
#undef GL_BACK_SECONDARY_COLOR_NV
#undef GL_BEVEL_NV
#undef GL_BGR
#undef GL_BGRA
#undef GL_BGRA_EXT
#undef GL_BGRA_INTEGER
#undef GL_BGRA_INTEGER_EXT
#undef GL_BGR_EXT
#undef GL_BGR_INTEGER
#undef GL_BGR_INTEGER_EXT
#undef GL_BIAS_BIT_ATI
#undef GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
#undef GL_BINORMAL_ARRAY_EXT
#undef GL_BINORMAL_ARRAY_POINTER_EXT
#undef GL_BINORMAL_ARRAY_STRIDE_EXT
#undef GL_BINORMAL_ARRAY_TYPE_EXT
#undef GL_BLEND_ADVANCED_COHERENT_KHR
#undef GL_BLEND_ADVANCED_COHERENT_NV
#undef GL_BLEND_COLOR
#undef GL_BLEND_COLOR_COMMAND_NV
#undef GL_BLEND_COLOR_EXT
#undef GL_BLEND_DST_ALPHA
#undef GL_BLEND_DST_ALPHA_EXT
#undef GL_BLEND_DST_RGB
#undef GL_BLEND_DST_RGB_EXT
#undef GL_BLEND_EQUATION
#undef GL_BLEND_EQUATION_ALPHA
#undef GL_BLEND_EQUATION_ALPHA_EXT
#undef GL_BLEND_EQUATION_EXT
#undef GL_BLEND_EQUATION_RGB
#undef GL_BLEND_EQUATION_RGB_EXT
#undef GL_BLEND_OVERLAP_NV
#undef GL_BLEND_PREMULTIPLIED_SRC_NV
#undef GL_BLEND_SRC_ALPHA
#undef GL_BLEND_SRC_ALPHA_EXT
#undef GL_BLEND_SRC_RGB
#undef GL_BLEND_SRC_RGB_EXT
#undef GL_BLOCK_INDEX
#undef GL_BLUE_BIT_ATI
#undef GL_BLUE_INTEGER
#undef GL_BLUE_INTEGER_EXT
#undef GL_BLUE_MAX_CLAMP_INGR
#undef GL_BLUE_MIN_CLAMP_INGR
#undef GL_BLUE_NV
#undef GL_BOLD_BIT_NV
#undef GL_BOOL
#undef GL_BOOL_ARB
#undef GL_BOOL_VEC2
#undef GL_BOOL_VEC2_ARB
#undef GL_BOOL_VEC3
#undef GL_BOOL_VEC3_ARB
#undef GL_BOOL_VEC4
#undef GL_BOOL_VEC4_ARB
#undef GL_BOUNDING_BOX_NV
#undef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#undef GL_BUFFER
#undef GL_BUFFER_ACCESS
#undef GL_BUFFER_ACCESS_ARB
#undef GL_BUFFER_ACCESS_FLAGS
#undef GL_BUFFER_BINDING
#undef GL_BUFFER_DATA_SIZE
#undef GL_BUFFER_FLUSHING_UNMAP_APPLE
#undef GL_BUFFER_GPU_ADDRESS_NV
#undef GL_BUFFER_IMMUTABLE_STORAGE
#undef GL_BUFFER_MAPPED
#undef GL_BUFFER_MAPPED_ARB
#undef GL_BUFFER_MAP_LENGTH
#undef GL_BUFFER_MAP_OFFSET
#undef GL_BUFFER_MAP_POINTER
#undef GL_BUFFER_MAP_POINTER_ARB
#undef GL_BUFFER_OBJECT_APPLE
#undef GL_BUFFER_OBJECT_EXT
#undef GL_BUFFER_SERIALIZED_MODIFY_APPLE
#undef GL_BUFFER_SIZE
#undef GL_BUFFER_SIZE_ARB
#undef GL_BUFFER_STORAGE_FLAGS
#undef GL_BUFFER_UPDATE_BARRIER_BIT
#undef GL_BUFFER_UPDATE_BARRIER_BIT_EXT
#undef GL_BUFFER_USAGE
#undef GL_BUFFER_USAGE_ARB
#undef GL_BUFFER_VARIABLE
#undef GL_BUMP_ENVMAP_ATI
#undef GL_BUMP_NUM_TEX_UNITS_ATI
#undef GL_BUMP_ROT_MATRIX_ATI
#undef GL_BUMP_ROT_MATRIX_SIZE_ATI
#undef GL_BUMP_TARGET_ATI
#undef GL_BUMP_TEX_UNITS_ATI
#undef GL_CAVEAT_SUPPORT
#undef GL_CIRCULAR_CCW_ARC_TO_NV
#undef GL_CIRCULAR_CW_ARC_TO_NV
#undef GL_CIRCULAR_TANGENT_ARC_TO_NV
#undef GL_CLAMP_FRAGMENT_COLOR
#undef GL_CLAMP_FRAGMENT_COLOR_ARB
#undef GL_CLAMP_READ_COLOR
#undef GL_CLAMP_READ_COLOR_ARB
#undef GL_CLAMP_TO_BORDER
#undef GL_CLAMP_TO_BORDER_ARB
#undef GL_CLAMP_TO_BORDER_SGIS
#undef GL_CLAMP_TO_EDGE
#undef GL_CLAMP_TO_EDGE_SGIS
#undef GL_CLAMP_VERTEX_COLOR
#undef GL_CLAMP_VERTEX_COLOR_ARB
#undef GL_CLEAR_BUFFER
#undef GL_CLEAR_TEXTURE
#undef GL_CLIENT_ACTIVE_TEXTURE
#undef GL_CLIENT_ACTIVE_TEXTURE_ARB
#undef GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
#undef GL_CLIENT_STORAGE_BIT
#undef GL_CLIPPING_INPUT_PRIMITIVES
#undef GL_CLIPPING_INPUT_PRIMITIVES_ARB
#undef GL_CLIPPING_OUTPUT_PRIMITIVES
#undef GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
#undef GL_CLIP_DEPTH_MODE
#undef GL_CLIP_DISTANCE0
#undef GL_CLIP_DISTANCE1
#undef GL_CLIP_DISTANCE2
#undef GL_CLIP_DISTANCE3
#undef GL_CLIP_DISTANCE4
#undef GL_CLIP_DISTANCE5
#undef GL_CLIP_DISTANCE_NV
#undef GL_CLIP_FAR_HINT_PGI
#undef GL_CLIP_NEAR_HINT_PGI
#undef GL_CLIP_ORIGIN
#undef GL_CLIP_VOLUME_CLIPPING_HINT_EXT
#undef GL_CLOSE_PATH_NV
#undef GL_CMYKA_EXT
#undef GL_CMYK_EXT
#undef GL_CND0_ATI
#undef GL_CND_ATI
#undef GL_COLOR3_BIT_PGI
#undef GL_COLOR4_BIT_PGI
#undef GL_COLORBURN_KHR
#undef GL_COLORBURN_NV
#undef GL_COLORDODGE_KHR
#undef GL_COLORDODGE_NV
#undef GL_COLOR_ALPHA_PAIRING_ATI
#undef GL_COLOR_ARRAY_ADDRESS_NV
#undef GL_COLOR_ARRAY_BUFFER_BINDING
#undef GL_COLOR_ARRAY_BUFFER_BINDING_ARB
#undef GL_COLOR_ARRAY_COUNT_EXT
#undef GL_COLOR_ARRAY_EXT
#undef GL_COLOR_ARRAY_LENGTH_NV
#undef GL_COLOR_ARRAY_LIST_IBM
#undef GL_COLOR_ARRAY_LIST_STRIDE_IBM
#undef GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
#undef GL_COLOR_ARRAY_POINTER_EXT
#undef GL_COLOR_ARRAY_SIZE_EXT
#undef GL_COLOR_ARRAY_STRIDE_EXT
#undef GL_COLOR_ARRAY_TYPE_EXT
#undef GL_COLOR_ATTACHMENT0
#undef GL_COLOR_ATTACHMENT0_EXT
#undef GL_COLOR_ATTACHMENT1
#undef GL_COLOR_ATTACHMENT10
#undef GL_COLOR_ATTACHMENT10_EXT
#undef GL_COLOR_ATTACHMENT11
#undef GL_COLOR_ATTACHMENT11_EXT
#undef GL_COLOR_ATTACHMENT12
#undef GL_COLOR_ATTACHMENT12_EXT
#undef GL_COLOR_ATTACHMENT13
#undef GL_COLOR_ATTACHMENT13_EXT
#undef GL_COLOR_ATTACHMENT14
#undef GL_COLOR_ATTACHMENT14_EXT
#undef GL_COLOR_ATTACHMENT15
#undef GL_COLOR_ATTACHMENT15_EXT
#undef GL_COLOR_ATTACHMENT1_EXT
#undef GL_COLOR_ATTACHMENT2
#undef GL_COLOR_ATTACHMENT2_EXT
#undef GL_COLOR_ATTACHMENT3
#undef GL_COLOR_ATTACHMENT3_EXT
#undef GL_COLOR_ATTACHMENT4
#undef GL_COLOR_ATTACHMENT4_EXT
#undef GL_COLOR_ATTACHMENT5
#undef GL_COLOR_ATTACHMENT5_EXT
#undef GL_COLOR_ATTACHMENT6
#undef GL_COLOR_ATTACHMENT6_EXT
#undef GL_COLOR_ATTACHMENT7
#undef GL_COLOR_ATTACHMENT7_EXT
#undef GL_COLOR_ATTACHMENT8
#undef GL_COLOR_ATTACHMENT8_EXT
#undef GL_COLOR_ATTACHMENT9
#undef GL_COLOR_ATTACHMENT9_EXT
#undef GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
#undef GL_COLOR_COMPONENTS
#undef GL_COLOR_ENCODING
#undef GL_COLOR_FLOAT_APPLE
#undef GL_COLOR_INDEX12_EXT
#undef GL_COLOR_INDEX16_EXT
#undef GL_COLOR_INDEX1_EXT
#undef GL_COLOR_INDEX2_EXT
#undef GL_COLOR_INDEX4_EXT
#undef GL_COLOR_INDEX8_EXT
#undef GL_COLOR_MATRIX
#undef GL_COLOR_MATRIX_SGI
#undef GL_COLOR_MATRIX_STACK_DEPTH
#undef GL_COLOR_MATRIX_STACK_DEPTH_SGI
#undef GL_COLOR_RENDERABLE
#undef GL_COLOR_SAMPLES_NV
#undef GL_COLOR_SUM
#undef GL_COLOR_SUM_ARB
#undef GL_COLOR_SUM_CLAMP_NV
#undef GL_COLOR_SUM_EXT
#undef GL_COLOR_TABLE
#undef GL_COLOR_TABLE_ALPHA_SIZE
#undef GL_COLOR_TABLE_ALPHA_SIZE_SGI
#undef GL_COLOR_TABLE_BIAS
#undef GL_COLOR_TABLE_BIAS_SGI
#undef GL_COLOR_TABLE_BLUE_SIZE
#undef GL_COLOR_TABLE_BLUE_SIZE_SGI
#undef GL_COLOR_TABLE_FORMAT
#undef GL_COLOR_TABLE_FORMAT_SGI
#undef GL_COLOR_TABLE_GREEN_SIZE
#undef GL_COLOR_TABLE_GREEN_SIZE_SGI
#undef GL_COLOR_TABLE_INTENSITY_SIZE
#undef GL_COLOR_TABLE_INTENSITY_SIZE_SGI
#undef GL_COLOR_TABLE_LUMINANCE_SIZE
#undef GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
#undef GL_COLOR_TABLE_RED_SIZE
#undef GL_COLOR_TABLE_RED_SIZE_SGI
#undef GL_COLOR_TABLE_SCALE
#undef GL_COLOR_TABLE_SCALE_SGI
#undef GL_COLOR_TABLE_SGI
#undef GL_COLOR_TABLE_WIDTH
#undef GL_COLOR_TABLE_WIDTH_SGI
#undef GL_COMBINE
#undef GL_COMBINE4_NV
#undef GL_COMBINER0_NV
#undef GL_COMBINER1_NV
#undef GL_COMBINER2_NV
#undef GL_COMBINER3_NV
#undef GL_COMBINER4_NV
#undef GL_COMBINER5_NV
#undef GL_COMBINER6_NV
#undef GL_COMBINER7_NV
#undef GL_COMBINER_AB_DOT_PRODUCT_NV
#undef GL_COMBINER_AB_OUTPUT_NV
#undef GL_COMBINER_BIAS_NV
#undef GL_COMBINER_CD_DOT_PRODUCT_NV
#undef GL_COMBINER_CD_OUTPUT_NV
#undef GL_COMBINER_COMPONENT_USAGE_NV
#undef GL_COMBINER_INPUT_NV
#undef GL_COMBINER_MAPPING_NV
#undef GL_COMBINER_MUX_SUM_NV
#undef GL_COMBINER_SCALE_NV
#undef GL_COMBINER_SUM_OUTPUT_NV
#undef GL_COMBINE_ALPHA
#undef GL_COMBINE_ALPHA_ARB
#undef GL_COMBINE_ALPHA_EXT
#undef GL_COMBINE_ARB
#undef GL_COMBINE_EXT
#undef GL_COMBINE_RGB
#undef GL_COMBINE_RGB_ARB
#undef GL_COMBINE_RGB_EXT
#undef GL_COMMAND_BARRIER_BIT
#undef GL_COMMAND_BARRIER_BIT_EXT
#undef GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
#undef GL_COMPARE_REF_TO_TEXTURE
#undef GL_COMPARE_R_TO_TEXTURE
#undef GL_COMPARE_R_TO_TEXTURE_ARB
#undef GL_COMPATIBLE_SUBROUTINES
#undef GL_COMPILE_STATUS
#undef GL_COMPLETION_STATUS_ARB
#undef GL_COMPLETION_STATUS_KHR
#undef GL_COMPRESSED_ALPHA
#undef GL_COMPRESSED_ALPHA_ARB
#undef GL_COMPRESSED_INTENSITY
#undef GL_COMPRESSED_INTENSITY_ARB
#undef GL_COMPRESSED_LUMINANCE
#undef GL_COMPRESSED_LUMINANCE_ALPHA
#undef GL_COMPRESSED_LUMINANCE_ALPHA_ARB
#undef GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
#undef GL_COMPRESSED_LUMINANCE_ARB
#undef GL_COMPRESSED_LUMINANCE_LATC1_EXT
#undef GL_COMPRESSED_R11_EAC
#undef GL_COMPRESSED_RED
#undef GL_COMPRESSED_RED_GREEN_RGTC2_EXT
#undef GL_COMPRESSED_RED_RGTC1
#undef GL_COMPRESSED_RED_RGTC1_EXT
#undef GL_COMPRESSED_RG
#undef GL_COMPRESSED_RG11_EAC
#undef GL_COMPRESSED_RGB
#undef GL_COMPRESSED_RGB8_ETC2
#undef GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#undef GL_COMPRESSED_RGBA
#undef GL_COMPRESSED_RGBA8_ETC2_EAC
#undef GL_COMPRESSED_RGBA_ARB
#undef GL_COMPRESSED_RGBA_BPTC_UNORM
#undef GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
#undef GL_COMPRESSED_RGBA_FXT1_3DFX
#undef GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
#undef GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
#undef GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
#undef GL_COMPRESSED_RGB_ARB
#undef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
#undef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
#undef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
#undef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
#undef GL_COMPRESSED_RGB_FXT1_3DFX
#undef GL_COMPRESSED_RGB_S3TC_DXT1_EXT
#undef GL_COMPRESSED_RG_RGTC2
#undef GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
#undef GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
#undef GL_COMPRESSED_SIGNED_R11_EAC
#undef GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
#undef GL_COMPRESSED_SIGNED_RED_RGTC1
#undef GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
#undef GL_COMPRESSED_SIGNED_RG11_EAC
#undef GL_COMPRESSED_SIGNED_RG_RGTC2
#undef GL_COMPRESSED_SLUMINANCE
#undef GL_COMPRESSED_SLUMINANCE_ALPHA
#undef GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
#undef GL_COMPRESSED_SLUMINANCE_EXT
#undef GL_COMPRESSED_SRGB
#undef GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#undef GL_COMPRESSED_SRGB8_ETC2
#undef GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#undef GL_COMPRESSED_SRGB_ALPHA
#undef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
#undef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
#undef GL_COMPRESSED_SRGB_ALPHA_EXT
#undef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
#undef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
#undef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
#undef GL_COMPRESSED_SRGB_EXT
#undef GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
#undef GL_COMPRESSED_TEXTURE_FORMATS
#undef GL_COMPRESSED_TEXTURE_FORMATS_ARB
#undef GL_COMPUTE_PROGRAM_NV
#undef GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_COMPUTE_SHADER
#undef GL_COMPUTE_SHADER_BIT
#undef GL_COMPUTE_SHADER_INVOCATIONS
#undef GL_COMPUTE_SHADER_INVOCATIONS_ARB
#undef GL_COMPUTE_SUBROUTINE
#undef GL_COMPUTE_SUBROUTINE_UNIFORM
#undef GL_COMPUTE_TEXTURE
#undef GL_COMPUTE_WORK_GROUP_SIZE
#undef GL_COMP_BIT_ATI
#undef GL_CONDITION_SATISFIED
#undef GL_CONFORMANT_NV
#undef GL_CONIC_CURVE_TO_NV
#undef GL_CONJOINT_NV
#undef GL_CONSERVATIVE_RASTERIZATION_INTEL
#undef GL_CONSERVATIVE_RASTERIZATION_NV
#undef GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
#undef GL_CONSERVATIVE_RASTER_DILATE_NV
#undef GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
#undef GL_CONSERVATIVE_RASTER_MODE_NV
#undef GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
#undef GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
#undef GL_CONSERVE_MEMORY_HINT_PGI
#undef GL_CONSTANT
#undef GL_CONSTANT_ALPHA
#undef GL_CONSTANT_ALPHA_EXT
#undef GL_CONSTANT_ARB
#undef GL_CONSTANT_BORDER
#undef GL_CONSTANT_COLOR
#undef GL_CONSTANT_COLOR0_NV
#undef GL_CONSTANT_COLOR1_NV
#undef GL_CONSTANT_COLOR_EXT
#undef GL_CONSTANT_EXT
#undef GL_CONST_EYE_NV
#undef GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#undef GL_CONTEXT_CORE_PROFILE_BIT
#undef GL_CONTEXT_FLAGS
#undef GL_CONTEXT_FLAG_DEBUG_BIT
#undef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#undef GL_CONTEXT_FLAG_NO_ERROR_BIT
#undef GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
#undef GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
#undef GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
#undef GL_CONTEXT_LOST
#undef GL_CONTEXT_PROFILE_MASK
#undef GL_CONTEXT_ROBUST_ACCESS
#undef GL_CONTINUOUS_AMD
#undef GL_CONTRAST_NV
#undef GL_CONVEX_HULL_NV
#undef GL_CONVOLUTION_1D
#undef GL_CONVOLUTION_1D_EXT
#undef GL_CONVOLUTION_2D
#undef GL_CONVOLUTION_2D_EXT
#undef GL_CONVOLUTION_BORDER_COLOR
#undef GL_CONVOLUTION_BORDER_MODE
#undef GL_CONVOLUTION_BORDER_MODE_EXT
#undef GL_CONVOLUTION_FILTER_BIAS
#undef GL_CONVOLUTION_FILTER_BIAS_EXT
#undef GL_CONVOLUTION_FILTER_SCALE
#undef GL_CONVOLUTION_FILTER_SCALE_EXT
#undef GL_CONVOLUTION_FORMAT
#undef GL_CONVOLUTION_FORMAT_EXT
#undef GL_CONVOLUTION_HEIGHT
#undef GL_CONVOLUTION_HEIGHT_EXT
#undef GL_CONVOLUTION_HINT_SGIX
#undef GL_CONVOLUTION_WIDTH
#undef GL_CONVOLUTION_WIDTH_EXT
#undef GL_CON_0_ATI
#undef GL_CON_1_ATI
#undef GL_CON_2_ATI
#undef GL_CON_3_ATI
#undef GL_CON_4_ATI
#undef GL_CON_5_ATI
#undef GL_CON_6_ATI
#undef GL_CON_7_ATI
#undef GL_COORD_REPLACE
#undef GL_COORD_REPLACE_ARB
#undef GL_COORD_REPLACE_NV
#undef GL_COPY_READ_BUFFER
#undef GL_COPY_READ_BUFFER_BINDING
#undef GL_COPY_WRITE_BUFFER
#undef GL_COPY_WRITE_BUFFER_BINDING
#undef GL_COUNTER_RANGE_AMD
#undef GL_COUNTER_TYPE_AMD
#undef GL_COUNT_DOWN_NV
#undef GL_COUNT_UP_NV
#undef GL_COVERAGE_MODULATION_NV
#undef GL_COVERAGE_MODULATION_TABLE_NV
#undef GL_COVERAGE_MODULATION_TABLE_SIZE_NV
#undef GL_CUBIC_CURVE_TO_NV
#undef GL_CUBIC_EXT
#undef GL_CULL_FRAGMENT_NV
#undef GL_CULL_MODES_NV
#undef GL_CULL_VERTEX_EXT
#undef GL_CULL_VERTEX_EYE_POSITION_EXT
#undef GL_CULL_VERTEX_IBM
#undef GL_CULL_VERTEX_OBJECT_POSITION_EXT
#undef GL_CURRENT_ATTRIB_NV
#undef GL_CURRENT_BINORMAL_EXT
#undef GL_CURRENT_FOG_COORD
#undef GL_CURRENT_FOG_COORDINATE
#undef GL_CURRENT_FOG_COORDINATE_EXT
#undef GL_CURRENT_MATRIX_ARB
#undef GL_CURRENT_MATRIX_INDEX_ARB
#undef GL_CURRENT_MATRIX_NV
#undef GL_CURRENT_MATRIX_STACK_DEPTH_ARB
#undef GL_CURRENT_MATRIX_STACK_DEPTH_NV
#undef GL_CURRENT_OCCLUSION_QUERY_ID_NV
#undef GL_CURRENT_PALETTE_MATRIX_ARB
#undef GL_CURRENT_PROGRAM
#undef GL_CURRENT_QUERY
#undef GL_CURRENT_QUERY_ARB
#undef GL_CURRENT_RASTER_SECONDARY_COLOR
#undef GL_CURRENT_SECONDARY_COLOR
#undef GL_CURRENT_SECONDARY_COLOR_EXT
#undef GL_CURRENT_TANGENT_EXT
#undef GL_CURRENT_TIME_NV
#undef GL_CURRENT_VERTEX_ATTRIB
#undef GL_CURRENT_VERTEX_ATTRIB_ARB
#undef GL_CURRENT_VERTEX_EXT
#undef GL_CURRENT_VERTEX_WEIGHT_EXT
#undef GL_CURRENT_WEIGHT_ARB
#undef GL_D3D12_FENCE_VALUE_EXT
#undef GL_DARKEN_KHR
#undef GL_DARKEN_NV
#undef GL_DATA_BUFFER_AMD
#undef GL_DEBUG_CALLBACK_FUNCTION
#undef GL_DEBUG_CALLBACK_FUNCTION_ARB
#undef GL_DEBUG_CALLBACK_USER_PARAM
#undef GL_DEBUG_CALLBACK_USER_PARAM_ARB
#undef GL_DEBUG_CATEGORY_API_ERROR_AMD
#undef GL_DEBUG_CATEGORY_APPLICATION_AMD
#undef GL_DEBUG_CATEGORY_DEPRECATION_AMD
#undef GL_DEBUG_CATEGORY_OTHER_AMD
#undef GL_DEBUG_CATEGORY_PERFORMANCE_AMD
#undef GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
#undef GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
#undef GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
#undef GL_DEBUG_GROUP_STACK_DEPTH
#undef GL_DEBUG_LOGGED_MESSAGES
#undef GL_DEBUG_LOGGED_MESSAGES_AMD
#undef GL_DEBUG_LOGGED_MESSAGES_ARB
#undef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#undef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
#undef GL_DEBUG_OUTPUT
#undef GL_DEBUG_OUTPUT_SYNCHRONOUS
#undef GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
#undef GL_DEBUG_SEVERITY_HIGH
#undef GL_DEBUG_SEVERITY_HIGH_AMD
#undef GL_DEBUG_SEVERITY_HIGH_ARB
#undef GL_DEBUG_SEVERITY_LOW
#undef GL_DEBUG_SEVERITY_LOW_AMD
#undef GL_DEBUG_SEVERITY_LOW_ARB
#undef GL_DEBUG_SEVERITY_MEDIUM
#undef GL_DEBUG_SEVERITY_MEDIUM_AMD
#undef GL_DEBUG_SEVERITY_MEDIUM_ARB
#undef GL_DEBUG_SEVERITY_NOTIFICATION
#undef GL_DEBUG_SOURCE_API
#undef GL_DEBUG_SOURCE_API_ARB
#undef GL_DEBUG_SOURCE_APPLICATION
#undef GL_DEBUG_SOURCE_APPLICATION_ARB
#undef GL_DEBUG_SOURCE_OTHER
#undef GL_DEBUG_SOURCE_OTHER_ARB
#undef GL_DEBUG_SOURCE_SHADER_COMPILER
#undef GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
#undef GL_DEBUG_SOURCE_THIRD_PARTY
#undef GL_DEBUG_SOURCE_THIRD_PARTY_ARB
#undef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#undef GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
#undef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#undef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
#undef GL_DEBUG_TYPE_ERROR
#undef GL_DEBUG_TYPE_ERROR_ARB
#undef GL_DEBUG_TYPE_MARKER
#undef GL_DEBUG_TYPE_OTHER
#undef GL_DEBUG_TYPE_OTHER_ARB
#undef GL_DEBUG_TYPE_PERFORMANCE
#undef GL_DEBUG_TYPE_PERFORMANCE_ARB
#undef GL_DEBUG_TYPE_POP_GROUP
#undef GL_DEBUG_TYPE_PORTABILITY
#undef GL_DEBUG_TYPE_PORTABILITY_ARB
#undef GL_DEBUG_TYPE_PUSH_GROUP
#undef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#undef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
#undef GL_DECODE_EXT
#undef GL_DECR_WRAP
#undef GL_DECR_WRAP_EXT
#undef GL_DEDICATED_MEMORY_OBJECT_EXT
#undef GL_DELETE_STATUS
#undef GL_DEPENDENT_AR_TEXTURE_2D_NV
#undef GL_DEPENDENT_GB_TEXTURE_2D_NV
#undef GL_DEPENDENT_HILO_TEXTURE_2D_NV
#undef GL_DEPENDENT_RGB_TEXTURE_3D_NV
#undef GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
#undef GL_DEPTH24_STENCIL8
#undef GL_DEPTH24_STENCIL8_EXT
#undef GL_DEPTH32F_STENCIL8
#undef GL_DEPTH32F_STENCIL8_NV
#undef GL_DEPTH_ATTACHMENT
#undef GL_DEPTH_ATTACHMENT_EXT
#undef GL_DEPTH_BOUNDS_EXT
#undef GL_DEPTH_BOUNDS_TEST_EXT
#undef GL_DEPTH_BUFFER_FLOAT_MODE_NV
#undef GL_DEPTH_CLAMP
#undef GL_DEPTH_CLAMP_FAR_AMD
#undef GL_DEPTH_CLAMP_NEAR_AMD
#undef GL_DEPTH_CLAMP_NV
#undef GL_DEPTH_COMPONENT16
#undef GL_DEPTH_COMPONENT16_ARB
#undef GL_DEPTH_COMPONENT16_SGIX
#undef GL_DEPTH_COMPONENT24
#undef GL_DEPTH_COMPONENT24_ARB
#undef GL_DEPTH_COMPONENT24_SGIX
#undef GL_DEPTH_COMPONENT32
#undef GL_DEPTH_COMPONENT32F
#undef GL_DEPTH_COMPONENT32F_NV
#undef GL_DEPTH_COMPONENT32_ARB
#undef GL_DEPTH_COMPONENT32_SGIX
#undef GL_DEPTH_COMPONENTS
#undef GL_DEPTH_RENDERABLE
#undef GL_DEPTH_SAMPLES_NV
#undef GL_DEPTH_STENCIL
#undef GL_DEPTH_STENCIL_ATTACHMENT
#undef GL_DEPTH_STENCIL_EXT
#undef GL_DEPTH_STENCIL_NV
#undef GL_DEPTH_STENCIL_TEXTURE_MODE
#undef GL_DEPTH_STENCIL_TO_BGRA_NV
#undef GL_DEPTH_STENCIL_TO_RGBA_NV
#undef GL_DEPTH_TEXTURE_MODE
#undef GL_DEPTH_TEXTURE_MODE_ARB
#undef GL_DEVICE_LUID_EXT
#undef GL_DEVICE_NODE_MASK_EXT
#undef GL_DEVICE_UUID_EXT
#undef GL_DIFFERENCE_KHR
#undef GL_DIFFERENCE_NV
#undef GL_DISCARD_ATI
#undef GL_DISCARD_NV
#undef GL_DISCRETE_AMD
#undef GL_DISJOINT_NV
#undef GL_DISPATCH_INDIRECT_BUFFER
#undef GL_DISPATCH_INDIRECT_BUFFER_BINDING
#undef GL_DISPLAY_LIST
#undef GL_DISTANCE_ATTENUATION_EXT
#undef GL_DOT2_ADD_ATI
#undef GL_DOT3_ATI
#undef GL_DOT3_RGB
#undef GL_DOT3_RGBA
#undef GL_DOT3_RGBA_ARB
#undef GL_DOT3_RGBA_EXT
#undef GL_DOT3_RGB_ARB
#undef GL_DOT3_RGB_EXT
#undef GL_DOT4_ATI
#undef GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
#undef GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
#undef GL_DOT_PRODUCT_DEPTH_REPLACE_NV
#undef GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
#undef GL_DOT_PRODUCT_NV
#undef GL_DOT_PRODUCT_PASS_THROUGH_NV
#undef GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
#undef GL_DOT_PRODUCT_TEXTURE_1D_NV
#undef GL_DOT_PRODUCT_TEXTURE_2D_NV
#undef GL_DOT_PRODUCT_TEXTURE_3D_NV
#undef GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
#undef GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
#undef GL_DOUBLE_MAT2
#undef GL_DOUBLE_MAT2_EXT
#undef GL_DOUBLE_MAT3
#undef GL_DOUBLE_MAT3_EXT
#undef GL_DOUBLE_MAT4
#undef GL_DOUBLE_MAT4_EXT
#undef GL_DOUBLE_VEC2
#undef GL_DOUBLE_VEC2_EXT
#undef GL_DOUBLE_VEC3
#undef GL_DOUBLE_VEC3_EXT
#undef GL_DOUBLE_VEC4
#undef GL_DOUBLE_VEC4_EXT
#undef GL_DRAW_ARRAYS_COMMAND_NV
#undef GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
#undef GL_DRAW_ARRAYS_STRIP_COMMAND_NV
#undef GL_DRAW_BUFFER0
#undef GL_DRAW_BUFFER0_ARB
#undef GL_DRAW_BUFFER0_ATI
#undef GL_DRAW_BUFFER1
#undef GL_DRAW_BUFFER10
#undef GL_DRAW_BUFFER10_ARB
#undef GL_DRAW_BUFFER10_ATI
#undef GL_DRAW_BUFFER11
#undef GL_DRAW_BUFFER11_ARB
#undef GL_DRAW_BUFFER11_ATI
#undef GL_DRAW_BUFFER12
#undef GL_DRAW_BUFFER12_ARB
#undef GL_DRAW_BUFFER12_ATI
#undef GL_DRAW_BUFFER13
#undef GL_DRAW_BUFFER13_ARB
#undef GL_DRAW_BUFFER13_ATI
#undef GL_DRAW_BUFFER14
#undef GL_DRAW_BUFFER14_ARB
#undef GL_DRAW_BUFFER14_ATI
#undef GL_DRAW_BUFFER15
#undef GL_DRAW_BUFFER15_ARB
#undef GL_DRAW_BUFFER15_ATI
#undef GL_DRAW_BUFFER1_ARB
#undef GL_DRAW_BUFFER1_ATI
#undef GL_DRAW_BUFFER2
#undef GL_DRAW_BUFFER2_ARB
#undef GL_DRAW_BUFFER2_ATI
#undef GL_DRAW_BUFFER3
#undef GL_DRAW_BUFFER3_ARB
#undef GL_DRAW_BUFFER3_ATI
#undef GL_DRAW_BUFFER4
#undef GL_DRAW_BUFFER4_ARB
#undef GL_DRAW_BUFFER4_ATI
#undef GL_DRAW_BUFFER5
#undef GL_DRAW_BUFFER5_ARB
#undef GL_DRAW_BUFFER5_ATI
#undef GL_DRAW_BUFFER6
#undef GL_DRAW_BUFFER6_ARB
#undef GL_DRAW_BUFFER6_ATI
#undef GL_DRAW_BUFFER7
#undef GL_DRAW_BUFFER7_ARB
#undef GL_DRAW_BUFFER7_ATI
#undef GL_DRAW_BUFFER8
#undef GL_DRAW_BUFFER8_ARB
#undef GL_DRAW_BUFFER8_ATI
#undef GL_DRAW_BUFFER9
#undef GL_DRAW_BUFFER9_ARB
#undef GL_DRAW_BUFFER9_ATI
#undef GL_DRAW_ELEMENTS_COMMAND_NV
#undef GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
#undef GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
#undef GL_DRAW_FRAMEBUFFER
#undef GL_DRAW_FRAMEBUFFER_BINDING
#undef GL_DRAW_FRAMEBUFFER_BINDING_EXT
#undef GL_DRAW_FRAMEBUFFER_EXT
#undef GL_DRAW_INDIRECT_ADDRESS_NV
#undef GL_DRAW_INDIRECT_BUFFER
#undef GL_DRAW_INDIRECT_BUFFER_BINDING
#undef GL_DRAW_INDIRECT_LENGTH_NV
#undef GL_DRAW_INDIRECT_UNIFIED_NV
#undef GL_DRAW_PIXELS_APPLE
#undef GL_DRIVER_UUID_EXT
#undef GL_DSDT8_MAG8_INTENSITY8_NV
#undef GL_DSDT8_MAG8_NV
#undef GL_DSDT8_NV
#undef GL_DSDT_MAG_INTENSITY_NV
#undef GL_DSDT_MAG_NV
#undef GL_DSDT_MAG_VIB_NV
#undef GL_DSDT_NV
#undef GL_DST_ATOP_NV
#undef GL_DST_IN_NV
#undef GL_DST_NV
#undef GL_DST_OUT_NV
#undef GL_DST_OVER_NV
#undef GL_DS_BIAS_NV
#undef GL_DS_SCALE_NV
#undef GL_DT_BIAS_NV
#undef GL_DT_SCALE_NV
#undef GL_DU8DV8_ATI
#undef GL_DUDV_ATI
#undef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#undef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#undef GL_DYNAMIC_ATI
#undef GL_DYNAMIC_COPY
#undef GL_DYNAMIC_COPY_ARB
#undef GL_DYNAMIC_DRAW
#undef GL_DYNAMIC_DRAW_ARB
#undef GL_DYNAMIC_READ
#undef GL_DYNAMIC_READ_ARB
#undef GL_DYNAMIC_STORAGE_BIT
#undef GL_EDGEFLAG_BIT_PGI
#undef GL_EDGE_FLAG_ARRAY_ADDRESS_NV
#undef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
#undef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
#undef GL_EDGE_FLAG_ARRAY_COUNT_EXT
#undef GL_EDGE_FLAG_ARRAY_EXT
#undef GL_EDGE_FLAG_ARRAY_LENGTH_NV
#undef GL_EDGE_FLAG_ARRAY_LIST_IBM
#undef GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
#undef GL_EDGE_FLAG_ARRAY_POINTER_EXT
#undef GL_EDGE_FLAG_ARRAY_STRIDE_EXT
#undef GL_EFFECTIVE_RASTER_SAMPLES_EXT
#undef GL_EIGHTH_BIT_ATI
#undef GL_ELEMENT_ADDRESS_COMMAND_NV
#undef GL_ELEMENT_ARRAY_ADDRESS_NV
#undef GL_ELEMENT_ARRAY_APPLE
#undef GL_ELEMENT_ARRAY_ATI
#undef GL_ELEMENT_ARRAY_BARRIER_BIT
#undef GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
#undef GL_ELEMENT_ARRAY_BUFFER
#undef GL_ELEMENT_ARRAY_BUFFER_ARB
#undef GL_ELEMENT_ARRAY_BUFFER_BINDING
#undef GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
#undef GL_ELEMENT_ARRAY_LENGTH_NV
#undef GL_ELEMENT_ARRAY_POINTER_APPLE
#undef GL_ELEMENT_ARRAY_POINTER_ATI
#undef GL_ELEMENT_ARRAY_TYPE_APPLE
#undef GL_ELEMENT_ARRAY_TYPE_ATI
#undef GL_ELEMENT_ARRAY_UNIFIED_NV
#undef GL_EMBOSS_CONSTANT_NV
#undef GL_EMBOSS_LIGHT_NV
#undef GL_EMBOSS_MAP_NV
#undef GL_EVAL_2D_NV
#undef GL_EVAL_FRACTIONAL_TESSELLATION_NV
#undef GL_EVAL_TRIANGULAR_2D_NV
#undef GL_EVAL_VERTEX_ATTRIB0_NV
#undef GL_EVAL_VERTEX_ATTRIB10_NV
#undef GL_EVAL_VERTEX_ATTRIB11_NV
#undef GL_EVAL_VERTEX_ATTRIB12_NV
#undef GL_EVAL_VERTEX_ATTRIB13_NV
#undef GL_EVAL_VERTEX_ATTRIB14_NV
#undef GL_EVAL_VERTEX_ATTRIB15_NV
#undef GL_EVAL_VERTEX_ATTRIB1_NV
#undef GL_EVAL_VERTEX_ATTRIB2_NV
#undef GL_EVAL_VERTEX_ATTRIB3_NV
#undef GL_EVAL_VERTEX_ATTRIB4_NV
#undef GL_EVAL_VERTEX_ATTRIB5_NV
#undef GL_EVAL_VERTEX_ATTRIB6_NV
#undef GL_EVAL_VERTEX_ATTRIB7_NV
#undef GL_EVAL_VERTEX_ATTRIB8_NV
#undef GL_EVAL_VERTEX_ATTRIB9_NV
#undef GL_EXCLUSION_KHR
#undef GL_EXCLUSION_NV
#undef GL_EXCLUSIVE_EXT
#undef GL_EXPAND_NEGATE_NV
#undef GL_EXPAND_NORMAL_NV
#undef GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
#undef GL_EYE_DISTANCE_TO_LINE_SGIS
#undef GL_EYE_DISTANCE_TO_POINT_SGIS
#undef GL_EYE_LINE_SGIS
#undef GL_EYE_PLANE_ABSOLUTE_NV
#undef GL_EYE_POINT_SGIS
#undef GL_EYE_RADIAL_NV
#undef GL_E_TIMES_F_NV
#undef GL_FACTOR_MAX_AMD
#undef GL_FACTOR_MIN_AMD
#undef GL_FAILURE_NV
#undef GL_FENCE_APPLE
#undef GL_FENCE_CONDITION_NV
#undef GL_FENCE_STATUS_NV
#undef GL_FIELDS_NV
#undef GL_FIELD_LOWER_NV
#undef GL_FIELD_UPPER_NV
#undef GL_FILE_NAME_NV
#undef GL_FILL_RECTANGLE_NV
#undef GL_FILTER
#undef GL_FIRST_TO_REST_NV
#undef GL_FIRST_VERTEX_CONVENTION
#undef GL_FIRST_VERTEX_CONVENTION_EXT
#undef GL_FIXED
#undef GL_FIXED_ONLY
#undef GL_FIXED_ONLY_ARB
#undef GL_FLOAT16_MAT2_AMD
#undef GL_FLOAT16_MAT3_AMD
#undef GL_FLOAT16_MAT4_AMD
#undef GL_FLOAT16_NV
#undef GL_FLOAT16_VEC2_NV
#undef GL_FLOAT16_VEC3_NV
#undef GL_FLOAT16_VEC4_NV
#undef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#undef GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
#undef GL_FLOAT_CLEAR_COLOR_VALUE_NV
#undef GL_FLOAT_MAT2
#undef GL_FLOAT_MAT2_ARB
#undef GL_FLOAT_MAT3
#undef GL_FLOAT_MAT3_ARB
#undef GL_FLOAT_MAT4
#undef GL_FLOAT_MAT4_ARB
#undef GL_FLOAT_R16_NV
#undef GL_FLOAT_R32_NV
#undef GL_FLOAT_RG16_NV
#undef GL_FLOAT_RG32_NV
#undef GL_FLOAT_RGB16_NV
#undef GL_FLOAT_RGB32_NV
#undef GL_FLOAT_RGBA16_NV
#undef GL_FLOAT_RGBA32_NV
#undef GL_FLOAT_RGBA_MODE_NV
#undef GL_FLOAT_RGBA_NV
#undef GL_FLOAT_RGB_NV
#undef GL_FLOAT_RG_NV
#undef GL_FLOAT_R_NV
#undef GL_FLOAT_VEC2
#undef GL_FLOAT_VEC2_ARB
#undef GL_FLOAT_VEC3
#undef GL_FLOAT_VEC3_ARB
#undef GL_FLOAT_VEC4
#undef GL_FLOAT_VEC4_ARB
#undef GL_FOG_COORD
#undef GL_FOG_COORDINATE
#undef GL_FOG_COORDINATE_ARRAY
#undef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
#undef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
#undef GL_FOG_COORDINATE_ARRAY_EXT
#undef GL_FOG_COORDINATE_ARRAY_LIST_IBM
#undef GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
#undef GL_FOG_COORDINATE_ARRAY_POINTER
#undef GL_FOG_COORDINATE_ARRAY_POINTER_EXT
#undef GL_FOG_COORDINATE_ARRAY_STRIDE
#undef GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
#undef GL_FOG_COORDINATE_ARRAY_TYPE
#undef GL_FOG_COORDINATE_ARRAY_TYPE_EXT
#undef GL_FOG_COORDINATE_EXT
#undef GL_FOG_COORDINATE_SOURCE
#undef GL_FOG_COORDINATE_SOURCE_EXT
#undef GL_FOG_COORD_ARRAY
#undef GL_FOG_COORD_ARRAY_ADDRESS_NV
#undef GL_FOG_COORD_ARRAY_BUFFER_BINDING
#undef GL_FOG_COORD_ARRAY_LENGTH_NV
#undef GL_FOG_COORD_ARRAY_POINTER
#undef GL_FOG_COORD_ARRAY_STRIDE
#undef GL_FOG_COORD_ARRAY_TYPE
#undef GL_FOG_COORD_SRC
#undef GL_FOG_DISTANCE_MODE_NV
#undef GL_FOG_OFFSET_SGIX
#undef GL_FOG_OFFSET_VALUE_SGIX
#undef GL_FOG_SPECULAR_TEXTURE_WIN
#undef GL_FONT_ASCENDER_BIT_NV
#undef GL_FONT_DESCENDER_BIT_NV
#undef GL_FONT_GLYPHS_AVAILABLE_NV
#undef GL_FONT_HAS_KERNING_BIT_NV
#undef GL_FONT_HEIGHT_BIT_NV
#undef GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
#undef GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
#undef GL_FONT_NUM_GLYPH_INDICES_BIT_NV
#undef GL_FONT_TARGET_UNAVAILABLE_NV
#undef GL_FONT_UNAVAILABLE_NV
#undef GL_FONT_UNDERLINE_POSITION_BIT_NV
#undef GL_FONT_UNDERLINE_THICKNESS_BIT_NV
#undef GL_FONT_UNINTELLIGIBLE_NV
#undef GL_FONT_UNITS_PER_EM_BIT_NV
#undef GL_FONT_X_MAX_BOUNDS_BIT_NV
#undef GL_FONT_X_MIN_BOUNDS_BIT_NV
#undef GL_FONT_Y_MAX_BOUNDS_BIT_NV
#undef GL_FONT_Y_MIN_BOUNDS_BIT_NV
#undef GL_FORCE_BLUE_TO_ONE_NV
#undef GL_FORMAT_SUBSAMPLE_244_244_OML
#undef GL_FORMAT_SUBSAMPLE_24_24_OML
#undef GL_FRACTIONAL_EVEN
#undef GL_FRACTIONAL_ODD
#undef GL_FRAGMENT_COLOR_EXT
#undef GL_FRAGMENT_COVERAGE_COLOR_NV
#undef GL_FRAGMENT_COVERAGE_TO_COLOR_NV
#undef GL_FRAGMENT_DEPTH
#undef GL_FRAGMENT_DEPTH_EXT
#undef GL_FRAGMENT_INPUT_NV
#undef GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#undef GL_FRAGMENT_MATERIAL_EXT
#undef GL_FRAGMENT_NORMAL_EXT
#undef GL_FRAGMENT_PROGRAM_ARB
#undef GL_FRAGMENT_PROGRAM_BINDING_NV
#undef GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
#undef GL_FRAGMENT_PROGRAM_NV
#undef GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_FRAGMENT_SHADER
#undef GL_FRAGMENT_SHADER_ARB
#undef GL_FRAGMENT_SHADER_ATI
#undef GL_FRAGMENT_SHADER_BIT
#undef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#undef GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
#undef GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT
#undef GL_FRAGMENT_SHADER_INVOCATIONS
#undef GL_FRAGMENT_SHADER_INVOCATIONS_ARB
#undef GL_FRAGMENT_SUBROUTINE
#undef GL_FRAGMENT_SUBROUTINE_UNIFORM
#undef GL_FRAGMENT_TEXTURE
#undef GL_FRAMEBUFFER
#undef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#undef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#undef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#undef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
#undef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#undef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#undef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
#undef GL_FRAMEBUFFER_BARRIER_BIT
#undef GL_FRAMEBUFFER_BARRIER_BIT_EXT
#undef GL_FRAMEBUFFER_BINDING
#undef GL_FRAMEBUFFER_BINDING_EXT
#undef GL_FRAMEBUFFER_BLEND
#undef GL_FRAMEBUFFER_COMPLETE
#undef GL_FRAMEBUFFER_COMPLETE_EXT
#undef GL_FRAMEBUFFER_DEFAULT
#undef GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
#undef GL_FRAMEBUFFER_DEFAULT_HEIGHT
#undef GL_FRAMEBUFFER_DEFAULT_LAYERS
#undef GL_FRAMEBUFFER_DEFAULT_SAMPLES
#undef GL_FRAMEBUFFER_DEFAULT_WIDTH
#undef GL_FRAMEBUFFER_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#undef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#undef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#undef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#undef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#undef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR
#undef GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
#undef GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
#undef GL_FRAMEBUFFER_RENDERABLE
#undef GL_FRAMEBUFFER_RENDERABLE_LAYERED
#undef GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
#undef GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
#undef GL_FRAMEBUFFER_SRGB
#undef GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
#undef GL_FRAMEBUFFER_SRGB_EXT
#undef GL_FRAMEBUFFER_UNDEFINED
#undef GL_FRAMEBUFFER_UNSUPPORTED
#undef GL_FRAMEBUFFER_UNSUPPORTED_EXT
#undef GL_FRAME_NV
#undef GL_FRONT_FACE_COMMAND_NV
#undef GL_FULL_RANGE_EXT
#undef GL_FULL_STIPPLE_HINT_PGI
#undef GL_FULL_SUPPORT
#undef GL_FUNC_ADD
#undef GL_FUNC_ADD_EXT
#undef GL_FUNC_REVERSE_SUBTRACT
#undef GL_FUNC_REVERSE_SUBTRACT_EXT
#undef GL_FUNC_SUBTRACT
#undef GL_FUNC_SUBTRACT_EXT
#undef GL_GENERATE_MIPMAP
#undef GL_GENERATE_MIPMAP_HINT
#undef GL_GENERATE_MIPMAP_HINT_SGIS
#undef GL_GENERATE_MIPMAP_SGIS
#undef GL_GENERIC_ATTRIB_NV
#undef GL_GEOMETRY_DEFORMATION_BIT_SGIX
#undef GL_GEOMETRY_INPUT_TYPE
#undef GL_GEOMETRY_INPUT_TYPE_ARB
#undef GL_GEOMETRY_INPUT_TYPE_EXT
#undef GL_GEOMETRY_OUTPUT_TYPE
#undef GL_GEOMETRY_OUTPUT_TYPE_ARB
#undef GL_GEOMETRY_OUTPUT_TYPE_EXT
#undef GL_GEOMETRY_PROGRAM_NV
#undef GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_GEOMETRY_SHADER
#undef GL_GEOMETRY_SHADER_ARB
#undef GL_GEOMETRY_SHADER_BIT
#undef GL_GEOMETRY_SHADER_EXT
#undef GL_GEOMETRY_SHADER_INVOCATIONS
#undef GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED
#undef GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
#undef GL_GEOMETRY_SUBROUTINE
#undef GL_GEOMETRY_SUBROUTINE_UNIFORM
#undef GL_GEOMETRY_TEXTURE
#undef GL_GEOMETRY_VERTICES_OUT
#undef GL_GEOMETRY_VERTICES_OUT_ARB
#undef GL_GEOMETRY_VERTICES_OUT_EXT
#undef GL_GET_TEXTURE_IMAGE_FORMAT
#undef GL_GET_TEXTURE_IMAGE_TYPE
#undef GL_GLOBAL_ALPHA_FACTOR_SUN
#undef GL_GLOBAL_ALPHA_SUN
#undef GL_GLYPH_HAS_KERNING_BIT_NV
#undef GL_GLYPH_HEIGHT_BIT_NV
#undef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#undef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#undef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#undef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#undef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#undef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#undef GL_GLYPH_WIDTH_BIT_NV
#undef GL_GPU_ADDRESS_NV
#undef GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
#undef GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
#undef GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
#undef GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
#undef GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
#undef GL_GREEN_BIT_ATI
#undef GL_GREEN_INTEGER
#undef GL_GREEN_INTEGER_EXT
#undef GL_GREEN_MAX_CLAMP_INGR
#undef GL_GREEN_MIN_CLAMP_INGR
#undef GL_GREEN_NV
#undef GL_GUILTY_CONTEXT_RESET
#undef GL_GUILTY_CONTEXT_RESET_ARB
#undef GL_HALF_APPLE
#undef GL_HALF_BIAS_NEGATE_NV
#undef GL_HALF_BIAS_NORMAL_NV
#undef GL_HALF_BIT_ATI
#undef GL_HALF_FLOAT
#undef GL_HALF_FLOAT_ARB
#undef GL_HALF_FLOAT_NV
#undef GL_HANDLE_TYPE_D3D11_IMAGE_EXT
#undef GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT
#undef GL_HANDLE_TYPE_D3D12_FENCE_EXT
#undef GL_HANDLE_TYPE_D3D12_RESOURCE_EXT
#undef GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT
#undef GL_HANDLE_TYPE_OPAQUE_FD_EXT
#undef GL_HANDLE_TYPE_OPAQUE_WIN32_EXT
#undef GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT
#undef GL_HARDLIGHT_KHR
#undef GL_HARDLIGHT_NV
#undef GL_HARDMIX_NV
#undef GL_HIGH_FLOAT
#undef GL_HIGH_INT
#undef GL_HILO16_NV
#undef GL_HILO8_NV
#undef GL_HILO_NV
#undef GL_HISTOGRAM
#undef GL_HISTOGRAM_ALPHA_SIZE
#undef GL_HISTOGRAM_ALPHA_SIZE_EXT
#undef GL_HISTOGRAM_BLUE_SIZE
#undef GL_HISTOGRAM_BLUE_SIZE_EXT
#undef GL_HISTOGRAM_EXT
#undef GL_HISTOGRAM_FORMAT
#undef GL_HISTOGRAM_FORMAT_EXT
#undef GL_HISTOGRAM_GREEN_SIZE
#undef GL_HISTOGRAM_GREEN_SIZE_EXT
#undef GL_HISTOGRAM_LUMINANCE_SIZE
#undef GL_HISTOGRAM_LUMINANCE_SIZE_EXT
#undef GL_HISTOGRAM_RED_SIZE
#undef GL_HISTOGRAM_RED_SIZE_EXT
#undef GL_HISTOGRAM_SINK
#undef GL_HISTOGRAM_SINK_EXT
#undef GL_HISTOGRAM_WIDTH
#undef GL_HISTOGRAM_WIDTH_EXT
#undef GL_HI_BIAS_NV
#undef GL_HI_SCALE_NV
#undef GL_HORIZONTAL_LINE_TO_NV
#undef GL_HSL_COLOR_KHR
#undef GL_HSL_COLOR_NV
#undef GL_HSL_HUE_KHR
#undef GL_HSL_HUE_NV
#undef GL_HSL_LUMINOSITY_KHR
#undef GL_HSL_LUMINOSITY_NV
#undef GL_HSL_SATURATION_KHR
#undef GL_HSL_SATURATION_NV
#undef GL_IDENTITY_NV
#undef GL_IMAGE_1D
#undef GL_IMAGE_1D_ARRAY
#undef GL_IMAGE_1D_ARRAY_EXT
#undef GL_IMAGE_1D_EXT
#undef GL_IMAGE_2D
#undef GL_IMAGE_2D_ARRAY
#undef GL_IMAGE_2D_ARRAY_EXT
#undef GL_IMAGE_2D_EXT
#undef GL_IMAGE_2D_MULTISAMPLE
#undef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#undef GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#undef GL_IMAGE_2D_MULTISAMPLE_EXT
#undef GL_IMAGE_2D_RECT
#undef GL_IMAGE_2D_RECT_EXT
#undef GL_IMAGE_3D
#undef GL_IMAGE_3D_EXT
#undef GL_IMAGE_BINDING_ACCESS
#undef GL_IMAGE_BINDING_ACCESS_EXT
#undef GL_IMAGE_BINDING_FORMAT
#undef GL_IMAGE_BINDING_FORMAT_EXT
#undef GL_IMAGE_BINDING_LAYER
#undef GL_IMAGE_BINDING_LAYERED
#undef GL_IMAGE_BINDING_LAYERED_EXT
#undef GL_IMAGE_BINDING_LAYER_EXT
#undef GL_IMAGE_BINDING_LEVEL
#undef GL_IMAGE_BINDING_LEVEL_EXT
#undef GL_IMAGE_BINDING_NAME
#undef GL_IMAGE_BINDING_NAME_EXT
#undef GL_IMAGE_BUFFER
#undef GL_IMAGE_BUFFER_EXT
#undef GL_IMAGE_CLASS_10_10_10_2
#undef GL_IMAGE_CLASS_11_11_10
#undef GL_IMAGE_CLASS_1_X_16
#undef GL_IMAGE_CLASS_1_X_32
#undef GL_IMAGE_CLASS_1_X_8
#undef GL_IMAGE_CLASS_2_X_16
#undef GL_IMAGE_CLASS_2_X_32
#undef GL_IMAGE_CLASS_2_X_8
#undef GL_IMAGE_CLASS_4_X_16
#undef GL_IMAGE_CLASS_4_X_32
#undef GL_IMAGE_CLASS_4_X_8
#undef GL_IMAGE_COMPATIBILITY_CLASS
#undef GL_IMAGE_CUBE
#undef GL_IMAGE_CUBE_EXT
#undef GL_IMAGE_CUBE_MAP_ARRAY
#undef GL_IMAGE_CUBE_MAP_ARRAY_EXT
#undef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#undef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#undef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#undef GL_IMAGE_PIXEL_FORMAT
#undef GL_IMAGE_PIXEL_TYPE
#undef GL_IMAGE_TEXEL_SIZE
#undef GL_IMPLEMENTATION_COLOR_READ_FORMAT
#undef GL_IMPLEMENTATION_COLOR_READ_TYPE
#undef GL_INCLUSIVE_EXT
#undef GL_INCR_WRAP
#undef GL_INCR_WRAP_EXT
#undef GL_INDEX
#undef GL_INDEX_ARRAY_ADDRESS_NV
#undef GL_INDEX_ARRAY_BUFFER_BINDING
#undef GL_INDEX_ARRAY_BUFFER_BINDING_ARB
#undef GL_INDEX_ARRAY_COUNT_EXT
#undef GL_INDEX_ARRAY_EXT
#undef GL_INDEX_ARRAY_LENGTH_NV
#undef GL_INDEX_ARRAY_LIST_IBM
#undef GL_INDEX_ARRAY_LIST_STRIDE_IBM
#undef GL_INDEX_ARRAY_POINTER_EXT
#undef GL_INDEX_ARRAY_STRIDE_EXT
#undef GL_INDEX_ARRAY_TYPE_EXT
#undef GL_INDEX_BIT_PGI
#undef GL_INFO_LOG_LENGTH
#undef GL_INNOCENT_CONTEXT_RESET
#undef GL_INNOCENT_CONTEXT_RESET_ARB
#undef GL_INT16_NV
#undef GL_INT16_VEC2_NV
#undef GL_INT16_VEC3_NV
#undef GL_INT16_VEC4_NV
#undef GL_INT64_ARB
#undef GL_INT64_NV
#undef GL_INT64_VEC2_ARB
#undef GL_INT64_VEC2_NV
#undef GL_INT64_VEC3_ARB
#undef GL_INT64_VEC3_NV
#undef GL_INT64_VEC4_ARB
#undef GL_INT64_VEC4_NV
#undef GL_INT8_NV
#undef GL_INT8_VEC2_NV
#undef GL_INT8_VEC3_NV
#undef GL_INT8_VEC4_NV
#undef GL_INTENSITY12_EXT
#undef GL_INTENSITY16F_ARB
#undef GL_INTENSITY16I_EXT
#undef GL_INTENSITY16UI_EXT
#undef GL_INTENSITY16_EXT
#undef GL_INTENSITY16_SNORM
#undef GL_INTENSITY32F_ARB
#undef GL_INTENSITY32I_EXT
#undef GL_INTENSITY32UI_EXT
#undef GL_INTENSITY4_EXT
#undef GL_INTENSITY8I_EXT
#undef GL_INTENSITY8UI_EXT
#undef GL_INTENSITY8_EXT
#undef GL_INTENSITY8_SNORM
#undef GL_INTENSITY_EXT
#undef GL_INTENSITY_FLOAT16_APPLE
#undef GL_INTENSITY_FLOAT16_ATI
#undef GL_INTENSITY_FLOAT32_APPLE
#undef GL_INTENSITY_FLOAT32_ATI
#undef GL_INTENSITY_SNORM
#undef GL_INTERLACE_OML
#undef GL_INTERLACE_READ_INGR
#undef GL_INTERLACE_READ_OML
#undef GL_INTERLACE_SGIX
#undef GL_INTERLEAVED_ATTRIBS
#undef GL_INTERLEAVED_ATTRIBS_EXT
#undef GL_INTERLEAVED_ATTRIBS_NV
#undef GL_INTERNALFORMAT_ALPHA_SIZE
#undef GL_INTERNALFORMAT_ALPHA_TYPE
#undef GL_INTERNALFORMAT_BLUE_SIZE
#undef GL_INTERNALFORMAT_BLUE_TYPE
#undef GL_INTERNALFORMAT_DEPTH_SIZE
#undef GL_INTERNALFORMAT_DEPTH_TYPE
#undef GL_INTERNALFORMAT_GREEN_SIZE
#undef GL_INTERNALFORMAT_GREEN_TYPE
#undef GL_INTERNALFORMAT_PREFERRED
#undef GL_INTERNALFORMAT_RED_SIZE
#undef GL_INTERNALFORMAT_RED_TYPE
#undef GL_INTERNALFORMAT_SHARED_SIZE
#undef GL_INTERNALFORMAT_STENCIL_SIZE
#undef GL_INTERNALFORMAT_STENCIL_TYPE
#undef GL_INTERNALFORMAT_SUPPORTED
#undef GL_INTERPOLATE
#undef GL_INTERPOLATE_ARB
#undef GL_INTERPOLATE_EXT
#undef GL_INT_2_10_10_10_REV
#undef GL_INT_IMAGE_1D
#undef GL_INT_IMAGE_1D_ARRAY
#undef GL_INT_IMAGE_1D_ARRAY_EXT
#undef GL_INT_IMAGE_1D_EXT
#undef GL_INT_IMAGE_2D
#undef GL_INT_IMAGE_2D_ARRAY
#undef GL_INT_IMAGE_2D_ARRAY_EXT
#undef GL_INT_IMAGE_2D_EXT
#undef GL_INT_IMAGE_2D_MULTISAMPLE
#undef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#undef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#undef GL_INT_IMAGE_2D_MULTISAMPLE_EXT
#undef GL_INT_IMAGE_2D_RECT
#undef GL_INT_IMAGE_2D_RECT_EXT
#undef GL_INT_IMAGE_3D
#undef GL_INT_IMAGE_3D_EXT
#undef GL_INT_IMAGE_BUFFER
#undef GL_INT_IMAGE_BUFFER_EXT
#undef GL_INT_IMAGE_CUBE
#undef GL_INT_IMAGE_CUBE_EXT
#undef GL_INT_IMAGE_CUBE_MAP_ARRAY
#undef GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#undef GL_INT_SAMPLER_1D
#undef GL_INT_SAMPLER_1D_ARRAY
#undef GL_INT_SAMPLER_1D_ARRAY_EXT
#undef GL_INT_SAMPLER_1D_EXT
#undef GL_INT_SAMPLER_2D
#undef GL_INT_SAMPLER_2D_ARRAY
#undef GL_INT_SAMPLER_2D_ARRAY_EXT
#undef GL_INT_SAMPLER_2D_EXT
#undef GL_INT_SAMPLER_2D_MULTISAMPLE
#undef GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#undef GL_INT_SAMPLER_2D_RECT
#undef GL_INT_SAMPLER_2D_RECT_EXT
#undef GL_INT_SAMPLER_3D
#undef GL_INT_SAMPLER_3D_EXT
#undef GL_INT_SAMPLER_BUFFER
#undef GL_INT_SAMPLER_BUFFER_AMD
#undef GL_INT_SAMPLER_BUFFER_EXT
#undef GL_INT_SAMPLER_CUBE
#undef GL_INT_SAMPLER_CUBE_EXT
#undef GL_INT_SAMPLER_CUBE_MAP_ARRAY
#undef GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#undef GL_INT_SAMPLER_RENDERBUFFER_NV
#undef GL_INT_VEC2
#undef GL_INT_VEC2_ARB
#undef GL_INT_VEC3
#undef GL_INT_VEC3_ARB
#undef GL_INT_VEC4
#undef GL_INT_VEC4_ARB
#undef GL_INVALID_FRAMEBUFFER_OPERATION
#undef GL_INVALID_FRAMEBUFFER_OPERATION_EXT
#undef GL_INVALID_INDEX
#undef GL_INVARIANT_DATATYPE_EXT
#undef GL_INVARIANT_EXT
#undef GL_INVARIANT_VALUE_EXT
#undef GL_INVERSE_NV
#undef GL_INVERSE_TRANSPOSE_NV
#undef GL_INVERTED_SCREEN_W_REND
#undef GL_INVERT_OVG_NV
#undef GL_INVERT_RGB_NV
#undef GL_ISOLINES
#undef GL_IS_PER_PATCH
#undef GL_IS_ROW_MAJOR
#undef GL_ITALIC_BIT_NV
#undef GL_LARGE_CCW_ARC_TO_NV
#undef GL_LARGE_CW_ARC_TO_NV
#undef GL_LAST_VERTEX_CONVENTION
#undef GL_LAST_VERTEX_CONVENTION_EXT
#undef GL_LAST_VIDEO_CAPTURE_STATUS_NV
#undef GL_LAYER_PROVOKING_VERTEX
#undef GL_LAYOUT_COLOR_ATTACHMENT_EXT
#undef GL_LAYOUT_DEFAULT_INTEL
#undef GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT
#undef GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT
#undef GL_LAYOUT_GENERAL_EXT
#undef GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
#undef GL_LAYOUT_LINEAR_INTEL
#undef GL_LAYOUT_SHADER_READ_ONLY_EXT
#undef GL_LAYOUT_TRANSFER_DST_EXT
#undef GL_LAYOUT_TRANSFER_SRC_EXT
#undef GL_LERP_ATI
#undef GL_LGPU_SEPARATE_STORAGE_BIT_NVX
#undef GL_LIGHTEN_KHR
#undef GL_LIGHTEN_NV
#undef GL_LIGHT_MODEL_COLOR_CONTROL
#undef GL_LIGHT_MODEL_COLOR_CONTROL_EXT
#undef GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
#undef GL_LINEARBURN_NV
#undef GL_LINEARDODGE_NV
#undef GL_LINEARLIGHT_NV
#undef GL_LINEAR_TILING_EXT
#undef GL_LINES_ADJACENCY
#undef GL_LINES_ADJACENCY_ARB
#undef GL_LINES_ADJACENCY_EXT
#undef GL_LINE_STRIP_ADJACENCY
#undef GL_LINE_STRIP_ADJACENCY_ARB
#undef GL_LINE_STRIP_ADJACENCY_EXT
#undef GL_LINE_TO_NV
#undef GL_LINE_WIDTH_COMMAND_NV
#undef GL_LINK_STATUS
#undef GL_LOCAL_CONSTANT_DATATYPE_EXT
#undef GL_LOCAL_CONSTANT_EXT
#undef GL_LOCAL_CONSTANT_VALUE_EXT
#undef GL_LOCAL_EXT
#undef GL_LOCATION
#undef GL_LOCATION_COMPONENT
#undef GL_LOCATION_INDEX
#undef GL_LOSE_CONTEXT_ON_RESET
#undef GL_LOSE_CONTEXT_ON_RESET_ARB
#undef GL_LOWER_LEFT
#undef GL_LOW_FLOAT
#undef GL_LOW_INT
#undef GL_LO_BIAS_NV
#undef GL_LO_SCALE_NV
#undef GL_LUID_SIZE_EXT
#undef GL_LUMINANCE12_ALPHA12_EXT
#undef GL_LUMINANCE12_ALPHA4_EXT
#undef GL_LUMINANCE12_EXT
#undef GL_LUMINANCE16F_ARB
#undef GL_LUMINANCE16I_EXT
#undef GL_LUMINANCE16UI_EXT
#undef GL_LUMINANCE16_ALPHA16_EXT
#undef GL_LUMINANCE16_ALPHA16_SNORM
#undef GL_LUMINANCE16_EXT
#undef GL_LUMINANCE16_SNORM
#undef GL_LUMINANCE32F_ARB
#undef GL_LUMINANCE32I_EXT
#undef GL_LUMINANCE32UI_EXT
#undef GL_LUMINANCE4_ALPHA4_EXT
#undef GL_LUMINANCE4_EXT
#undef GL_LUMINANCE6_ALPHA2_EXT
#undef GL_LUMINANCE8I_EXT
#undef GL_LUMINANCE8UI_EXT
#undef GL_LUMINANCE8_ALPHA8_EXT
#undef GL_LUMINANCE8_ALPHA8_SNORM
#undef GL_LUMINANCE8_EXT
#undef GL_LUMINANCE8_SNORM
#undef GL_LUMINANCE_ALPHA16F_ARB
#undef GL_LUMINANCE_ALPHA16I_EXT
#undef GL_LUMINANCE_ALPHA16UI_EXT
#undef GL_LUMINANCE_ALPHA32F_ARB
#undef GL_LUMINANCE_ALPHA32I_EXT
#undef GL_LUMINANCE_ALPHA32UI_EXT
#undef GL_LUMINANCE_ALPHA8I_EXT
#undef GL_LUMINANCE_ALPHA8UI_EXT
#undef GL_LUMINANCE_ALPHA_FLOAT16_APPLE
#undef GL_LUMINANCE_ALPHA_FLOAT16_ATI
#undef GL_LUMINANCE_ALPHA_FLOAT32_APPLE
#undef GL_LUMINANCE_ALPHA_FLOAT32_ATI
#undef GL_LUMINANCE_ALPHA_INTEGER_EXT
#undef GL_LUMINANCE_ALPHA_SNORM
#undef GL_LUMINANCE_FLOAT16_APPLE
#undef GL_LUMINANCE_FLOAT16_ATI
#undef GL_LUMINANCE_FLOAT32_APPLE
#undef GL_LUMINANCE_FLOAT32_ATI
#undef GL_LUMINANCE_INTEGER_EXT
#undef GL_LUMINANCE_SNORM
#undef GL_MAD_ATI
#undef GL_MAGNITUDE_BIAS_NV
#undef GL_MAGNITUDE_SCALE_NV
#undef GL_MAJOR_VERSION
#undef GL_MANUAL_GENERATE_MIPMAP
#undef GL_MAP1_BINORMAL_EXT
#undef GL_MAP1_TANGENT_EXT
#undef GL_MAP1_VERTEX_ATTRIB0_4_NV
#undef GL_MAP1_VERTEX_ATTRIB10_4_NV
#undef GL_MAP1_VERTEX_ATTRIB11_4_NV
#undef GL_MAP1_VERTEX_ATTRIB12_4_NV
#undef GL_MAP1_VERTEX_ATTRIB13_4_NV
#undef GL_MAP1_VERTEX_ATTRIB14_4_NV
#undef GL_MAP1_VERTEX_ATTRIB15_4_NV
#undef GL_MAP1_VERTEX_ATTRIB1_4_NV
#undef GL_MAP1_VERTEX_ATTRIB2_4_NV
#undef GL_MAP1_VERTEX_ATTRIB3_4_NV
#undef GL_MAP1_VERTEX_ATTRIB4_4_NV
#undef GL_MAP1_VERTEX_ATTRIB5_4_NV
#undef GL_MAP1_VERTEX_ATTRIB6_4_NV
#undef GL_MAP1_VERTEX_ATTRIB7_4_NV
#undef GL_MAP1_VERTEX_ATTRIB8_4_NV
#undef GL_MAP1_VERTEX_ATTRIB9_4_NV
#undef GL_MAP2_BINORMAL_EXT
#undef GL_MAP2_TANGENT_EXT
#undef GL_MAP2_VERTEX_ATTRIB0_4_NV
#undef GL_MAP2_VERTEX_ATTRIB10_4_NV
#undef GL_MAP2_VERTEX_ATTRIB11_4_NV
#undef GL_MAP2_VERTEX_ATTRIB12_4_NV
#undef GL_MAP2_VERTEX_ATTRIB13_4_NV
#undef GL_MAP2_VERTEX_ATTRIB14_4_NV
#undef GL_MAP2_VERTEX_ATTRIB15_4_NV
#undef GL_MAP2_VERTEX_ATTRIB1_4_NV
#undef GL_MAP2_VERTEX_ATTRIB2_4_NV
#undef GL_MAP2_VERTEX_ATTRIB3_4_NV
#undef GL_MAP2_VERTEX_ATTRIB4_4_NV
#undef GL_MAP2_VERTEX_ATTRIB5_4_NV
#undef GL_MAP2_VERTEX_ATTRIB6_4_NV
#undef GL_MAP2_VERTEX_ATTRIB7_4_NV
#undef GL_MAP2_VERTEX_ATTRIB8_4_NV
#undef GL_MAP2_VERTEX_ATTRIB9_4_NV
#undef GL_MAP_ATTRIB_U_ORDER_NV
#undef GL_MAP_ATTRIB_V_ORDER_NV
#undef GL_MAP_COHERENT_BIT
#undef GL_MAP_FLUSH_EXPLICIT_BIT
#undef GL_MAP_INVALIDATE_BUFFER_BIT
#undef GL_MAP_INVALIDATE_RANGE_BIT
#undef GL_MAP_PERSISTENT_BIT
#undef GL_MAP_READ_BIT
#undef GL_MAP_TESSELLATION_NV
#undef GL_MAP_UNSYNCHRONIZED_BIT
#undef GL_MAP_WRITE_BIT
#undef GL_MATERIAL_SIDE_HINT_PGI
#undef GL_MATRIX0_ARB
#undef GL_MATRIX0_NV
#undef GL_MATRIX10_ARB
#undef GL_MATRIX11_ARB
#undef GL_MATRIX12_ARB
#undef GL_MATRIX13_ARB
#undef GL_MATRIX14_ARB
#undef GL_MATRIX15_ARB
#undef GL_MATRIX16_ARB
#undef GL_MATRIX17_ARB
#undef GL_MATRIX18_ARB
#undef GL_MATRIX19_ARB
#undef GL_MATRIX1_ARB
#undef GL_MATRIX1_NV
#undef GL_MATRIX20_ARB
#undef GL_MATRIX21_ARB
#undef GL_MATRIX22_ARB
#undef GL_MATRIX23_ARB
#undef GL_MATRIX24_ARB
#undef GL_MATRIX25_ARB
#undef GL_MATRIX26_ARB
#undef GL_MATRIX27_ARB
#undef GL_MATRIX28_ARB
#undef GL_MATRIX29_ARB
#undef GL_MATRIX2_ARB
#undef GL_MATRIX2_NV
#undef GL_MATRIX30_ARB
#undef GL_MATRIX31_ARB
#undef GL_MATRIX3_ARB
#undef GL_MATRIX3_NV
#undef GL_MATRIX4_ARB
#undef GL_MATRIX4_NV
#undef GL_MATRIX5_ARB
#undef GL_MATRIX5_NV
#undef GL_MATRIX6_ARB
#undef GL_MATRIX6_NV
#undef GL_MATRIX7_ARB
#undef GL_MATRIX7_NV
#undef GL_MATRIX8_ARB
#undef GL_MATRIX9_ARB
#undef GL_MATRIX_EXT
#undef GL_MATRIX_INDEX_ARRAY_ARB
#undef GL_MATRIX_INDEX_ARRAY_POINTER_ARB
#undef GL_MATRIX_INDEX_ARRAY_SIZE_ARB
#undef GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
#undef GL_MATRIX_INDEX_ARRAY_TYPE_ARB
#undef GL_MATRIX_PALETTE_ARB
#undef GL_MATRIX_STRIDE
#undef GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
#undef GL_MAT_AMBIENT_BIT_PGI
#undef GL_MAT_COLOR_INDEXES_BIT_PGI
#undef GL_MAT_DIFFUSE_BIT_PGI
#undef GL_MAT_EMISSION_BIT_PGI
#undef GL_MAT_SHININESS_BIT_PGI
#undef GL_MAT_SPECULAR_BIT_PGI
#undef GL_MAX
#undef GL_MAX_3D_TEXTURE_SIZE
#undef GL_MAX_3D_TEXTURE_SIZE_EXT
#undef GL_MAX_ARRAY_TEXTURE_LAYERS
#undef GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
#undef GL_MAX_ASYNC_DRAW_PIXELS_SGIX
#undef GL_MAX_ASYNC_HISTOGRAM_SGIX
#undef GL_MAX_ASYNC_READ_PIXELS_SGIX
#undef GL_MAX_ASYNC_TEX_IMAGE_SGIX
#undef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#undef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#undef GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
#undef GL_MAX_CLIP_DISTANCES
#undef GL_MAX_COLOR_ATTACHMENTS
#undef GL_MAX_COLOR_ATTACHMENTS_EXT
#undef GL_MAX_COLOR_MATRIX_STACK_DEPTH
#undef GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
#undef GL_MAX_COLOR_TEXTURE_SAMPLES
#undef GL_MAX_COMBINED_ATOMIC_COUNTERS
#undef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
#undef GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_DIMENSIONS
#undef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_IMAGE_UNIFORMS
#undef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#undef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
#undef GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
#undef GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
#undef GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#undef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
#undef GL_MAX_COMBINED_UNIFORM_BLOCKS
#undef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#undef GL_MAX_COMPUTE_ATOMIC_COUNTERS
#undef GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
#undef GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
#undef GL_MAX_COMPUTE_IMAGE_UNIFORMS
#undef GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
#undef GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
#undef GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
#undef GL_MAX_COMPUTE_UNIFORM_BLOCKS
#undef GL_MAX_COMPUTE_UNIFORM_COMPONENTS
#undef GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
#undef GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
#undef GL_MAX_COMPUTE_WORK_GROUP_COUNT
#undef GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
#undef GL_MAX_COMPUTE_WORK_GROUP_SIZE
#undef GL_MAX_CONVOLUTION_HEIGHT
#undef GL_MAX_CONVOLUTION_HEIGHT_EXT
#undef GL_MAX_CONVOLUTION_WIDTH
#undef GL_MAX_CONVOLUTION_WIDTH_EXT
#undef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#undef GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
#undef GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
#undef GL_MAX_CULL_DISTANCES
#undef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#undef GL_MAX_DEBUG_LOGGED_MESSAGES
#undef GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
#undef GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
#undef GL_MAX_DEBUG_MESSAGE_LENGTH
#undef GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
#undef GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
#undef GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
#undef GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
#undef GL_MAX_DEPTH
#undef GL_MAX_DEPTH_TEXTURE_SAMPLES
#undef GL_MAX_DRAW_BUFFERS
#undef GL_MAX_DRAW_BUFFERS_ARB
#undef GL_MAX_DRAW_BUFFERS_ATI
#undef GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
#undef GL_MAX_ELEMENTS_INDICES
#undef GL_MAX_ELEMENTS_INDICES_EXT
#undef GL_MAX_ELEMENTS_VERTICES
#undef GL_MAX_ELEMENTS_VERTICES_EXT
#undef GL_MAX_ELEMENT_INDEX
#undef GL_MAX_EXT
#undef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#undef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
#undef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#undef GL_MAX_FRAGMENT_INPUT_COMPONENTS
#undef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#undef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
#undef GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
#undef GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
#undef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#undef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#undef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
#undef GL_MAX_FRAGMENT_UNIFORM_VECTORS
#undef GL_MAX_FRAMEBUFFER_HEIGHT
#undef GL_MAX_FRAMEBUFFER_LAYERS
#undef GL_MAX_FRAMEBUFFER_SAMPLES
#undef GL_MAX_FRAMEBUFFER_WIDTH
#undef GL_MAX_GENERAL_COMBINERS_NV
#undef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#undef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
#undef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#undef GL_MAX_GEOMETRY_INPUT_COMPONENTS
#undef GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#undef GL_MAX_GEOMETRY_OUTPUT_VERTICES
#undef GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
#undef GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
#undef GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
#undef GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#undef GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
#undef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#undef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
#undef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
#undef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#undef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
#undef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
#undef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#undef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#undef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
#undef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
#undef GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
#undef GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
#undef GL_MAX_HEIGHT
#undef GL_MAX_IMAGE_SAMPLES
#undef GL_MAX_IMAGE_SAMPLES_EXT
#undef GL_MAX_IMAGE_UNITS
#undef GL_MAX_IMAGE_UNITS_EXT
#undef GL_MAX_INTEGER_SAMPLES
#undef GL_MAX_LABEL_LENGTH
#undef GL_MAX_LAYERS
#undef GL_MAX_LGPU_GPUS_NVX
#undef GL_MAX_MAP_TESSELLATION_NV
#undef GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
#undef GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
#undef GL_MAX_NAME_LENGTH
#undef GL_MAX_NUM_ACTIVE_VARIABLES
#undef GL_MAX_NUM_COMPATIBLE_SUBROUTINES
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
#undef GL_MAX_PALETTE_MATRICES_ARB
#undef GL_MAX_PATCH_VERTICES
#undef GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#undef GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#undef GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
#undef GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_ATTRIBS_ARB
#undef GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
#undef GL_MAX_PROGRAM_CALL_DEPTH_NV
#undef GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
#undef GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#undef GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
#undef GL_MAX_PROGRAM_GENERIC_RESULTS_NV
#undef GL_MAX_PROGRAM_IF_DEPTH_NV
#undef GL_MAX_PROGRAM_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#undef GL_MAX_PROGRAM_LOOP_COUNT_NV
#undef GL_MAX_PROGRAM_LOOP_DEPTH_NV
#undef GL_MAX_PROGRAM_MATRICES_ARB
#undef GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#undef GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#undef GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#undef GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#undef GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#undef GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#undef GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
#undef GL_MAX_PROGRAM_PARAMETERS_ARB
#undef GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
#undef GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
#undef GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
#undef GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
#undef GL_MAX_PROGRAM_TEMPORARIES_ARB
#undef GL_MAX_PROGRAM_TEXEL_OFFSET
#undef GL_MAX_PROGRAM_TEXEL_OFFSET_NV
#undef GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
#undef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
#undef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#undef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#undef GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
#undef GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
#undef GL_MAX_RASTER_SAMPLES_EXT
#undef GL_MAX_RATIONAL_EVAL_ORDER_NV
#undef GL_MAX_RECTANGLE_TEXTURE_SIZE
#undef GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
#undef GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
#undef GL_MAX_RENDERBUFFER_SIZE
#undef GL_MAX_RENDERBUFFER_SIZE_EXT
#undef GL_MAX_SAMPLES
#undef GL_MAX_SAMPLES_EXT
#undef GL_MAX_SAMPLE_MASK_WORDS
#undef GL_MAX_SAMPLE_MASK_WORDS_NV
#undef GL_MAX_SERVER_WAIT_TIMEOUT
#undef GL_MAX_SHADER_BUFFER_ADDRESS_NV
#undef GL_MAX_SHADER_COMPILER_THREADS_ARB
#undef GL_MAX_SHADER_COMPILER_THREADS_KHR
#undef GL_MAX_SHADER_STORAGE_BLOCK_SIZE
#undef GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
#undef GL_MAX_SHININESS_NV
#undef GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
#undef GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
#undef GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
#undef GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
#undef GL_MAX_SPARSE_TEXTURE_SIZE_AMD
#undef GL_MAX_SPARSE_TEXTURE_SIZE_ARB
#undef GL_MAX_SPOT_EXPONENT_NV
#undef GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
#undef GL_MAX_SUBROUTINES
#undef GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#undef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#undef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#undef GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#undef GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#undef GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
#undef GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#undef GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#undef GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#undef GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#undef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#undef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#undef GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#undef GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#undef GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
#undef GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#undef GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#undef GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#undef GL_MAX_TESS_GEN_LEVEL
#undef GL_MAX_TESS_PATCH_COMPONENTS
#undef GL_MAX_TEXTURE_BUFFER_SIZE
#undef GL_MAX_TEXTURE_BUFFER_SIZE_ARB
#undef GL_MAX_TEXTURE_BUFFER_SIZE_EXT
#undef GL_MAX_TEXTURE_COORDS
#undef GL_MAX_TEXTURE_COORDS_ARB
#undef GL_MAX_TEXTURE_COORDS_NV
#undef GL_MAX_TEXTURE_IMAGE_UNITS
#undef GL_MAX_TEXTURE_IMAGE_UNITS_ARB
#undef GL_MAX_TEXTURE_IMAGE_UNITS_NV
#undef GL_MAX_TEXTURE_LOD_BIAS
#undef GL_MAX_TEXTURE_LOD_BIAS_EXT
#undef GL_MAX_TEXTURE_MAX_ANISOTROPY
#undef GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
#undef GL_MAX_TEXTURE_UNITS
#undef GL_MAX_TEXTURE_UNITS_ARB
#undef GL_MAX_TRACK_MATRICES_NV
#undef GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
#undef GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#undef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#undef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
#undef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
#undef GL_MAX_UNIFORM_BLOCK_SIZE
#undef GL_MAX_UNIFORM_BUFFER_BINDINGS
#undef GL_MAX_UNIFORM_LOCATIONS
#undef GL_MAX_VARYING_COMPONENTS
#undef GL_MAX_VARYING_COMPONENTS_EXT
#undef GL_MAX_VARYING_FLOATS
#undef GL_MAX_VARYING_FLOATS_ARB
#undef GL_MAX_VARYING_VECTORS
#undef GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
#undef GL_MAX_VERTEX_ATOMIC_COUNTERS
#undef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_VERTEX_ATTRIBS
#undef GL_MAX_VERTEX_ATTRIBS_ARB
#undef GL_MAX_VERTEX_ATTRIB_BINDINGS
#undef GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
#undef GL_MAX_VERTEX_ATTRIB_STRIDE
#undef GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
#undef GL_MAX_VERTEX_HINT_PGI
#undef GL_MAX_VERTEX_IMAGE_UNIFORMS
#undef GL_MAX_VERTEX_OUTPUT_COMPONENTS
#undef GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
#undef GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
#undef GL_MAX_VERTEX_SHADER_LOCALS_EXT
#undef GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
#undef GL_MAX_VERTEX_SHADER_VARIANTS_EXT
#undef GL_MAX_VERTEX_STREAMS
#undef GL_MAX_VERTEX_STREAMS_ATI
#undef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#undef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#undef GL_MAX_VERTEX_UNIFORM_BLOCKS
#undef GL_MAX_VERTEX_UNIFORM_COMPONENTS
#undef GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
#undef GL_MAX_VERTEX_UNIFORM_VECTORS
#undef GL_MAX_VERTEX_UNITS_ARB
#undef GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
#undef GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
#undef GL_MAX_VIEWPORTS
#undef GL_MAX_VIEWS_OVR
#undef GL_MAX_WIDTH
#undef GL_MAX_WINDOW_RECTANGLES_EXT
#undef GL_MEDIUM_FLOAT
#undef GL_MEDIUM_INT
#undef GL_MIN
#undef GL_MINMAX
#undef GL_MINMAX_EXT
#undef GL_MINMAX_FORMAT
#undef GL_MINMAX_FORMAT_EXT
#undef GL_MINMAX_SINK
#undef GL_MINMAX_SINK_EXT
#undef GL_MINOR_VERSION
#undef GL_MINUS_CLAMPED_NV
#undef GL_MINUS_NV
#undef GL_MIN_EXT
#undef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#undef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
#undef GL_MIN_LOD_WARNING_AMD
#undef GL_MIN_MAP_BUFFER_ALIGNMENT
#undef GL_MIN_PROGRAM_TEXEL_OFFSET
#undef GL_MIN_PROGRAM_TEXEL_OFFSET_NV
#undef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
#undef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#undef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#undef GL_MIN_SAMPLE_SHADING_VALUE
#undef GL_MIN_SAMPLE_SHADING_VALUE_ARB
#undef GL_MIN_SPARSE_LEVEL_AMD
#undef GL_MIPMAP
#undef GL_MIRRORED_REPEAT
#undef GL_MIRRORED_REPEAT_ARB
#undef GL_MIRRORED_REPEAT_IBM
#undef GL_MIRROR_CLAMP_ATI
#undef GL_MIRROR_CLAMP_EXT
#undef GL_MIRROR_CLAMP_TO_BORDER_EXT
#undef GL_MIRROR_CLAMP_TO_EDGE
#undef GL_MIRROR_CLAMP_TO_EDGE_ATI
#undef GL_MIRROR_CLAMP_TO_EDGE_EXT
#undef GL_MITER_REVERT_NV
#undef GL_MITER_TRUNCATE_NV
#undef GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
#undef GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
#undef GL_MODELVIEW0_ARB
#undef GL_MODELVIEW0_EXT
#undef GL_MODELVIEW0_MATRIX_EXT
#undef GL_MODELVIEW0_STACK_DEPTH_EXT
#undef GL_MODELVIEW10_ARB
#undef GL_MODELVIEW11_ARB
#undef GL_MODELVIEW12_ARB
#undef GL_MODELVIEW13_ARB
#undef GL_MODELVIEW14_ARB
#undef GL_MODELVIEW15_ARB
#undef GL_MODELVIEW16_ARB
#undef GL_MODELVIEW17_ARB
#undef GL_MODELVIEW18_ARB
#undef GL_MODELVIEW19_ARB
#undef GL_MODELVIEW1_ARB
#undef GL_MODELVIEW1_EXT
#undef GL_MODELVIEW1_MATRIX_EXT
#undef GL_MODELVIEW1_STACK_DEPTH_EXT
#undef GL_MODELVIEW20_ARB
#undef GL_MODELVIEW21_ARB
#undef GL_MODELVIEW22_ARB
#undef GL_MODELVIEW23_ARB
#undef GL_MODELVIEW24_ARB
#undef GL_MODELVIEW25_ARB
#undef GL_MODELVIEW26_ARB
#undef GL_MODELVIEW27_ARB
#undef GL_MODELVIEW28_ARB
#undef GL_MODELVIEW29_ARB
#undef GL_MODELVIEW2_ARB
#undef GL_MODELVIEW30_ARB
#undef GL_MODELVIEW31_ARB
#undef GL_MODELVIEW3_ARB
#undef GL_MODELVIEW4_ARB
#undef GL_MODELVIEW5_ARB
#undef GL_MODELVIEW6_ARB
#undef GL_MODELVIEW7_ARB
#undef GL_MODELVIEW8_ARB
#undef GL_MODELVIEW9_ARB
#undef GL_MODELVIEW_PROJECTION_NV
#undef GL_MODULATE_ADD_ATI
#undef GL_MODULATE_SIGNED_ADD_ATI
#undef GL_MODULATE_SUBTRACT_ATI
#undef GL_MOVE_TO_CONTINUES_NV
#undef GL_MOVE_TO_NV
#undef GL_MOVE_TO_RESETS_NV
#undef GL_MOV_ATI
#undef GL_MULTICAST_GPUS_NV
#undef GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV
#undef GL_MULTIPLY_KHR
#undef GL_MULTIPLY_NV
#undef GL_MULTISAMPLE
#undef GL_MULTISAMPLES_NV
#undef GL_MULTISAMPLE_3DFX
#undef GL_MULTISAMPLE_ARB
#undef GL_MULTISAMPLE_BIT
#undef GL_MULTISAMPLE_BIT_3DFX
#undef GL_MULTISAMPLE_BIT_ARB
#undef GL_MULTISAMPLE_BIT_EXT
#undef GL_MULTISAMPLE_COVERAGE_MODES_NV
#undef GL_MULTISAMPLE_EXT
#undef GL_MULTISAMPLE_FILTER_HINT_NV
#undef GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
#undef GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
#undef GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
#undef GL_MULTISAMPLE_SGIS
#undef GL_MUL_ATI
#undef GL_MVP_MATRIX_EXT
#undef GL_NAMED_STRING_LENGTH_ARB
#undef GL_NAMED_STRING_TYPE_ARB
#undef GL_NAME_LENGTH
#undef GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
#undef GL_NATIVE_GRAPHICS_END_HINT_PGI
#undef GL_NATIVE_GRAPHICS_HANDLE_PGI
#undef GL_NEGATE_BIT_ATI
#undef GL_NEGATIVE_ONE_EXT
#undef GL_NEGATIVE_ONE_TO_ONE
#undef GL_NEGATIVE_W_EXT
#undef GL_NEGATIVE_X_EXT
#undef GL_NEGATIVE_Y_EXT
#undef GL_NEGATIVE_Z_EXT
#undef GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
#undef GL_NOP_COMMAND_NV
#undef GL_NORMALIZED_RANGE_EXT
#undef GL_NORMAL_ARRAY_ADDRESS_NV
#undef GL_NORMAL_ARRAY_BUFFER_BINDING
#undef GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
#undef GL_NORMAL_ARRAY_COUNT_EXT
#undef GL_NORMAL_ARRAY_EXT
#undef GL_NORMAL_ARRAY_LENGTH_NV
#undef GL_NORMAL_ARRAY_LIST_IBM
#undef GL_NORMAL_ARRAY_LIST_STRIDE_IBM
#undef GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
#undef GL_NORMAL_ARRAY_POINTER_EXT
#undef GL_NORMAL_ARRAY_STRIDE_EXT
#undef GL_NORMAL_ARRAY_TYPE_EXT
#undef GL_NORMAL_BIT_PGI
#undef GL_NORMAL_MAP
#undef GL_NORMAL_MAP_ARB
#undef GL_NORMAL_MAP_EXT
#undef GL_NORMAL_MAP_NV
#undef GL_NO_RESET_NOTIFICATION
#undef GL_NO_RESET_NOTIFICATION_ARB
#undef GL_NUM_ACTIVE_VARIABLES
#undef GL_NUM_COMPATIBLE_SUBROUTINES
#undef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#undef GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
#undef GL_NUM_DEVICE_UUIDS_EXT
#undef GL_NUM_EXTENSIONS
#undef GL_NUM_FILL_STREAMS_NV
#undef GL_NUM_FRAGMENT_CONSTANTS_ATI
#undef GL_NUM_FRAGMENT_REGISTERS_ATI
#undef GL_NUM_GENERAL_COMBINERS_NV
#undef GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
#undef GL_NUM_INSTRUCTIONS_PER_PASS_ATI
#undef GL_NUM_INSTRUCTIONS_TOTAL_ATI
#undef GL_NUM_LOOPBACK_COMPONENTS_ATI
#undef GL_NUM_PASSES_ATI
#undef GL_NUM_PROGRAM_BINARY_FORMATS
#undef GL_NUM_SAMPLE_COUNTS
#undef GL_NUM_SHADER_BINARY_FORMATS
#undef GL_NUM_SHADING_LANGUAGE_VERSIONS
#undef GL_NUM_SPARSE_LEVELS_ARB
#undef GL_NUM_SPIR_V_EXTENSIONS
#undef GL_NUM_TILING_TYPES_EXT
#undef GL_NUM_VIDEO_CAPTURE_STREAMS_NV
#undef GL_NUM_VIRTUAL_PAGE_SIZES_ARB
#undef GL_NUM_WINDOW_RECTANGLES_EXT
#undef GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
#undef GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
#undef GL_OBJECT_ACTIVE_UNIFORMS_ARB
#undef GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
#undef GL_OBJECT_ATTACHED_OBJECTS_ARB
#undef GL_OBJECT_BUFFER_SIZE_ATI
#undef GL_OBJECT_BUFFER_USAGE_ATI
#undef GL_OBJECT_COMPILE_STATUS_ARB
#undef GL_OBJECT_DELETE_STATUS_ARB
#undef GL_OBJECT_DISTANCE_TO_LINE_SGIS
#undef GL_OBJECT_DISTANCE_TO_POINT_SGIS
#undef GL_OBJECT_INFO_LOG_LENGTH_ARB
#undef GL_OBJECT_LINE_SGIS
#undef GL_OBJECT_LINK_STATUS_ARB
#undef GL_OBJECT_POINT_SGIS
#undef GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
#undef GL_OBJECT_SUBTYPE_ARB
#undef GL_OBJECT_TYPE
#undef GL_OBJECT_TYPE_ARB
#undef GL_OBJECT_VALIDATE_STATUS_ARB
#undef GL_OCCLUSION_QUERY_EVENT_MASK_AMD
#undef GL_OFFSET
#undef GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
#undef GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
#undef GL_OFFSET_HILO_TEXTURE_2D_NV
#undef GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
#undef GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
#undef GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
#undef GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
#undef GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
#undef GL_OFFSET_TEXTURE_2D_BIAS_NV
#undef GL_OFFSET_TEXTURE_2D_MATRIX_NV
#undef GL_OFFSET_TEXTURE_2D_NV
#undef GL_OFFSET_TEXTURE_2D_SCALE_NV
#undef GL_OFFSET_TEXTURE_BIAS_NV
#undef GL_OFFSET_TEXTURE_MATRIX_NV
#undef GL_OFFSET_TEXTURE_RECTANGLE_NV
#undef GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
#undef GL_OFFSET_TEXTURE_SCALE_NV
#undef GL_ONE_EXT
#undef GL_ONE_MINUS_CONSTANT_ALPHA
#undef GL_ONE_MINUS_CONSTANT_ALPHA_EXT
#undef GL_ONE_MINUS_CONSTANT_COLOR
#undef GL_ONE_MINUS_CONSTANT_COLOR_EXT
#undef GL_ONE_MINUS_SRC1_ALPHA
#undef GL_ONE_MINUS_SRC1_COLOR
#undef GL_OPERAND0_ALPHA
#undef GL_OPERAND0_ALPHA_ARB
#undef GL_OPERAND0_ALPHA_EXT
#undef GL_OPERAND0_RGB
#undef GL_OPERAND0_RGB_ARB
#undef GL_OPERAND0_RGB_EXT
#undef GL_OPERAND1_ALPHA
#undef GL_OPERAND1_ALPHA_ARB
#undef GL_OPERAND1_ALPHA_EXT
#undef GL_OPERAND1_RGB
#undef GL_OPERAND1_RGB_ARB
#undef GL_OPERAND1_RGB_EXT
#undef GL_OPERAND2_ALPHA
#undef GL_OPERAND2_ALPHA_ARB
#undef GL_OPERAND2_ALPHA_EXT
#undef GL_OPERAND2_RGB
#undef GL_OPERAND2_RGB_ARB
#undef GL_OPERAND2_RGB_EXT
#undef GL_OPERAND3_ALPHA_NV
#undef GL_OPERAND3_RGB_NV
#undef GL_OPTIMAL_TILING_EXT
#undef GL_OP_ADD_EXT
#undef GL_OP_CLAMP_EXT
#undef GL_OP_CROSS_PRODUCT_EXT
#undef GL_OP_DOT3_EXT
#undef GL_OP_DOT4_EXT
#undef GL_OP_EXP_BASE_2_EXT
#undef GL_OP_FLOOR_EXT
#undef GL_OP_FRAC_EXT
#undef GL_OP_INDEX_EXT
#undef GL_OP_LOG_BASE_2_EXT
#undef GL_OP_MADD_EXT
#undef GL_OP_MAX_EXT
#undef GL_OP_MIN_EXT
#undef GL_OP_MOV_EXT
#undef GL_OP_MULTIPLY_MATRIX_EXT
#undef GL_OP_MUL_EXT
#undef GL_OP_NEGATE_EXT
#undef GL_OP_POWER_EXT
#undef GL_OP_RECIP_EXT
#undef GL_OP_RECIP_SQRT_EXT
#undef GL_OP_ROUND_EXT
#undef GL_OP_SET_GE_EXT
#undef GL_OP_SET_LT_EXT
#undef GL_OP_SUB_EXT
#undef GL_OUTPUT_COLOR0_EXT
#undef GL_OUTPUT_COLOR1_EXT
#undef GL_OUTPUT_FOG_EXT
#undef GL_OUTPUT_TEXTURE_COORD0_EXT
#undef GL_OUTPUT_TEXTURE_COORD10_EXT
#undef GL_OUTPUT_TEXTURE_COORD11_EXT
#undef GL_OUTPUT_TEXTURE_COORD12_EXT
#undef GL_OUTPUT_TEXTURE_COORD13_EXT
#undef GL_OUTPUT_TEXTURE_COORD14_EXT
#undef GL_OUTPUT_TEXTURE_COORD15_EXT
#undef GL_OUTPUT_TEXTURE_COORD16_EXT
#undef GL_OUTPUT_TEXTURE_COORD17_EXT
#undef GL_OUTPUT_TEXTURE_COORD18_EXT
#undef GL_OUTPUT_TEXTURE_COORD19_EXT
#undef GL_OUTPUT_TEXTURE_COORD1_EXT
#undef GL_OUTPUT_TEXTURE_COORD20_EXT
#undef GL_OUTPUT_TEXTURE_COORD21_EXT
#undef GL_OUTPUT_TEXTURE_COORD22_EXT
#undef GL_OUTPUT_TEXTURE_COORD23_EXT
#undef GL_OUTPUT_TEXTURE_COORD24_EXT
#undef GL_OUTPUT_TEXTURE_COORD25_EXT
#undef GL_OUTPUT_TEXTURE_COORD26_EXT
#undef GL_OUTPUT_TEXTURE_COORD27_EXT
#undef GL_OUTPUT_TEXTURE_COORD28_EXT
#undef GL_OUTPUT_TEXTURE_COORD29_EXT
#undef GL_OUTPUT_TEXTURE_COORD2_EXT
#undef GL_OUTPUT_TEXTURE_COORD30_EXT
#undef GL_OUTPUT_TEXTURE_COORD31_EXT
#undef GL_OUTPUT_TEXTURE_COORD3_EXT
#undef GL_OUTPUT_TEXTURE_COORD4_EXT
#undef GL_OUTPUT_TEXTURE_COORD5_EXT
#undef GL_OUTPUT_TEXTURE_COORD6_EXT
#undef GL_OUTPUT_TEXTURE_COORD7_EXT
#undef GL_OUTPUT_TEXTURE_COORD8_EXT
#undef GL_OUTPUT_TEXTURE_COORD9_EXT
#undef GL_OUTPUT_VERTEX_EXT
#undef GL_OVERLAY_KHR
#undef GL_OVERLAY_NV
#undef GL_PACK_CMYK_HINT_EXT
#undef GL_PACK_COMPRESSED_BLOCK_DEPTH
#undef GL_PACK_COMPRESSED_BLOCK_HEIGHT
#undef GL_PACK_COMPRESSED_BLOCK_SIZE
#undef GL_PACK_COMPRESSED_BLOCK_WIDTH
#undef GL_PACK_IMAGE_HEIGHT
#undef GL_PACK_IMAGE_HEIGHT_EXT
#undef GL_PACK_INVERT_MESA
#undef GL_PACK_RESAMPLE_OML
#undef GL_PACK_RESAMPLE_SGIX
#undef GL_PACK_ROW_BYTES_APPLE
#undef GL_PACK_SKIP_IMAGES
#undef GL_PACK_SKIP_IMAGES_EXT
#undef GL_PACK_SUBSAMPLE_RATE_SGIX
#undef GL_PARALLEL_ARRAYS_INTEL
#undef GL_PARAMETER_BUFFER
#undef GL_PARAMETER_BUFFER_ARB
#undef GL_PARAMETER_BUFFER_BINDING
#undef GL_PARAMETER_BUFFER_BINDING_ARB
#undef GL_PARTIAL_SUCCESS_NV
#undef GL_PASS_THROUGH_NV
#undef GL_PATCHES
#undef GL_PATCH_DEFAULT_INNER_LEVEL
#undef GL_PATCH_DEFAULT_OUTER_LEVEL
#undef GL_PATCH_VERTICES
#undef GL_PATH_CLIENT_LENGTH_NV
#undef GL_PATH_COMMAND_COUNT_NV
#undef GL_PATH_COMPUTED_LENGTH_NV
#undef GL_PATH_COORD_COUNT_NV
#undef GL_PATH_COVER_DEPTH_FUNC_NV
#undef GL_PATH_DASH_ARRAY_COUNT_NV
#undef GL_PATH_DASH_CAPS_NV
#undef GL_PATH_DASH_OFFSET_NV
#undef GL_PATH_DASH_OFFSET_RESET_NV
#undef GL_PATH_END_CAPS_NV
#undef GL_PATH_ERROR_POSITION_NV
#undef GL_PATH_FILL_BOUNDING_BOX_NV
#undef GL_PATH_FILL_COVER_MODE_NV
#undef GL_PATH_FILL_MASK_NV
#undef GL_PATH_FILL_MODE_NV
#undef GL_PATH_FOG_GEN_MODE_NV
#undef GL_PATH_FORMAT_PS_NV
#undef GL_PATH_FORMAT_SVG_NV
#undef GL_PATH_GEN_COEFF_NV
#undef GL_PATH_GEN_COLOR_FORMAT_NV
#undef GL_PATH_GEN_COMPONENTS_NV
#undef GL_PATH_GEN_MODE_NV
#undef GL_PATH_INITIAL_DASH_CAP_NV
#undef GL_PATH_INITIAL_END_CAP_NV
#undef GL_PATH_JOIN_STYLE_NV
#undef GL_PATH_MITER_LIMIT_NV
#undef GL_PATH_OBJECT_BOUNDING_BOX_NV
#undef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#undef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#undef GL_PATH_STENCIL_FUNC_NV
#undef GL_PATH_STENCIL_REF_NV
#undef GL_PATH_STENCIL_VALUE_MASK_NV
#undef GL_PATH_STROKE_BOUNDING_BOX_NV
#undef GL_PATH_STROKE_COVER_MODE_NV
#undef GL_PATH_STROKE_MASK_NV
#undef GL_PATH_STROKE_WIDTH_NV
#undef GL_PATH_TERMINAL_DASH_CAP_NV
#undef GL_PATH_TERMINAL_END_CAP_NV
#undef GL_PERCENTAGE_AMD
#undef GL_PERFMON_RESULT_AMD
#undef GL_PERFMON_RESULT_AVAILABLE_AMD
#undef GL_PERFMON_RESULT_SIZE_AMD
#undef GL_PERFORMANCE_MONITOR_AMD
#undef GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
#undef GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
#undef GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
#undef GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
#undef GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
#undef GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
#undef GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
#undef GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
#undef GL_PERFQUERY_COUNTER_EVENT_INTEL
#undef GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
#undef GL_PERFQUERY_COUNTER_RAW_INTEL
#undef GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
#undef GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
#undef GL_PERFQUERY_DONOT_FLUSH_INTEL
#undef GL_PERFQUERY_FLUSH_INTEL
#undef GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
#undef GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
#undef GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
#undef GL_PERFQUERY_SINGLE_CONTEXT_INTEL
#undef GL_PERFQUERY_WAIT_INTEL
#undef GL_PERTURB_EXT
#undef GL_PER_GPU_STORAGE_BIT_NV
#undef GL_PER_GPU_STORAGE_NV
#undef GL_PER_STAGE_CONSTANTS_NV
#undef GL_PHONG_HINT_WIN
#undef GL_PHONG_WIN
#undef GL_PINLIGHT_NV
#undef GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD
#undef GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD
#undef GL_PIXEL_BUFFER_BARRIER_BIT
#undef GL_PIXEL_BUFFER_BARRIER_BIT_EXT
#undef GL_PIXEL_COUNTER_BITS_NV
#undef GL_PIXEL_COUNT_AVAILABLE_NV
#undef GL_PIXEL_COUNT_NV
#undef GL_PIXEL_CUBIC_WEIGHT_EXT
#undef GL_PIXEL_MAG_FILTER_EXT
#undef GL_PIXEL_MIN_FILTER_EXT
#undef GL_PIXEL_PACK_BUFFER
#undef GL_PIXEL_PACK_BUFFER_ARB
#undef GL_PIXEL_PACK_BUFFER_BINDING
#undef GL_PIXEL_PACK_BUFFER_BINDING_ARB
#undef GL_PIXEL_PACK_BUFFER_BINDING_EXT
#undef GL_PIXEL_PACK_BUFFER_EXT
#undef GL_PIXEL_SUBSAMPLE_2424_SGIX
#undef GL_PIXEL_SUBSAMPLE_4242_SGIX
#undef GL_PIXEL_SUBSAMPLE_4444_SGIX
#undef GL_PIXEL_TRANSFORM_2D_EXT
#undef GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
#undef GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#undef GL_PIXEL_UNPACK_BUFFER
#undef GL_PIXEL_UNPACK_BUFFER_ARB
#undef GL_PIXEL_UNPACK_BUFFER_BINDING
#undef GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
#undef GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
#undef GL_PIXEL_UNPACK_BUFFER_EXT
#undef GL_PLUS_CLAMPED_ALPHA_NV
#undef GL_PLUS_CLAMPED_NV
#undef GL_PLUS_DARKER_NV
#undef GL_PLUS_NV
#undef GL_PN_TRIANGLES_ATI
#undef GL_PN_TRIANGLES_NORMAL_MODE_ATI
#undef GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
#undef GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
#undef GL_PN_TRIANGLES_POINT_MODE_ATI
#undef GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
#undef GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
#undef GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#undef GL_POINT_DISTANCE_ATTENUATION
#undef GL_POINT_DISTANCE_ATTENUATION_ARB
#undef GL_POINT_FADE_THRESHOLD_SIZE
#undef GL_POINT_FADE_THRESHOLD_SIZE_ARB
#undef GL_POINT_FADE_THRESHOLD_SIZE_EXT
#undef GL_POINT_SIZE_MAX
#undef GL_POINT_SIZE_MAX_ARB
#undef GL_POINT_SIZE_MAX_EXT
#undef GL_POINT_SIZE_MIN
#undef GL_POINT_SIZE_MIN_ARB
#undef GL_POINT_SIZE_MIN_EXT
#undef GL_POINT_SPRITE
#undef GL_POINT_SPRITE_ARB
#undef GL_POINT_SPRITE_COORD_ORIGIN
#undef GL_POINT_SPRITE_NV
#undef GL_POINT_SPRITE_R_MODE_NV
#undef GL_POLYGON_OFFSET_BIAS_EXT
#undef GL_POLYGON_OFFSET_CLAMP
#undef GL_POLYGON_OFFSET_CLAMP_EXT
#undef GL_POLYGON_OFFSET_COMMAND_NV
#undef GL_POLYGON_OFFSET_EXT
#undef GL_POLYGON_OFFSET_FACTOR_EXT
#undef GL_POST_COLOR_MATRIX_ALPHA_BIAS
#undef GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
#undef GL_POST_COLOR_MATRIX_ALPHA_SCALE
#undef GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
#undef GL_POST_COLOR_MATRIX_BLUE_BIAS
#undef GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
#undef GL_POST_COLOR_MATRIX_BLUE_SCALE
#undef GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
#undef GL_POST_COLOR_MATRIX_COLOR_TABLE
#undef GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#undef GL_POST_COLOR_MATRIX_GREEN_BIAS
#undef GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
#undef GL_POST_COLOR_MATRIX_GREEN_SCALE
#undef GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
#undef GL_POST_COLOR_MATRIX_RED_BIAS
#undef GL_POST_COLOR_MATRIX_RED_BIAS_SGI
#undef GL_POST_COLOR_MATRIX_RED_SCALE
#undef GL_POST_COLOR_MATRIX_RED_SCALE_SGI
#undef GL_POST_CONVOLUTION_ALPHA_BIAS
#undef GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
#undef GL_POST_CONVOLUTION_ALPHA_SCALE
#undef GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
#undef GL_POST_CONVOLUTION_BLUE_BIAS
#undef GL_POST_CONVOLUTION_BLUE_BIAS_EXT
#undef GL_POST_CONVOLUTION_BLUE_SCALE
#undef GL_POST_CONVOLUTION_BLUE_SCALE_EXT
#undef GL_POST_CONVOLUTION_COLOR_TABLE
#undef GL_POST_CONVOLUTION_COLOR_TABLE_SGI
#undef GL_POST_CONVOLUTION_GREEN_BIAS
#undef GL_POST_CONVOLUTION_GREEN_BIAS_EXT
#undef GL_POST_CONVOLUTION_GREEN_SCALE
#undef GL_POST_CONVOLUTION_GREEN_SCALE_EXT
#undef GL_POST_CONVOLUTION_RED_BIAS
#undef GL_POST_CONVOLUTION_RED_BIAS_EXT
#undef GL_POST_CONVOLUTION_RED_SCALE
#undef GL_POST_CONVOLUTION_RED_SCALE_EXT
#undef GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
#undef GL_POST_TEXTURE_FILTER_BIAS_SGIX
#undef GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
#undef GL_POST_TEXTURE_FILTER_SCALE_SGIX
#undef GL_PREFER_DOUBLEBUFFER_HINT_PGI
#undef GL_PRESENT_DURATION_NV
#undef GL_PRESENT_TIME_NV
#undef GL_PRESERVE_ATI
#undef GL_PREVIOUS
#undef GL_PREVIOUS_ARB
#undef GL_PREVIOUS_EXT
#undef GL_PREVIOUS_TEXTURE_INPUT_NV
#undef GL_PRIMARY_COLOR
#undef GL_PRIMARY_COLOR_ARB
#undef GL_PRIMARY_COLOR_EXT
#undef GL_PRIMARY_COLOR_NV
#undef GL_PRIMITIVES_GENERATED
#undef GL_PRIMITIVES_GENERATED_EXT
#undef GL_PRIMITIVES_GENERATED_NV
#undef GL_PRIMITIVES_SUBMITTED
#undef GL_PRIMITIVES_SUBMITTED_ARB
#undef GL_PRIMITIVE_BOUNDING_BOX_ARB
#undef GL_PRIMITIVE_ID_NV
#undef GL_PRIMITIVE_RESTART
#undef GL_PRIMITIVE_RESTART_FIXED_INDEX
#undef GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
#undef GL_PRIMITIVE_RESTART_INDEX
#undef GL_PRIMITIVE_RESTART_INDEX_NV
#undef GL_PRIMITIVE_RESTART_NV
#undef GL_PROGRAM
#undef GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
#undef GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
#undef GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
#undef GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
#undef GL_PROGRAM_ADDRESS_REGISTERS_ARB
#undef GL_PROGRAM_ALU_INSTRUCTIONS_ARB
#undef GL_PROGRAM_ATTRIBS_ARB
#undef GL_PROGRAM_ATTRIB_COMPONENTS_NV
#undef GL_PROGRAM_BINARY_FORMATS
#undef GL_PROGRAM_BINARY_LENGTH
#undef GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#undef GL_PROGRAM_BINDING_ARB
#undef GL_PROGRAM_ERROR_POSITION_ARB
#undef GL_PROGRAM_ERROR_POSITION_NV
#undef GL_PROGRAM_ERROR_STRING_ARB
#undef GL_PROGRAM_ERROR_STRING_NV
#undef GL_PROGRAM_FORMAT_ARB
#undef GL_PROGRAM_FORMAT_ASCII_ARB
#undef GL_PROGRAM_INPUT
#undef GL_PROGRAM_INSTRUCTIONS_ARB
#undef GL_PROGRAM_LENGTH_ARB
#undef GL_PROGRAM_LENGTH_NV
#undef GL_PROGRAM_MATRIX_EXT
#undef GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
#undef GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#undef GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#undef GL_PROGRAM_NATIVE_ATTRIBS_ARB
#undef GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#undef GL_PROGRAM_NATIVE_PARAMETERS_ARB
#undef GL_PROGRAM_NATIVE_TEMPORARIES_ARB
#undef GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#undef GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#undef GL_PROGRAM_OBJECT_ARB
#undef GL_PROGRAM_OBJECT_EXT
#undef GL_PROGRAM_OUTPUT
#undef GL_PROGRAM_PARAMETERS_ARB
#undef GL_PROGRAM_PARAMETER_NV
#undef GL_PROGRAM_PIPELINE
#undef GL_PROGRAM_PIPELINE_BINDING
#undef GL_PROGRAM_PIPELINE_OBJECT_EXT
#undef GL_PROGRAM_POINT_SIZE
#undef GL_PROGRAM_POINT_SIZE_ARB
#undef GL_PROGRAM_POINT_SIZE_EXT
#undef GL_PROGRAM_RESIDENT_NV
#undef GL_PROGRAM_RESULT_COMPONENTS_NV
#undef GL_PROGRAM_SEPARABLE
#undef GL_PROGRAM_STRING_ARB
#undef GL_PROGRAM_STRING_NV
#undef GL_PROGRAM_TARGET_NV
#undef GL_PROGRAM_TEMPORARIES_ARB
#undef GL_PROGRAM_TEX_INDIRECTIONS_ARB
#undef GL_PROGRAM_TEX_INSTRUCTIONS_ARB
#undef GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
#undef GL_PROTECTED_MEMORY_OBJECT_EXT
#undef GL_PROVOKING_VERTEX
#undef GL_PROVOKING_VERTEX_EXT
#undef GL_PROXY_COLOR_TABLE
#undef GL_PROXY_COLOR_TABLE_SGI
#undef GL_PROXY_HISTOGRAM
#undef GL_PROXY_HISTOGRAM_EXT
#undef GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
#undef GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#undef GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
#undef GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
#undef GL_PROXY_TEXTURE_1D_ARRAY
#undef GL_PROXY_TEXTURE_1D_ARRAY_EXT
#undef GL_PROXY_TEXTURE_1D_EXT
#undef GL_PROXY_TEXTURE_1D_STACK_MESAX
#undef GL_PROXY_TEXTURE_2D_ARRAY
#undef GL_PROXY_TEXTURE_2D_ARRAY_EXT
#undef GL_PROXY_TEXTURE_2D_EXT
#undef GL_PROXY_TEXTURE_2D_MULTISAMPLE
#undef GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#undef GL_PROXY_TEXTURE_2D_STACK_MESAX
#undef GL_PROXY_TEXTURE_3D
#undef GL_PROXY_TEXTURE_3D_EXT
#undef GL_PROXY_TEXTURE_COLOR_TABLE_SGI
#undef GL_PROXY_TEXTURE_CUBE_MAP
#undef GL_PROXY_TEXTURE_CUBE_MAP_ARB
#undef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
#undef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
#undef GL_PROXY_TEXTURE_CUBE_MAP_EXT
#undef GL_PROXY_TEXTURE_RECTANGLE
#undef GL_PROXY_TEXTURE_RECTANGLE_ARB
#undef GL_PROXY_TEXTURE_RECTANGLE_NV
#undef GL_PURGEABLE_APPLE
#undef GL_PURGED_CONTEXT_RESET_NV
#undef GL_QUADRATIC_CURVE_TO_NV
#undef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#undef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
#undef GL_QUAD_MESH_SUN
#undef GL_QUARTER_BIT_ATI
#undef GL_QUERY
#undef GL_QUERY_ALL_EVENT_BITS_AMD
#undef GL_QUERY_BUFFER
#undef GL_QUERY_BUFFER_AMD
#undef GL_QUERY_BUFFER_BARRIER_BIT
#undef GL_QUERY_BUFFER_BINDING
#undef GL_QUERY_BUFFER_BINDING_AMD
#undef GL_QUERY_BY_REGION_NO_WAIT
#undef GL_QUERY_BY_REGION_NO_WAIT_INVERTED
#undef GL_QUERY_BY_REGION_NO_WAIT_NV
#undef GL_QUERY_BY_REGION_WAIT
#undef GL_QUERY_BY_REGION_WAIT_INVERTED
#undef GL_QUERY_BY_REGION_WAIT_NV
#undef GL_QUERY_COUNTER_BITS
#undef GL_QUERY_COUNTER_BITS_ARB
#undef GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
#undef GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
#undef GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
#undef GL_QUERY_NO_WAIT
#undef GL_QUERY_NO_WAIT_INVERTED
#undef GL_QUERY_NO_WAIT_NV
#undef GL_QUERY_OBJECT_AMD
#undef GL_QUERY_OBJECT_EXT
#undef GL_QUERY_RESULT
#undef GL_QUERY_RESULT_ARB
#undef GL_QUERY_RESULT_AVAILABLE
#undef GL_QUERY_RESULT_AVAILABLE_ARB
#undef GL_QUERY_RESULT_NO_WAIT
#undef GL_QUERY_RESULT_NO_WAIT_AMD
#undef GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
#undef GL_QUERY_TARGET
#undef GL_QUERY_WAIT
#undef GL_QUERY_WAIT_INVERTED
#undef GL_QUERY_WAIT_NV
#undef GL_R11F_G11F_B10F
#undef GL_R11F_G11F_B10F_EXT
#undef GL_R16
#undef GL_R16F
#undef GL_R16I
#undef GL_R16UI
#undef GL_R16_SNORM
#undef GL_R1UI_C3F_V3F_SUN
#undef GL_R1UI_C4F_N3F_V3F_SUN
#undef GL_R1UI_C4UB_V3F_SUN
#undef GL_R1UI_N3F_V3F_SUN
#undef GL_R1UI_T2F_C4F_N3F_V3F_SUN
#undef GL_R1UI_T2F_N3F_V3F_SUN
#undef GL_R1UI_T2F_V3F_SUN
#undef GL_R1UI_V3F_SUN
#undef GL_R32F
#undef GL_R32I
#undef GL_R32UI
#undef GL_R8
#undef GL_R8I
#undef GL_R8UI
#undef GL_R8_SNORM
#undef GL_RASTERIZER_DISCARD
#undef GL_RASTERIZER_DISCARD_EXT
#undef GL_RASTERIZER_DISCARD_NV
#undef GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
#undef GL_RASTER_MULTISAMPLE_EXT
#undef GL_RASTER_POSITION_UNCLIPPED_IBM
#undef GL_RASTER_SAMPLES_EXT
#undef GL_READ_FRAMEBUFFER
#undef GL_READ_FRAMEBUFFER_BINDING
#undef GL_READ_FRAMEBUFFER_BINDING_EXT
#undef GL_READ_FRAMEBUFFER_EXT
#undef GL_READ_ONLY
#undef GL_READ_ONLY_ARB
#undef GL_READ_PIXELS
#undef GL_READ_PIXELS_FORMAT
#undef GL_READ_PIXELS_TYPE
#undef GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
#undef GL_READ_PIXEL_DATA_RANGE_NV
#undef GL_READ_PIXEL_DATA_RANGE_POINTER_NV
#undef GL_READ_WRITE
#undef GL_READ_WRITE_ARB
#undef GL_RECLAIM_MEMORY_HINT_PGI
#undef GL_RECT_NV
#undef GL_REDUCE
#undef GL_REDUCE_EXT
#undef GL_RED_BIT_ATI
#undef GL_RED_INTEGER
#undef GL_RED_INTEGER_EXT
#undef GL_RED_MAX_CLAMP_INGR
#undef GL_RED_MIN_CLAMP_INGR
#undef GL_RED_NV
#undef GL_RED_SNORM
#undef GL_REFERENCED_BY_COMPUTE_SHADER
#undef GL_REFERENCED_BY_FRAGMENT_SHADER
#undef GL_REFERENCED_BY_GEOMETRY_SHADER
#undef GL_REFERENCED_BY_TESS_CONTROL_SHADER
#undef GL_REFERENCED_BY_TESS_EVALUATION_SHADER
#undef GL_REFERENCED_BY_VERTEX_SHADER
#undef GL_REFLECTION_MAP
#undef GL_REFLECTION_MAP_ARB
#undef GL_REFLECTION_MAP_EXT
#undef GL_REFLECTION_MAP_NV
#undef GL_REGISTER_COMBINERS_NV
#undef GL_REG_0_ATI
#undef GL_REG_1_ATI
#undef GL_REG_2_ATI
#undef GL_REG_3_ATI
#undef GL_REG_4_ATI
#undef GL_REG_5_ATI
#undef GL_RELATIVE_ARC_TO_NV
#undef GL_RELATIVE_CONIC_CURVE_TO_NV
#undef GL_RELATIVE_CUBIC_CURVE_TO_NV
#undef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#undef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#undef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#undef GL_RELATIVE_LINE_TO_NV
#undef GL_RELATIVE_MOVE_TO_NV
#undef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#undef GL_RELATIVE_RECT_NV
#undef GL_RELATIVE_ROUNDED_RECT2_NV
#undef GL_RELATIVE_ROUNDED_RECT4_NV
#undef GL_RELATIVE_ROUNDED_RECT8_NV
#undef GL_RELATIVE_ROUNDED_RECT_NV
#undef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#undef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#undef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#undef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#undef GL_RELATIVE_VERTICAL_LINE_TO_NV
#undef GL_RELEASED_APPLE
#undef GL_RENDERBUFFER
#undef GL_RENDERBUFFER_ALPHA_SIZE
#undef GL_RENDERBUFFER_ALPHA_SIZE_EXT
#undef GL_RENDERBUFFER_BINDING
#undef GL_RENDERBUFFER_BINDING_EXT
#undef GL_RENDERBUFFER_BLUE_SIZE
#undef GL_RENDERBUFFER_BLUE_SIZE_EXT
#undef GL_RENDERBUFFER_COLOR_SAMPLES_NV
#undef GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
#undef GL_RENDERBUFFER_DEPTH_SIZE
#undef GL_RENDERBUFFER_DEPTH_SIZE_EXT
#undef GL_RENDERBUFFER_EXT
#undef GL_RENDERBUFFER_FREE_MEMORY_ATI
#undef GL_RENDERBUFFER_GREEN_SIZE
#undef GL_RENDERBUFFER_GREEN_SIZE_EXT
#undef GL_RENDERBUFFER_HEIGHT
#undef GL_RENDERBUFFER_HEIGHT_EXT
#undef GL_RENDERBUFFER_INTERNAL_FORMAT
#undef GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
#undef GL_RENDERBUFFER_RED_SIZE
#undef GL_RENDERBUFFER_RED_SIZE_EXT
#undef GL_RENDERBUFFER_SAMPLES
#undef GL_RENDERBUFFER_SAMPLES_EXT
#undef GL_RENDERBUFFER_STENCIL_SIZE
#undef GL_RENDERBUFFER_STENCIL_SIZE_EXT
#undef GL_RENDERBUFFER_WIDTH
#undef GL_RENDERBUFFER_WIDTH_EXT
#undef GL_RENDER_GPU_MASK_NV
#undef GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
#undef GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
#undef GL_REPLACEMENT_CODE_ARRAY_SUN
#undef GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
#undef GL_REPLACEMENT_CODE_SUN
#undef GL_REPLACE_EXT
#undef GL_REPLACE_MIDDLE_SUN
#undef GL_REPLACE_OLDEST_SUN
#undef GL_REPLACE_VALUE_AMD
#undef GL_REPLICATE_BORDER
#undef GL_RESAMPLE_AVERAGE_OML
#undef GL_RESAMPLE_DECIMATE_OML
#undef GL_RESAMPLE_DECIMATE_SGIX
#undef GL_RESAMPLE_REPLICATE_OML
#undef GL_RESAMPLE_REPLICATE_SGIX
#undef GL_RESAMPLE_ZERO_FILL_OML
#undef GL_RESAMPLE_ZERO_FILL_SGIX
#undef GL_RESCALE_NORMAL
#undef GL_RESCALE_NORMAL_EXT
#undef GL_RESET_NOTIFICATION_STRATEGY
#undef GL_RESET_NOTIFICATION_STRATEGY_ARB
#undef GL_RESTART_PATH_NV
#undef GL_RESTART_SUN
#undef GL_RETAINED_APPLE
#undef GL_RG
#undef GL_RG16
#undef GL_RG16F
#undef GL_RG16I
#undef GL_RG16UI
#undef GL_RG16_SNORM
#undef GL_RG32F
#undef GL_RG32I
#undef GL_RG32UI
#undef GL_RG8
#undef GL_RG8I
#undef GL_RG8UI
#undef GL_RG8_SNORM
#undef GL_RGB10_A2UI
#undef GL_RGB10_A2_EXT
#undef GL_RGB10_EXT
#undef GL_RGB12_EXT
#undef GL_RGB16F
#undef GL_RGB16F_ARB
#undef GL_RGB16I
#undef GL_RGB16I_EXT
#undef GL_RGB16UI
#undef GL_RGB16UI_EXT
#undef GL_RGB16_EXT
#undef GL_RGB16_SNORM
#undef GL_RGB2_EXT
#undef GL_RGB32F
#undef GL_RGB32F_ARB
#undef GL_RGB32I
#undef GL_RGB32I_EXT
#undef GL_RGB32UI
#undef GL_RGB32UI_EXT
#undef GL_RGB4_EXT
#undef GL_RGB4_S3TC
#undef GL_RGB565
#undef GL_RGB5_A1_EXT
#undef GL_RGB5_EXT
#undef GL_RGB8I
#undef GL_RGB8I_EXT
#undef GL_RGB8UI
#undef GL_RGB8UI_EXT
#undef GL_RGB8_EXT
#undef GL_RGB8_SNORM
#undef GL_RGB9_E5
#undef GL_RGB9_E5_EXT
#undef GL_RGBA12_EXT
#undef GL_RGBA16F
#undef GL_RGBA16F_ARB
#undef GL_RGBA16I
#undef GL_RGBA16I_EXT
#undef GL_RGBA16UI
#undef GL_RGBA16UI_EXT
#undef GL_RGBA16_EXT
#undef GL_RGBA16_SNORM
#undef GL_RGBA2_EXT
#undef GL_RGBA32F
#undef GL_RGBA32F_ARB
#undef GL_RGBA32I
#undef GL_RGBA32I_EXT
#undef GL_RGBA32UI
#undef GL_RGBA32UI_EXT
#undef GL_RGBA4_DXT5_S3TC
#undef GL_RGBA4_EXT
#undef GL_RGBA4_S3TC
#undef GL_RGBA8I
#undef GL_RGBA8I_EXT
#undef GL_RGBA8UI
#undef GL_RGBA8UI_EXT
#undef GL_RGBA8_EXT
#undef GL_RGBA8_SNORM
#undef GL_RGBA_DXT5_S3TC
#undef GL_RGBA_FLOAT16_APPLE
#undef GL_RGBA_FLOAT16_ATI
#undef GL_RGBA_FLOAT32_APPLE
#undef GL_RGBA_FLOAT32_ATI
#undef GL_RGBA_FLOAT_MODE_ARB
#undef GL_RGBA_FLOAT_MODE_ATI
#undef GL_RGBA_INTEGER
#undef GL_RGBA_INTEGER_EXT
#undef GL_RGBA_INTEGER_MODE_EXT
#undef GL_RGBA_S3TC
#undef GL_RGBA_SIGNED_COMPONENTS_EXT
#undef GL_RGBA_SNORM
#undef GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
#undef GL_RGB_422_APPLE
#undef GL_RGB_FLOAT16_APPLE
#undef GL_RGB_FLOAT16_ATI
#undef GL_RGB_FLOAT32_APPLE
#undef GL_RGB_FLOAT32_ATI
#undef GL_RGB_INTEGER
#undef GL_RGB_INTEGER_EXT
#undef GL_RGB_RAW_422_APPLE
#undef GL_RGB_S3TC
#undef GL_RGB_SCALE
#undef GL_RGB_SCALE_ARB
#undef GL_RGB_SCALE_EXT
#undef GL_RGB_SNORM
#undef GL_RG_INTEGER
#undef GL_RG_SNORM
#undef GL_ROUNDED_RECT2_NV
#undef GL_ROUNDED_RECT4_NV
#undef GL_ROUNDED_RECT8_NV
#undef GL_ROUNDED_RECT_NV
#undef GL_ROUND_NV
#undef GL_SAMPLER
#undef GL_SAMPLER_1D
#undef GL_SAMPLER_1D_ARB
#undef GL_SAMPLER_1D_ARRAY
#undef GL_SAMPLER_1D_ARRAY_EXT
#undef GL_SAMPLER_1D_ARRAY_SHADOW
#undef GL_SAMPLER_1D_ARRAY_SHADOW_EXT
#undef GL_SAMPLER_1D_SHADOW
#undef GL_SAMPLER_1D_SHADOW_ARB
#undef GL_SAMPLER_2D
#undef GL_SAMPLER_2D_ARB
#undef GL_SAMPLER_2D_ARRAY
#undef GL_SAMPLER_2D_ARRAY_EXT
#undef GL_SAMPLER_2D_ARRAY_SHADOW
#undef GL_SAMPLER_2D_ARRAY_SHADOW_EXT
#undef GL_SAMPLER_2D_MULTISAMPLE
#undef GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#undef GL_SAMPLER_2D_RECT
#undef GL_SAMPLER_2D_RECT_ARB
#undef GL_SAMPLER_2D_RECT_SHADOW
#undef GL_SAMPLER_2D_RECT_SHADOW_ARB
#undef GL_SAMPLER_2D_SHADOW
#undef GL_SAMPLER_2D_SHADOW_ARB
#undef GL_SAMPLER_3D
#undef GL_SAMPLER_3D_ARB
#undef GL_SAMPLER_BINDING
#undef GL_SAMPLER_BUFFER
#undef GL_SAMPLER_BUFFER_AMD
#undef GL_SAMPLER_BUFFER_EXT
#undef GL_SAMPLER_CUBE
#undef GL_SAMPLER_CUBE_ARB
#undef GL_SAMPLER_CUBE_MAP_ARRAY
#undef GL_SAMPLER_CUBE_MAP_ARRAY_ARB
#undef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
#undef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
#undef GL_SAMPLER_CUBE_SHADOW
#undef GL_SAMPLER_CUBE_SHADOW_EXT
#undef GL_SAMPLER_OBJECT_AMD
#undef GL_SAMPLER_RENDERBUFFER_NV
#undef GL_SAMPLES
#undef GL_SAMPLES_3DFX
#undef GL_SAMPLES_ARB
#undef GL_SAMPLES_EXT
#undef GL_SAMPLES_PASSED
#undef GL_SAMPLES_PASSED_ARB
#undef GL_SAMPLES_SGIS
#undef GL_SAMPLE_ALPHA_TO_COVERAGE
#undef GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
#undef GL_SAMPLE_ALPHA_TO_MASK_EXT
#undef GL_SAMPLE_ALPHA_TO_MASK_SGIS
#undef GL_SAMPLE_ALPHA_TO_ONE
#undef GL_SAMPLE_ALPHA_TO_ONE_ARB
#undef GL_SAMPLE_ALPHA_TO_ONE_EXT
#undef GL_SAMPLE_ALPHA_TO_ONE_SGIS
#undef GL_SAMPLE_BUFFERS
#undef GL_SAMPLE_BUFFERS_3DFX
#undef GL_SAMPLE_BUFFERS_ARB
#undef GL_SAMPLE_BUFFERS_EXT
#undef GL_SAMPLE_BUFFERS_SGIS
#undef GL_SAMPLE_COVERAGE
#undef GL_SAMPLE_COVERAGE_ARB
#undef GL_SAMPLE_COVERAGE_INVERT
#undef GL_SAMPLE_COVERAGE_INVERT_ARB
#undef GL_SAMPLE_COVERAGE_VALUE
#undef GL_SAMPLE_COVERAGE_VALUE_ARB
#undef GL_SAMPLE_LOCATION_ARB
#undef GL_SAMPLE_LOCATION_NV
#undef GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
#undef GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
#undef GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
#undef GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
#undef GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
#undef GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV
#undef GL_SAMPLE_MASK
#undef GL_SAMPLE_MASK_EXT
#undef GL_SAMPLE_MASK_INVERT_EXT
#undef GL_SAMPLE_MASK_INVERT_SGIS
#undef GL_SAMPLE_MASK_NV
#undef GL_SAMPLE_MASK_SGIS
#undef GL_SAMPLE_MASK_VALUE
#undef GL_SAMPLE_MASK_VALUE_EXT
#undef GL_SAMPLE_MASK_VALUE_NV
#undef GL_SAMPLE_MASK_VALUE_SGIS
#undef GL_SAMPLE_PATTERN_EXT
#undef GL_SAMPLE_PATTERN_SGIS
#undef GL_SAMPLE_POSITION
#undef GL_SAMPLE_POSITION_NV
#undef GL_SAMPLE_SHADING
#undef GL_SAMPLE_SHADING_ARB
#undef GL_SATURATE_BIT_ATI
#undef GL_SCALAR_EXT
#undef GL_SCALEBIAS_HINT_SGIX
#undef GL_SCALED_RESOLVE_FASTEST_EXT
#undef GL_SCALED_RESOLVE_NICEST_EXT
#undef GL_SCALE_BY_FOUR_NV
#undef GL_SCALE_BY_ONE_HALF_NV
#undef GL_SCALE_BY_TWO_NV
#undef GL_SCISSOR_COMMAND_NV
#undef GL_SCREEN_COORDINATES_REND
#undef GL_SCREEN_KHR
#undef GL_SCREEN_NV
#undef GL_SECONDARY_COLOR_ARRAY
#undef GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
#undef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#undef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
#undef GL_SECONDARY_COLOR_ARRAY_EXT
#undef GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
#undef GL_SECONDARY_COLOR_ARRAY_LIST_IBM
#undef GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
#undef GL_SECONDARY_COLOR_ARRAY_POINTER
#undef GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
#undef GL_SECONDARY_COLOR_ARRAY_SIZE
#undef GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
#undef GL_SECONDARY_COLOR_ARRAY_STRIDE
#undef GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
#undef GL_SECONDARY_COLOR_ARRAY_TYPE
#undef GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
#undef GL_SECONDARY_COLOR_NV
#undef GL_SECONDARY_INTERPOLATOR_ATI
#undef GL_SEPARABLE_2D
#undef GL_SEPARABLE_2D_EXT
#undef GL_SEPARATE_ATTRIBS
#undef GL_SEPARATE_ATTRIBS_EXT
#undef GL_SEPARATE_ATTRIBS_NV
#undef GL_SEPARATE_SPECULAR_COLOR
#undef GL_SEPARATE_SPECULAR_COLOR_EXT
#undef GL_SET_AMD
#undef GL_SHADER
#undef GL_SHADER_BINARY_FORMATS
#undef GL_SHADER_BINARY_FORMAT_SPIR_V
#undef GL_SHADER_BINARY_FORMAT_SPIR_V_ARB
#undef GL_SHADER_COMPILER
#undef GL_SHADER_CONSISTENT_NV
#undef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#undef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
#undef GL_SHADER_IMAGE_ATOMIC
#undef GL_SHADER_IMAGE_LOAD
#undef GL_SHADER_IMAGE_STORE
#undef GL_SHADER_INCLUDE_ARB
#undef GL_SHADER_OBJECT_ARB
#undef GL_SHADER_OBJECT_EXT
#undef GL_SHADER_OPERATION_NV
#undef GL_SHADER_SOURCE_LENGTH
#undef GL_SHADER_STORAGE_BARRIER_BIT
#undef GL_SHADER_STORAGE_BLOCK
#undef GL_SHADER_STORAGE_BUFFER
#undef GL_SHADER_STORAGE_BUFFER_BINDING
#undef GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
#undef GL_SHADER_STORAGE_BUFFER_SIZE
#undef GL_SHADER_STORAGE_BUFFER_START
#undef GL_SHADER_TYPE
#undef GL_SHADING_LANGUAGE_VERSION
#undef GL_SHADING_LANGUAGE_VERSION_ARB
#undef GL_SHADOW_AMBIENT_SGIX
#undef GL_SHADOW_ATTENUATION_EXT
#undef GL_SHARED_EDGE_NV
#undef GL_SHARED_TEXTURE_PALETTE_EXT
#undef GL_SIGNALED
#undef GL_SIGNED_ALPHA8_NV
#undef GL_SIGNED_ALPHA_NV
#undef GL_SIGNED_HILO16_NV
#undef GL_SIGNED_HILO8_NV
#undef GL_SIGNED_HILO_NV
#undef GL_SIGNED_IDENTITY_NV
#undef GL_SIGNED_INTENSITY8_NV
#undef GL_SIGNED_INTENSITY_NV
#undef GL_SIGNED_LUMINANCE8_ALPHA8_NV
#undef GL_SIGNED_LUMINANCE8_NV
#undef GL_SIGNED_LUMINANCE_ALPHA_NV
#undef GL_SIGNED_LUMINANCE_NV
#undef GL_SIGNED_NEGATE_NV
#undef GL_SIGNED_NORMALIZED
#undef GL_SIGNED_RGB8_NV
#undef GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
#undef GL_SIGNED_RGBA8_NV
#undef GL_SIGNED_RGBA_NV
#undef GL_SIGNED_RGB_NV
#undef GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
#undef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
#undef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
#undef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
#undef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
#undef GL_SINGLE_COLOR
#undef GL_SINGLE_COLOR_EXT
#undef GL_SKIP_DECODE_EXT
#undef GL_SKIP_MISSING_GLYPH_NV
#undef GL_SLICE_ACCUM_SUN
#undef GL_SLUMINANCE
#undef GL_SLUMINANCE8
#undef GL_SLUMINANCE8_ALPHA8
#undef GL_SLUMINANCE8_ALPHA8_EXT
#undef GL_SLUMINANCE8_EXT
#undef GL_SLUMINANCE_ALPHA
#undef GL_SLUMINANCE_ALPHA_EXT
#undef GL_SLUMINANCE_EXT
#undef GL_SMALL_CCW_ARC_TO_NV
#undef GL_SMALL_CW_ARC_TO_NV
#undef GL_SMOOTH_CUBIC_CURVE_TO_NV
#undef GL_SMOOTH_LINE_WIDTH_GRANULARITY
#undef GL_SMOOTH_LINE_WIDTH_RANGE
#undef GL_SMOOTH_POINT_SIZE_GRANULARITY
#undef GL_SMOOTH_POINT_SIZE_RANGE
#undef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#undef GL_SM_COUNT_NV
#undef GL_SOFTLIGHT_KHR
#undef GL_SOFTLIGHT_NV
#undef GL_SOURCE0_ALPHA
#undef GL_SOURCE0_ALPHA_ARB
#undef GL_SOURCE0_ALPHA_EXT
#undef GL_SOURCE0_RGB
#undef GL_SOURCE0_RGB_ARB
#undef GL_SOURCE0_RGB_EXT
#undef GL_SOURCE1_ALPHA
#undef GL_SOURCE1_ALPHA_ARB
#undef GL_SOURCE1_ALPHA_EXT
#undef GL_SOURCE1_RGB
#undef GL_SOURCE1_RGB_ARB
#undef GL_SOURCE1_RGB_EXT
#undef GL_SOURCE2_ALPHA
#undef GL_SOURCE2_ALPHA_ARB
#undef GL_SOURCE2_ALPHA_EXT
#undef GL_SOURCE2_RGB
#undef GL_SOURCE2_RGB_ARB
#undef GL_SOURCE2_RGB_EXT
#undef GL_SOURCE3_ALPHA_NV
#undef GL_SOURCE3_RGB_NV
#undef GL_SPARE0_NV
#undef GL_SPARE0_PLUS_SECONDARY_COLOR_NV
#undef GL_SPARE1_NV
#undef GL_SPARSE_BUFFER_PAGE_SIZE_ARB
#undef GL_SPARSE_STORAGE_BIT_ARB
#undef GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
#undef GL_SPIR_V_BINARY
#undef GL_SPIR_V_BINARY_ARB
#undef GL_SPIR_V_EXTENSIONS
#undef GL_SQUARE_NV
#undef GL_SR8_EXT
#undef GL_SRC0_ALPHA
#undef GL_SRC0_RGB
#undef GL_SRC1_ALPHA
#undef GL_SRC1_COLOR
#undef GL_SRC1_RGB
#undef GL_SRC2_ALPHA
#undef GL_SRC2_RGB
#undef GL_SRC_ATOP_NV
#undef GL_SRC_IN_NV
#undef GL_SRC_NV
#undef GL_SRC_OUT_NV
#undef GL_SRC_OVER_NV
#undef GL_SRGB
#undef GL_SRGB8
#undef GL_SRGB8_ALPHA8
#undef GL_SRGB8_ALPHA8_EXT
#undef GL_SRGB8_EXT
#undef GL_SRGB_ALPHA
#undef GL_SRGB_ALPHA_EXT
#undef GL_SRGB_DECODE_ARB
#undef GL_SRGB_EXT
#undef GL_SRGB_READ
#undef GL_SRGB_WRITE
#undef GL_STANDARD_FONT_FORMAT_NV
#undef GL_STANDARD_FONT_NAME_NV
#undef GL_STATIC_ATI
#undef GL_STATIC_COPY
#undef GL_STATIC_COPY_ARB
#undef GL_STATIC_DRAW
#undef GL_STATIC_DRAW_ARB
#undef GL_STATIC_READ
#undef GL_STATIC_READ_ARB
#undef GL_STATIC_VERTEX_ARRAY_IBM
#undef GL_STENCIL_ATTACHMENT
#undef GL_STENCIL_ATTACHMENT_EXT
#undef GL_STENCIL_BACK_FAIL
#undef GL_STENCIL_BACK_FAIL_ATI
#undef GL_STENCIL_BACK_FUNC
#undef GL_STENCIL_BACK_FUNC_ATI
#undef GL_STENCIL_BACK_OP_VALUE_AMD
#undef GL_STENCIL_BACK_PASS_DEPTH_FAIL
#undef GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
#undef GL_STENCIL_BACK_PASS_DEPTH_PASS
#undef GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
#undef GL_STENCIL_BACK_REF
#undef GL_STENCIL_BACK_VALUE_MASK
#undef GL_STENCIL_BACK_WRITEMASK
#undef GL_STENCIL_CLEAR_TAG_VALUE_EXT
#undef GL_STENCIL_COMPONENTS
#undef GL_STENCIL_INDEX1
#undef GL_STENCIL_INDEX16
#undef GL_STENCIL_INDEX16_EXT
#undef GL_STENCIL_INDEX1_EXT
#undef GL_STENCIL_INDEX4
#undef GL_STENCIL_INDEX4_EXT
#undef GL_STENCIL_INDEX8
#undef GL_STENCIL_INDEX8_EXT
#undef GL_STENCIL_OP_VALUE_AMD
#undef GL_STENCIL_REF_COMMAND_NV
#undef GL_STENCIL_RENDERABLE
#undef GL_STENCIL_SAMPLES_NV
#undef GL_STENCIL_TAG_BITS_EXT
#undef GL_STENCIL_TEST_TWO_SIDE_EXT
#undef GL_STORAGE_CACHED_APPLE
#undef GL_STORAGE_CLIENT_APPLE
#undef GL_STORAGE_PRIVATE_APPLE
#undef GL_STORAGE_SHARED_APPLE
#undef GL_STREAM_COPY
#undef GL_STREAM_COPY_ARB
#undef GL_STREAM_DRAW
#undef GL_STREAM_DRAW_ARB
#undef GL_STREAM_RASTERIZATION_AMD
#undef GL_STREAM_READ
#undef GL_STREAM_READ_ARB
#undef GL_STRICT_DEPTHFUNC_HINT_PGI
#undef GL_STRICT_LIGHTING_HINT_PGI
#undef GL_STRICT_SCISSOR_HINT_PGI
#undef GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
#undef GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
#undef GL_SUBSAMPLE_DISTANCE_AMD
#undef GL_SUBTRACT
#undef GL_SUBTRACT_ARB
#undef GL_SUB_ATI
#undef GL_SUCCESS_NV
#undef GL_SUPERSAMPLE_SCALE_X_NV
#undef GL_SUPERSAMPLE_SCALE_Y_NV
#undef GL_SURFACE_MAPPED_NV
#undef GL_SURFACE_REGISTERED_NV
#undef GL_SURFACE_STATE_NV
#undef GL_SWIZZLE_STQ_ATI
#undef GL_SWIZZLE_STQ_DQ_ATI
#undef GL_SWIZZLE_STRQ_ATI
#undef GL_SWIZZLE_STRQ_DQ_ATI
#undef GL_SWIZZLE_STR_ATI
#undef GL_SWIZZLE_STR_DR_ATI
#undef GL_SYNC_CL_EVENT_ARB
#undef GL_SYNC_CL_EVENT_COMPLETE_ARB
#undef GL_SYNC_CONDITION
#undef GL_SYNC_FENCE
#undef GL_SYNC_FLAGS
#undef GL_SYNC_FLUSH_COMMANDS_BIT
#undef GL_SYNC_GPU_COMMANDS_COMPLETE
#undef GL_SYNC_STATUS
#undef GL_SYNC_X11_FENCE_EXT
#undef GL_SYSTEM_FONT_NAME_NV
#undef GL_TABLE_TOO_LARGE
#undef GL_TANGENT_ARRAY_EXT
#undef GL_TANGENT_ARRAY_POINTER_EXT
#undef GL_TANGENT_ARRAY_STRIDE_EXT
#undef GL_TANGENT_ARRAY_TYPE_EXT
#undef GL_TERMINATE_SEQUENCE_COMMAND_NV
#undef GL_TESSELLATION_FACTOR_AMD
#undef GL_TESSELLATION_MODE_AMD
#undef GL_TESS_CONTROL_OUTPUT_VERTICES
#undef GL_TESS_CONTROL_PROGRAM_NV
#undef GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_TESS_CONTROL_SHADER
#undef GL_TESS_CONTROL_SHADER_BIT
#undef GL_TESS_CONTROL_SHADER_PATCHES
#undef GL_TESS_CONTROL_SHADER_PATCHES_ARB
#undef GL_TESS_CONTROL_SUBROUTINE
#undef GL_TESS_CONTROL_SUBROUTINE_UNIFORM
#undef GL_TESS_CONTROL_TEXTURE
#undef GL_TESS_EVALUATION_PROGRAM_NV
#undef GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_TESS_EVALUATION_SHADER
#undef GL_TESS_EVALUATION_SHADER_BIT
#undef GL_TESS_EVALUATION_SHADER_INVOCATIONS
#undef GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
#undef GL_TESS_EVALUATION_SUBROUTINE
#undef GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
#undef GL_TESS_EVALUATION_TEXTURE
#undef GL_TESS_GEN_MODE
#undef GL_TESS_GEN_POINT_MODE
#undef GL_TESS_GEN_SPACING
#undef GL_TESS_GEN_VERTEX_ORDER
#undef GL_TEXCOORD1_BIT_PGI
#undef GL_TEXCOORD2_BIT_PGI
#undef GL_TEXCOORD3_BIT_PGI
#undef GL_TEXCOORD4_BIT_PGI
#undef GL_TEXTURE0
#undef GL_TEXTURE0_ARB
#undef GL_TEXTURE1
#undef GL_TEXTURE10
#undef GL_TEXTURE10_ARB
#undef GL_TEXTURE11
#undef GL_TEXTURE11_ARB
#undef GL_TEXTURE12
#undef GL_TEXTURE12_ARB
#undef GL_TEXTURE13
#undef GL_TEXTURE13_ARB
#undef GL_TEXTURE14
#undef GL_TEXTURE14_ARB
#undef GL_TEXTURE15
#undef GL_TEXTURE15_ARB
#undef GL_TEXTURE16
#undef GL_TEXTURE16_ARB
#undef GL_TEXTURE17
#undef GL_TEXTURE17_ARB
#undef GL_TEXTURE18
#undef GL_TEXTURE18_ARB
#undef GL_TEXTURE19
#undef GL_TEXTURE19_ARB
#undef GL_TEXTURE1_ARB
#undef GL_TEXTURE2
#undef GL_TEXTURE20
#undef GL_TEXTURE20_ARB
#undef GL_TEXTURE21
#undef GL_TEXTURE21_ARB
#undef GL_TEXTURE22
#undef GL_TEXTURE22_ARB
#undef GL_TEXTURE23
#undef GL_TEXTURE23_ARB
#undef GL_TEXTURE24
#undef GL_TEXTURE24_ARB
#undef GL_TEXTURE25
#undef GL_TEXTURE25_ARB
#undef GL_TEXTURE26
#undef GL_TEXTURE26_ARB
#undef GL_TEXTURE27
#undef GL_TEXTURE27_ARB
#undef GL_TEXTURE28
#undef GL_TEXTURE28_ARB
#undef GL_TEXTURE29
#undef GL_TEXTURE29_ARB
#undef GL_TEXTURE2_ARB
#undef GL_TEXTURE3
#undef GL_TEXTURE30
#undef GL_TEXTURE30_ARB
#undef GL_TEXTURE31
#undef GL_TEXTURE31_ARB
#undef GL_TEXTURE3_ARB
#undef GL_TEXTURE4
#undef GL_TEXTURE4_ARB
#undef GL_TEXTURE5
#undef GL_TEXTURE5_ARB
#undef GL_TEXTURE6
#undef GL_TEXTURE6_ARB
#undef GL_TEXTURE7
#undef GL_TEXTURE7_ARB
#undef GL_TEXTURE8
#undef GL_TEXTURE8_ARB
#undef GL_TEXTURE9
#undef GL_TEXTURE9_ARB
#undef GL_TEXTURE_1D_ARRAY
#undef GL_TEXTURE_1D_ARRAY_EXT
#undef GL_TEXTURE_1D_BINDING_EXT
#undef GL_TEXTURE_1D_STACK_BINDING_MESAX
#undef GL_TEXTURE_1D_STACK_MESAX
#undef GL_TEXTURE_2D_ARRAY
#undef GL_TEXTURE_2D_ARRAY_EXT
#undef GL_TEXTURE_2D_BINDING_EXT
#undef GL_TEXTURE_2D_MULTISAMPLE
#undef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#undef GL_TEXTURE_2D_STACK_BINDING_MESAX
#undef GL_TEXTURE_2D_STACK_MESAX
#undef GL_TEXTURE_3D
#undef GL_TEXTURE_3D_BINDING_EXT
#undef GL_TEXTURE_3D_EXT
#undef GL_TEXTURE_ALPHA_SIZE_EXT
#undef GL_TEXTURE_ALPHA_TYPE
#undef GL_TEXTURE_ALPHA_TYPE_ARB
#undef GL_TEXTURE_APPLICATION_MODE_EXT
#undef GL_TEXTURE_BASE_LEVEL
#undef GL_TEXTURE_BASE_LEVEL_SGIS
#undef GL_TEXTURE_BINDING_1D_ARRAY
#undef GL_TEXTURE_BINDING_1D_ARRAY_EXT
#undef GL_TEXTURE_BINDING_2D_ARRAY
#undef GL_TEXTURE_BINDING_2D_ARRAY_EXT
#undef GL_TEXTURE_BINDING_2D_MULTISAMPLE
#undef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#undef GL_TEXTURE_BINDING_3D
#undef GL_TEXTURE_BINDING_BUFFER
#undef GL_TEXTURE_BINDING_BUFFER_ARB
#undef GL_TEXTURE_BINDING_BUFFER_EXT
#undef GL_TEXTURE_BINDING_CUBE_MAP
#undef GL_TEXTURE_BINDING_CUBE_MAP_ARB
#undef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#undef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
#undef GL_TEXTURE_BINDING_CUBE_MAP_EXT
#undef GL_TEXTURE_BINDING_RECTANGLE
#undef GL_TEXTURE_BINDING_RECTANGLE_ARB
#undef GL_TEXTURE_BINDING_RECTANGLE_NV
#undef GL_TEXTURE_BINDING_RENDERBUFFER_NV
#undef GL_TEXTURE_BLUE_SIZE_EXT
#undef GL_TEXTURE_BLUE_TYPE
#undef GL_TEXTURE_BLUE_TYPE_ARB
#undef GL_TEXTURE_BORDER_VALUES_NV
#undef GL_TEXTURE_BUFFER
#undef GL_TEXTURE_BUFFER_ARB
#undef GL_TEXTURE_BUFFER_BINDING
#undef GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#undef GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
#undef GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
#undef GL_TEXTURE_BUFFER_EXT
#undef GL_TEXTURE_BUFFER_FORMAT_ARB
#undef GL_TEXTURE_BUFFER_FORMAT_EXT
#undef GL_TEXTURE_BUFFER_OFFSET
#undef GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
#undef GL_TEXTURE_BUFFER_SIZE
#undef GL_TEXTURE_COLOR_SAMPLES_NV
#undef GL_TEXTURE_COLOR_TABLE_SGI
#undef GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
#undef GL_TEXTURE_COMPARE_FUNC
#undef GL_TEXTURE_COMPARE_FUNC_ARB
#undef GL_TEXTURE_COMPARE_MODE
#undef GL_TEXTURE_COMPARE_MODE_ARB
#undef GL_TEXTURE_COMPARE_OPERATOR_SGIX
#undef GL_TEXTURE_COMPARE_SGIX
#undef GL_TEXTURE_COMPRESSED
#undef GL_TEXTURE_COMPRESSED_ARB
#undef GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
#undef GL_TEXTURE_COMPRESSED_BLOCK_SIZE
#undef GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
#undef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#undef GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
#undef GL_TEXTURE_COMPRESSION_HINT
#undef GL_TEXTURE_COMPRESSION_HINT_ARB
#undef GL_TEXTURE_CONSTANT_DATA_SUNX
#undef GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
#undef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
#undef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
#undef GL_TEXTURE_COORD_ARRAY_COUNT_EXT
#undef GL_TEXTURE_COORD_ARRAY_EXT
#undef GL_TEXTURE_COORD_ARRAY_LENGTH_NV
#undef GL_TEXTURE_COORD_ARRAY_LIST_IBM
#undef GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
#undef GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
#undef GL_TEXTURE_COORD_ARRAY_POINTER_EXT
#undef GL_TEXTURE_COORD_ARRAY_SIZE_EXT
#undef GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
#undef GL_TEXTURE_COORD_ARRAY_TYPE_EXT
#undef GL_TEXTURE_COORD_NV
#undef GL_TEXTURE_COVERAGE_SAMPLES_NV
#undef GL_TEXTURE_CUBE_MAP
#undef GL_TEXTURE_CUBE_MAP_ARB
#undef GL_TEXTURE_CUBE_MAP_ARRAY
#undef GL_TEXTURE_CUBE_MAP_ARRAY_ARB
#undef GL_TEXTURE_CUBE_MAP_EXT
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
#undef GL_TEXTURE_CUBE_MAP_SEAMLESS
#undef GL_TEXTURE_DEFORMATION_BIT_SGIX
#undef GL_TEXTURE_DEPTH
#undef GL_TEXTURE_DEPTH_EXT
#undef GL_TEXTURE_DEPTH_SIZE
#undef GL_TEXTURE_DEPTH_SIZE_ARB
#undef GL_TEXTURE_DEPTH_TYPE
#undef GL_TEXTURE_DEPTH_TYPE_ARB
#undef GL_TEXTURE_DS_SIZE_NV
#undef GL_TEXTURE_DT_SIZE_NV
#undef GL_TEXTURE_FETCH_BARRIER_BIT
#undef GL_TEXTURE_FETCH_BARRIER_BIT_EXT
#undef GL_TEXTURE_FILTER_CONTROL
#undef GL_TEXTURE_FILTER_CONTROL_EXT
#undef GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#undef GL_TEXTURE_FLOAT_COMPONENTS_NV
#undef GL_TEXTURE_FREE_MEMORY_ATI
#undef GL_TEXTURE_GATHER
#undef GL_TEXTURE_GATHER_SHADOW
#undef GL_TEXTURE_GEQUAL_R_SGIX
#undef GL_TEXTURE_GREEN_SIZE_EXT
#undef GL_TEXTURE_GREEN_TYPE
#undef GL_TEXTURE_GREEN_TYPE_ARB
#undef GL_TEXTURE_HI_SIZE_NV
#undef GL_TEXTURE_IMAGE_FORMAT
#undef GL_TEXTURE_IMAGE_TYPE
#undef GL_TEXTURE_IMMUTABLE_FORMAT
#undef GL_TEXTURE_IMMUTABLE_LEVELS
#undef GL_TEXTURE_INDEX_SIZE_EXT
#undef GL_TEXTURE_INTENSITY_SIZE_EXT
#undef GL_TEXTURE_INTENSITY_TYPE
#undef GL_TEXTURE_INTENSITY_TYPE_ARB
#undef GL_TEXTURE_LEQUAL_R_SGIX
#undef GL_TEXTURE_LIGHT_EXT
#undef GL_TEXTURE_LOD_BIAS
#undef GL_TEXTURE_LOD_BIAS_EXT
#undef GL_TEXTURE_LO_SIZE_NV
#undef GL_TEXTURE_LUMINANCE_SIZE_EXT
#undef GL_TEXTURE_LUMINANCE_TYPE
#undef GL_TEXTURE_LUMINANCE_TYPE_ARB
#undef GL_TEXTURE_MAG_SIZE_NV
#undef GL_TEXTURE_MATERIAL_FACE_EXT
#undef GL_TEXTURE_MATERIAL_PARAMETER_EXT
#undef GL_TEXTURE_MAX_ANISOTROPY
#undef GL_TEXTURE_MAX_ANISOTROPY_EXT
#undef GL_TEXTURE_MAX_CLAMP_R_SGIX
#undef GL_TEXTURE_MAX_CLAMP_S_SGIX
#undef GL_TEXTURE_MAX_CLAMP_T_SGIX
#undef GL_TEXTURE_MAX_LEVEL
#undef GL_TEXTURE_MAX_LEVEL_SGIS
#undef GL_TEXTURE_MAX_LOD
#undef GL_TEXTURE_MAX_LOD_SGIS
#undef GL_TEXTURE_MEMORY_LAYOUT_INTEL
#undef GL_TEXTURE_MIN_LOD
#undef GL_TEXTURE_MIN_LOD_SGIS
#undef GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
#undef GL_TEXTURE_NORMAL_EXT
#undef GL_TEXTURE_PRIORITY_EXT
#undef GL_TEXTURE_RANGE_LENGTH_APPLE
#undef GL_TEXTURE_RANGE_POINTER_APPLE
#undef GL_TEXTURE_RECTANGLE
#undef GL_TEXTURE_RECTANGLE_ARB
#undef GL_TEXTURE_RECTANGLE_NV
#undef GL_TEXTURE_REDUCTION_MODE_ARB
#undef GL_TEXTURE_REDUCTION_MODE_EXT
#undef GL_TEXTURE_RED_SIZE_EXT
#undef GL_TEXTURE_RED_TYPE
#undef GL_TEXTURE_RED_TYPE_ARB
#undef GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
#undef GL_TEXTURE_RENDERBUFFER_NV
#undef GL_TEXTURE_RESIDENT_EXT
#undef GL_TEXTURE_SAMPLES
#undef GL_TEXTURE_SHADER_NV
#undef GL_TEXTURE_SHADOW
#undef GL_TEXTURE_SHARED_SIZE
#undef GL_TEXTURE_SHARED_SIZE_EXT
#undef GL_TEXTURE_SPARSE_ARB
#undef GL_TEXTURE_SRGB_DECODE_EXT
#undef GL_TEXTURE_STENCIL_SIZE
#undef GL_TEXTURE_STENCIL_SIZE_EXT
#undef GL_TEXTURE_STORAGE_HINT_APPLE
#undef GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
#undef GL_TEXTURE_SWIZZLE_A
#undef GL_TEXTURE_SWIZZLE_A_EXT
#undef GL_TEXTURE_SWIZZLE_B
#undef GL_TEXTURE_SWIZZLE_B_EXT
#undef GL_TEXTURE_SWIZZLE_G
#undef GL_TEXTURE_SWIZZLE_G_EXT
#undef GL_TEXTURE_SWIZZLE_R
#undef GL_TEXTURE_SWIZZLE_RGBA
#undef GL_TEXTURE_SWIZZLE_RGBA_EXT
#undef GL_TEXTURE_SWIZZLE_R_EXT
#undef GL_TEXTURE_TARGET
#undef GL_TEXTURE_TILING_EXT
#undef GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
#undef GL_TEXTURE_UPDATE_BARRIER_BIT
#undef GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
#undef GL_TEXTURE_VIEW
#undef GL_TEXTURE_VIEW_MIN_LAYER
#undef GL_TEXTURE_VIEW_MIN_LEVEL
#undef GL_TEXTURE_VIEW_NUM_LAYERS
#undef GL_TEXTURE_VIEW_NUM_LEVELS
#undef GL_TEXTURE_WRAP_R
#undef GL_TEXTURE_WRAP_R_EXT
#undef GL_TEXT_FRAGMENT_SHADER_ATI
#undef GL_TILING_TYPES_EXT
#undef GL_TIMEOUT_EXPIRED
#undef GL_TIMEOUT_IGNORED
#undef GL_TIMESTAMP
#undef GL_TIME_ELAPSED
#undef GL_TIME_ELAPSED_EXT
#undef GL_TOP_LEVEL_ARRAY_SIZE
#undef GL_TOP_LEVEL_ARRAY_STRIDE
#undef GL_TRACK_MATRIX_NV
#undef GL_TRACK_MATRIX_TRANSFORM_NV
#undef GL_TRANSFORM_FEEDBACK
#undef GL_TRANSFORM_FEEDBACK_ACTIVE
#undef GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
#undef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#undef GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
#undef GL_TRANSFORM_FEEDBACK_BINDING
#undef GL_TRANSFORM_FEEDBACK_BINDING_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER
#undef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#undef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#undef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
#undef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#undef GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#undef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#undef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_START
#undef GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
#undef GL_TRANSFORM_FEEDBACK_NV
#undef GL_TRANSFORM_FEEDBACK_OVERFLOW
#undef GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
#undef GL_TRANSFORM_FEEDBACK_PAUSED
#undef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#undef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
#undef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
#undef GL_TRANSFORM_FEEDBACK_RECORD_NV
#undef GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW
#undef GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
#undef GL_TRANSFORM_FEEDBACK_VARYING
#undef GL_TRANSFORM_FEEDBACK_VARYINGS
#undef GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
#undef GL_TRANSFORM_FEEDBACK_VARYINGS_NV
#undef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#undef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
#undef GL_TRANSFORM_HINT_APPLE
#undef GL_TRANSLATE_2D_NV
#undef GL_TRANSLATE_3D_NV
#undef GL_TRANSLATE_X_NV
#undef GL_TRANSLATE_Y_NV
#undef GL_TRANSPOSE_AFFINE_2D_NV
#undef GL_TRANSPOSE_AFFINE_3D_NV
#undef GL_TRANSPOSE_COLOR_MATRIX
#undef GL_TRANSPOSE_COLOR_MATRIX_ARB
#undef GL_TRANSPOSE_CURRENT_MATRIX_ARB
#undef GL_TRANSPOSE_MODELVIEW_MATRIX
#undef GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
#undef GL_TRANSPOSE_NV
#undef GL_TRANSPOSE_PROGRAM_MATRIX_EXT
#undef GL_TRANSPOSE_PROJECTION_MATRIX
#undef GL_TRANSPOSE_PROJECTION_MATRIX_ARB
#undef GL_TRANSPOSE_TEXTURE_MATRIX
#undef GL_TRANSPOSE_TEXTURE_MATRIX_ARB
#undef GL_TRIANGLES_ADJACENCY
#undef GL_TRIANGLES_ADJACENCY_ARB
#undef GL_TRIANGLES_ADJACENCY_EXT
#undef GL_TRIANGLE_LIST_SUN
#undef GL_TRIANGLE_MESH_SUN
#undef GL_TRIANGLE_STRIP_ADJACENCY
#undef GL_TRIANGLE_STRIP_ADJACENCY_ARB
#undef GL_TRIANGLE_STRIP_ADJACENCY_EXT
#undef GL_TRIANGULAR_NV
#undef GL_TYPE
#undef GL_UNCORRELATED_NV
#undef GL_UNDEFINED_APPLE
#undef GL_UNDEFINED_VERTEX
#undef GL_UNIFORM
#undef GL_UNIFORM_ADDRESS_COMMAND_NV
#undef GL_UNIFORM_ARRAY_STRIDE
#undef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#undef GL_UNIFORM_BARRIER_BIT
#undef GL_UNIFORM_BARRIER_BIT_EXT
#undef GL_UNIFORM_BLOCK
#undef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#undef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#undef GL_UNIFORM_BLOCK_BINDING
#undef GL_UNIFORM_BLOCK_DATA_SIZE
#undef GL_UNIFORM_BLOCK_INDEX
#undef GL_UNIFORM_BLOCK_NAME_LENGTH
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#undef GL_UNIFORM_BUFFER
#undef GL_UNIFORM_BUFFER_ADDRESS_NV
#undef GL_UNIFORM_BUFFER_BINDING
#undef GL_UNIFORM_BUFFER_BINDING_EXT
#undef GL_UNIFORM_BUFFER_EXT
#undef GL_UNIFORM_BUFFER_LENGTH_NV
#undef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#undef GL_UNIFORM_BUFFER_SIZE
#undef GL_UNIFORM_BUFFER_START
#undef GL_UNIFORM_BUFFER_UNIFIED_NV
#undef GL_UNIFORM_IS_ROW_MAJOR
#undef GL_UNIFORM_MATRIX_STRIDE
#undef GL_UNIFORM_NAME_LENGTH
#undef GL_UNIFORM_OFFSET
#undef GL_UNIFORM_SIZE
#undef GL_UNIFORM_TYPE
#undef GL_UNKNOWN_CONTEXT_RESET
#undef GL_UNKNOWN_CONTEXT_RESET_ARB
#undef GL_UNPACK_CLIENT_STORAGE_APPLE
#undef GL_UNPACK_CMYK_HINT_EXT
#undef GL_UNPACK_COMPRESSED_BLOCK_DEPTH
#undef GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
#undef GL_UNPACK_COMPRESSED_BLOCK_SIZE
#undef GL_UNPACK_COMPRESSED_BLOCK_WIDTH
#undef GL_UNPACK_CONSTANT_DATA_SUNX
#undef GL_UNPACK_IMAGE_HEIGHT
#undef GL_UNPACK_IMAGE_HEIGHT_EXT
#undef GL_UNPACK_RESAMPLE_OML
#undef GL_UNPACK_RESAMPLE_SGIX
#undef GL_UNPACK_ROW_BYTES_APPLE
#undef GL_UNPACK_SKIP_IMAGES
#undef GL_UNPACK_SKIP_IMAGES_EXT
#undef GL_UNPACK_SUBSAMPLE_RATE_SGIX
#undef GL_UNSIGNALED
#undef GL_UNSIGNED_BYTE_2_3_3_REV
#undef GL_UNSIGNED_BYTE_3_3_2
#undef GL_UNSIGNED_BYTE_3_3_2_EXT
#undef GL_UNSIGNED_IDENTITY_NV
#undef GL_UNSIGNED_INT16_NV
#undef GL_UNSIGNED_INT16_VEC2_NV
#undef GL_UNSIGNED_INT16_VEC3_NV
#undef GL_UNSIGNED_INT16_VEC4_NV
#undef GL_UNSIGNED_INT64_AMD
#undef GL_UNSIGNED_INT64_ARB
#undef GL_UNSIGNED_INT64_NV
#undef GL_UNSIGNED_INT64_VEC2_ARB
#undef GL_UNSIGNED_INT64_VEC2_NV
#undef GL_UNSIGNED_INT64_VEC3_ARB
#undef GL_UNSIGNED_INT64_VEC3_NV
#undef GL_UNSIGNED_INT64_VEC4_ARB
#undef GL_UNSIGNED_INT64_VEC4_NV
#undef GL_UNSIGNED_INT8_NV
#undef GL_UNSIGNED_INT8_VEC2_NV
#undef GL_UNSIGNED_INT8_VEC3_NV
#undef GL_UNSIGNED_INT8_VEC4_NV
#undef GL_UNSIGNED_INT_10F_11F_11F_REV
#undef GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
#undef GL_UNSIGNED_INT_10_10_10_2
#undef GL_UNSIGNED_INT_10_10_10_2_EXT
#undef GL_UNSIGNED_INT_24_8
#undef GL_UNSIGNED_INT_24_8_EXT
#undef GL_UNSIGNED_INT_24_8_NV
#undef GL_UNSIGNED_INT_2_10_10_10_REV
#undef GL_UNSIGNED_INT_5_9_9_9_REV
#undef GL_UNSIGNED_INT_5_9_9_9_REV_EXT
#undef GL_UNSIGNED_INT_8_8_8_8
#undef GL_UNSIGNED_INT_8_8_8_8_EXT
#undef GL_UNSIGNED_INT_8_8_8_8_REV
#undef GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
#undef GL_UNSIGNED_INT_ATOMIC_COUNTER
#undef GL_UNSIGNED_INT_IMAGE_1D
#undef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#undef GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
#undef GL_UNSIGNED_INT_IMAGE_1D_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D
#undef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#undef GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#undef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#undef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D_RECT
#undef GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
#undef GL_UNSIGNED_INT_IMAGE_3D
#undef GL_UNSIGNED_INT_IMAGE_3D_EXT
#undef GL_UNSIGNED_INT_IMAGE_BUFFER
#undef GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
#undef GL_UNSIGNED_INT_IMAGE_CUBE
#undef GL_UNSIGNED_INT_IMAGE_CUBE_EXT
#undef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#undef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#undef GL_UNSIGNED_INT_S8_S8_8_8_NV
#undef GL_UNSIGNED_INT_SAMPLER_1D
#undef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#undef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
#undef GL_UNSIGNED_INT_SAMPLER_1D_EXT
#undef GL_UNSIGNED_INT_SAMPLER_2D
#undef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#undef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
#undef GL_UNSIGNED_INT_SAMPLER_2D_EXT
#undef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#undef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#undef GL_UNSIGNED_INT_SAMPLER_2D_RECT
#undef GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
#undef GL_UNSIGNED_INT_SAMPLER_3D
#undef GL_UNSIGNED_INT_SAMPLER_3D_EXT
#undef GL_UNSIGNED_INT_SAMPLER_BUFFER
#undef GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
#undef GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
#undef GL_UNSIGNED_INT_SAMPLER_CUBE
#undef GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
#undef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
#undef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#undef GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
#undef GL_UNSIGNED_INT_VEC2
#undef GL_UNSIGNED_INT_VEC2_EXT
#undef GL_UNSIGNED_INT_VEC3
#undef GL_UNSIGNED_INT_VEC3_EXT
#undef GL_UNSIGNED_INT_VEC4
#undef GL_UNSIGNED_INT_VEC4_EXT
#undef GL_UNSIGNED_INVERT_NV
#undef GL_UNSIGNED_NORMALIZED
#undef GL_UNSIGNED_NORMALIZED_ARB
#undef GL_UNSIGNED_SHORT_1_5_5_5_REV
#undef GL_UNSIGNED_SHORT_4_4_4_4
#undef GL_UNSIGNED_SHORT_4_4_4_4_EXT
#undef GL_UNSIGNED_SHORT_4_4_4_4_REV
#undef GL_UNSIGNED_SHORT_5_5_5_1
#undef GL_UNSIGNED_SHORT_5_5_5_1_EXT
#undef GL_UNSIGNED_SHORT_5_6_5
#undef GL_UNSIGNED_SHORT_5_6_5_REV
#undef GL_UNSIGNED_SHORT_8_8_APPLE
#undef GL_UNSIGNED_SHORT_8_8_MESA
#undef GL_UNSIGNED_SHORT_8_8_REV_APPLE
#undef GL_UNSIGNED_SHORT_8_8_REV_MESA
#undef GL_UPPER_LEFT
#undef GL_USE_MISSING_GLYPH_NV
#undef GL_UTF16_NV
#undef GL_UTF8_NV
#undef GL_UUID_SIZE_EXT
#undef GL_VALIDATE_STATUS
#undef GL_VARIABLE_A_NV
#undef GL_VARIABLE_B_NV
#undef GL_VARIABLE_C_NV
#undef GL_VARIABLE_D_NV
#undef GL_VARIABLE_E_NV
#undef GL_VARIABLE_F_NV
#undef GL_VARIABLE_G_NV
#undef GL_VARIANT_ARRAY_EXT
#undef GL_VARIANT_ARRAY_POINTER_EXT
#undef GL_VARIANT_ARRAY_STRIDE_EXT
#undef GL_VARIANT_ARRAY_TYPE_EXT
#undef GL_VARIANT_DATATYPE_EXT
#undef GL_VARIANT_EXT
#undef GL_VARIANT_VALUE_EXT
#undef GL_VBO_FREE_MEMORY_ATI
#undef GL_VECTOR_EXT
#undef GL_VERSION_1_2
#undef GL_VERSION_1_3
#undef GL_VERSION_1_4
#undef GL_VERSION_1_5
#undef GL_VERSION_2_0
#undef GL_VERSION_2_1
#undef GL_VERSION_3_0
#undef GL_VERSION_3_1
#undef GL_VERSION_3_2
#undef GL_VERSION_3_3
#undef GL_VERSION_4_0
#undef GL_VERSION_4_1
#undef GL_VERSION_4_2
#undef GL_VERSION_4_3
#undef GL_VERSION_4_4
#undef GL_VERSION_4_5
#undef GL_VERSION_4_6
#undef GL_VERTEX23_BIT_PGI
#undef GL_VERTEX4_BIT_PGI
#undef GL_VERTEX_ARRAY_ADDRESS_NV
#undef GL_VERTEX_ARRAY_BINDING
#undef GL_VERTEX_ARRAY_BINDING_APPLE
#undef GL_VERTEX_ARRAY_BUFFER_BINDING
#undef GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
#undef GL_VERTEX_ARRAY_COUNT_EXT
#undef GL_VERTEX_ARRAY_EXT
#undef GL_VERTEX_ARRAY_LENGTH_NV
#undef GL_VERTEX_ARRAY_LIST_IBM
#undef GL_VERTEX_ARRAY_LIST_STRIDE_IBM
#undef GL_VERTEX_ARRAY_OBJECT_AMD
#undef GL_VERTEX_ARRAY_OBJECT_EXT
#undef GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
#undef GL_VERTEX_ARRAY_POINTER_EXT
#undef GL_VERTEX_ARRAY_RANGE_APPLE
#undef GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
#undef GL_VERTEX_ARRAY_RANGE_LENGTH_NV
#undef GL_VERTEX_ARRAY_RANGE_NV
#undef GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
#undef GL_VERTEX_ARRAY_RANGE_POINTER_NV
#undef GL_VERTEX_ARRAY_RANGE_VALID_NV
#undef GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
#undef GL_VERTEX_ARRAY_SIZE_EXT
#undef GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
#undef GL_VERTEX_ARRAY_STRIDE_EXT
#undef GL_VERTEX_ARRAY_TYPE_EXT
#undef GL_VERTEX_ATTRIB_ARRAY0_NV
#undef GL_VERTEX_ATTRIB_ARRAY10_NV
#undef GL_VERTEX_ATTRIB_ARRAY11_NV
#undef GL_VERTEX_ATTRIB_ARRAY12_NV
#undef GL_VERTEX_ATTRIB_ARRAY13_NV
#undef GL_VERTEX_ATTRIB_ARRAY14_NV
#undef GL_VERTEX_ATTRIB_ARRAY15_NV
#undef GL_VERTEX_ATTRIB_ARRAY1_NV
#undef GL_VERTEX_ATTRIB_ARRAY2_NV
#undef GL_VERTEX_ATTRIB_ARRAY3_NV
#undef GL_VERTEX_ATTRIB_ARRAY4_NV
#undef GL_VERTEX_ATTRIB_ARRAY5_NV
#undef GL_VERTEX_ATTRIB_ARRAY6_NV
#undef GL_VERTEX_ATTRIB_ARRAY7_NV
#undef GL_VERTEX_ATTRIB_ARRAY8_NV
#undef GL_VERTEX_ATTRIB_ARRAY9_NV
#undef GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
#undef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#undef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
#undef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#undef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#undef GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_ENABLED
#undef GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#undef GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
#undef GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
#undef GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
#undef GL_VERTEX_ATTRIB_ARRAY_LONG
#undef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#undef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_POINTER
#undef GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_SIZE
#undef GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_STRIDE
#undef GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_TYPE
#undef GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
#undef GL_VERTEX_ATTRIB_BINDING
#undef GL_VERTEX_ATTRIB_MAP1_APPLE
#undef GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
#undef GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
#undef GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
#undef GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
#undef GL_VERTEX_ATTRIB_RELATIVE_OFFSET
#undef GL_VERTEX_BINDING_BUFFER
#undef GL_VERTEX_BINDING_DIVISOR
#undef GL_VERTEX_BINDING_OFFSET
#undef GL_VERTEX_BINDING_STRIDE
#undef GL_VERTEX_BLEND_ARB
#undef GL_VERTEX_CONSISTENT_HINT_PGI
#undef GL_VERTEX_DATA_HINT_PGI
#undef GL_VERTEX_ELEMENT_SWIZZLE_AMD
#undef GL_VERTEX_ID_NV
#undef GL_VERTEX_ID_SWIZZLE_AMD
#undef GL_VERTEX_PRECLIP_HINT_SGIX
#undef GL_VERTEX_PRECLIP_SGIX
#undef GL_VERTEX_PROGRAM_ARB
#undef GL_VERTEX_PROGRAM_BINDING_NV
#undef GL_VERTEX_PROGRAM_NV
#undef GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_VERTEX_PROGRAM_POINT_SIZE
#undef GL_VERTEX_PROGRAM_POINT_SIZE_ARB
#undef GL_VERTEX_PROGRAM_POINT_SIZE_NV
#undef GL_VERTEX_PROGRAM_TWO_SIDE
#undef GL_VERTEX_PROGRAM_TWO_SIDE_ARB
#undef GL_VERTEX_PROGRAM_TWO_SIDE_NV
#undef GL_VERTEX_SHADER
#undef GL_VERTEX_SHADER_ARB
#undef GL_VERTEX_SHADER_BINDING_EXT
#undef GL_VERTEX_SHADER_BIT
#undef GL_VERTEX_SHADER_EXT
#undef GL_VERTEX_SHADER_INSTRUCTIONS_EXT
#undef GL_VERTEX_SHADER_INVARIANTS_EXT
#undef GL_VERTEX_SHADER_INVOCATIONS
#undef GL_VERTEX_SHADER_INVOCATIONS_ARB
#undef GL_VERTEX_SHADER_LOCALS_EXT
#undef GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef GL_VERTEX_SHADER_OPTIMIZED_EXT
#undef GL_VERTEX_SHADER_VARIANTS_EXT
#undef GL_VERTEX_SOURCE_ATI
#undef GL_VERTEX_STATE_PROGRAM_NV
#undef GL_VERTEX_STREAM0_ATI
#undef GL_VERTEX_STREAM1_ATI
#undef GL_VERTEX_STREAM2_ATI
#undef GL_VERTEX_STREAM3_ATI
#undef GL_VERTEX_STREAM4_ATI
#undef GL_VERTEX_STREAM5_ATI
#undef GL_VERTEX_STREAM6_ATI
#undef GL_VERTEX_STREAM7_ATI
#undef GL_VERTEX_SUBROUTINE
#undef GL_VERTEX_SUBROUTINE_UNIFORM
#undef GL_VERTEX_TEXTURE
#undef GL_VERTEX_WEIGHTING_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
#undef GL_VERTICAL_LINE_TO_NV
#undef GL_VERTICES_SUBMITTED
#undef GL_VERTICES_SUBMITTED_ARB
#undef GL_VIBRANCE_BIAS_NV
#undef GL_VIBRANCE_SCALE_NV
#undef GL_VIDEO_BUFFER_BINDING_NV
#undef GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
#undef GL_VIDEO_BUFFER_NV
#undef GL_VIDEO_BUFFER_PITCH_NV
#undef GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
#undef GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
#undef GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
#undef GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
#undef GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
#undef GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
#undef GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
#undef GL_VIDEO_COLOR_CONVERSION_MAX_NV
#undef GL_VIDEO_COLOR_CONVERSION_MIN_NV
#undef GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
#undef GL_VIEWPORT_BOUNDS_RANGE
#undef GL_VIEWPORT_COMMAND_NV
#undef GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#undef GL_VIEWPORT_POSITION_W_SCALE_NV
#undef GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
#undef GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
#undef GL_VIEWPORT_SUBPIXEL_BITS
#undef GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV
#undef GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
#undef GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV
#undef GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
#undef GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV
#undef GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
#undef GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV
#undef GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV
#undef GL_VIEWPORT_SWIZZLE_W_NV
#undef GL_VIEWPORT_SWIZZLE_X_NV
#undef GL_VIEWPORT_SWIZZLE_Y_NV
#undef GL_VIEWPORT_SWIZZLE_Z_NV
#undef GL_VIEW_CLASS_128_BITS
#undef GL_VIEW_CLASS_16_BITS
#undef GL_VIEW_CLASS_24_BITS
#undef GL_VIEW_CLASS_32_BITS
#undef GL_VIEW_CLASS_48_BITS
#undef GL_VIEW_CLASS_64_BITS
#undef GL_VIEW_CLASS_8_BITS
#undef GL_VIEW_CLASS_96_BITS
#undef GL_VIEW_CLASS_BPTC_FLOAT
#undef GL_VIEW_CLASS_BPTC_UNORM
#undef GL_VIEW_CLASS_RGTC1_RED
#undef GL_VIEW_CLASS_RGTC2_RG
#undef GL_VIEW_CLASS_S3TC_DXT1_RGB
#undef GL_VIEW_CLASS_S3TC_DXT1_RGBA
#undef GL_VIEW_CLASS_S3TC_DXT3_RGBA
#undef GL_VIEW_CLASS_S3TC_DXT5_RGBA
#undef GL_VIEW_COMPATIBILITY_CLASS
#undef GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
#undef GL_VIRTUAL_PAGE_SIZE_X_AMD
#undef GL_VIRTUAL_PAGE_SIZE_X_ARB
#undef GL_VIRTUAL_PAGE_SIZE_Y_AMD
#undef GL_VIRTUAL_PAGE_SIZE_Y_ARB
#undef GL_VIRTUAL_PAGE_SIZE_Z_AMD
#undef GL_VIRTUAL_PAGE_SIZE_Z_ARB
#undef GL_VIVIDLIGHT_NV
#undef GL_VOLATILE_APPLE
#undef GL_WAIT_FAILED
#undef GL_WARPS_PER_SM_NV
#undef GL_WARP_SIZE_NV
#undef GL_WEIGHTED_AVERAGE_ARB
#undef GL_WEIGHTED_AVERAGE_EXT
#undef GL_WEIGHT_ARRAY_ARB
#undef GL_WEIGHT_ARRAY_BUFFER_BINDING
#undef GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
#undef GL_WEIGHT_ARRAY_POINTER_ARB
#undef GL_WEIGHT_ARRAY_SIZE_ARB
#undef GL_WEIGHT_ARRAY_STRIDE_ARB
#undef GL_WEIGHT_ARRAY_TYPE_ARB
#undef GL_WEIGHT_SUM_UNITY_ARB
#undef GL_WIDE_LINE_HINT_PGI
#undef GL_WINDOW_RECTANGLE_EXT
#undef GL_WINDOW_RECTANGLE_MODE_EXT
#undef GL_WRAP_BORDER_SUN
#undef GL_WRITE_DISCARD_NV
#undef GL_WRITE_ONLY
#undef GL_WRITE_ONLY_ARB
#undef GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
#undef GL_WRITE_PIXEL_DATA_RANGE_NV
#undef GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
#undef GL_W_EXT
#undef GL_XOR_NV
#undef GL_X_EXT
#undef GL_YCBAYCR8A_4224_NV
#undef GL_YCBCR_422_APPLE
#undef GL_YCBCR_MESA
#undef GL_YCBYCR8_422_NV
#undef GL_YCRCBA_SGIX
#undef GL_YCRCB_SGIX
#undef GL_Y_EXT
#undef GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
#undef GL_Z4Y12Z4CB12Z4CR12_444_NV
#undef GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
#undef GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
#undef GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
#undef GL_ZERO_EXT
#undef GL_ZERO_TO_ONE
#undef GL_Z_EXT


#undef GLX_3DFX_FULLSCREEN_MODE_MESA
#undef GLX_3DFX_WINDOW_MODE_MESA
#undef GLX_ACCUM_BUFFER_BIT
#undef GLX_ACCUM_BUFFER_BIT_SGIX
#undef GLX_AUX0_EXT
#undef GLX_AUX1_EXT
#undef GLX_AUX2_EXT
#undef GLX_AUX3_EXT
#undef GLX_AUX4_EXT
#undef GLX_AUX5_EXT
#undef GLX_AUX6_EXT
#undef GLX_AUX7_EXT
#undef GLX_AUX8_EXT
#undef GLX_AUX9_EXT
#undef GLX_AUX_BUFFERS_BIT
#undef GLX_AUX_BUFFERS_BIT_SGIX
#undef GLX_BACK_BUFFER_AGE_EXT
#undef GLX_BACK_LEFT_BUFFER_BIT
#undef GLX_BACK_LEFT_BUFFER_BIT_SGIX
#undef GLX_BACK_LEFT_EXT
#undef GLX_BACK_RIGHT_BUFFER_BIT
#undef GLX_BACK_RIGHT_BUFFER_BIT_SGIX
#undef GLX_BACK_RIGHT_EXT
#undef GLX_BAD_HYPERPIPE_CONFIG_SGIX
#undef GLX_BAD_HYPERPIPE_SGIX
#undef GLX_BIND_TO_MIPMAP_TEXTURE_EXT
#undef GLX_BIND_TO_TEXTURE_RGBA_EXT
#undef GLX_BIND_TO_TEXTURE_RGB_EXT
#undef GLX_BIND_TO_TEXTURE_TARGETS_EXT
#undef GLX_BLENDED_RGBA_SGIS
#undef GLX_BUFFER_CLOBBER_MASK_SGIX
#undef GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK
#undef GLX_COLOR_INDEX_BIT
#undef GLX_COLOR_INDEX_BIT_SGIX
#undef GLX_COLOR_INDEX_TYPE
#undef GLX_COLOR_INDEX_TYPE_SGIX
#undef GLX_COLOR_SAMPLES_NV
#undef GLX_CONFIG_CAVEAT
#undef GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB
#undef GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
#undef GLX_CONTEXT_CORE_PROFILE_BIT_ARB
#undef GLX_CONTEXT_DEBUG_BIT_ARB
#undef GLX_CONTEXT_ES2_PROFILE_BIT_EXT
#undef GLX_CONTEXT_ES_PROFILE_BIT_EXT
#undef GLX_CONTEXT_FLAGS_ARB
#undef GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
#undef GLX_CONTEXT_MAJOR_VERSION_ARB
#undef GLX_CONTEXT_MINOR_VERSION_ARB
#undef GLX_CONTEXT_PROFILE_MASK_ARB
#undef GLX_CONTEXT_RESET_ISOLATION_BIT_ARB
#undef GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB
#undef GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB
#undef GLX_COPY_COMPLETE_INTEL
#undef GLX_COVERAGE_SAMPLES_NV
#undef GLX_DAMAGED
#undef GLX_DAMAGED_SGIX
#undef GLX_DEPTH_BUFFER_BIT
#undef GLX_DEPTH_BUFFER_BIT_SGIX
#undef GLX_DEVICE_ID_NV
#undef GLX_DIRECT_COLOR
#undef GLX_DIRECT_COLOR_EXT
#undef GLX_DONT_CARE
#undef GLX_DRAWABLE_TYPE
#undef GLX_DRAWABLE_TYPE_SGIX
#undef GLX_EVENT_MASK
#undef GLX_EVENT_MASK_SGIX
#undef GLX_EXCHANGE_COMPLETE_INTEL
#undef GLX_FBCONFIG_ID
#undef GLX_FBCONFIG_ID_SGIX
#undef GLX_FLIP_COMPLETE_INTEL
#undef GLX_FLOAT_COMPONENTS_NV
#undef GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB
#undef GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT
#undef GLX_FRONT_LEFT_BUFFER_BIT
#undef GLX_FRONT_LEFT_BUFFER_BIT_SGIX
#undef GLX_FRONT_LEFT_EXT
#undef GLX_FRONT_RIGHT_BUFFER_BIT
#undef GLX_FRONT_RIGHT_BUFFER_BIT_SGIX
#undef GLX_FRONT_RIGHT_EXT
#undef GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV
#undef GLX_GPU_CLOCK_AMD
#undef GLX_GPU_FASTEST_TARGET_GPUS_AMD
#undef GLX_GPU_NUM_PIPES_AMD
#undef GLX_GPU_NUM_RB_AMD
#undef GLX_GPU_NUM_SIMD_AMD
#undef GLX_GPU_NUM_SPI_AMD
#undef GLX_GPU_OPENGL_VERSION_STRING_AMD
#undef GLX_GPU_RAM_AMD
#undef GLX_GPU_RENDERER_STRING_AMD
#undef GLX_GPU_VENDOR_AMD
#undef GLX_GRAY_SCALE
#undef GLX_GRAY_SCALE_EXT
#undef GLX_HEIGHT
#undef GLX_HEIGHT_SGIX
#undef GLX_HYPERPIPE_DISPLAY_PIPE_SGIX
#undef GLX_HYPERPIPE_ID_SGIX
#undef GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX
#undef GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX
#undef GLX_HYPERPIPE_RENDER_PIPE_SGIX
#undef GLX_HYPERPIPE_STEREO_SGIX
#undef GLX_LARGEST_PBUFFER
#undef GLX_LARGEST_PBUFFER_SGIX
#undef GLX_LATE_SWAPS_TEAR_EXT
#undef GLX_LOSE_CONTEXT_ON_RESET_ARB
#undef GLX_MAX_PBUFFER_HEIGHT
#undef GLX_MAX_PBUFFER_HEIGHT_SGIX
#undef GLX_MAX_PBUFFER_PIXELS
#undef GLX_MAX_PBUFFER_PIXELS_SGIX
#undef GLX_MAX_PBUFFER_WIDTH
#undef GLX_MAX_PBUFFER_WIDTH_SGIX
#undef GLX_MAX_SWAP_INTERVAL_EXT
#undef GLX_MIPMAP_TEXTURE_EXT
#undef GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS
#undef GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS
#undef GLX_NONE
#undef GLX_NONE_EXT
#undef GLX_NON_CONFORMANT_CONFIG
#undef GLX_NON_CONFORMANT_VISUAL_EXT
#undef GLX_NO_RESET_NOTIFICATION_ARB
#undef GLX_NUM_VIDEO_CAPTURE_SLOTS_NV
#undef GLX_NUM_VIDEO_SLOTS_NV
#undef GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX
#undef GLX_OPTIMAL_PBUFFER_WIDTH_SGIX
#undef GLX_PBUFFER
#undef GLX_PBUFFER_BIT
#undef GLX_PBUFFER_BIT_SGIX
#undef GLX_PBUFFER_CLOBBER_MASK
#undef GLX_PBUFFER_HEIGHT
#undef GLX_PBUFFER_SGIX
#undef GLX_PBUFFER_WIDTH
#undef GLX_PIPE_RECT_LIMITS_SGIX
#undef GLX_PIPE_RECT_SGIX
#undef GLX_PIXMAP_BIT
#undef GLX_PIXMAP_BIT_SGIX
#undef GLX_PRESERVED_CONTENTS
#undef GLX_PRESERVED_CONTENTS_SGIX
#undef GLX_PSEUDO_COLOR
#undef GLX_PSEUDO_COLOR_EXT
#undef GLX_RENDERER_ACCELERATED_MESA
#undef GLX_RENDERER_DEVICE_ID_MESA
#undef GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA
#undef GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA
#undef GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA
#undef GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA
#undef GLX_RENDERER_PREFERRED_PROFILE_MESA
#undef GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA
#undef GLX_RENDERER_VENDOR_ID_MESA
#undef GLX_RENDERER_VERSION_MESA
#undef GLX_RENDERER_VIDEO_MEMORY_MESA
#undef GLX_RENDER_TYPE
#undef GLX_RENDER_TYPE_SGIX
#undef GLX_RGBA_BIT
#undef GLX_RGBA_BIT_SGIX
#undef GLX_RGBA_FLOAT_BIT_ARB
#undef GLX_RGBA_FLOAT_TYPE_ARB
#undef GLX_RGBA_TYPE
#undef GLX_RGBA_TYPE_SGIX
#undef GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT
#undef GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT
#undef GLX_SAMPLES
#undef GLX_SAMPLES_3DFX
#undef GLX_SAMPLES_ARB
#undef GLX_SAMPLES_SGIS
#undef GLX_SAMPLE_BUFFERS
#undef GLX_SAMPLE_BUFFERS_3DFX
#undef GLX_SAMPLE_BUFFERS_ARB
#undef GLX_SAMPLE_BUFFERS_BIT_SGIX
#undef GLX_SAMPLE_BUFFERS_SGIS
#undef GLX_SAVED
#undef GLX_SAVED_SGIX
#undef GLX_SCREEN
#undef GLX_SCREEN_EXT
#undef GLX_SHARE_CONTEXT_EXT
#undef GLX_SLOW_CONFIG
#undef GLX_SLOW_VISUAL_EXT
#undef GLX_STATIC_COLOR
#undef GLX_STATIC_COLOR_EXT
#undef GLX_STATIC_GRAY
#undef GLX_STATIC_GRAY_EXT
#undef GLX_STENCIL_BUFFER_BIT
#undef GLX_STENCIL_BUFFER_BIT_SGIX
#undef GLX_STEREO_NOTIFY_EXT
#undef GLX_STEREO_NOTIFY_MASK_EXT
#undef GLX_STEREO_TREE_EXT
#undef GLX_SWAP_COPY_OML
#undef GLX_SWAP_EXCHANGE_OML
#undef GLX_SWAP_INTERVAL_EXT
#undef GLX_SWAP_METHOD_OML
#undef GLX_SWAP_UNDEFINED_OML
#undef GLX_SYNC_FRAME_SGIX
#undef GLX_SYNC_SWAP_SGIX
#undef GLX_TEXTURE_1D_BIT_EXT
#undef GLX_TEXTURE_1D_EXT
#undef GLX_TEXTURE_2D_BIT_EXT
#undef GLX_TEXTURE_2D_EXT
#undef GLX_TEXTURE_FORMAT_EXT
#undef GLX_TEXTURE_FORMAT_NONE_EXT
#undef GLX_TEXTURE_FORMAT_RGBA_EXT
#undef GLX_TEXTURE_FORMAT_RGB_EXT
#undef GLX_TEXTURE_RECTANGLE_BIT_EXT
#undef GLX_TEXTURE_RECTANGLE_EXT
#undef GLX_TEXTURE_TARGET_EXT
#undef GLX_TRANSPARENT_ALPHA_VALUE
#undef GLX_TRANSPARENT_ALPHA_VALUE_EXT
#undef GLX_TRANSPARENT_BLUE_VALUE
#undef GLX_TRANSPARENT_BLUE_VALUE_EXT
#undef GLX_TRANSPARENT_GREEN_VALUE
#undef GLX_TRANSPARENT_GREEN_VALUE_EXT
#undef GLX_TRANSPARENT_INDEX
#undef GLX_TRANSPARENT_INDEX_EXT
#undef GLX_TRANSPARENT_INDEX_VALUE
#undef GLX_TRANSPARENT_INDEX_VALUE_EXT
#undef GLX_TRANSPARENT_RED_VALUE
#undef GLX_TRANSPARENT_RED_VALUE_EXT
#undef GLX_TRANSPARENT_RGB
#undef GLX_TRANSPARENT_RGB_EXT
#undef GLX_TRANSPARENT_TYPE
#undef GLX_TRANSPARENT_TYPE_EXT
#undef GLX_TRUE_COLOR
#undef GLX_TRUE_COLOR_EXT
#undef GLX_UNIQUE_ID_NV
#undef GLX_VENDOR_NAMES_EXT
#undef GLX_VERSION_1_3
#undef GLX_VERSION_1_4
#undef GLX_VIDEO_OUT_ALPHA_NV
#undef GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV
#undef GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV
#undef GLX_VIDEO_OUT_COLOR_NV
#undef GLX_VIDEO_OUT_DEPTH_NV
#undef GLX_VIDEO_OUT_FIELD_1_NV
#undef GLX_VIDEO_OUT_FIELD_2_NV
#undef GLX_VIDEO_OUT_FRAME_NV
#undef GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV
#undef GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV
#undef GLX_VISUAL_CAVEAT_EXT
#undef GLX_VISUAL_ID
#undef GLX_VISUAL_ID_EXT
#undef GLX_VISUAL_SELECT_GROUP_SGIX
#undef GLX_WIDTH
#undef GLX_WIDTH_SGIX
#undef GLX_WINDOW
#undef GLX_WINDOW_BIT
#undef GLX_WINDOW_BIT_SGIX
#undef GLX_WINDOW_SGIX
#undef GLX_X_RENDERABLE
#undef GLX_X_RENDERABLE_SGIX
#undef GLX_X_VISUAL_TYPE
#undef GLX_X_VISUAL_TYPE_EXT
#undef GLX_Y_INVERTED_EXT
#undef GL_1PASS_EXT
#undef GL_1PASS_SGIS
#undef GL_2PASS_0_EXT
#undef GL_2PASS_0_SGIS
#undef GL_2PASS_1_EXT
#undef GL_2PASS_1_SGIS
#undef GL_2X_BIT_ATI
#undef GL_422_AVERAGE_EXT
#undef GL_422_EXT
#undef GL_422_REV_AVERAGE_EXT
#undef GL_422_REV_EXT
#undef GL_4PASS_0_EXT
#undef GL_4PASS_0_SGIS
#undef GL_4PASS_1_EXT
#undef GL_4PASS_1_SGIS
#undef GL_4PASS_2_EXT
#undef GL_4PASS_2_SGIS
#undef GL_4PASS_3_EXT
#undef GL_4PASS_3_SGIS
#undef GL_4X_BIT_ATI
#undef GL_8X_BIT_ATI
#undef GL_ABGR_EXT
#undef GL_ACCUM_ADJACENT_PAIRS_NV
#undef GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#undef GL_ACTIVE_ATTRIBUTES
#undef GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#undef GL_ACTIVE_PROGRAM
#undef GL_ACTIVE_PROGRAM_EXT
#undef GL_ACTIVE_RESOURCES
#undef GL_ACTIVE_STENCIL_FACE_EXT
#undef GL_ACTIVE_SUBROUTINES
#undef GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#undef GL_ACTIVE_SUBROUTINE_UNIFORMS
#undef GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#undef GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#undef GL_ACTIVE_TEXTURE
#undef GL_ACTIVE_TEXTURE_ARB
#undef GL_ACTIVE_UNIFORMS
#undef GL_ACTIVE_UNIFORM_BLOCKS
#undef GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#undef GL_ACTIVE_UNIFORM_MAX_LENGTH
#undef GL_ACTIVE_VARIABLES
#undef GL_ACTIVE_VARYINGS_NV
#undef GL_ACTIVE_VARYING_MAX_LENGTH_NV
#undef GL_ACTIVE_VERTEX_UNITS_ARB
#undef GL_ADD_ATI
#undef GL_ADD_SIGNED
#undef GL_ADD_SIGNED_ARB
#undef GL_ADD_SIGNED_EXT
#undef GL_ADJACENT_PAIRS_NV
#undef GL_AFFINE_2D_NV
#undef GL_AFFINE_3D_NV
#undef GL_ALIASED_LINE_WIDTH_RANGE
#undef GL_ALIASED_POINT_SIZE_RANGE
#undef GL_ALLOW_DRAW_FRG_HINT_PGI
#undef GL_ALLOW_DRAW_MEM_HINT_PGI
#undef GL_ALLOW_DRAW_OBJ_HINT_PGI
#undef GL_ALLOW_DRAW_WIN_HINT_PGI
#undef GL_ALL_BARRIER_BITS
#undef GL_ALL_BARRIER_BITS_EXT
#undef GL_ALL_COMPLETED_NV
#undef GL_ALL_PIXELS_AMD
#undef GL_ALL_SHADER_BITS
#undef GL_ALL_STATIC_DATA_IBM
#undef GL_ALPHA12_EXT
#undef GL_ALPHA16F_ARB
#undef GL_ALPHA16I_EXT
#undef GL_ALPHA16UI_EXT
#undef GL_ALPHA16_EXT
#undef GL_ALPHA16_SNORM
#undef GL_ALPHA32F_ARB
#undef GL_ALPHA32I_EXT
#undef GL_ALPHA32UI_EXT
#undef GL_ALPHA4_EXT
#undef GL_ALPHA8I_EXT
#undef GL_ALPHA8UI_EXT
#undef GL_ALPHA8_EXT
#undef GL_ALPHA8_SNORM
#undef GL_ALPHA_FLOAT16_APPLE
#undef GL_ALPHA_FLOAT16_ATI
#undef GL_ALPHA_FLOAT32_APPLE
#undef GL_ALPHA_FLOAT32_ATI
#undef GL_ALPHA_INTEGER
#undef GL_ALPHA_INTEGER_EXT
#undef GL_ALPHA_MAX_CLAMP_INGR
#undef GL_ALPHA_MAX_SGIX
#undef GL_ALPHA_MIN_CLAMP_INGR
#undef GL_ALPHA_MIN_SGIX
#undef GL_ALPHA_REF_COMMAND_NV
#undef GL_ALPHA_SNORM
#undef GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV
#undef GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV
#undef GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV
#undef GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV
#undef GL_ALREADY_SIGNALED
#undef GL_ALWAYS_FAST_HINT_PGI
#undef GL_ALWAYS_SOFT_HINT_PGI
#undef GL_ANY_SAMPLES_PASSED
#undef GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#undef GL_ARC_TO_NV
#undef GL_ARRAY_BUFFER
#undef GL_ARRAY_BUFFER_ARB
#undef GL_ARRAY_BUFFER_BINDING
#undef GL_ARRAY_BUFFER_BINDING_ARB
#undef GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
#undef GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
#undef GL_ARRAY_OBJECT_BUFFER_ATI
#undef GL_ARRAY_OBJECT_OFFSET_ATI
#undef GL_ARRAY_SIZE
#undef GL_ARRAY_STRIDE
#undef GL_ASYNC_DRAW_PIXELS_SGIX
#undef GL_ASYNC_HISTOGRAM_SGIX
#undef GL_ASYNC_MARKER_SGIX
#undef GL_ASYNC_READ_PIXELS_SGIX
#undef GL_ASYNC_TEX_IMAGE_SGIX
#undef GL_ATOMIC_COUNTER_BARRIER_BIT
#undef GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
#undef GL_ATOMIC_COUNTER_BUFFER
#undef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#undef GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#undef GL_ATOMIC_COUNTER_BUFFER_BINDING
#undef GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#undef GL_ATOMIC_COUNTER_BUFFER_INDEX
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#undef GL_ATOMIC_COUNTER_BUFFER_SIZE
#undef GL_ATOMIC_COUNTER_BUFFER_START
#undef GL_ATTACHED_SHADERS
#undef GL_ATTENUATION_EXT
#undef GL_ATTRIBUTE_ADDRESS_COMMAND_NV
#undef GL_ATTRIB_ARRAY_POINTER_NV
#undef GL_ATTRIB_ARRAY_SIZE_NV
#undef GL_ATTRIB_ARRAY_STRIDE_NV
#undef GL_ATTRIB_ARRAY_TYPE_NV
#undef GL_AUTO_GENERATE_MIPMAP
#undef GL_AUX_DEPTH_STENCIL_APPLE
#undef GL_AVERAGE_EXT
#undef GL_BACK_NORMALS_HINT_PGI
#undef GL_BACK_PRIMARY_COLOR_NV
#undef GL_BACK_SECONDARY_COLOR_NV
#undef GL_BEVEL_NV
#undef GL_BGR
#undef GL_BGRA
#undef GL_BGRA_EXT
#undef GL_BGRA_INTEGER
#undef GL_BGRA_INTEGER_EXT
#undef GL_BGR_EXT
#undef GL_BGR_INTEGER
#undef GL_BGR_INTEGER_EXT
#undef GL_BIAS_BIT_ATI
#undef GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
#undef GL_BINORMAL_ARRAY_EXT
#undef GL_BINORMAL_ARRAY_POINTER_EXT
#undef GL_BINORMAL_ARRAY_STRIDE_EXT
#undef GL_BINORMAL_ARRAY_TYPE_EXT
#undef GL_BLEND_ADVANCED_COHERENT_KHR
#undef GL_BLEND_ADVANCED_COHERENT_NV
#undef GL_BLEND_COLOR
#undef GL_BLEND_COLOR_COMMAND_NV
#undef GL_BLEND_COLOR_EXT
#undef GL_BLEND_DST_ALPHA
#undef GL_BLEND_DST_ALPHA_EXT
#undef GL_BLEND_DST_RGB
#undef GL_BLEND_DST_RGB_EXT
#undef GL_BLEND_EQUATION
#undef GL_BLEND_EQUATION_ALPHA
#undef GL_BLEND_EQUATION_ALPHA_EXT
#undef GL_BLEND_EQUATION_EXT
#undef GL_BLEND_EQUATION_RGB
#undef GL_BLEND_EQUATION_RGB_EXT
#undef GL_BLEND_OVERLAP_NV
#undef GL_BLEND_PREMULTIPLIED_SRC_NV
#undef GL_BLEND_SRC_ALPHA
#undef GL_BLEND_SRC_ALPHA_EXT
#undef GL_BLEND_SRC_RGB
#undef GL_BLEND_SRC_RGB_EXT
#undef GL_BLOCK_INDEX
#undef GL_BLUE_BIT_ATI
#undef GL_BLUE_INTEGER
#undef GL_BLUE_INTEGER_EXT
#undef GL_BLUE_MAX_CLAMP_INGR
#undef GL_BLUE_MIN_CLAMP_INGR
#undef GL_BLUE_NV
#undef GL_BOLD_BIT_NV
#undef GL_BOOL
#undef GL_BOOL_ARB
#undef GL_BOOL_VEC2
#undef GL_BOOL_VEC2_ARB
#undef GL_BOOL_VEC3
#undef GL_BOOL_VEC3_ARB
#undef GL_BOOL_VEC4
#undef GL_BOOL_VEC4_ARB
#undef GL_BOUNDING_BOX_NV
#undef GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#undef GL_BUFFER
#undef GL_BUFFER_ACCESS
#undef GL_BUFFER_ACCESS_ARB
#undef GL_BUFFER_ACCESS_FLAGS
#undef GL_BUFFER_BINDING
#undef GL_BUFFER_DATA_SIZE
#undef GL_BUFFER_FLUSHING_UNMAP_APPLE
#undef GL_BUFFER_GPU_ADDRESS_NV
#undef GL_BUFFER_IMMUTABLE_STORAGE
#undef GL_BUFFER_MAPPED
#undef GL_BUFFER_MAPPED_ARB
#undef GL_BUFFER_MAP_LENGTH
#undef GL_BUFFER_MAP_OFFSET
#undef GL_BUFFER_MAP_POINTER
#undef GL_BUFFER_MAP_POINTER_ARB
#undef GL_BUFFER_OBJECT_APPLE
#undef GL_BUFFER_OBJECT_EXT
#undef GL_BUFFER_SERIALIZED_MODIFY_APPLE
#undef GL_BUFFER_SIZE
#undef GL_BUFFER_SIZE_ARB
#undef GL_BUFFER_STORAGE_FLAGS
#undef GL_BUFFER_UPDATE_BARRIER_BIT
#undef GL_BUFFER_UPDATE_BARRIER_BIT_EXT
#undef GL_BUFFER_USAGE
#undef GL_BUFFER_USAGE_ARB
#undef GL_BUFFER_VARIABLE
#undef GL_BUMP_ENVMAP_ATI
#undef GL_BUMP_NUM_TEX_UNITS_ATI
#undef GL_BUMP_ROT_MATRIX_ATI
#undef GL_BUMP_ROT_MATRIX_SIZE_ATI
#undef GL_BUMP_TARGET_ATI
#undef GL_BUMP_TEX_UNITS_ATI
#undef GL_CAVEAT_SUPPORT
#undef GL_CIRCULAR_CCW_ARC_TO_NV
#undef GL_CIRCULAR_CW_ARC_TO_NV
#undef GL_CIRCULAR_TANGENT_ARC_TO_NV
#undef GL_CLAMP_FRAGMENT_COLOR
#undef GL_CLAMP_FRAGMENT_COLOR_ARB
#undef GL_CLAMP_READ_COLOR
#undef GL_CLAMP_READ_COLOR_ARB
#undef GL_CLAMP_TO_BORDER
#undef GL_CLAMP_TO_BORDER_ARB
#undef GL_CLAMP_TO_BORDER_SGIS
#undef GL_CLAMP_TO_EDGE
#undef GL_CLAMP_TO_EDGE_SGIS
#undef GL_CLAMP_VERTEX_COLOR
#undef GL_CLAMP_VERTEX_COLOR_ARB
#undef GL_CLEAR_BUFFER
#undef GL_CLEAR_TEXTURE
#undef GL_CLIENT_ACTIVE_TEXTURE
#undef GL_CLIENT_ACTIVE_TEXTURE_ARB
#undef GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
#undef GL_CLIENT_STORAGE_BIT
#undef GL_CLIPPING_INPUT_PRIMITIVES
#undef GL_CLIPPING_INPUT_PRIMITIVES_ARB
#undef GL_CLIPPING_OUTPUT_PRIMITIVES
#undef GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
#undef GL_CLIP_DEPTH_MODE
#undef GL_CLIP_DISTANCE0
#undef GL_CLIP_DISTANCE1
#undef GL_CLIP_DISTANCE2
#undef GL_CLIP_DISTANCE3
#undef GL_CLIP_DISTANCE4
#undef GL_CLIP_DISTANCE5
#undef GL_CLIP_DISTANCE_NV
#undef GL_CLIP_FAR_HINT_PGI
#undef GL_CLIP_NEAR_HINT_PGI
#undef GL_CLIP_ORIGIN
#undef GL_CLIP_VOLUME_CLIPPING_HINT_EXT
#undef GL_CLOSE_PATH_NV
#undef GL_CMYKA_EXT
#undef GL_CMYK_EXT
#undef GL_CND0_ATI
#undef GL_CND_ATI
#undef GL_COLOR3_BIT_PGI
#undef GL_COLOR4_BIT_PGI
#undef GL_COLORBURN_KHR
#undef GL_COLORBURN_NV
#undef GL_COLORDODGE_KHR
#undef GL_COLORDODGE_NV
#undef GL_COLOR_ALPHA_PAIRING_ATI
#undef GL_COLOR_ARRAY_ADDRESS_NV
#undef GL_COLOR_ARRAY_BUFFER_BINDING
#undef GL_COLOR_ARRAY_BUFFER_BINDING_ARB
#undef GL_COLOR_ARRAY_COUNT_EXT
#undef GL_COLOR_ARRAY_EXT
#undef GL_COLOR_ARRAY_LENGTH_NV
#undef GL_COLOR_ARRAY_LIST_IBM
#undef GL_COLOR_ARRAY_LIST_STRIDE_IBM
#undef GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
#undef GL_COLOR_ARRAY_POINTER_EXT
#undef GL_COLOR_ARRAY_SIZE_EXT
#undef GL_COLOR_ARRAY_STRIDE_EXT
#undef GL_COLOR_ARRAY_TYPE_EXT
#undef GL_COLOR_ATTACHMENT0
#undef GL_COLOR_ATTACHMENT0_EXT
#undef GL_COLOR_ATTACHMENT1
#undef GL_COLOR_ATTACHMENT10
#undef GL_COLOR_ATTACHMENT10_EXT
#undef GL_COLOR_ATTACHMENT11
#undef GL_COLOR_ATTACHMENT11_EXT
#undef GL_COLOR_ATTACHMENT12
#undef GL_COLOR_ATTACHMENT12_EXT
#undef GL_COLOR_ATTACHMENT13
#undef GL_COLOR_ATTACHMENT13_EXT
#undef GL_COLOR_ATTACHMENT14
#undef GL_COLOR_ATTACHMENT14_EXT
#undef GL_COLOR_ATTACHMENT15
#undef GL_COLOR_ATTACHMENT15_EXT
#undef GL_COLOR_ATTACHMENT1_EXT
#undef GL_COLOR_ATTACHMENT2
#undef GL_COLOR_ATTACHMENT2_EXT
#undef GL_COLOR_ATTACHMENT3
#undef GL_COLOR_ATTACHMENT3_EXT
#undef GL_COLOR_ATTACHMENT4
#undef GL_COLOR_ATTACHMENT4_EXT
#undef GL_COLOR_ATTACHMENT5
#undef GL_COLOR_ATTACHMENT5_EXT
#undef GL_COLOR_ATTACHMENT6
#undef GL_COLOR_ATTACHMENT6_EXT
#undef GL_COLOR_ATTACHMENT7
#undef GL_COLOR_ATTACHMENT7_EXT
#undef GL_COLOR_ATTACHMENT8
#undef GL_COLOR_ATTACHMENT8_EXT
#undef GL_COLOR_ATTACHMENT9
#undef GL_COLOR_ATTACHMENT9_EXT
#undef GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
#undef GL_COLOR_COMPONENTS
#undef GL_COLOR_ENCODING
#undef GL_COLOR_FLOAT_APPLE
#undef GL_COLOR_INDEX12_EXT
#undef GL_COLOR_INDEX16_EXT
#undef GL_COLOR_INDEX1_EXT
#undef GL_COLOR_INDEX2_EXT
#undef GL_COLOR_INDEX4_EXT
#undef GL_COLOR_INDEX8_EXT
#undef GL_COLOR_MATRIX
#undef GL_COLOR_MATRIX_SGI
#undef GL_COLOR_MATRIX_STACK_DEPTH
#undef GL_COLOR_MATRIX_STACK_DEPTH_SGI
#undef GL_COLOR_RENDERABLE
#undef GL_COLOR_SAMPLES_NV
#undef GL_COLOR_SUM
#undef GL_COLOR_SUM_ARB
#undef GL_COLOR_SUM_CLAMP_NV
#undef GL_COLOR_SUM_EXT
#undef GL_COLOR_TABLE
#undef GL_COLOR_TABLE_ALPHA_SIZE
#undef GL_COLOR_TABLE_ALPHA_SIZE_SGI
#undef GL_COLOR_TABLE_BIAS
#undef GL_COLOR_TABLE_BIAS_SGI
#undef GL_COLOR_TABLE_BLUE_SIZE
#undef GL_COLOR_TABLE_BLUE_SIZE_SGI
#undef GL_COLOR_TABLE_FORMAT
#undef GL_COLOR_TABLE_FORMAT_SGI
#undef GL_COLOR_TABLE_GREEN_SIZE
#undef GL_COLOR_TABLE_GREEN_SIZE_SGI
#undef GL_COLOR_TABLE_INTENSITY_SIZE
#undef GL_COLOR_TABLE_INTENSITY_SIZE_SGI
#undef GL_COLOR_TABLE_LUMINANCE_SIZE
#undef GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
#undef GL_COLOR_TABLE_RED_SIZE
#undef GL_COLOR_TABLE_RED_SIZE_SGI
#undef GL_COLOR_TABLE_SCALE
#undef GL_COLOR_TABLE_SCALE_SGI
#undef GL_COLOR_TABLE_SGI
#undef GL_COLOR_TABLE_WIDTH
#undef GL_COLOR_TABLE_WIDTH_SGI
#undef GL_COMBINE
#undef GL_COMBINE4_NV
#undef GL_COMBINER0_NV
#undef GL_COMBINER1_NV
#undef GL_COMBINER2_NV
#undef GL_COMBINER3_NV
#undef GL_COMBINER4_NV
#undef GL_COMBINER5_NV
#undef GL_COMBINER6_NV
#undef GL_COMBINER7_NV
#undef GL_COMBINER_AB_DOT_PRODUCT_NV
#undef GL_COMBINER_AB_OUTPUT_NV
#undef GL_COMBINER_BIAS_NV
#undef GL_COMBINER_CD_DOT_PRODUCT_NV
#undef GL_COMBINER_CD_OUTPUT_NV
#undef GL_COMBINER_COMPONENT_USAGE_NV
#undef GL_COMBINER_INPUT_NV
#undef GL_COMBINER_MAPPING_NV
#undef GL_COMBINER_MUX_SUM_NV
#undef GL_COMBINER_SCALE_NV
#undef GL_COMBINER_SUM_OUTPUT_NV
#undef GL_COMBINE_ALPHA
#undef GL_COMBINE_ALPHA_ARB
#undef GL_COMBINE_ALPHA_EXT
#undef GL_COMBINE_ARB
#undef GL_COMBINE_EXT
#undef GL_COMBINE_RGB
#undef GL_COMBINE_RGB_ARB
#undef GL_COMBINE_RGB_EXT
#undef GL_COMMAND_BARRIER_BIT
#undef GL_COMMAND_BARRIER_BIT_EXT
#undef GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
#undef GL_COMPARE_REF_TO_TEXTURE
#undef GL_COMPARE_R_TO_TEXTURE
#undef GL_COMPARE_R_TO_TEXTURE_ARB
#undef GL_COMPATIBLE_SUBROUTINES
#undef GL_COMPILE_STATUS
#undef GL_COMPLETION_STATUS_ARB
#undef GL_COMPLETION_STATUS_KHR
#undef GL_COMPRESSED_ALPHA
#undef GL_COMPRESSED_ALPHA_ARB
#undef GL_COMPRESSED_INTENSITY
#undef GL_COMPRESSED_INTENSITY_ARB
#undef GL_COMPRESSED_LUMINANCE
#undef GL_COMPRESSED_LUMINANCE_ALPHA
#undef GL_COMPRESSED_LUMINANCE_ALPHA_ARB
#undef GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
#undef GL_COMPRESSED_LUMINANCE_ARB
#undef GL_COMPRESSED_LUMINANCE_LATC1_EXT
#undef GL_COMPRESSED_R11_EAC
#undef GL_COMPRESSED_RED
#undef GL_COMPRESSED_RED_GREEN_RGTC2_EXT
#undef GL_COMPRESSED_RED_RGTC1
#undef GL_COMPRESSED_RED_RGTC1_EXT
#undef GL_COMPRESSED_RG
#undef GL_COMPRESSED_RG11_EAC
#undef GL_COMPRESSED_RGB
#undef GL_COMPRESSED_RGB8_ETC2
#undef GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#undef GL_COMPRESSED_RGBA
#undef GL_COMPRESSED_RGBA8_ETC2_EAC
#undef GL_COMPRESSED_RGBA_ARB
#undef GL_COMPRESSED_RGBA_BPTC_UNORM
#undef GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
#undef GL_COMPRESSED_RGBA_FXT1_3DFX
#undef GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
#undef GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
#undef GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
#undef GL_COMPRESSED_RGB_ARB
#undef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
#undef GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
#undef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
#undef GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
#undef GL_COMPRESSED_RGB_FXT1_3DFX
#undef GL_COMPRESSED_RGB_S3TC_DXT1_EXT
#undef GL_COMPRESSED_RG_RGTC2
#undef GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
#undef GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
#undef GL_COMPRESSED_SIGNED_R11_EAC
#undef GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
#undef GL_COMPRESSED_SIGNED_RED_RGTC1
#undef GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
#undef GL_COMPRESSED_SIGNED_RG11_EAC
#undef GL_COMPRESSED_SIGNED_RG_RGTC2
#undef GL_COMPRESSED_SLUMINANCE
#undef GL_COMPRESSED_SLUMINANCE_ALPHA
#undef GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
#undef GL_COMPRESSED_SLUMINANCE_EXT
#undef GL_COMPRESSED_SRGB
#undef GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#undef GL_COMPRESSED_SRGB8_ETC2
#undef GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#undef GL_COMPRESSED_SRGB_ALPHA
#undef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
#undef GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
#undef GL_COMPRESSED_SRGB_ALPHA_EXT
#undef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
#undef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
#undef GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
#undef GL_COMPRESSED_SRGB_EXT
#undef GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
#undef GL_COMPRESSED_TEXTURE_FORMATS
#undef GL_COMPRESSED_TEXTURE_FORMATS_ARB
#undef GL_COMPUTE_PROGRAM_NV
#undef GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_COMPUTE_SHADER
#undef GL_COMPUTE_SHADER_BIT
#undef GL_COMPUTE_SHADER_INVOCATIONS
#undef GL_COMPUTE_SHADER_INVOCATIONS_ARB
#undef GL_COMPUTE_SUBROUTINE
#undef GL_COMPUTE_SUBROUTINE_UNIFORM
#undef GL_COMPUTE_TEXTURE
#undef GL_COMPUTE_WORK_GROUP_SIZE
#undef GL_COMP_BIT_ATI
#undef GL_CONDITION_SATISFIED
#undef GL_CONFORMANT_NV
#undef GL_CONIC_CURVE_TO_NV
#undef GL_CONJOINT_NV
#undef GL_CONSERVATIVE_RASTERIZATION_INTEL
#undef GL_CONSERVATIVE_RASTERIZATION_NV
#undef GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
#undef GL_CONSERVATIVE_RASTER_DILATE_NV
#undef GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
#undef GL_CONSERVATIVE_RASTER_MODE_NV
#undef GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
#undef GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
#undef GL_CONSERVE_MEMORY_HINT_PGI
#undef GL_CONSTANT
#undef GL_CONSTANT_ALPHA
#undef GL_CONSTANT_ALPHA_EXT
#undef GL_CONSTANT_ARB
#undef GL_CONSTANT_BORDER
#undef GL_CONSTANT_COLOR
#undef GL_CONSTANT_COLOR0_NV
#undef GL_CONSTANT_COLOR1_NV
#undef GL_CONSTANT_COLOR_EXT
#undef GL_CONSTANT_EXT
#undef GL_CONST_EYE_NV
#undef GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#undef GL_CONTEXT_CORE_PROFILE_BIT
#undef GL_CONTEXT_FLAGS
#undef GL_CONTEXT_FLAG_DEBUG_BIT
#undef GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#undef GL_CONTEXT_FLAG_NO_ERROR_BIT
#undef GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
#undef GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
#undef GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
#undef GL_CONTEXT_LOST
#undef GL_CONTEXT_PROFILE_MASK
#undef GL_CONTEXT_ROBUST_ACCESS
#undef GL_CONTINUOUS_AMD
#undef GL_CONTRAST_NV
#undef GL_CONVEX_HULL_NV
#undef GL_CONVOLUTION_1D
#undef GL_CONVOLUTION_1D_EXT
#undef GL_CONVOLUTION_2D
#undef GL_CONVOLUTION_2D_EXT
#undef GL_CONVOLUTION_BORDER_COLOR
#undef GL_CONVOLUTION_BORDER_MODE
#undef GL_CONVOLUTION_BORDER_MODE_EXT
#undef GL_CONVOLUTION_FILTER_BIAS
#undef GL_CONVOLUTION_FILTER_BIAS_EXT
#undef GL_CONVOLUTION_FILTER_SCALE
#undef GL_CONVOLUTION_FILTER_SCALE_EXT
#undef GL_CONVOLUTION_FORMAT
#undef GL_CONVOLUTION_FORMAT_EXT
#undef GL_CONVOLUTION_HEIGHT
#undef GL_CONVOLUTION_HEIGHT_EXT
#undef GL_CONVOLUTION_HINT_SGIX
#undef GL_CONVOLUTION_WIDTH
#undef GL_CONVOLUTION_WIDTH_EXT
#undef GL_CON_0_ATI
#undef GL_CON_1_ATI
#undef GL_CON_2_ATI
#undef GL_CON_3_ATI
#undef GL_CON_4_ATI
#undef GL_CON_5_ATI
#undef GL_CON_6_ATI
#undef GL_CON_7_ATI
#undef GL_COORD_REPLACE
#undef GL_COORD_REPLACE_ARB
#undef GL_COORD_REPLACE_NV
#undef GL_COPY_READ_BUFFER
#undef GL_COPY_READ_BUFFER_BINDING
#undef GL_COPY_WRITE_BUFFER
#undef GL_COPY_WRITE_BUFFER_BINDING
#undef GL_COUNTER_RANGE_AMD
#undef GL_COUNTER_TYPE_AMD
#undef GL_COUNT_DOWN_NV
#undef GL_COUNT_UP_NV
#undef GL_COVERAGE_MODULATION_NV
#undef GL_COVERAGE_MODULATION_TABLE_NV
#undef GL_COVERAGE_MODULATION_TABLE_SIZE_NV
#undef GL_CUBIC_CURVE_TO_NV
#undef GL_CUBIC_EXT
#undef GL_CULL_FRAGMENT_NV
#undef GL_CULL_MODES_NV
#undef GL_CULL_VERTEX_EXT
#undef GL_CULL_VERTEX_EYE_POSITION_EXT
#undef GL_CULL_VERTEX_IBM
#undef GL_CULL_VERTEX_OBJECT_POSITION_EXT
#undef GL_CURRENT_ATTRIB_NV
#undef GL_CURRENT_BINORMAL_EXT
#undef GL_CURRENT_FOG_COORD
#undef GL_CURRENT_FOG_COORDINATE
#undef GL_CURRENT_FOG_COORDINATE_EXT
#undef GL_CURRENT_MATRIX_ARB
#undef GL_CURRENT_MATRIX_INDEX_ARB
#undef GL_CURRENT_MATRIX_NV
#undef GL_CURRENT_MATRIX_STACK_DEPTH_ARB
#undef GL_CURRENT_MATRIX_STACK_DEPTH_NV
#undef GL_CURRENT_OCCLUSION_QUERY_ID_NV
#undef GL_CURRENT_PALETTE_MATRIX_ARB
#undef GL_CURRENT_PROGRAM
#undef GL_CURRENT_QUERY
#undef GL_CURRENT_QUERY_ARB
#undef GL_CURRENT_RASTER_SECONDARY_COLOR
#undef GL_CURRENT_SECONDARY_COLOR
#undef GL_CURRENT_SECONDARY_COLOR_EXT
#undef GL_CURRENT_TANGENT_EXT
#undef GL_CURRENT_TIME_NV
#undef GL_CURRENT_VERTEX_ATTRIB
#undef GL_CURRENT_VERTEX_ATTRIB_ARB
#undef GL_CURRENT_VERTEX_EXT
#undef GL_CURRENT_VERTEX_WEIGHT_EXT
#undef GL_CURRENT_WEIGHT_ARB
#undef GL_D3D12_FENCE_VALUE_EXT
#undef GL_DARKEN_KHR
#undef GL_DARKEN_NV
#undef GL_DATA_BUFFER_AMD
#undef GL_DEBUG_CALLBACK_FUNCTION
#undef GL_DEBUG_CALLBACK_FUNCTION_ARB
#undef GL_DEBUG_CALLBACK_USER_PARAM
#undef GL_DEBUG_CALLBACK_USER_PARAM_ARB
#undef GL_DEBUG_CATEGORY_API_ERROR_AMD
#undef GL_DEBUG_CATEGORY_APPLICATION_AMD
#undef GL_DEBUG_CATEGORY_DEPRECATION_AMD
#undef GL_DEBUG_CATEGORY_OTHER_AMD
#undef GL_DEBUG_CATEGORY_PERFORMANCE_AMD
#undef GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
#undef GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
#undef GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
#undef GL_DEBUG_GROUP_STACK_DEPTH
#undef GL_DEBUG_LOGGED_MESSAGES
#undef GL_DEBUG_LOGGED_MESSAGES_AMD
#undef GL_DEBUG_LOGGED_MESSAGES_ARB
#undef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#undef GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
#undef GL_DEBUG_OUTPUT
#undef GL_DEBUG_OUTPUT_SYNCHRONOUS
#undef GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
#undef GL_DEBUG_SEVERITY_HIGH
#undef GL_DEBUG_SEVERITY_HIGH_AMD
#undef GL_DEBUG_SEVERITY_HIGH_ARB
#undef GL_DEBUG_SEVERITY_LOW
#undef GL_DEBUG_SEVERITY_LOW_AMD
#undef GL_DEBUG_SEVERITY_LOW_ARB
#undef GL_DEBUG_SEVERITY_MEDIUM
#undef GL_DEBUG_SEVERITY_MEDIUM_AMD
#undef GL_DEBUG_SEVERITY_MEDIUM_ARB
#undef GL_DEBUG_SEVERITY_NOTIFICATION
#undef GL_DEBUG_SOURCE_API
#undef GL_DEBUG_SOURCE_API_ARB
#undef GL_DEBUG_SOURCE_APPLICATION
#undef GL_DEBUG_SOURCE_APPLICATION_ARB
#undef GL_DEBUG_SOURCE_OTHER
#undef GL_DEBUG_SOURCE_OTHER_ARB
#undef GL_DEBUG_SOURCE_SHADER_COMPILER
#undef GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
#undef GL_DEBUG_SOURCE_THIRD_PARTY
#undef GL_DEBUG_SOURCE_THIRD_PARTY_ARB
#undef GL_DEBUG_SOURCE_WINDOW_SYSTEM
#undef GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
#undef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#undef GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
#undef GL_DEBUG_TYPE_ERROR
#undef GL_DEBUG_TYPE_ERROR_ARB
#undef GL_DEBUG_TYPE_MARKER
#undef GL_DEBUG_TYPE_OTHER
#undef GL_DEBUG_TYPE_OTHER_ARB
#undef GL_DEBUG_TYPE_PERFORMANCE
#undef GL_DEBUG_TYPE_PERFORMANCE_ARB
#undef GL_DEBUG_TYPE_POP_GROUP
#undef GL_DEBUG_TYPE_PORTABILITY
#undef GL_DEBUG_TYPE_PORTABILITY_ARB
#undef GL_DEBUG_TYPE_PUSH_GROUP
#undef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#undef GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
#undef GL_DECODE_EXT
#undef GL_DECR_WRAP
#undef GL_DECR_WRAP_EXT
#undef GL_DEDICATED_MEMORY_OBJECT_EXT
#undef GL_DELETE_STATUS
#undef GL_DEPENDENT_AR_TEXTURE_2D_NV
#undef GL_DEPENDENT_GB_TEXTURE_2D_NV
#undef GL_DEPENDENT_HILO_TEXTURE_2D_NV
#undef GL_DEPENDENT_RGB_TEXTURE_3D_NV
#undef GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
#undef GL_DEPTH24_STENCIL8
#undef GL_DEPTH24_STENCIL8_EXT
#undef GL_DEPTH32F_STENCIL8
#undef GL_DEPTH32F_STENCIL8_NV
#undef GL_DEPTH_ATTACHMENT
#undef GL_DEPTH_ATTACHMENT_EXT
#undef GL_DEPTH_BOUNDS_EXT
#undef GL_DEPTH_BOUNDS_TEST_EXT
#undef GL_DEPTH_BUFFER_FLOAT_MODE_NV
#undef GL_DEPTH_CLAMP
#undef GL_DEPTH_CLAMP_FAR_AMD
#undef GL_DEPTH_CLAMP_NEAR_AMD
#undef GL_DEPTH_CLAMP_NV
#undef GL_DEPTH_COMPONENT16
#undef GL_DEPTH_COMPONENT16_ARB
#undef GL_DEPTH_COMPONENT16_SGIX
#undef GL_DEPTH_COMPONENT24
#undef GL_DEPTH_COMPONENT24_ARB
#undef GL_DEPTH_COMPONENT24_SGIX
#undef GL_DEPTH_COMPONENT32
#undef GL_DEPTH_COMPONENT32F
#undef GL_DEPTH_COMPONENT32F_NV
#undef GL_DEPTH_COMPONENT32_ARB
#undef GL_DEPTH_COMPONENT32_SGIX
#undef GL_DEPTH_COMPONENTS
#undef GL_DEPTH_RENDERABLE
#undef GL_DEPTH_SAMPLES_NV
#undef GL_DEPTH_STENCIL
#undef GL_DEPTH_STENCIL_ATTACHMENT
#undef GL_DEPTH_STENCIL_EXT
#undef GL_DEPTH_STENCIL_NV
#undef GL_DEPTH_STENCIL_TEXTURE_MODE
#undef GL_DEPTH_STENCIL_TO_BGRA_NV
#undef GL_DEPTH_STENCIL_TO_RGBA_NV
#undef GL_DEPTH_TEXTURE_MODE
#undef GL_DEPTH_TEXTURE_MODE_ARB
#undef GL_DEVICE_LUID_EXT
#undef GL_DEVICE_NODE_MASK_EXT
#undef GL_DEVICE_UUID_EXT
#undef GL_DIFFERENCE_KHR
#undef GL_DIFFERENCE_NV
#undef GL_DISCARD_ATI
#undef GL_DISCARD_NV
#undef GL_DISCRETE_AMD
#undef GL_DISJOINT_NV
#undef GL_DISPATCH_INDIRECT_BUFFER
#undef GL_DISPATCH_INDIRECT_BUFFER_BINDING
#undef GL_DISPLAY_LIST
#undef GL_DISTANCE_ATTENUATION_EXT
#undef GL_DOT2_ADD_ATI
#undef GL_DOT3_ATI
#undef GL_DOT3_RGB
#undef GL_DOT3_RGBA
#undef GL_DOT3_RGBA_ARB
#undef GL_DOT3_RGBA_EXT
#undef GL_DOT3_RGB_ARB
#undef GL_DOT3_RGB_EXT
#undef GL_DOT4_ATI
#undef GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
#undef GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
#undef GL_DOT_PRODUCT_DEPTH_REPLACE_NV
#undef GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
#undef GL_DOT_PRODUCT_NV
#undef GL_DOT_PRODUCT_PASS_THROUGH_NV
#undef GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
#undef GL_DOT_PRODUCT_TEXTURE_1D_NV
#undef GL_DOT_PRODUCT_TEXTURE_2D_NV
#undef GL_DOT_PRODUCT_TEXTURE_3D_NV
#undef GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
#undef GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
#undef GL_DOUBLE_MAT2
#undef GL_DOUBLE_MAT2_EXT
#undef GL_DOUBLE_MAT3
#undef GL_DOUBLE_MAT3_EXT
#undef GL_DOUBLE_MAT4
#undef GL_DOUBLE_MAT4_EXT
#undef GL_DOUBLE_VEC2
#undef GL_DOUBLE_VEC2_EXT
#undef GL_DOUBLE_VEC3
#undef GL_DOUBLE_VEC3_EXT
#undef GL_DOUBLE_VEC4
#undef GL_DOUBLE_VEC4_EXT
#undef GL_DRAW_ARRAYS_COMMAND_NV
#undef GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
#undef GL_DRAW_ARRAYS_STRIP_COMMAND_NV
#undef GL_DRAW_BUFFER0
#undef GL_DRAW_BUFFER0_ARB
#undef GL_DRAW_BUFFER0_ATI
#undef GL_DRAW_BUFFER1
#undef GL_DRAW_BUFFER10
#undef GL_DRAW_BUFFER10_ARB
#undef GL_DRAW_BUFFER10_ATI
#undef GL_DRAW_BUFFER11
#undef GL_DRAW_BUFFER11_ARB
#undef GL_DRAW_BUFFER11_ATI
#undef GL_DRAW_BUFFER12
#undef GL_DRAW_BUFFER12_ARB
#undef GL_DRAW_BUFFER12_ATI
#undef GL_DRAW_BUFFER13
#undef GL_DRAW_BUFFER13_ARB
#undef GL_DRAW_BUFFER13_ATI
#undef GL_DRAW_BUFFER14
#undef GL_DRAW_BUFFER14_ARB
#undef GL_DRAW_BUFFER14_ATI
#undef GL_DRAW_BUFFER15
#undef GL_DRAW_BUFFER15_ARB
#undef GL_DRAW_BUFFER15_ATI
#undef GL_DRAW_BUFFER1_ARB
#undef GL_DRAW_BUFFER1_ATI
#undef GL_DRAW_BUFFER2
#undef GL_DRAW_BUFFER2_ARB
#undef GL_DRAW_BUFFER2_ATI
#undef GL_DRAW_BUFFER3
#undef GL_DRAW_BUFFER3_ARB
#undef GL_DRAW_BUFFER3_ATI
#undef GL_DRAW_BUFFER4
#undef GL_DRAW_BUFFER4_ARB
#undef GL_DRAW_BUFFER4_ATI
#undef GL_DRAW_BUFFER5
#undef GL_DRAW_BUFFER5_ARB
#undef GL_DRAW_BUFFER5_ATI
#undef GL_DRAW_BUFFER6
#undef GL_DRAW_BUFFER6_ARB
#undef GL_DRAW_BUFFER6_ATI
#undef GL_DRAW_BUFFER7
#undef GL_DRAW_BUFFER7_ARB
#undef GL_DRAW_BUFFER7_ATI
#undef GL_DRAW_BUFFER8
#undef GL_DRAW_BUFFER8_ARB
#undef GL_DRAW_BUFFER8_ATI
#undef GL_DRAW_BUFFER9
#undef GL_DRAW_BUFFER9_ARB
#undef GL_DRAW_BUFFER9_ATI
#undef GL_DRAW_ELEMENTS_COMMAND_NV
#undef GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
#undef GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
#undef GL_DRAW_FRAMEBUFFER
#undef GL_DRAW_FRAMEBUFFER_BINDING
#undef GL_DRAW_FRAMEBUFFER_BINDING_EXT
#undef GL_DRAW_FRAMEBUFFER_EXT
#undef GL_DRAW_INDIRECT_ADDRESS_NV
#undef GL_DRAW_INDIRECT_BUFFER
#undef GL_DRAW_INDIRECT_BUFFER_BINDING
#undef GL_DRAW_INDIRECT_LENGTH_NV
#undef GL_DRAW_INDIRECT_UNIFIED_NV
#undef GL_DRAW_PIXELS_APPLE
#undef GL_DRIVER_UUID_EXT
#undef GL_DSDT8_MAG8_INTENSITY8_NV
#undef GL_DSDT8_MAG8_NV
#undef GL_DSDT8_NV
#undef GL_DSDT_MAG_INTENSITY_NV
#undef GL_DSDT_MAG_NV
#undef GL_DSDT_MAG_VIB_NV
#undef GL_DSDT_NV
#undef GL_DST_ATOP_NV
#undef GL_DST_IN_NV
#undef GL_DST_NV
#undef GL_DST_OUT_NV
#undef GL_DST_OVER_NV
#undef GL_DS_BIAS_NV
#undef GL_DS_SCALE_NV
#undef GL_DT_BIAS_NV
#undef GL_DT_SCALE_NV
#undef GL_DU8DV8_ATI
#undef GL_DUDV_ATI
#undef GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#undef GL_DUP_LAST_CUBIC_CURVE_TO_NV
#undef GL_DYNAMIC_ATI
#undef GL_DYNAMIC_COPY
#undef GL_DYNAMIC_COPY_ARB
#undef GL_DYNAMIC_DRAW
#undef GL_DYNAMIC_DRAW_ARB
#undef GL_DYNAMIC_READ
#undef GL_DYNAMIC_READ_ARB
#undef GL_DYNAMIC_STORAGE_BIT
#undef GL_EDGEFLAG_BIT_PGI
#undef GL_EDGE_FLAG_ARRAY_ADDRESS_NV
#undef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
#undef GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
#undef GL_EDGE_FLAG_ARRAY_COUNT_EXT
#undef GL_EDGE_FLAG_ARRAY_EXT
#undef GL_EDGE_FLAG_ARRAY_LENGTH_NV
#undef GL_EDGE_FLAG_ARRAY_LIST_IBM
#undef GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
#undef GL_EDGE_FLAG_ARRAY_POINTER_EXT
#undef GL_EDGE_FLAG_ARRAY_STRIDE_EXT
#undef GL_EFFECTIVE_RASTER_SAMPLES_EXT
#undef GL_EIGHTH_BIT_ATI
#undef GL_ELEMENT_ADDRESS_COMMAND_NV
#undef GL_ELEMENT_ARRAY_ADDRESS_NV
#undef GL_ELEMENT_ARRAY_APPLE
#undef GL_ELEMENT_ARRAY_ATI
#undef GL_ELEMENT_ARRAY_BARRIER_BIT
#undef GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
#undef GL_ELEMENT_ARRAY_BUFFER
#undef GL_ELEMENT_ARRAY_BUFFER_ARB
#undef GL_ELEMENT_ARRAY_BUFFER_BINDING
#undef GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
#undef GL_ELEMENT_ARRAY_LENGTH_NV
#undef GL_ELEMENT_ARRAY_POINTER_APPLE
#undef GL_ELEMENT_ARRAY_POINTER_ATI
#undef GL_ELEMENT_ARRAY_TYPE_APPLE
#undef GL_ELEMENT_ARRAY_TYPE_ATI
#undef GL_ELEMENT_ARRAY_UNIFIED_NV
#undef GL_EMBOSS_CONSTANT_NV
#undef GL_EMBOSS_LIGHT_NV
#undef GL_EMBOSS_MAP_NV
#undef GL_EVAL_2D_NV
#undef GL_EVAL_FRACTIONAL_TESSELLATION_NV
#undef GL_EVAL_TRIANGULAR_2D_NV
#undef GL_EVAL_VERTEX_ATTRIB0_NV
#undef GL_EVAL_VERTEX_ATTRIB10_NV
#undef GL_EVAL_VERTEX_ATTRIB11_NV
#undef GL_EVAL_VERTEX_ATTRIB12_NV
#undef GL_EVAL_VERTEX_ATTRIB13_NV
#undef GL_EVAL_VERTEX_ATTRIB14_NV
#undef GL_EVAL_VERTEX_ATTRIB15_NV
#undef GL_EVAL_VERTEX_ATTRIB1_NV
#undef GL_EVAL_VERTEX_ATTRIB2_NV
#undef GL_EVAL_VERTEX_ATTRIB3_NV
#undef GL_EVAL_VERTEX_ATTRIB4_NV
#undef GL_EVAL_VERTEX_ATTRIB5_NV
#undef GL_EVAL_VERTEX_ATTRIB6_NV
#undef GL_EVAL_VERTEX_ATTRIB7_NV
#undef GL_EVAL_VERTEX_ATTRIB8_NV
#undef GL_EVAL_VERTEX_ATTRIB9_NV
#undef GL_EXCLUSION_KHR
#undef GL_EXCLUSION_NV
#undef GL_EXCLUSIVE_EXT
#undef GL_EXPAND_NEGATE_NV
#undef GL_EXPAND_NORMAL_NV
#undef GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
#undef GL_EYE_DISTANCE_TO_LINE_SGIS
#undef GL_EYE_DISTANCE_TO_POINT_SGIS
#undef GL_EYE_LINE_SGIS
#undef GL_EYE_PLANE_ABSOLUTE_NV
#undef GL_EYE_POINT_SGIS
#undef GL_EYE_RADIAL_NV
#undef GL_E_TIMES_F_NV
#undef GL_FACTOR_MAX_AMD
#undef GL_FACTOR_MIN_AMD
#undef GL_FAILURE_NV
#undef GL_FENCE_APPLE
#undef GL_FENCE_CONDITION_NV
#undef GL_FENCE_STATUS_NV
#undef GL_FIELDS_NV
#undef GL_FIELD_LOWER_NV
#undef GL_FIELD_UPPER_NV
#undef GL_FILE_NAME_NV
#undef GL_FILL_RECTANGLE_NV
#undef GL_FILTER
#undef GL_FIRST_TO_REST_NV
#undef GL_FIRST_VERTEX_CONVENTION
#undef GL_FIRST_VERTEX_CONVENTION_EXT
#undef GL_FIXED
#undef GL_FIXED_ONLY
#undef GL_FIXED_ONLY_ARB
#undef GL_FLOAT16_MAT2_AMD
#undef GL_FLOAT16_MAT3_AMD
#undef GL_FLOAT16_MAT4_AMD
#undef GL_FLOAT16_NV
#undef GL_FLOAT16_VEC2_NV
#undef GL_FLOAT16_VEC3_NV
#undef GL_FLOAT16_VEC4_NV
#undef GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#undef GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
#undef GL_FLOAT_CLEAR_COLOR_VALUE_NV
#undef GL_FLOAT_MAT2
#undef GL_FLOAT_MAT2_ARB
#undef GL_FLOAT_MAT3
#undef GL_FLOAT_MAT3_ARB
#undef GL_FLOAT_MAT4
#undef GL_FLOAT_MAT4_ARB
#undef GL_FLOAT_R16_NV
#undef GL_FLOAT_R32_NV
#undef GL_FLOAT_RG16_NV
#undef GL_FLOAT_RG32_NV
#undef GL_FLOAT_RGB16_NV
#undef GL_FLOAT_RGB32_NV
#undef GL_FLOAT_RGBA16_NV
#undef GL_FLOAT_RGBA32_NV
#undef GL_FLOAT_RGBA_MODE_NV
#undef GL_FLOAT_RGBA_NV
#undef GL_FLOAT_RGB_NV
#undef GL_FLOAT_RG_NV
#undef GL_FLOAT_R_NV
#undef GL_FLOAT_VEC2
#undef GL_FLOAT_VEC2_ARB
#undef GL_FLOAT_VEC3
#undef GL_FLOAT_VEC3_ARB
#undef GL_FLOAT_VEC4
#undef GL_FLOAT_VEC4_ARB
#undef GL_FOG_COORD
#undef GL_FOG_COORDINATE
#undef GL_FOG_COORDINATE_ARRAY
#undef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
#undef GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
#undef GL_FOG_COORDINATE_ARRAY_EXT
#undef GL_FOG_COORDINATE_ARRAY_LIST_IBM
#undef GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
#undef GL_FOG_COORDINATE_ARRAY_POINTER
#undef GL_FOG_COORDINATE_ARRAY_POINTER_EXT
#undef GL_FOG_COORDINATE_ARRAY_STRIDE
#undef GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
#undef GL_FOG_COORDINATE_ARRAY_TYPE
#undef GL_FOG_COORDINATE_ARRAY_TYPE_EXT
#undef GL_FOG_COORDINATE_EXT
#undef GL_FOG_COORDINATE_SOURCE
#undef GL_FOG_COORDINATE_SOURCE_EXT
#undef GL_FOG_COORD_ARRAY
#undef GL_FOG_COORD_ARRAY_ADDRESS_NV
#undef GL_FOG_COORD_ARRAY_BUFFER_BINDING
#undef GL_FOG_COORD_ARRAY_LENGTH_NV
#undef GL_FOG_COORD_ARRAY_POINTER
#undef GL_FOG_COORD_ARRAY_STRIDE
#undef GL_FOG_COORD_ARRAY_TYPE
#undef GL_FOG_COORD_SRC
#undef GL_FOG_DISTANCE_MODE_NV
#undef GL_FOG_OFFSET_SGIX
#undef GL_FOG_OFFSET_VALUE_SGIX
#undef GL_FOG_SPECULAR_TEXTURE_WIN
#undef GL_FONT_ASCENDER_BIT_NV
#undef GL_FONT_DESCENDER_BIT_NV
#undef GL_FONT_GLYPHS_AVAILABLE_NV
#undef GL_FONT_HAS_KERNING_BIT_NV
#undef GL_FONT_HEIGHT_BIT_NV
#undef GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
#undef GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
#undef GL_FONT_NUM_GLYPH_INDICES_BIT_NV
#undef GL_FONT_TARGET_UNAVAILABLE_NV
#undef GL_FONT_UNAVAILABLE_NV
#undef GL_FONT_UNDERLINE_POSITION_BIT_NV
#undef GL_FONT_UNDERLINE_THICKNESS_BIT_NV
#undef GL_FONT_UNINTELLIGIBLE_NV
#undef GL_FONT_UNITS_PER_EM_BIT_NV
#undef GL_FONT_X_MAX_BOUNDS_BIT_NV
#undef GL_FONT_X_MIN_BOUNDS_BIT_NV
#undef GL_FONT_Y_MAX_BOUNDS_BIT_NV
#undef GL_FONT_Y_MIN_BOUNDS_BIT_NV
#undef GL_FORCE_BLUE_TO_ONE_NV
#undef GL_FORMAT_SUBSAMPLE_244_244_OML
#undef GL_FORMAT_SUBSAMPLE_24_24_OML
#undef GL_FRACTIONAL_EVEN
#undef GL_FRACTIONAL_ODD
#undef GL_FRAGMENT_COLOR_EXT
#undef GL_FRAGMENT_COVERAGE_COLOR_NV
#undef GL_FRAGMENT_COVERAGE_TO_COLOR_NV
#undef GL_FRAGMENT_DEPTH
#undef GL_FRAGMENT_DEPTH_EXT
#undef GL_FRAGMENT_INPUT_NV
#undef GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#undef GL_FRAGMENT_MATERIAL_EXT
#undef GL_FRAGMENT_NORMAL_EXT
#undef GL_FRAGMENT_PROGRAM_ARB
#undef GL_FRAGMENT_PROGRAM_BINDING_NV
#undef GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
#undef GL_FRAGMENT_PROGRAM_NV
#undef GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_FRAGMENT_SHADER
#undef GL_FRAGMENT_SHADER_ARB
#undef GL_FRAGMENT_SHADER_ATI
#undef GL_FRAGMENT_SHADER_BIT
#undef GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#undef GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
#undef GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT
#undef GL_FRAGMENT_SHADER_INVOCATIONS
#undef GL_FRAGMENT_SHADER_INVOCATIONS_ARB
#undef GL_FRAGMENT_SUBROUTINE
#undef GL_FRAGMENT_SUBROUTINE_UNIFORM
#undef GL_FRAGMENT_TEXTURE
#undef GL_FRAMEBUFFER
#undef GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#undef GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#undef GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#undef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
#undef GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#undef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#undef GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
#undef GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
#undef GL_FRAMEBUFFER_BARRIER_BIT
#undef GL_FRAMEBUFFER_BARRIER_BIT_EXT
#undef GL_FRAMEBUFFER_BINDING
#undef GL_FRAMEBUFFER_BINDING_EXT
#undef GL_FRAMEBUFFER_BLEND
#undef GL_FRAMEBUFFER_COMPLETE
#undef GL_FRAMEBUFFER_COMPLETE_EXT
#undef GL_FRAMEBUFFER_DEFAULT
#undef GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
#undef GL_FRAMEBUFFER_DEFAULT_HEIGHT
#undef GL_FRAMEBUFFER_DEFAULT_LAYERS
#undef GL_FRAMEBUFFER_DEFAULT_SAMPLES
#undef GL_FRAMEBUFFER_DEFAULT_WIDTH
#undef GL_FRAMEBUFFER_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#undef GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#undef GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
#undef GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#undef GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#undef GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#undef GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
#undef GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR
#undef GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
#undef GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
#undef GL_FRAMEBUFFER_RENDERABLE
#undef GL_FRAMEBUFFER_RENDERABLE_LAYERED
#undef GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
#undef GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
#undef GL_FRAMEBUFFER_SRGB
#undef GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
#undef GL_FRAMEBUFFER_SRGB_EXT
#undef GL_FRAMEBUFFER_UNDEFINED
#undef GL_FRAMEBUFFER_UNSUPPORTED
#undef GL_FRAMEBUFFER_UNSUPPORTED_EXT
#undef GL_FRAME_NV
#undef GL_FRONT_FACE_COMMAND_NV
#undef GL_FULL_RANGE_EXT
#undef GL_FULL_STIPPLE_HINT_PGI
#undef GL_FULL_SUPPORT
#undef GL_FUNC_ADD
#undef GL_FUNC_ADD_EXT
#undef GL_FUNC_REVERSE_SUBTRACT
#undef GL_FUNC_REVERSE_SUBTRACT_EXT
#undef GL_FUNC_SUBTRACT
#undef GL_FUNC_SUBTRACT_EXT
#undef GL_GENERATE_MIPMAP
#undef GL_GENERATE_MIPMAP_HINT
#undef GL_GENERATE_MIPMAP_HINT_SGIS
#undef GL_GENERATE_MIPMAP_SGIS
#undef GL_GENERIC_ATTRIB_NV
#undef GL_GEOMETRY_DEFORMATION_BIT_SGIX
#undef GL_GEOMETRY_INPUT_TYPE
#undef GL_GEOMETRY_INPUT_TYPE_ARB
#undef GL_GEOMETRY_INPUT_TYPE_EXT
#undef GL_GEOMETRY_OUTPUT_TYPE
#undef GL_GEOMETRY_OUTPUT_TYPE_ARB
#undef GL_GEOMETRY_OUTPUT_TYPE_EXT
#undef GL_GEOMETRY_PROGRAM_NV
#undef GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_GEOMETRY_SHADER
#undef GL_GEOMETRY_SHADER_ARB
#undef GL_GEOMETRY_SHADER_BIT
#undef GL_GEOMETRY_SHADER_EXT
#undef GL_GEOMETRY_SHADER_INVOCATIONS
#undef GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED
#undef GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
#undef GL_GEOMETRY_SUBROUTINE
#undef GL_GEOMETRY_SUBROUTINE_UNIFORM
#undef GL_GEOMETRY_TEXTURE
#undef GL_GEOMETRY_VERTICES_OUT
#undef GL_GEOMETRY_VERTICES_OUT_ARB
#undef GL_GEOMETRY_VERTICES_OUT_EXT
#undef GL_GET_TEXTURE_IMAGE_FORMAT
#undef GL_GET_TEXTURE_IMAGE_TYPE
#undef GL_GLOBAL_ALPHA_FACTOR_SUN
#undef GL_GLOBAL_ALPHA_SUN
#undef GL_GLYPH_HAS_KERNING_BIT_NV
#undef GL_GLYPH_HEIGHT_BIT_NV
#undef GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#undef GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#undef GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#undef GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#undef GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#undef GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#undef GL_GLYPH_WIDTH_BIT_NV
#undef GL_GPU_ADDRESS_NV
#undef GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
#undef GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
#undef GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
#undef GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
#undef GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
#undef GL_GREEN_BIT_ATI
#undef GL_GREEN_INTEGER
#undef GL_GREEN_INTEGER_EXT
#undef GL_GREEN_MAX_CLAMP_INGR
#undef GL_GREEN_MIN_CLAMP_INGR
#undef GL_GREEN_NV
#undef GL_GUILTY_CONTEXT_RESET
#undef GL_GUILTY_CONTEXT_RESET_ARB
#undef GL_HALF_APPLE
#undef GL_HALF_BIAS_NEGATE_NV
#undef GL_HALF_BIAS_NORMAL_NV
#undef GL_HALF_BIT_ATI
#undef GL_HALF_FLOAT
#undef GL_HALF_FLOAT_ARB
#undef GL_HALF_FLOAT_NV
#undef GL_HANDLE_TYPE_D3D11_IMAGE_EXT
#undef GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT
#undef GL_HANDLE_TYPE_D3D12_FENCE_EXT
#undef GL_HANDLE_TYPE_D3D12_RESOURCE_EXT
#undef GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT
#undef GL_HANDLE_TYPE_OPAQUE_FD_EXT
#undef GL_HANDLE_TYPE_OPAQUE_WIN32_EXT
#undef GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT
#undef GL_HARDLIGHT_KHR
#undef GL_HARDLIGHT_NV
#undef GL_HARDMIX_NV
#undef GL_HIGH_FLOAT
#undef GL_HIGH_INT
#undef GL_HILO16_NV
#undef GL_HILO8_NV
#undef GL_HILO_NV
#undef GL_HISTOGRAM
#undef GL_HISTOGRAM_ALPHA_SIZE
#undef GL_HISTOGRAM_ALPHA_SIZE_EXT
#undef GL_HISTOGRAM_BLUE_SIZE
#undef GL_HISTOGRAM_BLUE_SIZE_EXT
#undef GL_HISTOGRAM_EXT
#undef GL_HISTOGRAM_FORMAT
#undef GL_HISTOGRAM_FORMAT_EXT
#undef GL_HISTOGRAM_GREEN_SIZE
#undef GL_HISTOGRAM_GREEN_SIZE_EXT
#undef GL_HISTOGRAM_LUMINANCE_SIZE
#undef GL_HISTOGRAM_LUMINANCE_SIZE_EXT
#undef GL_HISTOGRAM_RED_SIZE
#undef GL_HISTOGRAM_RED_SIZE_EXT
#undef GL_HISTOGRAM_SINK
#undef GL_HISTOGRAM_SINK_EXT
#undef GL_HISTOGRAM_WIDTH
#undef GL_HISTOGRAM_WIDTH_EXT
#undef GL_HI_BIAS_NV
#undef GL_HI_SCALE_NV
#undef GL_HORIZONTAL_LINE_TO_NV
#undef GL_HSL_COLOR_KHR
#undef GL_HSL_COLOR_NV
#undef GL_HSL_HUE_KHR
#undef GL_HSL_HUE_NV
#undef GL_HSL_LUMINOSITY_KHR
#undef GL_HSL_LUMINOSITY_NV
#undef GL_HSL_SATURATION_KHR
#undef GL_HSL_SATURATION_NV
#undef GL_IDENTITY_NV
#undef GL_IMAGE_1D
#undef GL_IMAGE_1D_ARRAY
#undef GL_IMAGE_1D_ARRAY_EXT
#undef GL_IMAGE_1D_EXT
#undef GL_IMAGE_2D
#undef GL_IMAGE_2D_ARRAY
#undef GL_IMAGE_2D_ARRAY_EXT
#undef GL_IMAGE_2D_EXT
#undef GL_IMAGE_2D_MULTISAMPLE
#undef GL_IMAGE_2D_MULTISAMPLE_ARRAY
#undef GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#undef GL_IMAGE_2D_MULTISAMPLE_EXT
#undef GL_IMAGE_2D_RECT
#undef GL_IMAGE_2D_RECT_EXT
#undef GL_IMAGE_3D
#undef GL_IMAGE_3D_EXT
#undef GL_IMAGE_BINDING_ACCESS
#undef GL_IMAGE_BINDING_ACCESS_EXT
#undef GL_IMAGE_BINDING_FORMAT
#undef GL_IMAGE_BINDING_FORMAT_EXT
#undef GL_IMAGE_BINDING_LAYER
#undef GL_IMAGE_BINDING_LAYERED
#undef GL_IMAGE_BINDING_LAYERED_EXT
#undef GL_IMAGE_BINDING_LAYER_EXT
#undef GL_IMAGE_BINDING_LEVEL
#undef GL_IMAGE_BINDING_LEVEL_EXT
#undef GL_IMAGE_BINDING_NAME
#undef GL_IMAGE_BINDING_NAME_EXT
#undef GL_IMAGE_BUFFER
#undef GL_IMAGE_BUFFER_EXT
#undef GL_IMAGE_CLASS_10_10_10_2
#undef GL_IMAGE_CLASS_11_11_10
#undef GL_IMAGE_CLASS_1_X_16
#undef GL_IMAGE_CLASS_1_X_32
#undef GL_IMAGE_CLASS_1_X_8
#undef GL_IMAGE_CLASS_2_X_16
#undef GL_IMAGE_CLASS_2_X_32
#undef GL_IMAGE_CLASS_2_X_8
#undef GL_IMAGE_CLASS_4_X_16
#undef GL_IMAGE_CLASS_4_X_32
#undef GL_IMAGE_CLASS_4_X_8
#undef GL_IMAGE_COMPATIBILITY_CLASS
#undef GL_IMAGE_CUBE
#undef GL_IMAGE_CUBE_EXT
#undef GL_IMAGE_CUBE_MAP_ARRAY
#undef GL_IMAGE_CUBE_MAP_ARRAY_EXT
#undef GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#undef GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#undef GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#undef GL_IMAGE_PIXEL_FORMAT
#undef GL_IMAGE_PIXEL_TYPE
#undef GL_IMAGE_TEXEL_SIZE
#undef GL_IMPLEMENTATION_COLOR_READ_FORMAT
#undef GL_IMPLEMENTATION_COLOR_READ_TYPE
#undef GL_INCLUSIVE_EXT
#undef GL_INCR_WRAP
#undef GL_INCR_WRAP_EXT
#undef GL_INDEX
#undef GL_INDEX_ARRAY_ADDRESS_NV
#undef GL_INDEX_ARRAY_BUFFER_BINDING
#undef GL_INDEX_ARRAY_BUFFER_BINDING_ARB
#undef GL_INDEX_ARRAY_COUNT_EXT
#undef GL_INDEX_ARRAY_EXT
#undef GL_INDEX_ARRAY_LENGTH_NV
#undef GL_INDEX_ARRAY_LIST_IBM
#undef GL_INDEX_ARRAY_LIST_STRIDE_IBM
#undef GL_INDEX_ARRAY_POINTER_EXT
#undef GL_INDEX_ARRAY_STRIDE_EXT
#undef GL_INDEX_ARRAY_TYPE_EXT
#undef GL_INDEX_BIT_PGI
#undef GL_INFO_LOG_LENGTH
#undef GL_INNOCENT_CONTEXT_RESET
#undef GL_INNOCENT_CONTEXT_RESET_ARB
#undef GL_INT16_NV
#undef GL_INT16_VEC2_NV
#undef GL_INT16_VEC3_NV
#undef GL_INT16_VEC4_NV
#undef GL_INT64_ARB
#undef GL_INT64_NV
#undef GL_INT64_VEC2_ARB
#undef GL_INT64_VEC2_NV
#undef GL_INT64_VEC3_ARB
#undef GL_INT64_VEC3_NV
#undef GL_INT64_VEC4_ARB
#undef GL_INT64_VEC4_NV
#undef GL_INT8_NV
#undef GL_INT8_VEC2_NV
#undef GL_INT8_VEC3_NV
#undef GL_INT8_VEC4_NV
#undef GL_INTENSITY12_EXT
#undef GL_INTENSITY16F_ARB
#undef GL_INTENSITY16I_EXT
#undef GL_INTENSITY16UI_EXT
#undef GL_INTENSITY16_EXT
#undef GL_INTENSITY16_SNORM
#undef GL_INTENSITY32F_ARB
#undef GL_INTENSITY32I_EXT
#undef GL_INTENSITY32UI_EXT
#undef GL_INTENSITY4_EXT
#undef GL_INTENSITY8I_EXT
#undef GL_INTENSITY8UI_EXT
#undef GL_INTENSITY8_EXT
#undef GL_INTENSITY8_SNORM
#undef GL_INTENSITY_EXT
#undef GL_INTENSITY_FLOAT16_APPLE
#undef GL_INTENSITY_FLOAT16_ATI
#undef GL_INTENSITY_FLOAT32_APPLE
#undef GL_INTENSITY_FLOAT32_ATI
#undef GL_INTENSITY_SNORM
#undef GL_INTERLACE_OML
#undef GL_INTERLACE_READ_INGR
#undef GL_INTERLACE_READ_OML
#undef GL_INTERLACE_SGIX
#undef GL_INTERLEAVED_ATTRIBS
#undef GL_INTERLEAVED_ATTRIBS_EXT
#undef GL_INTERLEAVED_ATTRIBS_NV
#undef GL_INTERNALFORMAT_ALPHA_SIZE
#undef GL_INTERNALFORMAT_ALPHA_TYPE
#undef GL_INTERNALFORMAT_BLUE_SIZE
#undef GL_INTERNALFORMAT_BLUE_TYPE
#undef GL_INTERNALFORMAT_DEPTH_SIZE
#undef GL_INTERNALFORMAT_DEPTH_TYPE
#undef GL_INTERNALFORMAT_GREEN_SIZE
#undef GL_INTERNALFORMAT_GREEN_TYPE
#undef GL_INTERNALFORMAT_PREFERRED
#undef GL_INTERNALFORMAT_RED_SIZE
#undef GL_INTERNALFORMAT_RED_TYPE
#undef GL_INTERNALFORMAT_SHARED_SIZE
#undef GL_INTERNALFORMAT_STENCIL_SIZE
#undef GL_INTERNALFORMAT_STENCIL_TYPE
#undef GL_INTERNALFORMAT_SUPPORTED
#undef GL_INTERPOLATE
#undef GL_INTERPOLATE_ARB
#undef GL_INTERPOLATE_EXT
#undef GL_INT_2_10_10_10_REV
#undef GL_INT_IMAGE_1D
#undef GL_INT_IMAGE_1D_ARRAY
#undef GL_INT_IMAGE_1D_ARRAY_EXT
#undef GL_INT_IMAGE_1D_EXT
#undef GL_INT_IMAGE_2D
#undef GL_INT_IMAGE_2D_ARRAY
#undef GL_INT_IMAGE_2D_ARRAY_EXT
#undef GL_INT_IMAGE_2D_EXT
#undef GL_INT_IMAGE_2D_MULTISAMPLE
#undef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#undef GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#undef GL_INT_IMAGE_2D_MULTISAMPLE_EXT
#undef GL_INT_IMAGE_2D_RECT
#undef GL_INT_IMAGE_2D_RECT_EXT
#undef GL_INT_IMAGE_3D
#undef GL_INT_IMAGE_3D_EXT
#undef GL_INT_IMAGE_BUFFER
#undef GL_INT_IMAGE_BUFFER_EXT
#undef GL_INT_IMAGE_CUBE
#undef GL_INT_IMAGE_CUBE_EXT
#undef GL_INT_IMAGE_CUBE_MAP_ARRAY
#undef GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#undef GL_INT_SAMPLER_1D
#undef GL_INT_SAMPLER_1D_ARRAY
#undef GL_INT_SAMPLER_1D_ARRAY_EXT
#undef GL_INT_SAMPLER_1D_EXT
#undef GL_INT_SAMPLER_2D
#undef GL_INT_SAMPLER_2D_ARRAY
#undef GL_INT_SAMPLER_2D_ARRAY_EXT
#undef GL_INT_SAMPLER_2D_EXT
#undef GL_INT_SAMPLER_2D_MULTISAMPLE
#undef GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#undef GL_INT_SAMPLER_2D_RECT
#undef GL_INT_SAMPLER_2D_RECT_EXT
#undef GL_INT_SAMPLER_3D
#undef GL_INT_SAMPLER_3D_EXT
#undef GL_INT_SAMPLER_BUFFER
#undef GL_INT_SAMPLER_BUFFER_AMD
#undef GL_INT_SAMPLER_BUFFER_EXT
#undef GL_INT_SAMPLER_CUBE
#undef GL_INT_SAMPLER_CUBE_EXT
#undef GL_INT_SAMPLER_CUBE_MAP_ARRAY
#undef GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#undef GL_INT_SAMPLER_RENDERBUFFER_NV
#undef GL_INT_VEC2
#undef GL_INT_VEC2_ARB
#undef GL_INT_VEC3
#undef GL_INT_VEC3_ARB
#undef GL_INT_VEC4
#undef GL_INT_VEC4_ARB
#undef GL_INVALID_FRAMEBUFFER_OPERATION
#undef GL_INVALID_FRAMEBUFFER_OPERATION_EXT
#undef GL_INVALID_INDEX
#undef GL_INVARIANT_DATATYPE_EXT
#undef GL_INVARIANT_EXT
#undef GL_INVARIANT_VALUE_EXT
#undef GL_INVERSE_NV
#undef GL_INVERSE_TRANSPOSE_NV
#undef GL_INVERTED_SCREEN_W_REND
#undef GL_INVERT_OVG_NV
#undef GL_INVERT_RGB_NV
#undef GL_ISOLINES
#undef GL_IS_PER_PATCH
#undef GL_IS_ROW_MAJOR
#undef GL_ITALIC_BIT_NV
#undef GL_LARGE_CCW_ARC_TO_NV
#undef GL_LARGE_CW_ARC_TO_NV
#undef GL_LAST_VERTEX_CONVENTION
#undef GL_LAST_VERTEX_CONVENTION_EXT
#undef GL_LAST_VIDEO_CAPTURE_STATUS_NV
#undef GL_LAYER_PROVOKING_VERTEX
#undef GL_LAYOUT_COLOR_ATTACHMENT_EXT
#undef GL_LAYOUT_DEFAULT_INTEL
#undef GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT
#undef GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT
#undef GL_LAYOUT_GENERAL_EXT
#undef GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
#undef GL_LAYOUT_LINEAR_INTEL
#undef GL_LAYOUT_SHADER_READ_ONLY_EXT
#undef GL_LAYOUT_TRANSFER_DST_EXT
#undef GL_LAYOUT_TRANSFER_SRC_EXT
#undef GL_LERP_ATI
#undef GL_LGPU_SEPARATE_STORAGE_BIT_NVX
#undef GL_LIGHTEN_KHR
#undef GL_LIGHTEN_NV
#undef GL_LIGHT_MODEL_COLOR_CONTROL
#undef GL_LIGHT_MODEL_COLOR_CONTROL_EXT
#undef GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
#undef GL_LINEARBURN_NV
#undef GL_LINEARDODGE_NV
#undef GL_LINEARLIGHT_NV
#undef GL_LINEAR_TILING_EXT
#undef GL_LINES_ADJACENCY
#undef GL_LINES_ADJACENCY_ARB
#undef GL_LINES_ADJACENCY_EXT
#undef GL_LINE_STRIP_ADJACENCY
#undef GL_LINE_STRIP_ADJACENCY_ARB
#undef GL_LINE_STRIP_ADJACENCY_EXT
#undef GL_LINE_TO_NV
#undef GL_LINE_WIDTH_COMMAND_NV
#undef GL_LINK_STATUS
#undef GL_LOCAL_CONSTANT_DATATYPE_EXT
#undef GL_LOCAL_CONSTANT_EXT
#undef GL_LOCAL_CONSTANT_VALUE_EXT
#undef GL_LOCAL_EXT
#undef GL_LOCATION
#undef GL_LOCATION_COMPONENT
#undef GL_LOCATION_INDEX
#undef GL_LOSE_CONTEXT_ON_RESET
#undef GL_LOSE_CONTEXT_ON_RESET_ARB
#undef GL_LOWER_LEFT
#undef GL_LOW_FLOAT
#undef GL_LOW_INT
#undef GL_LO_BIAS_NV
#undef GL_LO_SCALE_NV
#undef GL_LUID_SIZE_EXT
#undef GL_LUMINANCE12_ALPHA12_EXT
#undef GL_LUMINANCE12_ALPHA4_EXT
#undef GL_LUMINANCE12_EXT
#undef GL_LUMINANCE16F_ARB
#undef GL_LUMINANCE16I_EXT
#undef GL_LUMINANCE16UI_EXT
#undef GL_LUMINANCE16_ALPHA16_EXT
#undef GL_LUMINANCE16_ALPHA16_SNORM
#undef GL_LUMINANCE16_EXT
#undef GL_LUMINANCE16_SNORM
#undef GL_LUMINANCE32F_ARB
#undef GL_LUMINANCE32I_EXT
#undef GL_LUMINANCE32UI_EXT
#undef GL_LUMINANCE4_ALPHA4_EXT
#undef GL_LUMINANCE4_EXT
#undef GL_LUMINANCE6_ALPHA2_EXT
#undef GL_LUMINANCE8I_EXT
#undef GL_LUMINANCE8UI_EXT
#undef GL_LUMINANCE8_ALPHA8_EXT
#undef GL_LUMINANCE8_ALPHA8_SNORM
#undef GL_LUMINANCE8_EXT
#undef GL_LUMINANCE8_SNORM
#undef GL_LUMINANCE_ALPHA16F_ARB
#undef GL_LUMINANCE_ALPHA16I_EXT
#undef GL_LUMINANCE_ALPHA16UI_EXT
#undef GL_LUMINANCE_ALPHA32F_ARB
#undef GL_LUMINANCE_ALPHA32I_EXT
#undef GL_LUMINANCE_ALPHA32UI_EXT
#undef GL_LUMINANCE_ALPHA8I_EXT
#undef GL_LUMINANCE_ALPHA8UI_EXT
#undef GL_LUMINANCE_ALPHA_FLOAT16_APPLE
#undef GL_LUMINANCE_ALPHA_FLOAT16_ATI
#undef GL_LUMINANCE_ALPHA_FLOAT32_APPLE
#undef GL_LUMINANCE_ALPHA_FLOAT32_ATI
#undef GL_LUMINANCE_ALPHA_INTEGER_EXT
#undef GL_LUMINANCE_ALPHA_SNORM
#undef GL_LUMINANCE_FLOAT16_APPLE
#undef GL_LUMINANCE_FLOAT16_ATI
#undef GL_LUMINANCE_FLOAT32_APPLE
#undef GL_LUMINANCE_FLOAT32_ATI
#undef GL_LUMINANCE_INTEGER_EXT
#undef GL_LUMINANCE_SNORM
#undef GL_MAD_ATI
#undef GL_MAGNITUDE_BIAS_NV
#undef GL_MAGNITUDE_SCALE_NV
#undef GL_MAJOR_VERSION
#undef GL_MANUAL_GENERATE_MIPMAP
#undef GL_MAP1_BINORMAL_EXT
#undef GL_MAP1_TANGENT_EXT
#undef GL_MAP1_VERTEX_ATTRIB0_4_NV
#undef GL_MAP1_VERTEX_ATTRIB10_4_NV
#undef GL_MAP1_VERTEX_ATTRIB11_4_NV
#undef GL_MAP1_VERTEX_ATTRIB12_4_NV
#undef GL_MAP1_VERTEX_ATTRIB13_4_NV
#undef GL_MAP1_VERTEX_ATTRIB14_4_NV
#undef GL_MAP1_VERTEX_ATTRIB15_4_NV
#undef GL_MAP1_VERTEX_ATTRIB1_4_NV
#undef GL_MAP1_VERTEX_ATTRIB2_4_NV
#undef GL_MAP1_VERTEX_ATTRIB3_4_NV
#undef GL_MAP1_VERTEX_ATTRIB4_4_NV
#undef GL_MAP1_VERTEX_ATTRIB5_4_NV
#undef GL_MAP1_VERTEX_ATTRIB6_4_NV
#undef GL_MAP1_VERTEX_ATTRIB7_4_NV
#undef GL_MAP1_VERTEX_ATTRIB8_4_NV
#undef GL_MAP1_VERTEX_ATTRIB9_4_NV
#undef GL_MAP2_BINORMAL_EXT
#undef GL_MAP2_TANGENT_EXT
#undef GL_MAP2_VERTEX_ATTRIB0_4_NV
#undef GL_MAP2_VERTEX_ATTRIB10_4_NV
#undef GL_MAP2_VERTEX_ATTRIB11_4_NV
#undef GL_MAP2_VERTEX_ATTRIB12_4_NV
#undef GL_MAP2_VERTEX_ATTRIB13_4_NV
#undef GL_MAP2_VERTEX_ATTRIB14_4_NV
#undef GL_MAP2_VERTEX_ATTRIB15_4_NV
#undef GL_MAP2_VERTEX_ATTRIB1_4_NV
#undef GL_MAP2_VERTEX_ATTRIB2_4_NV
#undef GL_MAP2_VERTEX_ATTRIB3_4_NV
#undef GL_MAP2_VERTEX_ATTRIB4_4_NV
#undef GL_MAP2_VERTEX_ATTRIB5_4_NV
#undef GL_MAP2_VERTEX_ATTRIB6_4_NV
#undef GL_MAP2_VERTEX_ATTRIB7_4_NV
#undef GL_MAP2_VERTEX_ATTRIB8_4_NV
#undef GL_MAP2_VERTEX_ATTRIB9_4_NV
#undef GL_MAP_ATTRIB_U_ORDER_NV
#undef GL_MAP_ATTRIB_V_ORDER_NV
#undef GL_MAP_COHERENT_BIT
#undef GL_MAP_FLUSH_EXPLICIT_BIT
#undef GL_MAP_INVALIDATE_BUFFER_BIT
#undef GL_MAP_INVALIDATE_RANGE_BIT
#undef GL_MAP_PERSISTENT_BIT
#undef GL_MAP_READ_BIT
#undef GL_MAP_TESSELLATION_NV
#undef GL_MAP_UNSYNCHRONIZED_BIT
#undef GL_MAP_WRITE_BIT
#undef GL_MATERIAL_SIDE_HINT_PGI
#undef GL_MATRIX0_ARB
#undef GL_MATRIX0_NV
#undef GL_MATRIX10_ARB
#undef GL_MATRIX11_ARB
#undef GL_MATRIX12_ARB
#undef GL_MATRIX13_ARB
#undef GL_MATRIX14_ARB
#undef GL_MATRIX15_ARB
#undef GL_MATRIX16_ARB
#undef GL_MATRIX17_ARB
#undef GL_MATRIX18_ARB
#undef GL_MATRIX19_ARB
#undef GL_MATRIX1_ARB
#undef GL_MATRIX1_NV
#undef GL_MATRIX20_ARB
#undef GL_MATRIX21_ARB
#undef GL_MATRIX22_ARB
#undef GL_MATRIX23_ARB
#undef GL_MATRIX24_ARB
#undef GL_MATRIX25_ARB
#undef GL_MATRIX26_ARB
#undef GL_MATRIX27_ARB
#undef GL_MATRIX28_ARB
#undef GL_MATRIX29_ARB
#undef GL_MATRIX2_ARB
#undef GL_MATRIX2_NV
#undef GL_MATRIX30_ARB
#undef GL_MATRIX31_ARB
#undef GL_MATRIX3_ARB
#undef GL_MATRIX3_NV
#undef GL_MATRIX4_ARB
#undef GL_MATRIX4_NV
#undef GL_MATRIX5_ARB
#undef GL_MATRIX5_NV
#undef GL_MATRIX6_ARB
#undef GL_MATRIX6_NV
#undef GL_MATRIX7_ARB
#undef GL_MATRIX7_NV
#undef GL_MATRIX8_ARB
#undef GL_MATRIX9_ARB
#undef GL_MATRIX_EXT
#undef GL_MATRIX_INDEX_ARRAY_ARB
#undef GL_MATRIX_INDEX_ARRAY_POINTER_ARB
#undef GL_MATRIX_INDEX_ARRAY_SIZE_ARB
#undef GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
#undef GL_MATRIX_INDEX_ARRAY_TYPE_ARB
#undef GL_MATRIX_PALETTE_ARB
#undef GL_MATRIX_STRIDE
#undef GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
#undef GL_MAT_AMBIENT_BIT_PGI
#undef GL_MAT_COLOR_INDEXES_BIT_PGI
#undef GL_MAT_DIFFUSE_BIT_PGI
#undef GL_MAT_EMISSION_BIT_PGI
#undef GL_MAT_SHININESS_BIT_PGI
#undef GL_MAT_SPECULAR_BIT_PGI
#undef GL_MAX
#undef GL_MAX_3D_TEXTURE_SIZE
#undef GL_MAX_3D_TEXTURE_SIZE_EXT
#undef GL_MAX_ARRAY_TEXTURE_LAYERS
#undef GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
#undef GL_MAX_ASYNC_DRAW_PIXELS_SGIX
#undef GL_MAX_ASYNC_HISTOGRAM_SGIX
#undef GL_MAX_ASYNC_READ_PIXELS_SGIX
#undef GL_MAX_ASYNC_TEX_IMAGE_SGIX
#undef GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#undef GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#undef GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
#undef GL_MAX_CLIP_DISTANCES
#undef GL_MAX_COLOR_ATTACHMENTS
#undef GL_MAX_COLOR_ATTACHMENTS_EXT
#undef GL_MAX_COLOR_MATRIX_STACK_DEPTH
#undef GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
#undef GL_MAX_COLOR_TEXTURE_SAMPLES
#undef GL_MAX_COMBINED_ATOMIC_COUNTERS
#undef GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
#undef GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_DIMENSIONS
#undef GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_IMAGE_UNIFORMS
#undef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#undef GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
#undef GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
#undef GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
#undef GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#undef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#undef GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
#undef GL_MAX_COMBINED_UNIFORM_BLOCKS
#undef GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#undef GL_MAX_COMPUTE_ATOMIC_COUNTERS
#undef GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
#undef GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
#undef GL_MAX_COMPUTE_IMAGE_UNIFORMS
#undef GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
#undef GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
#undef GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
#undef GL_MAX_COMPUTE_UNIFORM_BLOCKS
#undef GL_MAX_COMPUTE_UNIFORM_COMPONENTS
#undef GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
#undef GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
#undef GL_MAX_COMPUTE_WORK_GROUP_COUNT
#undef GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
#undef GL_MAX_COMPUTE_WORK_GROUP_SIZE
#undef GL_MAX_CONVOLUTION_HEIGHT
#undef GL_MAX_CONVOLUTION_HEIGHT_EXT
#undef GL_MAX_CONVOLUTION_WIDTH
#undef GL_MAX_CONVOLUTION_WIDTH_EXT
#undef GL_MAX_CUBE_MAP_TEXTURE_SIZE
#undef GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
#undef GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
#undef GL_MAX_CULL_DISTANCES
#undef GL_MAX_DEBUG_GROUP_STACK_DEPTH
#undef GL_MAX_DEBUG_LOGGED_MESSAGES
#undef GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
#undef GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
#undef GL_MAX_DEBUG_MESSAGE_LENGTH
#undef GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
#undef GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
#undef GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
#undef GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
#undef GL_MAX_DEPTH
#undef GL_MAX_DEPTH_TEXTURE_SAMPLES
#undef GL_MAX_DRAW_BUFFERS
#undef GL_MAX_DRAW_BUFFERS_ARB
#undef GL_MAX_DRAW_BUFFERS_ATI
#undef GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
#undef GL_MAX_ELEMENTS_INDICES
#undef GL_MAX_ELEMENTS_INDICES_EXT
#undef GL_MAX_ELEMENTS_VERTICES
#undef GL_MAX_ELEMENTS_VERTICES_EXT
#undef GL_MAX_ELEMENT_INDEX
#undef GL_MAX_EXT
#undef GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#undef GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
#undef GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#undef GL_MAX_FRAGMENT_INPUT_COMPONENTS
#undef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#undef GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
#undef GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
#undef GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
#undef GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#undef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#undef GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
#undef GL_MAX_FRAGMENT_UNIFORM_VECTORS
#undef GL_MAX_FRAMEBUFFER_HEIGHT
#undef GL_MAX_FRAMEBUFFER_LAYERS
#undef GL_MAX_FRAMEBUFFER_SAMPLES
#undef GL_MAX_FRAMEBUFFER_WIDTH
#undef GL_MAX_GENERAL_COMBINERS_NV
#undef GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#undef GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
#undef GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#undef GL_MAX_GEOMETRY_INPUT_COMPONENTS
#undef GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#undef GL_MAX_GEOMETRY_OUTPUT_VERTICES
#undef GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
#undef GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
#undef GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
#undef GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#undef GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
#undef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#undef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
#undef GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
#undef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#undef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
#undef GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
#undef GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#undef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#undef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
#undef GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
#undef GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
#undef GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
#undef GL_MAX_HEIGHT
#undef GL_MAX_IMAGE_SAMPLES
#undef GL_MAX_IMAGE_SAMPLES_EXT
#undef GL_MAX_IMAGE_UNITS
#undef GL_MAX_IMAGE_UNITS_EXT
#undef GL_MAX_INTEGER_SAMPLES
#undef GL_MAX_LABEL_LENGTH
#undef GL_MAX_LAYERS
#undef GL_MAX_LGPU_GPUS_NVX
#undef GL_MAX_MAP_TESSELLATION_NV
#undef GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
#undef GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
#undef GL_MAX_NAME_LENGTH
#undef GL_MAX_NUM_ACTIVE_VARIABLES
#undef GL_MAX_NUM_COMPATIBLE_SUBROUTINES
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
#undef GL_MAX_PALETTE_MATRICES_ARB
#undef GL_MAX_PATCH_VERTICES
#undef GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#undef GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#undef GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
#undef GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_ATTRIBS_ARB
#undef GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
#undef GL_MAX_PROGRAM_CALL_DEPTH_NV
#undef GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
#undef GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#undef GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
#undef GL_MAX_PROGRAM_GENERIC_RESULTS_NV
#undef GL_MAX_PROGRAM_IF_DEPTH_NV
#undef GL_MAX_PROGRAM_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#undef GL_MAX_PROGRAM_LOOP_COUNT_NV
#undef GL_MAX_PROGRAM_LOOP_DEPTH_NV
#undef GL_MAX_PROGRAM_MATRICES_ARB
#undef GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#undef GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#undef GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#undef GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#undef GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#undef GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#undef GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
#undef GL_MAX_PROGRAM_PARAMETERS_ARB
#undef GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
#undef GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
#undef GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
#undef GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
#undef GL_MAX_PROGRAM_TEMPORARIES_ARB
#undef GL_MAX_PROGRAM_TEXEL_OFFSET
#undef GL_MAX_PROGRAM_TEXEL_OFFSET_NV
#undef GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
#undef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
#undef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#undef GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#undef GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
#undef GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
#undef GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
#undef GL_MAX_RASTER_SAMPLES_EXT
#undef GL_MAX_RATIONAL_EVAL_ORDER_NV
#undef GL_MAX_RECTANGLE_TEXTURE_SIZE
#undef GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
#undef GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
#undef GL_MAX_RENDERBUFFER_SIZE
#undef GL_MAX_RENDERBUFFER_SIZE_EXT
#undef GL_MAX_SAMPLES
#undef GL_MAX_SAMPLES_EXT
#undef GL_MAX_SAMPLE_MASK_WORDS
#undef GL_MAX_SAMPLE_MASK_WORDS_NV
#undef GL_MAX_SERVER_WAIT_TIMEOUT
#undef GL_MAX_SHADER_BUFFER_ADDRESS_NV
#undef GL_MAX_SHADER_COMPILER_THREADS_ARB
#undef GL_MAX_SHADER_COMPILER_THREADS_KHR
#undef GL_MAX_SHADER_STORAGE_BLOCK_SIZE
#undef GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
#undef GL_MAX_SHININESS_NV
#undef GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
#undef GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
#undef GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
#undef GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
#undef GL_MAX_SPARSE_TEXTURE_SIZE_AMD
#undef GL_MAX_SPARSE_TEXTURE_SIZE_ARB
#undef GL_MAX_SPOT_EXPONENT_NV
#undef GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
#undef GL_MAX_SUBROUTINES
#undef GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#undef GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#undef GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#undef GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#undef GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#undef GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
#undef GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#undef GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#undef GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#undef GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#undef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#undef GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#undef GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#undef GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#undef GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
#undef GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#undef GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#undef GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#undef GL_MAX_TESS_GEN_LEVEL
#undef GL_MAX_TESS_PATCH_COMPONENTS
#undef GL_MAX_TEXTURE_BUFFER_SIZE
#undef GL_MAX_TEXTURE_BUFFER_SIZE_ARB
#undef GL_MAX_TEXTURE_BUFFER_SIZE_EXT
#undef GL_MAX_TEXTURE_COORDS
#undef GL_MAX_TEXTURE_COORDS_ARB
#undef GL_MAX_TEXTURE_COORDS_NV
#undef GL_MAX_TEXTURE_IMAGE_UNITS
#undef GL_MAX_TEXTURE_IMAGE_UNITS_ARB
#undef GL_MAX_TEXTURE_IMAGE_UNITS_NV
#undef GL_MAX_TEXTURE_LOD_BIAS
#undef GL_MAX_TEXTURE_LOD_BIAS_EXT
#undef GL_MAX_TEXTURE_MAX_ANISOTROPY
#undef GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
#undef GL_MAX_TEXTURE_UNITS
#undef GL_MAX_TEXTURE_UNITS_ARB
#undef GL_MAX_TRACK_MATRICES_NV
#undef GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
#undef GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#undef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#undef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
#undef GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
#undef GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
#undef GL_MAX_UNIFORM_BLOCK_SIZE
#undef GL_MAX_UNIFORM_BUFFER_BINDINGS
#undef GL_MAX_UNIFORM_LOCATIONS
#undef GL_MAX_VARYING_COMPONENTS
#undef GL_MAX_VARYING_COMPONENTS_EXT
#undef GL_MAX_VARYING_FLOATS
#undef GL_MAX_VARYING_FLOATS_ARB
#undef GL_MAX_VARYING_VECTORS
#undef GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
#undef GL_MAX_VERTEX_ATOMIC_COUNTERS
#undef GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#undef GL_MAX_VERTEX_ATTRIBS
#undef GL_MAX_VERTEX_ATTRIBS_ARB
#undef GL_MAX_VERTEX_ATTRIB_BINDINGS
#undef GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
#undef GL_MAX_VERTEX_ATTRIB_STRIDE
#undef GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
#undef GL_MAX_VERTEX_HINT_PGI
#undef GL_MAX_VERTEX_IMAGE_UNIFORMS
#undef GL_MAX_VERTEX_OUTPUT_COMPONENTS
#undef GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
#undef GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
#undef GL_MAX_VERTEX_SHADER_LOCALS_EXT
#undef GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
#undef GL_MAX_VERTEX_SHADER_VARIANTS_EXT
#undef GL_MAX_VERTEX_STREAMS
#undef GL_MAX_VERTEX_STREAMS_ATI
#undef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#undef GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#undef GL_MAX_VERTEX_UNIFORM_BLOCKS
#undef GL_MAX_VERTEX_UNIFORM_COMPONENTS
#undef GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
#undef GL_MAX_VERTEX_UNIFORM_VECTORS
#undef GL_MAX_VERTEX_UNITS_ARB
#undef GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
#undef GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
#undef GL_MAX_VIEWPORTS
#undef GL_MAX_VIEWS_OVR
#undef GL_MAX_WIDTH
#undef GL_MAX_WINDOW_RECTANGLES_EXT
#undef GL_MEDIUM_FLOAT
#undef GL_MEDIUM_INT
#undef GL_MIN
#undef GL_MINMAX
#undef GL_MINMAX_EXT
#undef GL_MINMAX_FORMAT
#undef GL_MINMAX_FORMAT_EXT
#undef GL_MINMAX_SINK
#undef GL_MINMAX_SINK_EXT
#undef GL_MINOR_VERSION
#undef GL_MINUS_CLAMPED_NV
#undef GL_MINUS_NV
#undef GL_MIN_EXT
#undef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#undef GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
#undef GL_MIN_LOD_WARNING_AMD
#undef GL_MIN_MAP_BUFFER_ALIGNMENT
#undef GL_MIN_PROGRAM_TEXEL_OFFSET
#undef GL_MIN_PROGRAM_TEXEL_OFFSET_NV
#undef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
#undef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#undef GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#undef GL_MIN_SAMPLE_SHADING_VALUE
#undef GL_MIN_SAMPLE_SHADING_VALUE_ARB
#undef GL_MIN_SPARSE_LEVEL_AMD
#undef GL_MIPMAP
#undef GL_MIRRORED_REPEAT
#undef GL_MIRRORED_REPEAT_ARB
#undef GL_MIRRORED_REPEAT_IBM
#undef GL_MIRROR_CLAMP_ATI
#undef GL_MIRROR_CLAMP_EXT
#undef GL_MIRROR_CLAMP_TO_BORDER_EXT
#undef GL_MIRROR_CLAMP_TO_EDGE
#undef GL_MIRROR_CLAMP_TO_EDGE_ATI
#undef GL_MIRROR_CLAMP_TO_EDGE_EXT
#undef GL_MITER_REVERT_NV
#undef GL_MITER_TRUNCATE_NV
#undef GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
#undef GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
#undef GL_MODELVIEW0_ARB
#undef GL_MODELVIEW0_EXT
#undef GL_MODELVIEW0_MATRIX_EXT
#undef GL_MODELVIEW0_STACK_DEPTH_EXT
#undef GL_MODELVIEW10_ARB
#undef GL_MODELVIEW11_ARB
#undef GL_MODELVIEW12_ARB
#undef GL_MODELVIEW13_ARB
#undef GL_MODELVIEW14_ARB
#undef GL_MODELVIEW15_ARB
#undef GL_MODELVIEW16_ARB
#undef GL_MODELVIEW17_ARB
#undef GL_MODELVIEW18_ARB
#undef GL_MODELVIEW19_ARB
#undef GL_MODELVIEW1_ARB
#undef GL_MODELVIEW1_EXT
#undef GL_MODELVIEW1_MATRIX_EXT
#undef GL_MODELVIEW1_STACK_DEPTH_EXT
#undef GL_MODELVIEW20_ARB
#undef GL_MODELVIEW21_ARB
#undef GL_MODELVIEW22_ARB
#undef GL_MODELVIEW23_ARB
#undef GL_MODELVIEW24_ARB
#undef GL_MODELVIEW25_ARB
#undef GL_MODELVIEW26_ARB
#undef GL_MODELVIEW27_ARB
#undef GL_MODELVIEW28_ARB
#undef GL_MODELVIEW29_ARB
#undef GL_MODELVIEW2_ARB
#undef GL_MODELVIEW30_ARB
#undef GL_MODELVIEW31_ARB
#undef GL_MODELVIEW3_ARB
#undef GL_MODELVIEW4_ARB
#undef GL_MODELVIEW5_ARB
#undef GL_MODELVIEW6_ARB
#undef GL_MODELVIEW7_ARB
#undef GL_MODELVIEW8_ARB
#undef GL_MODELVIEW9_ARB
#undef GL_MODELVIEW_PROJECTION_NV
#undef GL_MODULATE_ADD_ATI
#undef GL_MODULATE_SIGNED_ADD_ATI
#undef GL_MODULATE_SUBTRACT_ATI
#undef GL_MOVE_TO_CONTINUES_NV
#undef GL_MOVE_TO_NV
#undef GL_MOVE_TO_RESETS_NV
#undef GL_MOV_ATI
#undef GL_MULTICAST_GPUS_NV
#undef GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV
#undef GL_MULTIPLY_KHR
#undef GL_MULTIPLY_NV
#undef GL_MULTISAMPLE
#undef GL_MULTISAMPLES_NV
#undef GL_MULTISAMPLE_3DFX
#undef GL_MULTISAMPLE_ARB
#undef GL_MULTISAMPLE_BIT
#undef GL_MULTISAMPLE_BIT_3DFX
#undef GL_MULTISAMPLE_BIT_ARB
#undef GL_MULTISAMPLE_BIT_EXT
#undef GL_MULTISAMPLE_COVERAGE_MODES_NV
#undef GL_MULTISAMPLE_EXT
#undef GL_MULTISAMPLE_FILTER_HINT_NV
#undef GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
#undef GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
#undef GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
#undef GL_MULTISAMPLE_SGIS
#undef GL_MUL_ATI
#undef GL_MVP_MATRIX_EXT
#undef GL_NAMED_STRING_LENGTH_ARB
#undef GL_NAMED_STRING_TYPE_ARB
#undef GL_NAME_LENGTH
#undef GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
#undef GL_NATIVE_GRAPHICS_END_HINT_PGI
#undef GL_NATIVE_GRAPHICS_HANDLE_PGI
#undef GL_NEGATE_BIT_ATI
#undef GL_NEGATIVE_ONE_EXT
#undef GL_NEGATIVE_ONE_TO_ONE
#undef GL_NEGATIVE_W_EXT
#undef GL_NEGATIVE_X_EXT
#undef GL_NEGATIVE_Y_EXT
#undef GL_NEGATIVE_Z_EXT
#undef GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
#undef GL_NOP_COMMAND_NV
#undef GL_NORMALIZED_RANGE_EXT
#undef GL_NORMAL_ARRAY_ADDRESS_NV
#undef GL_NORMAL_ARRAY_BUFFER_BINDING
#undef GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
#undef GL_NORMAL_ARRAY_COUNT_EXT
#undef GL_NORMAL_ARRAY_EXT
#undef GL_NORMAL_ARRAY_LENGTH_NV
#undef GL_NORMAL_ARRAY_LIST_IBM
#undef GL_NORMAL_ARRAY_LIST_STRIDE_IBM
#undef GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
#undef GL_NORMAL_ARRAY_POINTER_EXT
#undef GL_NORMAL_ARRAY_STRIDE_EXT
#undef GL_NORMAL_ARRAY_TYPE_EXT
#undef GL_NORMAL_BIT_PGI
#undef GL_NORMAL_MAP
#undef GL_NORMAL_MAP_ARB
#undef GL_NORMAL_MAP_EXT
#undef GL_NORMAL_MAP_NV
#undef GL_NO_RESET_NOTIFICATION
#undef GL_NO_RESET_NOTIFICATION_ARB
#undef GL_NUM_ACTIVE_VARIABLES
#undef GL_NUM_COMPATIBLE_SUBROUTINES
#undef GL_NUM_COMPRESSED_TEXTURE_FORMATS
#undef GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
#undef GL_NUM_DEVICE_UUIDS_EXT
#undef GL_NUM_EXTENSIONS
#undef GL_NUM_FILL_STREAMS_NV
#undef GL_NUM_FRAGMENT_CONSTANTS_ATI
#undef GL_NUM_FRAGMENT_REGISTERS_ATI
#undef GL_NUM_GENERAL_COMBINERS_NV
#undef GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
#undef GL_NUM_INSTRUCTIONS_PER_PASS_ATI
#undef GL_NUM_INSTRUCTIONS_TOTAL_ATI
#undef GL_NUM_LOOPBACK_COMPONENTS_ATI
#undef GL_NUM_PASSES_ATI
#undef GL_NUM_PROGRAM_BINARY_FORMATS
#undef GL_NUM_SAMPLE_COUNTS
#undef GL_NUM_SHADER_BINARY_FORMATS
#undef GL_NUM_SHADING_LANGUAGE_VERSIONS
#undef GL_NUM_SPARSE_LEVELS_ARB
#undef GL_NUM_SPIR_V_EXTENSIONS
#undef GL_NUM_TILING_TYPES_EXT
#undef GL_NUM_VIDEO_CAPTURE_STREAMS_NV
#undef GL_NUM_VIRTUAL_PAGE_SIZES_ARB
#undef GL_NUM_WINDOW_RECTANGLES_EXT
#undef GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
#undef GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
#undef GL_OBJECT_ACTIVE_UNIFORMS_ARB
#undef GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
#undef GL_OBJECT_ATTACHED_OBJECTS_ARB
#undef GL_OBJECT_BUFFER_SIZE_ATI
#undef GL_OBJECT_BUFFER_USAGE_ATI
#undef GL_OBJECT_COMPILE_STATUS_ARB
#undef GL_OBJECT_DELETE_STATUS_ARB
#undef GL_OBJECT_DISTANCE_TO_LINE_SGIS
#undef GL_OBJECT_DISTANCE_TO_POINT_SGIS
#undef GL_OBJECT_INFO_LOG_LENGTH_ARB
#undef GL_OBJECT_LINE_SGIS
#undef GL_OBJECT_LINK_STATUS_ARB
#undef GL_OBJECT_POINT_SGIS
#undef GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
#undef GL_OBJECT_SUBTYPE_ARB
#undef GL_OBJECT_TYPE
#undef GL_OBJECT_TYPE_ARB
#undef GL_OBJECT_VALIDATE_STATUS_ARB
#undef GL_OCCLUSION_QUERY_EVENT_MASK_AMD
#undef GL_OFFSET
#undef GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
#undef GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
#undef GL_OFFSET_HILO_TEXTURE_2D_NV
#undef GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
#undef GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
#undef GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
#undef GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
#undef GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
#undef GL_OFFSET_TEXTURE_2D_BIAS_NV
#undef GL_OFFSET_TEXTURE_2D_MATRIX_NV
#undef GL_OFFSET_TEXTURE_2D_NV
#undef GL_OFFSET_TEXTURE_2D_SCALE_NV
#undef GL_OFFSET_TEXTURE_BIAS_NV
#undef GL_OFFSET_TEXTURE_MATRIX_NV
#undef GL_OFFSET_TEXTURE_RECTANGLE_NV
#undef GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
#undef GL_OFFSET_TEXTURE_SCALE_NV
#undef GL_ONE_EXT
#undef GL_ONE_MINUS_CONSTANT_ALPHA
#undef GL_ONE_MINUS_CONSTANT_ALPHA_EXT
#undef GL_ONE_MINUS_CONSTANT_COLOR
#undef GL_ONE_MINUS_CONSTANT_COLOR_EXT
#undef GL_ONE_MINUS_SRC1_ALPHA
#undef GL_ONE_MINUS_SRC1_COLOR
#undef GL_OPERAND0_ALPHA
#undef GL_OPERAND0_ALPHA_ARB
#undef GL_OPERAND0_ALPHA_EXT
#undef GL_OPERAND0_RGB
#undef GL_OPERAND0_RGB_ARB
#undef GL_OPERAND0_RGB_EXT
#undef GL_OPERAND1_ALPHA
#undef GL_OPERAND1_ALPHA_ARB
#undef GL_OPERAND1_ALPHA_EXT
#undef GL_OPERAND1_RGB
#undef GL_OPERAND1_RGB_ARB
#undef GL_OPERAND1_RGB_EXT
#undef GL_OPERAND2_ALPHA
#undef GL_OPERAND2_ALPHA_ARB
#undef GL_OPERAND2_ALPHA_EXT
#undef GL_OPERAND2_RGB
#undef GL_OPERAND2_RGB_ARB
#undef GL_OPERAND2_RGB_EXT
#undef GL_OPERAND3_ALPHA_NV
#undef GL_OPERAND3_RGB_NV
#undef GL_OPTIMAL_TILING_EXT
#undef GL_OP_ADD_EXT
#undef GL_OP_CLAMP_EXT
#undef GL_OP_CROSS_PRODUCT_EXT
#undef GL_OP_DOT3_EXT
#undef GL_OP_DOT4_EXT
#undef GL_OP_EXP_BASE_2_EXT
#undef GL_OP_FLOOR_EXT
#undef GL_OP_FRAC_EXT
#undef GL_OP_INDEX_EXT
#undef GL_OP_LOG_BASE_2_EXT
#undef GL_OP_MADD_EXT
#undef GL_OP_MAX_EXT
#undef GL_OP_MIN_EXT
#undef GL_OP_MOV_EXT
#undef GL_OP_MULTIPLY_MATRIX_EXT
#undef GL_OP_MUL_EXT
#undef GL_OP_NEGATE_EXT
#undef GL_OP_POWER_EXT
#undef GL_OP_RECIP_EXT
#undef GL_OP_RECIP_SQRT_EXT
#undef GL_OP_ROUND_EXT
#undef GL_OP_SET_GE_EXT
#undef GL_OP_SET_LT_EXT
#undef GL_OP_SUB_EXT
#undef GL_OUTPUT_COLOR0_EXT
#undef GL_OUTPUT_COLOR1_EXT
#undef GL_OUTPUT_FOG_EXT
#undef GL_OUTPUT_TEXTURE_COORD0_EXT
#undef GL_OUTPUT_TEXTURE_COORD10_EXT
#undef GL_OUTPUT_TEXTURE_COORD11_EXT
#undef GL_OUTPUT_TEXTURE_COORD12_EXT
#undef GL_OUTPUT_TEXTURE_COORD13_EXT
#undef GL_OUTPUT_TEXTURE_COORD14_EXT
#undef GL_OUTPUT_TEXTURE_COORD15_EXT
#undef GL_OUTPUT_TEXTURE_COORD16_EXT
#undef GL_OUTPUT_TEXTURE_COORD17_EXT
#undef GL_OUTPUT_TEXTURE_COORD18_EXT
#undef GL_OUTPUT_TEXTURE_COORD19_EXT
#undef GL_OUTPUT_TEXTURE_COORD1_EXT
#undef GL_OUTPUT_TEXTURE_COORD20_EXT
#undef GL_OUTPUT_TEXTURE_COORD21_EXT
#undef GL_OUTPUT_TEXTURE_COORD22_EXT
#undef GL_OUTPUT_TEXTURE_COORD23_EXT
#undef GL_OUTPUT_TEXTURE_COORD24_EXT
#undef GL_OUTPUT_TEXTURE_COORD25_EXT
#undef GL_OUTPUT_TEXTURE_COORD26_EXT
#undef GL_OUTPUT_TEXTURE_COORD27_EXT
#undef GL_OUTPUT_TEXTURE_COORD28_EXT
#undef GL_OUTPUT_TEXTURE_COORD29_EXT
#undef GL_OUTPUT_TEXTURE_COORD2_EXT
#undef GL_OUTPUT_TEXTURE_COORD30_EXT
#undef GL_OUTPUT_TEXTURE_COORD31_EXT
#undef GL_OUTPUT_TEXTURE_COORD3_EXT
#undef GL_OUTPUT_TEXTURE_COORD4_EXT
#undef GL_OUTPUT_TEXTURE_COORD5_EXT
#undef GL_OUTPUT_TEXTURE_COORD6_EXT
#undef GL_OUTPUT_TEXTURE_COORD7_EXT
#undef GL_OUTPUT_TEXTURE_COORD8_EXT
#undef GL_OUTPUT_TEXTURE_COORD9_EXT
#undef GL_OUTPUT_VERTEX_EXT
#undef GL_OVERLAY_KHR
#undef GL_OVERLAY_NV
#undef GL_PACK_CMYK_HINT_EXT
#undef GL_PACK_COMPRESSED_BLOCK_DEPTH
#undef GL_PACK_COMPRESSED_BLOCK_HEIGHT
#undef GL_PACK_COMPRESSED_BLOCK_SIZE
#undef GL_PACK_COMPRESSED_BLOCK_WIDTH
#undef GL_PACK_IMAGE_HEIGHT
#undef GL_PACK_IMAGE_HEIGHT_EXT
#undef GL_PACK_INVERT_MESA
#undef GL_PACK_RESAMPLE_OML
#undef GL_PACK_RESAMPLE_SGIX
#undef GL_PACK_ROW_BYTES_APPLE
#undef GL_PACK_SKIP_IMAGES
#undef GL_PACK_SKIP_IMAGES_EXT
#undef GL_PACK_SUBSAMPLE_RATE_SGIX
#undef GL_PARALLEL_ARRAYS_INTEL
#undef GL_PARAMETER_BUFFER
#undef GL_PARAMETER_BUFFER_ARB
#undef GL_PARAMETER_BUFFER_BINDING
#undef GL_PARAMETER_BUFFER_BINDING_ARB
#undef GL_PARTIAL_SUCCESS_NV
#undef GL_PASS_THROUGH_NV
#undef GL_PATCHES
#undef GL_PATCH_DEFAULT_INNER_LEVEL
#undef GL_PATCH_DEFAULT_OUTER_LEVEL
#undef GL_PATCH_VERTICES
#undef GL_PATH_CLIENT_LENGTH_NV
#undef GL_PATH_COMMAND_COUNT_NV
#undef GL_PATH_COMPUTED_LENGTH_NV
#undef GL_PATH_COORD_COUNT_NV
#undef GL_PATH_COVER_DEPTH_FUNC_NV
#undef GL_PATH_DASH_ARRAY_COUNT_NV
#undef GL_PATH_DASH_CAPS_NV
#undef GL_PATH_DASH_OFFSET_NV
#undef GL_PATH_DASH_OFFSET_RESET_NV
#undef GL_PATH_END_CAPS_NV
#undef GL_PATH_ERROR_POSITION_NV
#undef GL_PATH_FILL_BOUNDING_BOX_NV
#undef GL_PATH_FILL_COVER_MODE_NV
#undef GL_PATH_FILL_MASK_NV
#undef GL_PATH_FILL_MODE_NV
#undef GL_PATH_FOG_GEN_MODE_NV
#undef GL_PATH_FORMAT_PS_NV
#undef GL_PATH_FORMAT_SVG_NV
#undef GL_PATH_GEN_COEFF_NV
#undef GL_PATH_GEN_COLOR_FORMAT_NV
#undef GL_PATH_GEN_COMPONENTS_NV
#undef GL_PATH_GEN_MODE_NV
#undef GL_PATH_INITIAL_DASH_CAP_NV
#undef GL_PATH_INITIAL_END_CAP_NV
#undef GL_PATH_JOIN_STYLE_NV
#undef GL_PATH_MITER_LIMIT_NV
#undef GL_PATH_OBJECT_BOUNDING_BOX_NV
#undef GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#undef GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#undef GL_PATH_STENCIL_FUNC_NV
#undef GL_PATH_STENCIL_REF_NV
#undef GL_PATH_STENCIL_VALUE_MASK_NV
#undef GL_PATH_STROKE_BOUNDING_BOX_NV
#undef GL_PATH_STROKE_COVER_MODE_NV
#undef GL_PATH_STROKE_MASK_NV
#undef GL_PATH_STROKE_WIDTH_NV
#undef GL_PATH_TERMINAL_DASH_CAP_NV
#undef GL_PATH_TERMINAL_END_CAP_NV
#undef GL_PERCENTAGE_AMD
#undef GL_PERFMON_RESULT_AMD
#undef GL_PERFMON_RESULT_AVAILABLE_AMD
#undef GL_PERFMON_RESULT_SIZE_AMD
#undef GL_PERFORMANCE_MONITOR_AMD
#undef GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
#undef GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
#undef GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
#undef GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
#undef GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
#undef GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
#undef GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
#undef GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
#undef GL_PERFQUERY_COUNTER_EVENT_INTEL
#undef GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
#undef GL_PERFQUERY_COUNTER_RAW_INTEL
#undef GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
#undef GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
#undef GL_PERFQUERY_DONOT_FLUSH_INTEL
#undef GL_PERFQUERY_FLUSH_INTEL
#undef GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
#undef GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
#undef GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
#undef GL_PERFQUERY_SINGLE_CONTEXT_INTEL
#undef GL_PERFQUERY_WAIT_INTEL
#undef GL_PERTURB_EXT
#undef GL_PER_GPU_STORAGE_BIT_NV
#undef GL_PER_GPU_STORAGE_NV
#undef GL_PER_STAGE_CONSTANTS_NV
#undef GL_PHONG_HINT_WIN
#undef GL_PHONG_WIN
#undef GL_PINLIGHT_NV
#undef GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD
#undef GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD
#undef GL_PIXEL_BUFFER_BARRIER_BIT
#undef GL_PIXEL_BUFFER_BARRIER_BIT_EXT
#undef GL_PIXEL_COUNTER_BITS_NV
#undef GL_PIXEL_COUNT_AVAILABLE_NV
#undef GL_PIXEL_COUNT_NV
#undef GL_PIXEL_CUBIC_WEIGHT_EXT
#undef GL_PIXEL_MAG_FILTER_EXT
#undef GL_PIXEL_MIN_FILTER_EXT
#undef GL_PIXEL_PACK_BUFFER
#undef GL_PIXEL_PACK_BUFFER_ARB
#undef GL_PIXEL_PACK_BUFFER_BINDING
#undef GL_PIXEL_PACK_BUFFER_BINDING_ARB
#undef GL_PIXEL_PACK_BUFFER_BINDING_EXT
#undef GL_PIXEL_PACK_BUFFER_EXT
#undef GL_PIXEL_SUBSAMPLE_2424_SGIX
#undef GL_PIXEL_SUBSAMPLE_4242_SGIX
#undef GL_PIXEL_SUBSAMPLE_4444_SGIX
#undef GL_PIXEL_TRANSFORM_2D_EXT
#undef GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
#undef GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#undef GL_PIXEL_UNPACK_BUFFER
#undef GL_PIXEL_UNPACK_BUFFER_ARB
#undef GL_PIXEL_UNPACK_BUFFER_BINDING
#undef GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
#undef GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
#undef GL_PIXEL_UNPACK_BUFFER_EXT
#undef GL_PLUS_CLAMPED_ALPHA_NV
#undef GL_PLUS_CLAMPED_NV
#undef GL_PLUS_DARKER_NV
#undef GL_PLUS_NV
#undef GL_PN_TRIANGLES_ATI
#undef GL_PN_TRIANGLES_NORMAL_MODE_ATI
#undef GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
#undef GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
#undef GL_PN_TRIANGLES_POINT_MODE_ATI
#undef GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
#undef GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
#undef GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#undef GL_POINT_DISTANCE_ATTENUATION
#undef GL_POINT_DISTANCE_ATTENUATION_ARB
#undef GL_POINT_FADE_THRESHOLD_SIZE
#undef GL_POINT_FADE_THRESHOLD_SIZE_ARB
#undef GL_POINT_FADE_THRESHOLD_SIZE_EXT
#undef GL_POINT_SIZE_MAX
#undef GL_POINT_SIZE_MAX_ARB
#undef GL_POINT_SIZE_MAX_EXT
#undef GL_POINT_SIZE_MIN
#undef GL_POINT_SIZE_MIN_ARB
#undef GL_POINT_SIZE_MIN_EXT
#undef GL_POINT_SPRITE
#undef GL_POINT_SPRITE_ARB
#undef GL_POINT_SPRITE_COORD_ORIGIN
#undef GL_POINT_SPRITE_NV
#undef GL_POINT_SPRITE_R_MODE_NV
#undef GL_POLYGON_OFFSET_BIAS_EXT
#undef GL_POLYGON_OFFSET_CLAMP
#undef GL_POLYGON_OFFSET_CLAMP_EXT
#undef GL_POLYGON_OFFSET_COMMAND_NV
#undef GL_POLYGON_OFFSET_EXT
#undef GL_POLYGON_OFFSET_FACTOR_EXT
#undef GL_POST_COLOR_MATRIX_ALPHA_BIAS
#undef GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
#undef GL_POST_COLOR_MATRIX_ALPHA_SCALE
#undef GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
#undef GL_POST_COLOR_MATRIX_BLUE_BIAS
#undef GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
#undef GL_POST_COLOR_MATRIX_BLUE_SCALE
#undef GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
#undef GL_POST_COLOR_MATRIX_COLOR_TABLE
#undef GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#undef GL_POST_COLOR_MATRIX_GREEN_BIAS
#undef GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
#undef GL_POST_COLOR_MATRIX_GREEN_SCALE
#undef GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
#undef GL_POST_COLOR_MATRIX_RED_BIAS
#undef GL_POST_COLOR_MATRIX_RED_BIAS_SGI
#undef GL_POST_COLOR_MATRIX_RED_SCALE
#undef GL_POST_COLOR_MATRIX_RED_SCALE_SGI
#undef GL_POST_CONVOLUTION_ALPHA_BIAS
#undef GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
#undef GL_POST_CONVOLUTION_ALPHA_SCALE
#undef GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
#undef GL_POST_CONVOLUTION_BLUE_BIAS
#undef GL_POST_CONVOLUTION_BLUE_BIAS_EXT
#undef GL_POST_CONVOLUTION_BLUE_SCALE
#undef GL_POST_CONVOLUTION_BLUE_SCALE_EXT
#undef GL_POST_CONVOLUTION_COLOR_TABLE
#undef GL_POST_CONVOLUTION_COLOR_TABLE_SGI
#undef GL_POST_CONVOLUTION_GREEN_BIAS
#undef GL_POST_CONVOLUTION_GREEN_BIAS_EXT
#undef GL_POST_CONVOLUTION_GREEN_SCALE
#undef GL_POST_CONVOLUTION_GREEN_SCALE_EXT
#undef GL_POST_CONVOLUTION_RED_BIAS
#undef GL_POST_CONVOLUTION_RED_BIAS_EXT
#undef GL_POST_CONVOLUTION_RED_SCALE
#undef GL_POST_CONVOLUTION_RED_SCALE_EXT
#undef GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
#undef GL_POST_TEXTURE_FILTER_BIAS_SGIX
#undef GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
#undef GL_POST_TEXTURE_FILTER_SCALE_SGIX
#undef GL_PREFER_DOUBLEBUFFER_HINT_PGI
#undef GL_PRESENT_DURATION_NV
#undef GL_PRESENT_TIME_NV
#undef GL_PRESERVE_ATI
#undef GL_PREVIOUS
#undef GL_PREVIOUS_ARB
#undef GL_PREVIOUS_EXT
#undef GL_PREVIOUS_TEXTURE_INPUT_NV
#undef GL_PRIMARY_COLOR
#undef GL_PRIMARY_COLOR_ARB
#undef GL_PRIMARY_COLOR_EXT
#undef GL_PRIMARY_COLOR_NV
#undef GL_PRIMITIVES_GENERATED
#undef GL_PRIMITIVES_GENERATED_EXT
#undef GL_PRIMITIVES_GENERATED_NV
#undef GL_PRIMITIVES_SUBMITTED
#undef GL_PRIMITIVES_SUBMITTED_ARB
#undef GL_PRIMITIVE_BOUNDING_BOX_ARB
#undef GL_PRIMITIVE_ID_NV
#undef GL_PRIMITIVE_RESTART
#undef GL_PRIMITIVE_RESTART_FIXED_INDEX
#undef GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
#undef GL_PRIMITIVE_RESTART_INDEX
#undef GL_PRIMITIVE_RESTART_INDEX_NV
#undef GL_PRIMITIVE_RESTART_NV
#undef GL_PROGRAM
#undef GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
#undef GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
#undef GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
#undef GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
#undef GL_PROGRAM_ADDRESS_REGISTERS_ARB
#undef GL_PROGRAM_ALU_INSTRUCTIONS_ARB
#undef GL_PROGRAM_ATTRIBS_ARB
#undef GL_PROGRAM_ATTRIB_COMPONENTS_NV
#undef GL_PROGRAM_BINARY_FORMATS
#undef GL_PROGRAM_BINARY_LENGTH
#undef GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#undef GL_PROGRAM_BINDING_ARB
#undef GL_PROGRAM_ERROR_POSITION_ARB
#undef GL_PROGRAM_ERROR_POSITION_NV
#undef GL_PROGRAM_ERROR_STRING_ARB
#undef GL_PROGRAM_ERROR_STRING_NV
#undef GL_PROGRAM_FORMAT_ARB
#undef GL_PROGRAM_FORMAT_ASCII_ARB
#undef GL_PROGRAM_INPUT
#undef GL_PROGRAM_INSTRUCTIONS_ARB
#undef GL_PROGRAM_LENGTH_ARB
#undef GL_PROGRAM_LENGTH_NV
#undef GL_PROGRAM_MATRIX_EXT
#undef GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
#undef GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#undef GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#undef GL_PROGRAM_NATIVE_ATTRIBS_ARB
#undef GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#undef GL_PROGRAM_NATIVE_PARAMETERS_ARB
#undef GL_PROGRAM_NATIVE_TEMPORARIES_ARB
#undef GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#undef GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#undef GL_PROGRAM_OBJECT_ARB
#undef GL_PROGRAM_OBJECT_EXT
#undef GL_PROGRAM_OUTPUT
#undef GL_PROGRAM_PARAMETERS_ARB
#undef GL_PROGRAM_PARAMETER_NV
#undef GL_PROGRAM_PIPELINE
#undef GL_PROGRAM_PIPELINE_BINDING
#undef GL_PROGRAM_PIPELINE_OBJECT_EXT
#undef GL_PROGRAM_POINT_SIZE
#undef GL_PROGRAM_POINT_SIZE_ARB
#undef GL_PROGRAM_POINT_SIZE_EXT
#undef GL_PROGRAM_RESIDENT_NV
#undef GL_PROGRAM_RESULT_COMPONENTS_NV
#undef GL_PROGRAM_SEPARABLE
#undef GL_PROGRAM_STRING_ARB
#undef GL_PROGRAM_STRING_NV
#undef GL_PROGRAM_TARGET_NV
#undef GL_PROGRAM_TEMPORARIES_ARB
#undef GL_PROGRAM_TEX_INDIRECTIONS_ARB
#undef GL_PROGRAM_TEX_INSTRUCTIONS_ARB
#undef GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
#undef GL_PROTECTED_MEMORY_OBJECT_EXT
#undef GL_PROVOKING_VERTEX
#undef GL_PROVOKING_VERTEX_EXT
#undef GL_PROXY_COLOR_TABLE
#undef GL_PROXY_COLOR_TABLE_SGI
#undef GL_PROXY_HISTOGRAM
#undef GL_PROXY_HISTOGRAM_EXT
#undef GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
#undef GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#undef GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
#undef GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
#undef GL_PROXY_TEXTURE_1D_ARRAY
#undef GL_PROXY_TEXTURE_1D_ARRAY_EXT
#undef GL_PROXY_TEXTURE_1D_EXT
#undef GL_PROXY_TEXTURE_1D_STACK_MESAX
#undef GL_PROXY_TEXTURE_2D_ARRAY
#undef GL_PROXY_TEXTURE_2D_ARRAY_EXT
#undef GL_PROXY_TEXTURE_2D_EXT
#undef GL_PROXY_TEXTURE_2D_MULTISAMPLE
#undef GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#undef GL_PROXY_TEXTURE_2D_STACK_MESAX
#undef GL_PROXY_TEXTURE_3D
#undef GL_PROXY_TEXTURE_3D_EXT
#undef GL_PROXY_TEXTURE_COLOR_TABLE_SGI
#undef GL_PROXY_TEXTURE_CUBE_MAP
#undef GL_PROXY_TEXTURE_CUBE_MAP_ARB
#undef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
#undef GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
#undef GL_PROXY_TEXTURE_CUBE_MAP_EXT
#undef GL_PROXY_TEXTURE_RECTANGLE
#undef GL_PROXY_TEXTURE_RECTANGLE_ARB
#undef GL_PROXY_TEXTURE_RECTANGLE_NV
#undef GL_PURGEABLE_APPLE
#undef GL_PURGED_CONTEXT_RESET_NV
#undef GL_QUADRATIC_CURVE_TO_NV
#undef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#undef GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
#undef GL_QUAD_MESH_SUN
#undef GL_QUARTER_BIT_ATI
#undef GL_QUERY
#undef GL_QUERY_ALL_EVENT_BITS_AMD
#undef GL_QUERY_BUFFER
#undef GL_QUERY_BUFFER_AMD
#undef GL_QUERY_BUFFER_BARRIER_BIT
#undef GL_QUERY_BUFFER_BINDING
#undef GL_QUERY_BUFFER_BINDING_AMD
#undef GL_QUERY_BY_REGION_NO_WAIT
#undef GL_QUERY_BY_REGION_NO_WAIT_INVERTED
#undef GL_QUERY_BY_REGION_NO_WAIT_NV
#undef GL_QUERY_BY_REGION_WAIT
#undef GL_QUERY_BY_REGION_WAIT_INVERTED
#undef GL_QUERY_BY_REGION_WAIT_NV
#undef GL_QUERY_COUNTER_BITS
#undef GL_QUERY_COUNTER_BITS_ARB
#undef GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
#undef GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
#undef GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
#undef GL_QUERY_NO_WAIT
#undef GL_QUERY_NO_WAIT_INVERTED
#undef GL_QUERY_NO_WAIT_NV
#undef GL_QUERY_OBJECT_AMD
#undef GL_QUERY_OBJECT_EXT
#undef GL_QUERY_RESULT
#undef GL_QUERY_RESULT_ARB
#undef GL_QUERY_RESULT_AVAILABLE
#undef GL_QUERY_RESULT_AVAILABLE_ARB
#undef GL_QUERY_RESULT_NO_WAIT
#undef GL_QUERY_RESULT_NO_WAIT_AMD
#undef GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
#undef GL_QUERY_TARGET
#undef GL_QUERY_WAIT
#undef GL_QUERY_WAIT_INVERTED
#undef GL_QUERY_WAIT_NV
#undef GL_R11F_G11F_B10F
#undef GL_R11F_G11F_B10F_EXT
#undef GL_R16
#undef GL_R16F
#undef GL_R16I
#undef GL_R16UI
#undef GL_R16_SNORM
#undef GL_R1UI_C3F_V3F_SUN
#undef GL_R1UI_C4F_N3F_V3F_SUN
#undef GL_R1UI_C4UB_V3F_SUN
#undef GL_R1UI_N3F_V3F_SUN
#undef GL_R1UI_T2F_C4F_N3F_V3F_SUN
#undef GL_R1UI_T2F_N3F_V3F_SUN
#undef GL_R1UI_T2F_V3F_SUN
#undef GL_R1UI_V3F_SUN
#undef GL_R32F
#undef GL_R32I
#undef GL_R32UI
#undef GL_R8
#undef GL_R8I
#undef GL_R8UI
#undef GL_R8_SNORM
#undef GL_RASTERIZER_DISCARD
#undef GL_RASTERIZER_DISCARD_EXT
#undef GL_RASTERIZER_DISCARD_NV
#undef GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
#undef GL_RASTER_MULTISAMPLE_EXT
#undef GL_RASTER_POSITION_UNCLIPPED_IBM
#undef GL_RASTER_SAMPLES_EXT
#undef GL_READ_FRAMEBUFFER
#undef GL_READ_FRAMEBUFFER_BINDING
#undef GL_READ_FRAMEBUFFER_BINDING_EXT
#undef GL_READ_FRAMEBUFFER_EXT
#undef GL_READ_ONLY
#undef GL_READ_ONLY_ARB
#undef GL_READ_PIXELS
#undef GL_READ_PIXELS_FORMAT
#undef GL_READ_PIXELS_TYPE
#undef GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
#undef GL_READ_PIXEL_DATA_RANGE_NV
#undef GL_READ_PIXEL_DATA_RANGE_POINTER_NV
#undef GL_READ_WRITE
#undef GL_READ_WRITE_ARB
#undef GL_RECLAIM_MEMORY_HINT_PGI
#undef GL_RECT_NV
#undef GL_REDUCE
#undef GL_REDUCE_EXT
#undef GL_RED_BIT_ATI
#undef GL_RED_INTEGER
#undef GL_RED_INTEGER_EXT
#undef GL_RED_MAX_CLAMP_INGR
#undef GL_RED_MIN_CLAMP_INGR
#undef GL_RED_NV
#undef GL_RED_SNORM
#undef GL_REFERENCED_BY_COMPUTE_SHADER
#undef GL_REFERENCED_BY_FRAGMENT_SHADER
#undef GL_REFERENCED_BY_GEOMETRY_SHADER
#undef GL_REFERENCED_BY_TESS_CONTROL_SHADER
#undef GL_REFERENCED_BY_TESS_EVALUATION_SHADER
#undef GL_REFERENCED_BY_VERTEX_SHADER
#undef GL_REFLECTION_MAP
#undef GL_REFLECTION_MAP_ARB
#undef GL_REFLECTION_MAP_EXT
#undef GL_REFLECTION_MAP_NV
#undef GL_REGISTER_COMBINERS_NV
#undef GL_REG_0_ATI
#undef GL_REG_1_ATI
#undef GL_REG_2_ATI
#undef GL_REG_3_ATI
#undef GL_REG_4_ATI
#undef GL_REG_5_ATI
#undef GL_RELATIVE_ARC_TO_NV
#undef GL_RELATIVE_CONIC_CURVE_TO_NV
#undef GL_RELATIVE_CUBIC_CURVE_TO_NV
#undef GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#undef GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#undef GL_RELATIVE_LARGE_CW_ARC_TO_NV
#undef GL_RELATIVE_LINE_TO_NV
#undef GL_RELATIVE_MOVE_TO_NV
#undef GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#undef GL_RELATIVE_RECT_NV
#undef GL_RELATIVE_ROUNDED_RECT2_NV
#undef GL_RELATIVE_ROUNDED_RECT4_NV
#undef GL_RELATIVE_ROUNDED_RECT8_NV
#undef GL_RELATIVE_ROUNDED_RECT_NV
#undef GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#undef GL_RELATIVE_SMALL_CW_ARC_TO_NV
#undef GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#undef GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#undef GL_RELATIVE_VERTICAL_LINE_TO_NV
#undef GL_RELEASED_APPLE
#undef GL_RENDERBUFFER
#undef GL_RENDERBUFFER_ALPHA_SIZE
#undef GL_RENDERBUFFER_ALPHA_SIZE_EXT
#undef GL_RENDERBUFFER_BINDING
#undef GL_RENDERBUFFER_BINDING_EXT
#undef GL_RENDERBUFFER_BLUE_SIZE
#undef GL_RENDERBUFFER_BLUE_SIZE_EXT
#undef GL_RENDERBUFFER_COLOR_SAMPLES_NV
#undef GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
#undef GL_RENDERBUFFER_DEPTH_SIZE
#undef GL_RENDERBUFFER_DEPTH_SIZE_EXT
#undef GL_RENDERBUFFER_EXT
#undef GL_RENDERBUFFER_FREE_MEMORY_ATI
#undef GL_RENDERBUFFER_GREEN_SIZE
#undef GL_RENDERBUFFER_GREEN_SIZE_EXT
#undef GL_RENDERBUFFER_HEIGHT
#undef GL_RENDERBUFFER_HEIGHT_EXT
#undef GL_RENDERBUFFER_INTERNAL_FORMAT
#undef GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
#undef GL_RENDERBUFFER_RED_SIZE
#undef GL_RENDERBUFFER_RED_SIZE_EXT
#undef GL_RENDERBUFFER_SAMPLES
#undef GL_RENDERBUFFER_SAMPLES_EXT
#undef GL_RENDERBUFFER_STENCIL_SIZE
#undef GL_RENDERBUFFER_STENCIL_SIZE_EXT
#undef GL_RENDERBUFFER_WIDTH
#undef GL_RENDERBUFFER_WIDTH_EXT
#undef GL_RENDER_GPU_MASK_NV
#undef GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
#undef GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
#undef GL_REPLACEMENT_CODE_ARRAY_SUN
#undef GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
#undef GL_REPLACEMENT_CODE_SUN
#undef GL_REPLACE_EXT
#undef GL_REPLACE_MIDDLE_SUN
#undef GL_REPLACE_OLDEST_SUN
#undef GL_REPLACE_VALUE_AMD
#undef GL_REPLICATE_BORDER
#undef GL_RESAMPLE_AVERAGE_OML
#undef GL_RESAMPLE_DECIMATE_OML
#undef GL_RESAMPLE_DECIMATE_SGIX
#undef GL_RESAMPLE_REPLICATE_OML
#undef GL_RESAMPLE_REPLICATE_SGIX
#undef GL_RESAMPLE_ZERO_FILL_OML
#undef GL_RESAMPLE_ZERO_FILL_SGIX
#undef GL_RESCALE_NORMAL
#undef GL_RESCALE_NORMAL_EXT
#undef GL_RESET_NOTIFICATION_STRATEGY
#undef GL_RESET_NOTIFICATION_STRATEGY_ARB
#undef GL_RESTART_PATH_NV
#undef GL_RESTART_SUN
#undef GL_RETAINED_APPLE
#undef GL_RG
#undef GL_RG16
#undef GL_RG16F
#undef GL_RG16I
#undef GL_RG16UI
#undef GL_RG16_SNORM
#undef GL_RG32F
#undef GL_RG32I
#undef GL_RG32UI
#undef GL_RG8
#undef GL_RG8I
#undef GL_RG8UI
#undef GL_RG8_SNORM
#undef GL_RGB10_A2UI
#undef GL_RGB10_A2_EXT
#undef GL_RGB10_EXT
#undef GL_RGB12_EXT
#undef GL_RGB16F
#undef GL_RGB16F_ARB
#undef GL_RGB16I
#undef GL_RGB16I_EXT
#undef GL_RGB16UI
#undef GL_RGB16UI_EXT
#undef GL_RGB16_EXT
#undef GL_RGB16_SNORM
#undef GL_RGB2_EXT
#undef GL_RGB32F
#undef GL_RGB32F_ARB
#undef GL_RGB32I
#undef GL_RGB32I_EXT
#undef GL_RGB32UI
#undef GL_RGB32UI_EXT
#undef GL_RGB4_EXT
#undef GL_RGB4_S3TC
#undef GL_RGB565
#undef GL_RGB5_A1_EXT
#undef GL_RGB5_EXT
#undef GL_RGB8I
#undef GL_RGB8I_EXT
#undef GL_RGB8UI
#undef GL_RGB8UI_EXT
#undef GL_RGB8_EXT
#undef GL_RGB8_SNORM
#undef GL_RGB9_E5
#undef GL_RGB9_E5_EXT
#undef GL_RGBA12_EXT
#undef GL_RGBA16F
#undef GL_RGBA16F_ARB
#undef GL_RGBA16I
#undef GL_RGBA16I_EXT
#undef GL_RGBA16UI
#undef GL_RGBA16UI_EXT
#undef GL_RGBA16_EXT
#undef GL_RGBA16_SNORM
#undef GL_RGBA2_EXT
#undef GL_RGBA32F
#undef GL_RGBA32F_ARB
#undef GL_RGBA32I
#undef GL_RGBA32I_EXT
#undef GL_RGBA32UI
#undef GL_RGBA32UI_EXT
#undef GL_RGBA4_DXT5_S3TC
#undef GL_RGBA4_EXT
#undef GL_RGBA4_S3TC
#undef GL_RGBA8I
#undef GL_RGBA8I_EXT
#undef GL_RGBA8UI
#undef GL_RGBA8UI_EXT
#undef GL_RGBA8_EXT
#undef GL_RGBA8_SNORM
#undef GL_RGBA_DXT5_S3TC
#undef GL_RGBA_FLOAT16_APPLE
#undef GL_RGBA_FLOAT16_ATI
#undef GL_RGBA_FLOAT32_APPLE
#undef GL_RGBA_FLOAT32_ATI
#undef GL_RGBA_FLOAT_MODE_ARB
#undef GL_RGBA_FLOAT_MODE_ATI
#undef GL_RGBA_INTEGER
#undef GL_RGBA_INTEGER_EXT
#undef GL_RGBA_INTEGER_MODE_EXT
#undef GL_RGBA_S3TC
#undef GL_RGBA_SIGNED_COMPONENTS_EXT
#undef GL_RGBA_SNORM
#undef GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
#undef GL_RGB_422_APPLE
#undef GL_RGB_FLOAT16_APPLE
#undef GL_RGB_FLOAT16_ATI
#undef GL_RGB_FLOAT32_APPLE
#undef GL_RGB_FLOAT32_ATI
#undef GL_RGB_INTEGER
#undef GL_RGB_INTEGER_EXT
#undef GL_RGB_RAW_422_APPLE
#undef GL_RGB_S3TC
#undef GL_RGB_SCALE
#undef GL_RGB_SCALE_ARB
#undef GL_RGB_SCALE_EXT
#undef GL_RGB_SNORM
#undef GL_RG_INTEGER
#undef GL_RG_SNORM
#undef GL_ROUNDED_RECT2_NV
#undef GL_ROUNDED_RECT4_NV
#undef GL_ROUNDED_RECT8_NV
#undef GL_ROUNDED_RECT_NV
#undef GL_ROUND_NV
#undef GL_SAMPLER
#undef GL_SAMPLER_1D
#undef GL_SAMPLER_1D_ARB
#undef GL_SAMPLER_1D_ARRAY
#undef GL_SAMPLER_1D_ARRAY_EXT
#undef GL_SAMPLER_1D_ARRAY_SHADOW
#undef GL_SAMPLER_1D_ARRAY_SHADOW_EXT
#undef GL_SAMPLER_1D_SHADOW
#undef GL_SAMPLER_1D_SHADOW_ARB
#undef GL_SAMPLER_2D
#undef GL_SAMPLER_2D_ARB
#undef GL_SAMPLER_2D_ARRAY
#undef GL_SAMPLER_2D_ARRAY_EXT
#undef GL_SAMPLER_2D_ARRAY_SHADOW
#undef GL_SAMPLER_2D_ARRAY_SHADOW_EXT
#undef GL_SAMPLER_2D_MULTISAMPLE
#undef GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#undef GL_SAMPLER_2D_RECT
#undef GL_SAMPLER_2D_RECT_ARB
#undef GL_SAMPLER_2D_RECT_SHADOW
#undef GL_SAMPLER_2D_RECT_SHADOW_ARB
#undef GL_SAMPLER_2D_SHADOW
#undef GL_SAMPLER_2D_SHADOW_ARB
#undef GL_SAMPLER_3D
#undef GL_SAMPLER_3D_ARB
#undef GL_SAMPLER_BINDING
#undef GL_SAMPLER_BUFFER
#undef GL_SAMPLER_BUFFER_AMD
#undef GL_SAMPLER_BUFFER_EXT
#undef GL_SAMPLER_CUBE
#undef GL_SAMPLER_CUBE_ARB
#undef GL_SAMPLER_CUBE_MAP_ARRAY
#undef GL_SAMPLER_CUBE_MAP_ARRAY_ARB
#undef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
#undef GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
#undef GL_SAMPLER_CUBE_SHADOW
#undef GL_SAMPLER_CUBE_SHADOW_EXT
#undef GL_SAMPLER_OBJECT_AMD
#undef GL_SAMPLER_RENDERBUFFER_NV
#undef GL_SAMPLES
#undef GL_SAMPLES_3DFX
#undef GL_SAMPLES_ARB
#undef GL_SAMPLES_EXT
#undef GL_SAMPLES_PASSED
#undef GL_SAMPLES_PASSED_ARB
#undef GL_SAMPLES_SGIS
#undef GL_SAMPLE_ALPHA_TO_COVERAGE
#undef GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
#undef GL_SAMPLE_ALPHA_TO_MASK_EXT
#undef GL_SAMPLE_ALPHA_TO_MASK_SGIS
#undef GL_SAMPLE_ALPHA_TO_ONE
#undef GL_SAMPLE_ALPHA_TO_ONE_ARB
#undef GL_SAMPLE_ALPHA_TO_ONE_EXT
#undef GL_SAMPLE_ALPHA_TO_ONE_SGIS
#undef GL_SAMPLE_BUFFERS
#undef GL_SAMPLE_BUFFERS_3DFX
#undef GL_SAMPLE_BUFFERS_ARB
#undef GL_SAMPLE_BUFFERS_EXT
#undef GL_SAMPLE_BUFFERS_SGIS
#undef GL_SAMPLE_COVERAGE
#undef GL_SAMPLE_COVERAGE_ARB
#undef GL_SAMPLE_COVERAGE_INVERT
#undef GL_SAMPLE_COVERAGE_INVERT_ARB
#undef GL_SAMPLE_COVERAGE_VALUE
#undef GL_SAMPLE_COVERAGE_VALUE_ARB
#undef GL_SAMPLE_LOCATION_ARB
#undef GL_SAMPLE_LOCATION_NV
#undef GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
#undef GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
#undef GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
#undef GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
#undef GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
#undef GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV
#undef GL_SAMPLE_MASK
#undef GL_SAMPLE_MASK_EXT
#undef GL_SAMPLE_MASK_INVERT_EXT
#undef GL_SAMPLE_MASK_INVERT_SGIS
#undef GL_SAMPLE_MASK_NV
#undef GL_SAMPLE_MASK_SGIS
#undef GL_SAMPLE_MASK_VALUE
#undef GL_SAMPLE_MASK_VALUE_EXT
#undef GL_SAMPLE_MASK_VALUE_NV
#undef GL_SAMPLE_MASK_VALUE_SGIS
#undef GL_SAMPLE_PATTERN_EXT
#undef GL_SAMPLE_PATTERN_SGIS
#undef GL_SAMPLE_POSITION
#undef GL_SAMPLE_POSITION_NV
#undef GL_SAMPLE_SHADING
#undef GL_SAMPLE_SHADING_ARB
#undef GL_SATURATE_BIT_ATI
#undef GL_SCALAR_EXT
#undef GL_SCALEBIAS_HINT_SGIX
#undef GL_SCALED_RESOLVE_FASTEST_EXT
#undef GL_SCALED_RESOLVE_NICEST_EXT
#undef GL_SCALE_BY_FOUR_NV
#undef GL_SCALE_BY_ONE_HALF_NV
#undef GL_SCALE_BY_TWO_NV
#undef GL_SCISSOR_COMMAND_NV
#undef GL_SCREEN_COORDINATES_REND
#undef GL_SCREEN_KHR
#undef GL_SCREEN_NV
#undef GL_SECONDARY_COLOR_ARRAY
#undef GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
#undef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#undef GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
#undef GL_SECONDARY_COLOR_ARRAY_EXT
#undef GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
#undef GL_SECONDARY_COLOR_ARRAY_LIST_IBM
#undef GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
#undef GL_SECONDARY_COLOR_ARRAY_POINTER
#undef GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
#undef GL_SECONDARY_COLOR_ARRAY_SIZE
#undef GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
#undef GL_SECONDARY_COLOR_ARRAY_STRIDE
#undef GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
#undef GL_SECONDARY_COLOR_ARRAY_TYPE
#undef GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
#undef GL_SECONDARY_COLOR_NV
#undef GL_SECONDARY_INTERPOLATOR_ATI
#undef GL_SEPARABLE_2D
#undef GL_SEPARABLE_2D_EXT
#undef GL_SEPARATE_ATTRIBS
#undef GL_SEPARATE_ATTRIBS_EXT
#undef GL_SEPARATE_ATTRIBS_NV
#undef GL_SEPARATE_SPECULAR_COLOR
#undef GL_SEPARATE_SPECULAR_COLOR_EXT
#undef GL_SET_AMD
#undef GL_SHADER
#undef GL_SHADER_BINARY_FORMATS
#undef GL_SHADER_BINARY_FORMAT_SPIR_V
#undef GL_SHADER_BINARY_FORMAT_SPIR_V_ARB
#undef GL_SHADER_COMPILER
#undef GL_SHADER_CONSISTENT_NV
#undef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#undef GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
#undef GL_SHADER_IMAGE_ATOMIC
#undef GL_SHADER_IMAGE_LOAD
#undef GL_SHADER_IMAGE_STORE
#undef GL_SHADER_INCLUDE_ARB
#undef GL_SHADER_OBJECT_ARB
#undef GL_SHADER_OBJECT_EXT
#undef GL_SHADER_OPERATION_NV
#undef GL_SHADER_SOURCE_LENGTH
#undef GL_SHADER_STORAGE_BARRIER_BIT
#undef GL_SHADER_STORAGE_BLOCK
#undef GL_SHADER_STORAGE_BUFFER
#undef GL_SHADER_STORAGE_BUFFER_BINDING
#undef GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
#undef GL_SHADER_STORAGE_BUFFER_SIZE
#undef GL_SHADER_STORAGE_BUFFER_START
#undef GL_SHADER_TYPE
#undef GL_SHADING_LANGUAGE_VERSION
#undef GL_SHADING_LANGUAGE_VERSION_ARB
#undef GL_SHADOW_AMBIENT_SGIX
#undef GL_SHADOW_ATTENUATION_EXT
#undef GL_SHARED_EDGE_NV
#undef GL_SHARED_TEXTURE_PALETTE_EXT
#undef GL_SIGNALED
#undef GL_SIGNED_ALPHA8_NV
#undef GL_SIGNED_ALPHA_NV
#undef GL_SIGNED_HILO16_NV
#undef GL_SIGNED_HILO8_NV
#undef GL_SIGNED_HILO_NV
#undef GL_SIGNED_IDENTITY_NV
#undef GL_SIGNED_INTENSITY8_NV
#undef GL_SIGNED_INTENSITY_NV
#undef GL_SIGNED_LUMINANCE8_ALPHA8_NV
#undef GL_SIGNED_LUMINANCE8_NV
#undef GL_SIGNED_LUMINANCE_ALPHA_NV
#undef GL_SIGNED_LUMINANCE_NV
#undef GL_SIGNED_NEGATE_NV
#undef GL_SIGNED_NORMALIZED
#undef GL_SIGNED_RGB8_NV
#undef GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
#undef GL_SIGNED_RGBA8_NV
#undef GL_SIGNED_RGBA_NV
#undef GL_SIGNED_RGB_NV
#undef GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
#undef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
#undef GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
#undef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
#undef GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
#undef GL_SINGLE_COLOR
#undef GL_SINGLE_COLOR_EXT
#undef GL_SKIP_DECODE_EXT
#undef GL_SKIP_MISSING_GLYPH_NV
#undef GL_SLICE_ACCUM_SUN
#undef GL_SLUMINANCE
#undef GL_SLUMINANCE8
#undef GL_SLUMINANCE8_ALPHA8
#undef GL_SLUMINANCE8_ALPHA8_EXT
#undef GL_SLUMINANCE8_EXT
#undef GL_SLUMINANCE_ALPHA
#undef GL_SLUMINANCE_ALPHA_EXT
#undef GL_SLUMINANCE_EXT
#undef GL_SMALL_CCW_ARC_TO_NV
#undef GL_SMALL_CW_ARC_TO_NV
#undef GL_SMOOTH_CUBIC_CURVE_TO_NV
#undef GL_SMOOTH_LINE_WIDTH_GRANULARITY
#undef GL_SMOOTH_LINE_WIDTH_RANGE
#undef GL_SMOOTH_POINT_SIZE_GRANULARITY
#undef GL_SMOOTH_POINT_SIZE_RANGE
#undef GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#undef GL_SM_COUNT_NV
#undef GL_SOFTLIGHT_KHR
#undef GL_SOFTLIGHT_NV
#undef GL_SOURCE0_ALPHA
#undef GL_SOURCE0_ALPHA_ARB
#undef GL_SOURCE0_ALPHA_EXT
#undef GL_SOURCE0_RGB
#undef GL_SOURCE0_RGB_ARB
#undef GL_SOURCE0_RGB_EXT
#undef GL_SOURCE1_ALPHA
#undef GL_SOURCE1_ALPHA_ARB
#undef GL_SOURCE1_ALPHA_EXT
#undef GL_SOURCE1_RGB
#undef GL_SOURCE1_RGB_ARB
#undef GL_SOURCE1_RGB_EXT
#undef GL_SOURCE2_ALPHA
#undef GL_SOURCE2_ALPHA_ARB
#undef GL_SOURCE2_ALPHA_EXT
#undef GL_SOURCE2_RGB
#undef GL_SOURCE2_RGB_ARB
#undef GL_SOURCE2_RGB_EXT
#undef GL_SOURCE3_ALPHA_NV
#undef GL_SOURCE3_RGB_NV
#undef GL_SPARE0_NV
#undef GL_SPARE0_PLUS_SECONDARY_COLOR_NV
#undef GL_SPARE1_NV
#undef GL_SPARSE_BUFFER_PAGE_SIZE_ARB
#undef GL_SPARSE_STORAGE_BIT_ARB
#undef GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
#undef GL_SPIR_V_BINARY
#undef GL_SPIR_V_BINARY_ARB
#undef GL_SPIR_V_EXTENSIONS
#undef GL_SQUARE_NV
#undef GL_SR8_EXT
#undef GL_SRC0_ALPHA
#undef GL_SRC0_RGB
#undef GL_SRC1_ALPHA
#undef GL_SRC1_COLOR
#undef GL_SRC1_RGB
#undef GL_SRC2_ALPHA
#undef GL_SRC2_RGB
#undef GL_SRC_ATOP_NV
#undef GL_SRC_IN_NV
#undef GL_SRC_NV
#undef GL_SRC_OUT_NV
#undef GL_SRC_OVER_NV
#undef GL_SRGB
#undef GL_SRGB8
#undef GL_SRGB8_ALPHA8
#undef GL_SRGB8_ALPHA8_EXT
#undef GL_SRGB8_EXT
#undef GL_SRGB_ALPHA
#undef GL_SRGB_ALPHA_EXT
#undef GL_SRGB_DECODE_ARB
#undef GL_SRGB_EXT
#undef GL_SRGB_READ
#undef GL_SRGB_WRITE
#undef GL_STANDARD_FONT_FORMAT_NV
#undef GL_STANDARD_FONT_NAME_NV
#undef GL_STATIC_ATI
#undef GL_STATIC_COPY
#undef GL_STATIC_COPY_ARB
#undef GL_STATIC_DRAW
#undef GL_STATIC_DRAW_ARB
#undef GL_STATIC_READ
#undef GL_STATIC_READ_ARB
#undef GL_STATIC_VERTEX_ARRAY_IBM
#undef GL_STENCIL_ATTACHMENT
#undef GL_STENCIL_ATTACHMENT_EXT
#undef GL_STENCIL_BACK_FAIL
#undef GL_STENCIL_BACK_FAIL_ATI
#undef GL_STENCIL_BACK_FUNC
#undef GL_STENCIL_BACK_FUNC_ATI
#undef GL_STENCIL_BACK_OP_VALUE_AMD
#undef GL_STENCIL_BACK_PASS_DEPTH_FAIL
#undef GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
#undef GL_STENCIL_BACK_PASS_DEPTH_PASS
#undef GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
#undef GL_STENCIL_BACK_REF
#undef GL_STENCIL_BACK_VALUE_MASK
#undef GL_STENCIL_BACK_WRITEMASK
#undef GL_STENCIL_CLEAR_TAG_VALUE_EXT
#undef GL_STENCIL_COMPONENTS
#undef GL_STENCIL_INDEX1
#undef GL_STENCIL_INDEX16
#undef GL_STENCIL_INDEX16_EXT
#undef GL_STENCIL_INDEX1_EXT
#undef GL_STENCIL_INDEX4
#undef GL_STENCIL_INDEX4_EXT
#undef GL_STENCIL_INDEX8
#undef GL_STENCIL_INDEX8_EXT
#undef GL_STENCIL_OP_VALUE_AMD
#undef GL_STENCIL_REF_COMMAND_NV
#undef GL_STENCIL_RENDERABLE
#undef GL_STENCIL_SAMPLES_NV
#undef GL_STENCIL_TAG_BITS_EXT
#undef GL_STENCIL_TEST_TWO_SIDE_EXT
#undef GL_STORAGE_CACHED_APPLE
#undef GL_STORAGE_CLIENT_APPLE
#undef GL_STORAGE_PRIVATE_APPLE
#undef GL_STORAGE_SHARED_APPLE
#undef GL_STREAM_COPY
#undef GL_STREAM_COPY_ARB
#undef GL_STREAM_DRAW
#undef GL_STREAM_DRAW_ARB
#undef GL_STREAM_RASTERIZATION_AMD
#undef GL_STREAM_READ
#undef GL_STREAM_READ_ARB
#undef GL_STRICT_DEPTHFUNC_HINT_PGI
#undef GL_STRICT_LIGHTING_HINT_PGI
#undef GL_STRICT_SCISSOR_HINT_PGI
#undef GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
#undef GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
#undef GL_SUBSAMPLE_DISTANCE_AMD
#undef GL_SUBTRACT
#undef GL_SUBTRACT_ARB
#undef GL_SUB_ATI
#undef GL_SUCCESS_NV
#undef GL_SUPERSAMPLE_SCALE_X_NV
#undef GL_SUPERSAMPLE_SCALE_Y_NV
#undef GL_SURFACE_MAPPED_NV
#undef GL_SURFACE_REGISTERED_NV
#undef GL_SURFACE_STATE_NV
#undef GL_SWIZZLE_STQ_ATI
#undef GL_SWIZZLE_STQ_DQ_ATI
#undef GL_SWIZZLE_STRQ_ATI
#undef GL_SWIZZLE_STRQ_DQ_ATI
#undef GL_SWIZZLE_STR_ATI
#undef GL_SWIZZLE_STR_DR_ATI
#undef GL_SYNC_CL_EVENT_ARB
#undef GL_SYNC_CL_EVENT_COMPLETE_ARB
#undef GL_SYNC_CONDITION
#undef GL_SYNC_FENCE
#undef GL_SYNC_FLAGS
#undef GL_SYNC_FLUSH_COMMANDS_BIT
#undef GL_SYNC_GPU_COMMANDS_COMPLETE
#undef GL_SYNC_STATUS
#undef GL_SYNC_X11_FENCE_EXT
#undef GL_SYSTEM_FONT_NAME_NV
#undef GL_TABLE_TOO_LARGE
#undef GL_TANGENT_ARRAY_EXT
#undef GL_TANGENT_ARRAY_POINTER_EXT
#undef GL_TANGENT_ARRAY_STRIDE_EXT
#undef GL_TANGENT_ARRAY_TYPE_EXT
#undef GL_TERMINATE_SEQUENCE_COMMAND_NV
#undef GL_TESSELLATION_FACTOR_AMD
#undef GL_TESSELLATION_MODE_AMD
#undef GL_TESS_CONTROL_OUTPUT_VERTICES
#undef GL_TESS_CONTROL_PROGRAM_NV
#undef GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_TESS_CONTROL_SHADER
#undef GL_TESS_CONTROL_SHADER_BIT
#undef GL_TESS_CONTROL_SHADER_PATCHES
#undef GL_TESS_CONTROL_SHADER_PATCHES_ARB
#undef GL_TESS_CONTROL_SUBROUTINE
#undef GL_TESS_CONTROL_SUBROUTINE_UNIFORM
#undef GL_TESS_CONTROL_TEXTURE
#undef GL_TESS_EVALUATION_PROGRAM_NV
#undef GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_TESS_EVALUATION_SHADER
#undef GL_TESS_EVALUATION_SHADER_BIT
#undef GL_TESS_EVALUATION_SHADER_INVOCATIONS
#undef GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
#undef GL_TESS_EVALUATION_SUBROUTINE
#undef GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
#undef GL_TESS_EVALUATION_TEXTURE
#undef GL_TESS_GEN_MODE
#undef GL_TESS_GEN_POINT_MODE
#undef GL_TESS_GEN_SPACING
#undef GL_TESS_GEN_VERTEX_ORDER
#undef GL_TEXCOORD1_BIT_PGI
#undef GL_TEXCOORD2_BIT_PGI
#undef GL_TEXCOORD3_BIT_PGI
#undef GL_TEXCOORD4_BIT_PGI
#undef GL_TEXTURE0
#undef GL_TEXTURE0_ARB
#undef GL_TEXTURE1
#undef GL_TEXTURE10
#undef GL_TEXTURE10_ARB
#undef GL_TEXTURE11
#undef GL_TEXTURE11_ARB
#undef GL_TEXTURE12
#undef GL_TEXTURE12_ARB
#undef GL_TEXTURE13
#undef GL_TEXTURE13_ARB
#undef GL_TEXTURE14
#undef GL_TEXTURE14_ARB
#undef GL_TEXTURE15
#undef GL_TEXTURE15_ARB
#undef GL_TEXTURE16
#undef GL_TEXTURE16_ARB
#undef GL_TEXTURE17
#undef GL_TEXTURE17_ARB
#undef GL_TEXTURE18
#undef GL_TEXTURE18_ARB
#undef GL_TEXTURE19
#undef GL_TEXTURE19_ARB
#undef GL_TEXTURE1_ARB
#undef GL_TEXTURE2
#undef GL_TEXTURE20
#undef GL_TEXTURE20_ARB
#undef GL_TEXTURE21
#undef GL_TEXTURE21_ARB
#undef GL_TEXTURE22
#undef GL_TEXTURE22_ARB
#undef GL_TEXTURE23
#undef GL_TEXTURE23_ARB
#undef GL_TEXTURE24
#undef GL_TEXTURE24_ARB
#undef GL_TEXTURE25
#undef GL_TEXTURE25_ARB
#undef GL_TEXTURE26
#undef GL_TEXTURE26_ARB
#undef GL_TEXTURE27
#undef GL_TEXTURE27_ARB
#undef GL_TEXTURE28
#undef GL_TEXTURE28_ARB
#undef GL_TEXTURE29
#undef GL_TEXTURE29_ARB
#undef GL_TEXTURE2_ARB
#undef GL_TEXTURE3
#undef GL_TEXTURE30
#undef GL_TEXTURE30_ARB
#undef GL_TEXTURE31
#undef GL_TEXTURE31_ARB
#undef GL_TEXTURE3_ARB
#undef GL_TEXTURE4
#undef GL_TEXTURE4_ARB
#undef GL_TEXTURE5
#undef GL_TEXTURE5_ARB
#undef GL_TEXTURE6
#undef GL_TEXTURE6_ARB
#undef GL_TEXTURE7
#undef GL_TEXTURE7_ARB
#undef GL_TEXTURE8
#undef GL_TEXTURE8_ARB
#undef GL_TEXTURE9
#undef GL_TEXTURE9_ARB
#undef GL_TEXTURE_1D_ARRAY
#undef GL_TEXTURE_1D_ARRAY_EXT
#undef GL_TEXTURE_1D_BINDING_EXT
#undef GL_TEXTURE_1D_STACK_BINDING_MESAX
#undef GL_TEXTURE_1D_STACK_MESAX
#undef GL_TEXTURE_2D_ARRAY
#undef GL_TEXTURE_2D_ARRAY_EXT
#undef GL_TEXTURE_2D_BINDING_EXT
#undef GL_TEXTURE_2D_MULTISAMPLE
#undef GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#undef GL_TEXTURE_2D_STACK_BINDING_MESAX
#undef GL_TEXTURE_2D_STACK_MESAX
#undef GL_TEXTURE_3D
#undef GL_TEXTURE_3D_BINDING_EXT
#undef GL_TEXTURE_3D_EXT
#undef GL_TEXTURE_ALPHA_SIZE_EXT
#undef GL_TEXTURE_ALPHA_TYPE
#undef GL_TEXTURE_ALPHA_TYPE_ARB
#undef GL_TEXTURE_APPLICATION_MODE_EXT
#undef GL_TEXTURE_BASE_LEVEL
#undef GL_TEXTURE_BASE_LEVEL_SGIS
#undef GL_TEXTURE_BINDING_1D_ARRAY
#undef GL_TEXTURE_BINDING_1D_ARRAY_EXT
#undef GL_TEXTURE_BINDING_2D_ARRAY
#undef GL_TEXTURE_BINDING_2D_ARRAY_EXT
#undef GL_TEXTURE_BINDING_2D_MULTISAMPLE
#undef GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#undef GL_TEXTURE_BINDING_3D
#undef GL_TEXTURE_BINDING_BUFFER
#undef GL_TEXTURE_BINDING_BUFFER_ARB
#undef GL_TEXTURE_BINDING_BUFFER_EXT
#undef GL_TEXTURE_BINDING_CUBE_MAP
#undef GL_TEXTURE_BINDING_CUBE_MAP_ARB
#undef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#undef GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
#undef GL_TEXTURE_BINDING_CUBE_MAP_EXT
#undef GL_TEXTURE_BINDING_RECTANGLE
#undef GL_TEXTURE_BINDING_RECTANGLE_ARB
#undef GL_TEXTURE_BINDING_RECTANGLE_NV
#undef GL_TEXTURE_BINDING_RENDERBUFFER_NV
#undef GL_TEXTURE_BLUE_SIZE_EXT
#undef GL_TEXTURE_BLUE_TYPE
#undef GL_TEXTURE_BLUE_TYPE_ARB
#undef GL_TEXTURE_BORDER_VALUES_NV
#undef GL_TEXTURE_BUFFER
#undef GL_TEXTURE_BUFFER_ARB
#undef GL_TEXTURE_BUFFER_BINDING
#undef GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#undef GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
#undef GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
#undef GL_TEXTURE_BUFFER_EXT
#undef GL_TEXTURE_BUFFER_FORMAT_ARB
#undef GL_TEXTURE_BUFFER_FORMAT_EXT
#undef GL_TEXTURE_BUFFER_OFFSET
#undef GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
#undef GL_TEXTURE_BUFFER_SIZE
#undef GL_TEXTURE_COLOR_SAMPLES_NV
#undef GL_TEXTURE_COLOR_TABLE_SGI
#undef GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
#undef GL_TEXTURE_COMPARE_FUNC
#undef GL_TEXTURE_COMPARE_FUNC_ARB
#undef GL_TEXTURE_COMPARE_MODE
#undef GL_TEXTURE_COMPARE_MODE_ARB
#undef GL_TEXTURE_COMPARE_OPERATOR_SGIX
#undef GL_TEXTURE_COMPARE_SGIX
#undef GL_TEXTURE_COMPRESSED
#undef GL_TEXTURE_COMPRESSED_ARB
#undef GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
#undef GL_TEXTURE_COMPRESSED_BLOCK_SIZE
#undef GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
#undef GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#undef GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
#undef GL_TEXTURE_COMPRESSION_HINT
#undef GL_TEXTURE_COMPRESSION_HINT_ARB
#undef GL_TEXTURE_CONSTANT_DATA_SUNX
#undef GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
#undef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
#undef GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
#undef GL_TEXTURE_COORD_ARRAY_COUNT_EXT
#undef GL_TEXTURE_COORD_ARRAY_EXT
#undef GL_TEXTURE_COORD_ARRAY_LENGTH_NV
#undef GL_TEXTURE_COORD_ARRAY_LIST_IBM
#undef GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
#undef GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
#undef GL_TEXTURE_COORD_ARRAY_POINTER_EXT
#undef GL_TEXTURE_COORD_ARRAY_SIZE_EXT
#undef GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
#undef GL_TEXTURE_COORD_ARRAY_TYPE_EXT
#undef GL_TEXTURE_COORD_NV
#undef GL_TEXTURE_COVERAGE_SAMPLES_NV
#undef GL_TEXTURE_CUBE_MAP
#undef GL_TEXTURE_CUBE_MAP_ARB
#undef GL_TEXTURE_CUBE_MAP_ARRAY
#undef GL_TEXTURE_CUBE_MAP_ARRAY_ARB
#undef GL_TEXTURE_CUBE_MAP_EXT
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#undef GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_X
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#undef GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
#undef GL_TEXTURE_CUBE_MAP_SEAMLESS
#undef GL_TEXTURE_DEFORMATION_BIT_SGIX
#undef GL_TEXTURE_DEPTH
#undef GL_TEXTURE_DEPTH_EXT
#undef GL_TEXTURE_DEPTH_SIZE
#undef GL_TEXTURE_DEPTH_SIZE_ARB
#undef GL_TEXTURE_DEPTH_TYPE
#undef GL_TEXTURE_DEPTH_TYPE_ARB
#undef GL_TEXTURE_DS_SIZE_NV
#undef GL_TEXTURE_DT_SIZE_NV
#undef GL_TEXTURE_FETCH_BARRIER_BIT
#undef GL_TEXTURE_FETCH_BARRIER_BIT_EXT
#undef GL_TEXTURE_FILTER_CONTROL
#undef GL_TEXTURE_FILTER_CONTROL_EXT
#undef GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#undef GL_TEXTURE_FLOAT_COMPONENTS_NV
#undef GL_TEXTURE_FREE_MEMORY_ATI
#undef GL_TEXTURE_GATHER
#undef GL_TEXTURE_GATHER_SHADOW
#undef GL_TEXTURE_GEQUAL_R_SGIX
#undef GL_TEXTURE_GREEN_SIZE_EXT
#undef GL_TEXTURE_GREEN_TYPE
#undef GL_TEXTURE_GREEN_TYPE_ARB
#undef GL_TEXTURE_HI_SIZE_NV
#undef GL_TEXTURE_IMAGE_FORMAT
#undef GL_TEXTURE_IMAGE_TYPE
#undef GL_TEXTURE_IMMUTABLE_FORMAT
#undef GL_TEXTURE_IMMUTABLE_LEVELS
#undef GL_TEXTURE_INDEX_SIZE_EXT
#undef GL_TEXTURE_INTENSITY_SIZE_EXT
#undef GL_TEXTURE_INTENSITY_TYPE
#undef GL_TEXTURE_INTENSITY_TYPE_ARB
#undef GL_TEXTURE_LEQUAL_R_SGIX
#undef GL_TEXTURE_LIGHT_EXT
#undef GL_TEXTURE_LOD_BIAS
#undef GL_TEXTURE_LOD_BIAS_EXT
#undef GL_TEXTURE_LO_SIZE_NV
#undef GL_TEXTURE_LUMINANCE_SIZE_EXT
#undef GL_TEXTURE_LUMINANCE_TYPE
#undef GL_TEXTURE_LUMINANCE_TYPE_ARB
#undef GL_TEXTURE_MAG_SIZE_NV
#undef GL_TEXTURE_MATERIAL_FACE_EXT
#undef GL_TEXTURE_MATERIAL_PARAMETER_EXT
#undef GL_TEXTURE_MAX_ANISOTROPY
#undef GL_TEXTURE_MAX_ANISOTROPY_EXT
#undef GL_TEXTURE_MAX_CLAMP_R_SGIX
#undef GL_TEXTURE_MAX_CLAMP_S_SGIX
#undef GL_TEXTURE_MAX_CLAMP_T_SGIX
#undef GL_TEXTURE_MAX_LEVEL
#undef GL_TEXTURE_MAX_LEVEL_SGIS
#undef GL_TEXTURE_MAX_LOD
#undef GL_TEXTURE_MAX_LOD_SGIS
#undef GL_TEXTURE_MEMORY_LAYOUT_INTEL
#undef GL_TEXTURE_MIN_LOD
#undef GL_TEXTURE_MIN_LOD_SGIS
#undef GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
#undef GL_TEXTURE_NORMAL_EXT
#undef GL_TEXTURE_PRIORITY_EXT
#undef GL_TEXTURE_RANGE_LENGTH_APPLE
#undef GL_TEXTURE_RANGE_POINTER_APPLE
#undef GL_TEXTURE_RECTANGLE
#undef GL_TEXTURE_RECTANGLE_ARB
#undef GL_TEXTURE_RECTANGLE_NV
#undef GL_TEXTURE_REDUCTION_MODE_ARB
#undef GL_TEXTURE_REDUCTION_MODE_EXT
#undef GL_TEXTURE_RED_SIZE_EXT
#undef GL_TEXTURE_RED_TYPE
#undef GL_TEXTURE_RED_TYPE_ARB
#undef GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
#undef GL_TEXTURE_RENDERBUFFER_NV
#undef GL_TEXTURE_RESIDENT_EXT
#undef GL_TEXTURE_SAMPLES
#undef GL_TEXTURE_SHADER_NV
#undef GL_TEXTURE_SHADOW
#undef GL_TEXTURE_SHARED_SIZE
#undef GL_TEXTURE_SHARED_SIZE_EXT
#undef GL_TEXTURE_SPARSE_ARB
#undef GL_TEXTURE_SRGB_DECODE_EXT
#undef GL_TEXTURE_STENCIL_SIZE
#undef GL_TEXTURE_STENCIL_SIZE_EXT
#undef GL_TEXTURE_STORAGE_HINT_APPLE
#undef GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
#undef GL_TEXTURE_SWIZZLE_A
#undef GL_TEXTURE_SWIZZLE_A_EXT
#undef GL_TEXTURE_SWIZZLE_B
#undef GL_TEXTURE_SWIZZLE_B_EXT
#undef GL_TEXTURE_SWIZZLE_G
#undef GL_TEXTURE_SWIZZLE_G_EXT
#undef GL_TEXTURE_SWIZZLE_R
#undef GL_TEXTURE_SWIZZLE_RGBA
#undef GL_TEXTURE_SWIZZLE_RGBA_EXT
#undef GL_TEXTURE_SWIZZLE_R_EXT
#undef GL_TEXTURE_TARGET
#undef GL_TEXTURE_TILING_EXT
#undef GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
#undef GL_TEXTURE_UPDATE_BARRIER_BIT
#undef GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
#undef GL_TEXTURE_VIEW
#undef GL_TEXTURE_VIEW_MIN_LAYER
#undef GL_TEXTURE_VIEW_MIN_LEVEL
#undef GL_TEXTURE_VIEW_NUM_LAYERS
#undef GL_TEXTURE_VIEW_NUM_LEVELS
#undef GL_TEXTURE_WRAP_R
#undef GL_TEXTURE_WRAP_R_EXT
#undef GL_TEXT_FRAGMENT_SHADER_ATI
#undef GL_TILING_TYPES_EXT
#undef GL_TIMEOUT_EXPIRED
#undef GL_TIMEOUT_IGNORED
#undef GL_TIMESTAMP
#undef GL_TIME_ELAPSED
#undef GL_TIME_ELAPSED_EXT
#undef GL_TOP_LEVEL_ARRAY_SIZE
#undef GL_TOP_LEVEL_ARRAY_STRIDE
#undef GL_TRACK_MATRIX_NV
#undef GL_TRACK_MATRIX_TRANSFORM_NV
#undef GL_TRANSFORM_FEEDBACK
#undef GL_TRANSFORM_FEEDBACK_ACTIVE
#undef GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
#undef GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#undef GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
#undef GL_TRANSFORM_FEEDBACK_BINDING
#undef GL_TRANSFORM_FEEDBACK_BINDING_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER
#undef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#undef GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#undef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
#undef GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#undef GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#undef GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#undef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_START
#undef GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
#undef GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
#undef GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
#undef GL_TRANSFORM_FEEDBACK_NV
#undef GL_TRANSFORM_FEEDBACK_OVERFLOW
#undef GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
#undef GL_TRANSFORM_FEEDBACK_PAUSED
#undef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#undef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
#undef GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
#undef GL_TRANSFORM_FEEDBACK_RECORD_NV
#undef GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW
#undef GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
#undef GL_TRANSFORM_FEEDBACK_VARYING
#undef GL_TRANSFORM_FEEDBACK_VARYINGS
#undef GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
#undef GL_TRANSFORM_FEEDBACK_VARYINGS_NV
#undef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#undef GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
#undef GL_TRANSFORM_HINT_APPLE
#undef GL_TRANSLATE_2D_NV
#undef GL_TRANSLATE_3D_NV
#undef GL_TRANSLATE_X_NV
#undef GL_TRANSLATE_Y_NV
#undef GL_TRANSPOSE_AFFINE_2D_NV
#undef GL_TRANSPOSE_AFFINE_3D_NV
#undef GL_TRANSPOSE_COLOR_MATRIX
#undef GL_TRANSPOSE_COLOR_MATRIX_ARB
#undef GL_TRANSPOSE_CURRENT_MATRIX_ARB
#undef GL_TRANSPOSE_MODELVIEW_MATRIX
#undef GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
#undef GL_TRANSPOSE_NV
#undef GL_TRANSPOSE_PROGRAM_MATRIX_EXT
#undef GL_TRANSPOSE_PROJECTION_MATRIX
#undef GL_TRANSPOSE_PROJECTION_MATRIX_ARB
#undef GL_TRANSPOSE_TEXTURE_MATRIX
#undef GL_TRANSPOSE_TEXTURE_MATRIX_ARB
#undef GL_TRIANGLES_ADJACENCY
#undef GL_TRIANGLES_ADJACENCY_ARB
#undef GL_TRIANGLES_ADJACENCY_EXT
#undef GL_TRIANGLE_LIST_SUN
#undef GL_TRIANGLE_MESH_SUN
#undef GL_TRIANGLE_STRIP_ADJACENCY
#undef GL_TRIANGLE_STRIP_ADJACENCY_ARB
#undef GL_TRIANGLE_STRIP_ADJACENCY_EXT
#undef GL_TRIANGULAR_NV
#undef GL_TYPE
#undef GL_UNCORRELATED_NV
#undef GL_UNDEFINED_APPLE
#undef GL_UNDEFINED_VERTEX
#undef GL_UNIFORM
#undef GL_UNIFORM_ADDRESS_COMMAND_NV
#undef GL_UNIFORM_ARRAY_STRIDE
#undef GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#undef GL_UNIFORM_BARRIER_BIT
#undef GL_UNIFORM_BARRIER_BIT_EXT
#undef GL_UNIFORM_BLOCK
#undef GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#undef GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#undef GL_UNIFORM_BLOCK_BINDING
#undef GL_UNIFORM_BLOCK_DATA_SIZE
#undef GL_UNIFORM_BLOCK_INDEX
#undef GL_UNIFORM_BLOCK_NAME_LENGTH
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#undef GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#undef GL_UNIFORM_BUFFER
#undef GL_UNIFORM_BUFFER_ADDRESS_NV
#undef GL_UNIFORM_BUFFER_BINDING
#undef GL_UNIFORM_BUFFER_BINDING_EXT
#undef GL_UNIFORM_BUFFER_EXT
#undef GL_UNIFORM_BUFFER_LENGTH_NV
#undef GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#undef GL_UNIFORM_BUFFER_SIZE
#undef GL_UNIFORM_BUFFER_START
#undef GL_UNIFORM_BUFFER_UNIFIED_NV
#undef GL_UNIFORM_IS_ROW_MAJOR
#undef GL_UNIFORM_MATRIX_STRIDE
#undef GL_UNIFORM_NAME_LENGTH
#undef GL_UNIFORM_OFFSET
#undef GL_UNIFORM_SIZE
#undef GL_UNIFORM_TYPE
#undef GL_UNKNOWN_CONTEXT_RESET
#undef GL_UNKNOWN_CONTEXT_RESET_ARB
#undef GL_UNPACK_CLIENT_STORAGE_APPLE
#undef GL_UNPACK_CMYK_HINT_EXT
#undef GL_UNPACK_COMPRESSED_BLOCK_DEPTH
#undef GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
#undef GL_UNPACK_COMPRESSED_BLOCK_SIZE
#undef GL_UNPACK_COMPRESSED_BLOCK_WIDTH
#undef GL_UNPACK_CONSTANT_DATA_SUNX
#undef GL_UNPACK_IMAGE_HEIGHT
#undef GL_UNPACK_IMAGE_HEIGHT_EXT
#undef GL_UNPACK_RESAMPLE_OML
#undef GL_UNPACK_RESAMPLE_SGIX
#undef GL_UNPACK_ROW_BYTES_APPLE
#undef GL_UNPACK_SKIP_IMAGES
#undef GL_UNPACK_SKIP_IMAGES_EXT
#undef GL_UNPACK_SUBSAMPLE_RATE_SGIX
#undef GL_UNSIGNALED
#undef GL_UNSIGNED_BYTE_2_3_3_REV
#undef GL_UNSIGNED_BYTE_3_3_2
#undef GL_UNSIGNED_BYTE_3_3_2_EXT
#undef GL_UNSIGNED_IDENTITY_NV
#undef GL_UNSIGNED_INT16_NV
#undef GL_UNSIGNED_INT16_VEC2_NV
#undef GL_UNSIGNED_INT16_VEC3_NV
#undef GL_UNSIGNED_INT16_VEC4_NV
#undef GL_UNSIGNED_INT64_AMD
#undef GL_UNSIGNED_INT64_ARB
#undef GL_UNSIGNED_INT64_NV
#undef GL_UNSIGNED_INT64_VEC2_ARB
#undef GL_UNSIGNED_INT64_VEC2_NV
#undef GL_UNSIGNED_INT64_VEC3_ARB
#undef GL_UNSIGNED_INT64_VEC3_NV
#undef GL_UNSIGNED_INT64_VEC4_ARB
#undef GL_UNSIGNED_INT64_VEC4_NV
#undef GL_UNSIGNED_INT8_NV
#undef GL_UNSIGNED_INT8_VEC2_NV
#undef GL_UNSIGNED_INT8_VEC3_NV
#undef GL_UNSIGNED_INT8_VEC4_NV
#undef GL_UNSIGNED_INT_10F_11F_11F_REV
#undef GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
#undef GL_UNSIGNED_INT_10_10_10_2
#undef GL_UNSIGNED_INT_10_10_10_2_EXT
#undef GL_UNSIGNED_INT_24_8
#undef GL_UNSIGNED_INT_24_8_EXT
#undef GL_UNSIGNED_INT_24_8_NV
#undef GL_UNSIGNED_INT_2_10_10_10_REV
#undef GL_UNSIGNED_INT_5_9_9_9_REV
#undef GL_UNSIGNED_INT_5_9_9_9_REV_EXT
#undef GL_UNSIGNED_INT_8_8_8_8
#undef GL_UNSIGNED_INT_8_8_8_8_EXT
#undef GL_UNSIGNED_INT_8_8_8_8_REV
#undef GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
#undef GL_UNSIGNED_INT_ATOMIC_COUNTER
#undef GL_UNSIGNED_INT_IMAGE_1D
#undef GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#undef GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
#undef GL_UNSIGNED_INT_IMAGE_1D_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D
#undef GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#undef GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#undef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#undef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
#undef GL_UNSIGNED_INT_IMAGE_2D_RECT
#undef GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
#undef GL_UNSIGNED_INT_IMAGE_3D
#undef GL_UNSIGNED_INT_IMAGE_3D_EXT
#undef GL_UNSIGNED_INT_IMAGE_BUFFER
#undef GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
#undef GL_UNSIGNED_INT_IMAGE_CUBE
#undef GL_UNSIGNED_INT_IMAGE_CUBE_EXT
#undef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#undef GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#undef GL_UNSIGNED_INT_S8_S8_8_8_NV
#undef GL_UNSIGNED_INT_SAMPLER_1D
#undef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#undef GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
#undef GL_UNSIGNED_INT_SAMPLER_1D_EXT
#undef GL_UNSIGNED_INT_SAMPLER_2D
#undef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#undef GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
#undef GL_UNSIGNED_INT_SAMPLER_2D_EXT
#undef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#undef GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#undef GL_UNSIGNED_INT_SAMPLER_2D_RECT
#undef GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
#undef GL_UNSIGNED_INT_SAMPLER_3D
#undef GL_UNSIGNED_INT_SAMPLER_3D_EXT
#undef GL_UNSIGNED_INT_SAMPLER_BUFFER
#undef GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
#undef GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
#undef GL_UNSIGNED_INT_SAMPLER_CUBE
#undef GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
#undef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
#undef GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#undef GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
#undef GL_UNSIGNED_INT_VEC2
#undef GL_UNSIGNED_INT_VEC2_EXT
#undef GL_UNSIGNED_INT_VEC3
#undef GL_UNSIGNED_INT_VEC3_EXT
#undef GL_UNSIGNED_INT_VEC4
#undef GL_UNSIGNED_INT_VEC4_EXT
#undef GL_UNSIGNED_INVERT_NV
#undef GL_UNSIGNED_NORMALIZED
#undef GL_UNSIGNED_NORMALIZED_ARB
#undef GL_UNSIGNED_SHORT_1_5_5_5_REV
#undef GL_UNSIGNED_SHORT_4_4_4_4
#undef GL_UNSIGNED_SHORT_4_4_4_4_EXT
#undef GL_UNSIGNED_SHORT_4_4_4_4_REV
#undef GL_UNSIGNED_SHORT_5_5_5_1
#undef GL_UNSIGNED_SHORT_5_5_5_1_EXT
#undef GL_UNSIGNED_SHORT_5_6_5
#undef GL_UNSIGNED_SHORT_5_6_5_REV
#undef GL_UNSIGNED_SHORT_8_8_APPLE
#undef GL_UNSIGNED_SHORT_8_8_MESA
#undef GL_UNSIGNED_SHORT_8_8_REV_APPLE
#undef GL_UNSIGNED_SHORT_8_8_REV_MESA
#undef GL_UPPER_LEFT
#undef GL_USE_MISSING_GLYPH_NV
#undef GL_UTF16_NV
#undef GL_UTF8_NV
#undef GL_UUID_SIZE_EXT
#undef GL_VALIDATE_STATUS
#undef GL_VARIABLE_A_NV
#undef GL_VARIABLE_B_NV
#undef GL_VARIABLE_C_NV
#undef GL_VARIABLE_D_NV
#undef GL_VARIABLE_E_NV
#undef GL_VARIABLE_F_NV
#undef GL_VARIABLE_G_NV
#undef GL_VARIANT_ARRAY_EXT
#undef GL_VARIANT_ARRAY_POINTER_EXT
#undef GL_VARIANT_ARRAY_STRIDE_EXT
#undef GL_VARIANT_ARRAY_TYPE_EXT
#undef GL_VARIANT_DATATYPE_EXT
#undef GL_VARIANT_EXT
#undef GL_VARIANT_VALUE_EXT
#undef GL_VBO_FREE_MEMORY_ATI
#undef GL_VECTOR_EXT
#undef GL_VERSION_1_2
#undef GL_VERSION_1_3
#undef GL_VERSION_1_4
#undef GL_VERSION_1_5
#undef GL_VERSION_2_0
#undef GL_VERSION_2_1
#undef GL_VERSION_3_0
#undef GL_VERSION_3_1
#undef GL_VERSION_3_2
#undef GL_VERSION_3_3
#undef GL_VERSION_4_0
#undef GL_VERSION_4_1
#undef GL_VERSION_4_2
#undef GL_VERSION_4_3
#undef GL_VERSION_4_4
#undef GL_VERSION_4_5
#undef GL_VERSION_4_6
#undef GL_VERTEX23_BIT_PGI
#undef GL_VERTEX4_BIT_PGI
#undef GL_VERTEX_ARRAY_ADDRESS_NV
#undef GL_VERTEX_ARRAY_BINDING
#undef GL_VERTEX_ARRAY_BINDING_APPLE
#undef GL_VERTEX_ARRAY_BUFFER_BINDING
#undef GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
#undef GL_VERTEX_ARRAY_COUNT_EXT
#undef GL_VERTEX_ARRAY_EXT
#undef GL_VERTEX_ARRAY_LENGTH_NV
#undef GL_VERTEX_ARRAY_LIST_IBM
#undef GL_VERTEX_ARRAY_LIST_STRIDE_IBM
#undef GL_VERTEX_ARRAY_OBJECT_AMD
#undef GL_VERTEX_ARRAY_OBJECT_EXT
#undef GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
#undef GL_VERTEX_ARRAY_POINTER_EXT
#undef GL_VERTEX_ARRAY_RANGE_APPLE
#undef GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
#undef GL_VERTEX_ARRAY_RANGE_LENGTH_NV
#undef GL_VERTEX_ARRAY_RANGE_NV
#undef GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
#undef GL_VERTEX_ARRAY_RANGE_POINTER_NV
#undef GL_VERTEX_ARRAY_RANGE_VALID_NV
#undef GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
#undef GL_VERTEX_ARRAY_SIZE_EXT
#undef GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
#undef GL_VERTEX_ARRAY_STRIDE_EXT
#undef GL_VERTEX_ARRAY_TYPE_EXT
#undef GL_VERTEX_ATTRIB_ARRAY0_NV
#undef GL_VERTEX_ATTRIB_ARRAY10_NV
#undef GL_VERTEX_ATTRIB_ARRAY11_NV
#undef GL_VERTEX_ATTRIB_ARRAY12_NV
#undef GL_VERTEX_ATTRIB_ARRAY13_NV
#undef GL_VERTEX_ATTRIB_ARRAY14_NV
#undef GL_VERTEX_ATTRIB_ARRAY15_NV
#undef GL_VERTEX_ATTRIB_ARRAY1_NV
#undef GL_VERTEX_ATTRIB_ARRAY2_NV
#undef GL_VERTEX_ATTRIB_ARRAY3_NV
#undef GL_VERTEX_ATTRIB_ARRAY4_NV
#undef GL_VERTEX_ATTRIB_ARRAY5_NV
#undef GL_VERTEX_ATTRIB_ARRAY6_NV
#undef GL_VERTEX_ATTRIB_ARRAY7_NV
#undef GL_VERTEX_ATTRIB_ARRAY8_NV
#undef GL_VERTEX_ATTRIB_ARRAY9_NV
#undef GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
#undef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#undef GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
#undef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#undef GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#undef GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_ENABLED
#undef GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_INTEGER
#undef GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
#undef GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
#undef GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
#undef GL_VERTEX_ATTRIB_ARRAY_LONG
#undef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#undef GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_POINTER
#undef GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_SIZE
#undef GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_STRIDE
#undef GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_TYPE
#undef GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
#undef GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
#undef GL_VERTEX_ATTRIB_BINDING
#undef GL_VERTEX_ATTRIB_MAP1_APPLE
#undef GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
#undef GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
#undef GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
#undef GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
#undef GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
#undef GL_VERTEX_ATTRIB_RELATIVE_OFFSET
#undef GL_VERTEX_BINDING_BUFFER
#undef GL_VERTEX_BINDING_DIVISOR
#undef GL_VERTEX_BINDING_OFFSET
#undef GL_VERTEX_BINDING_STRIDE
#undef GL_VERTEX_BLEND_ARB
#undef GL_VERTEX_CONSISTENT_HINT_PGI
#undef GL_VERTEX_DATA_HINT_PGI
#undef GL_VERTEX_ELEMENT_SWIZZLE_AMD
#undef GL_VERTEX_ID_NV
#undef GL_VERTEX_ID_SWIZZLE_AMD
#undef GL_VERTEX_PRECLIP_HINT_SGIX
#undef GL_VERTEX_PRECLIP_SGIX
#undef GL_VERTEX_PROGRAM_ARB
#undef GL_VERTEX_PROGRAM_BINDING_NV
#undef GL_VERTEX_PROGRAM_NV
#undef GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
#undef GL_VERTEX_PROGRAM_POINT_SIZE
#undef GL_VERTEX_PROGRAM_POINT_SIZE_ARB
#undef GL_VERTEX_PROGRAM_POINT_SIZE_NV
#undef GL_VERTEX_PROGRAM_TWO_SIDE
#undef GL_VERTEX_PROGRAM_TWO_SIDE_ARB
#undef GL_VERTEX_PROGRAM_TWO_SIDE_NV
#undef GL_VERTEX_SHADER
#undef GL_VERTEX_SHADER_ARB
#undef GL_VERTEX_SHADER_BINDING_EXT
#undef GL_VERTEX_SHADER_BIT
#undef GL_VERTEX_SHADER_EXT
#undef GL_VERTEX_SHADER_INSTRUCTIONS_EXT
#undef GL_VERTEX_SHADER_INVARIANTS_EXT
#undef GL_VERTEX_SHADER_INVOCATIONS
#undef GL_VERTEX_SHADER_INVOCATIONS_ARB
#undef GL_VERTEX_SHADER_LOCALS_EXT
#undef GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef GL_VERTEX_SHADER_OPTIMIZED_EXT
#undef GL_VERTEX_SHADER_VARIANTS_EXT
#undef GL_VERTEX_SOURCE_ATI
#undef GL_VERTEX_STATE_PROGRAM_NV
#undef GL_VERTEX_STREAM0_ATI
#undef GL_VERTEX_STREAM1_ATI
#undef GL_VERTEX_STREAM2_ATI
#undef GL_VERTEX_STREAM3_ATI
#undef GL_VERTEX_STREAM4_ATI
#undef GL_VERTEX_STREAM5_ATI
#undef GL_VERTEX_STREAM6_ATI
#undef GL_VERTEX_STREAM7_ATI
#undef GL_VERTEX_SUBROUTINE
#undef GL_VERTEX_SUBROUTINE_UNIFORM
#undef GL_VERTEX_TEXTURE
#undef GL_VERTEX_WEIGHTING_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
#undef GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
#undef GL_VERTICAL_LINE_TO_NV
#undef GL_VERTICES_SUBMITTED
#undef GL_VERTICES_SUBMITTED_ARB
#undef GL_VIBRANCE_BIAS_NV
#undef GL_VIBRANCE_SCALE_NV
#undef GL_VIDEO_BUFFER_BINDING_NV
#undef GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
#undef GL_VIDEO_BUFFER_NV
#undef GL_VIDEO_BUFFER_PITCH_NV
#undef GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
#undef GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
#undef GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
#undef GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
#undef GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
#undef GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
#undef GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
#undef GL_VIDEO_COLOR_CONVERSION_MAX_NV
#undef GL_VIDEO_COLOR_CONVERSION_MIN_NV
#undef GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
#undef GL_VIEWPORT_BOUNDS_RANGE
#undef GL_VIEWPORT_COMMAND_NV
#undef GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#undef GL_VIEWPORT_POSITION_W_SCALE_NV
#undef GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
#undef GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
#undef GL_VIEWPORT_SUBPIXEL_BITS
#undef GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV
#undef GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
#undef GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV
#undef GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
#undef GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV
#undef GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
#undef GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV
#undef GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV
#undef GL_VIEWPORT_SWIZZLE_W_NV
#undef GL_VIEWPORT_SWIZZLE_X_NV
#undef GL_VIEWPORT_SWIZZLE_Y_NV
#undef GL_VIEWPORT_SWIZZLE_Z_NV
#undef GL_VIEW_CLASS_128_BITS
#undef GL_VIEW_CLASS_16_BITS
#undef GL_VIEW_CLASS_24_BITS
#undef GL_VIEW_CLASS_32_BITS
#undef GL_VIEW_CLASS_48_BITS
#undef GL_VIEW_CLASS_64_BITS
#undef GL_VIEW_CLASS_8_BITS
#undef GL_VIEW_CLASS_96_BITS
#undef GL_VIEW_CLASS_BPTC_FLOAT
#undef GL_VIEW_CLASS_BPTC_UNORM
#undef GL_VIEW_CLASS_RGTC1_RED
#undef GL_VIEW_CLASS_RGTC2_RG
#undef GL_VIEW_CLASS_S3TC_DXT1_RGB
#undef GL_VIEW_CLASS_S3TC_DXT1_RGBA
#undef GL_VIEW_CLASS_S3TC_DXT3_RGBA
#undef GL_VIEW_CLASS_S3TC_DXT5_RGBA
#undef GL_VIEW_COMPATIBILITY_CLASS
#undef GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
#undef GL_VIRTUAL_PAGE_SIZE_X_AMD
#undef GL_VIRTUAL_PAGE_SIZE_X_ARB
#undef GL_VIRTUAL_PAGE_SIZE_Y_AMD
#undef GL_VIRTUAL_PAGE_SIZE_Y_ARB
#undef GL_VIRTUAL_PAGE_SIZE_Z_AMD
#undef GL_VIRTUAL_PAGE_SIZE_Z_ARB
#undef GL_VIVIDLIGHT_NV
#undef GL_VOLATILE_APPLE
#undef GL_WAIT_FAILED
#undef GL_WARPS_PER_SM_NV
#undef GL_WARP_SIZE_NV
#undef GL_WEIGHTED_AVERAGE_ARB
#undef GL_WEIGHTED_AVERAGE_EXT
#undef GL_WEIGHT_ARRAY_ARB
#undef GL_WEIGHT_ARRAY_BUFFER_BINDING
#undef GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
#undef GL_WEIGHT_ARRAY_POINTER_ARB
#undef GL_WEIGHT_ARRAY_SIZE_ARB
#undef GL_WEIGHT_ARRAY_STRIDE_ARB
#undef GL_WEIGHT_ARRAY_TYPE_ARB
#undef GL_WEIGHT_SUM_UNITY_ARB
#undef GL_WIDE_LINE_HINT_PGI
#undef GL_WINDOW_RECTANGLE_EXT
#undef GL_WINDOW_RECTANGLE_MODE_EXT
#undef GL_WRAP_BORDER_SUN
#undef GL_WRITE_DISCARD_NV
#undef GL_WRITE_ONLY
#undef GL_WRITE_ONLY_ARB
#undef GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
#undef GL_WRITE_PIXEL_DATA_RANGE_NV
#undef GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
#undef GL_W_EXT
#undef GL_XOR_NV
#undef GL_X_EXT
#undef GL_YCBAYCR8A_4224_NV
#undef GL_YCBCR_422_APPLE
#undef GL_YCBCR_MESA
#undef GL_YCBYCR8_422_NV
#undef GL_YCRCBA_SGIX
#undef GL_YCRCB_SGIX
#undef GL_Y_EXT
#undef GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
#undef GL_Z4Y12Z4CB12Z4CR12_444_NV
#undef GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
#undef GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
#undef GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
#undef GL_ZERO_EXT
#undef GL_ZERO_TO_ONE
#undef GL_Z_EXT
#undef WGL_ACCELERATION_ARB
#undef WGL_ACCELERATION_EXT
#undef WGL_ACCESS_READ_ONLY_NV
#undef WGL_ACCESS_READ_WRITE_NV
#undef WGL_ACCESS_WRITE_DISCARD_NV
#undef WGL_ACCUM_ALPHA_BITS_ARB
#undef WGL_ACCUM_ALPHA_BITS_EXT
#undef WGL_ACCUM_BITS_ARB
#undef WGL_ACCUM_BITS_EXT
#undef WGL_ACCUM_BLUE_BITS_ARB
#undef WGL_ACCUM_BLUE_BITS_EXT
#undef WGL_ACCUM_GREEN_BITS_ARB
#undef WGL_ACCUM_GREEN_BITS_EXT
#undef WGL_ACCUM_RED_BITS_ARB
#undef WGL_ACCUM_RED_BITS_EXT
#undef WGL_ALPHA_BITS_ARB
#undef WGL_ALPHA_BITS_EXT
#undef WGL_ALPHA_SHIFT_ARB
#undef WGL_ALPHA_SHIFT_EXT
#undef WGL_AUX0_ARB
#undef WGL_AUX1_ARB
#undef WGL_AUX2_ARB
#undef WGL_AUX3_ARB
#undef WGL_AUX4_ARB
#undef WGL_AUX5_ARB
#undef WGL_AUX6_ARB
#undef WGL_AUX7_ARB
#undef WGL_AUX8_ARB
#undef WGL_AUX9_ARB
#undef WGL_AUX_BUFFERS_ARB
#undef WGL_AUX_BUFFERS_EXT
#undef WGL_BACK_COLOR_BUFFER_BIT_ARB
#undef WGL_BACK_LEFT_ARB
#undef WGL_BACK_RIGHT_ARB
#undef WGL_BIND_TO_TEXTURE_DEPTH_NV
#undef WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV
#undef WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV
#undef WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV
#undef WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV
#undef WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV
#undef WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV
#undef WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV
#undef WGL_BIND_TO_TEXTURE_RGBA_ARB
#undef WGL_BIND_TO_TEXTURE_RGB_ARB
#undef WGL_BIND_TO_VIDEO_RGBA_NV
#undef WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV
#undef WGL_BIND_TO_VIDEO_RGB_NV
#undef WGL_BLUE_BITS_ARB
#undef WGL_BLUE_BITS_EXT
#undef WGL_BLUE_SHIFT_ARB
#undef WGL_BLUE_SHIFT_EXT
#undef WGL_COLORSPACE_EXT
#undef WGL_COLORSPACE_LINEAR_EXT
#undef WGL_COLORSPACE_SRGB_EXT
#undef WGL_COLOR_BITS_ARB
#undef WGL_COLOR_BITS_EXT
#undef WGL_COLOR_SAMPLES_NV
#undef WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
#undef WGL_CONTEXT_CORE_PROFILE_BIT_ARB
#undef WGL_CONTEXT_DEBUG_BIT_ARB
#undef WGL_CONTEXT_ES2_PROFILE_BIT_EXT
#undef WGL_CONTEXT_ES_PROFILE_BIT_EXT
#undef WGL_CONTEXT_FLAGS_ARB
#undef WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
#undef WGL_CONTEXT_LAYER_PLANE_ARB
#undef WGL_CONTEXT_MAJOR_VERSION_ARB
#undef WGL_CONTEXT_MINOR_VERSION_ARB
#undef WGL_CONTEXT_PROFILE_MASK_ARB
#undef WGL_CONTEXT_RESET_ISOLATION_BIT_ARB
#undef WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB
#undef WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB
#undef WGL_COVERAGE_SAMPLES_NV
#undef WGL_CUBE_MAP_FACE_ARB
#undef WGL_DEPTH_BITS_ARB
#undef WGL_DEPTH_BITS_EXT
#undef WGL_DEPTH_BUFFER_BIT_ARB
#undef WGL_DEPTH_COMPONENT_NV
#undef WGL_DEPTH_FLOAT_EXT
#undef WGL_DEPTH_TEXTURE_FORMAT_NV
#undef WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D
#undef WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D
#undef WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D
#undef WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D
#undef WGL_DOUBLE_BUFFER_ARB
#undef WGL_DOUBLE_BUFFER_EXT
#undef WGL_DRAW_TO_BITMAP_ARB
#undef WGL_DRAW_TO_BITMAP_EXT
#undef WGL_DRAW_TO_PBUFFER_ARB
#undef WGL_DRAW_TO_PBUFFER_EXT
#undef WGL_DRAW_TO_WINDOW_ARB
#undef WGL_DRAW_TO_WINDOW_EXT
#undef WGL_FLOAT_COMPONENTS_NV
#undef WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB
#undef WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT
#undef WGL_FRONT_COLOR_BUFFER_BIT_ARB
#undef WGL_FRONT_LEFT_ARB
#undef WGL_FRONT_RIGHT_ARB
#undef WGL_FULL_ACCELERATION_ARB
#undef WGL_FULL_ACCELERATION_EXT
#undef WGL_GAMMA_EXCLUDE_DESKTOP_I3D
#undef WGL_GAMMA_TABLE_SIZE_I3D
#undef WGL_GENERIC_ACCELERATION_ARB
#undef WGL_GENERIC_ACCELERATION_EXT
#undef WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D
#undef WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D
#undef WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D
#undef WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D
#undef WGL_GENLOCK_SOURCE_EDGE_RISING_I3D
#undef WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D
#undef WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D
#undef WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D
#undef WGL_GENLOCK_SOURCE_MULTIVIEW_I3D
#undef WGL_GPU_CLOCK_AMD
#undef WGL_GPU_FASTEST_TARGET_GPUS_AMD
#undef WGL_GPU_NUM_PIPES_AMD
#undef WGL_GPU_NUM_RB_AMD
#undef WGL_GPU_NUM_SIMD_AMD
#undef WGL_GPU_NUM_SPI_AMD
#undef WGL_GPU_OPENGL_VERSION_STRING_AMD
#undef WGL_GPU_RAM_AMD
#undef WGL_GPU_RENDERER_STRING_AMD
#undef WGL_GPU_VENDOR_AMD
#undef WGL_GREEN_BITS_ARB
#undef WGL_GREEN_BITS_EXT
#undef WGL_GREEN_SHIFT_ARB
#undef WGL_GREEN_SHIFT_EXT
#undef WGL_IMAGE_BUFFER_LOCK_I3D
#undef WGL_IMAGE_BUFFER_MIN_ACCESS_I3D
#undef WGL_LOSE_CONTEXT_ON_RESET_ARB
#undef WGL_MAX_PBUFFER_HEIGHT_ARB
#undef WGL_MAX_PBUFFER_HEIGHT_EXT
#undef WGL_MAX_PBUFFER_PIXELS_ARB
#undef WGL_MAX_PBUFFER_PIXELS_EXT
#undef WGL_MAX_PBUFFER_WIDTH_ARB
#undef WGL_MAX_PBUFFER_WIDTH_EXT
#undef WGL_MIPMAP_LEVEL_ARB
#undef WGL_MIPMAP_TEXTURE_ARB
#undef WGL_NEED_PALETTE_ARB
#undef WGL_NEED_PALETTE_EXT
#undef WGL_NEED_SYSTEM_PALETTE_ARB
#undef WGL_NEED_SYSTEM_PALETTE_EXT
#undef WGL_NO_ACCELERATION_ARB
#undef WGL_NO_ACCELERATION_EXT
#undef WGL_NO_RESET_NOTIFICATION_ARB
#undef WGL_NO_TEXTURE_ARB
#undef WGL_NUMBER_OVERLAYS_ARB
#undef WGL_NUMBER_OVERLAYS_EXT
#undef WGL_NUMBER_PIXEL_FORMATS_ARB
#undef WGL_NUMBER_PIXEL_FORMATS_EXT
#undef WGL_NUMBER_UNDERLAYS_ARB
#undef WGL_NUMBER_UNDERLAYS_EXT
#undef WGL_NUM_VIDEO_CAPTURE_SLOTS_NV
#undef WGL_NUM_VIDEO_SLOTS_NV
#undef WGL_OPTIMAL_PBUFFER_HEIGHT_EXT
#undef WGL_OPTIMAL_PBUFFER_WIDTH_EXT
#undef WGL_PBUFFER_HEIGHT_ARB
#undef WGL_PBUFFER_HEIGHT_EXT
#undef WGL_PBUFFER_LARGEST_ARB
#undef WGL_PBUFFER_LARGEST_EXT
#undef WGL_PBUFFER_LOST_ARB
#undef WGL_PBUFFER_WIDTH_ARB
#undef WGL_PBUFFER_WIDTH_EXT
#undef WGL_PIXEL_TYPE_ARB
#undef WGL_PIXEL_TYPE_EXT
#undef WGL_RED_BITS_ARB
#undef WGL_RED_BITS_EXT
#undef WGL_RED_SHIFT_ARB
#undef WGL_RED_SHIFT_EXT
#undef WGL_SAMPLES_3DFX
#undef WGL_SAMPLES_ARB
#undef WGL_SAMPLES_EXT
#undef WGL_SAMPLE_BUFFERS_3DFX
#undef WGL_SAMPLE_BUFFERS_ARB
#undef WGL_SAMPLE_BUFFERS_EXT
#undef WGL_SHARE_ACCUM_ARB
#undef WGL_SHARE_ACCUM_EXT
#undef WGL_SHARE_DEPTH_ARB
#undef WGL_SHARE_DEPTH_EXT
#undef WGL_SHARE_STENCIL_ARB
#undef WGL_SHARE_STENCIL_EXT
#undef WGL_STENCIL_BITS_ARB
#undef WGL_STENCIL_BITS_EXT
#undef WGL_STENCIL_BUFFER_BIT_ARB
#undef WGL_STEREO_ARB
#undef WGL_STEREO_EMITTER_DISABLE_3DL
#undef WGL_STEREO_EMITTER_ENABLE_3DL
#undef WGL_STEREO_EXT
#undef WGL_STEREO_POLARITY_INVERT_3DL
#undef WGL_STEREO_POLARITY_NORMAL_3DL
#undef WGL_SUPPORT_GDI_ARB
#undef WGL_SUPPORT_GDI_EXT
#undef WGL_SUPPORT_OPENGL_ARB
#undef WGL_SUPPORT_OPENGL_EXT
#undef WGL_SWAP_COPY_ARB
#undef WGL_SWAP_COPY_EXT
#undef WGL_SWAP_EXCHANGE_ARB
#undef WGL_SWAP_EXCHANGE_EXT
#undef WGL_SWAP_LAYER_BUFFERS_ARB
#undef WGL_SWAP_LAYER_BUFFERS_EXT
#undef WGL_SWAP_METHOD_ARB
#undef WGL_SWAP_METHOD_EXT
#undef WGL_SWAP_UNDEFINED_ARB
#undef WGL_SWAP_UNDEFINED_EXT
#undef WGL_TEXTURE_1D_ARB
#undef WGL_TEXTURE_2D_ARB
#undef WGL_TEXTURE_CUBE_MAP_ARB
#undef WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#undef WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#undef WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#undef WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#undef WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#undef WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#undef WGL_TEXTURE_DEPTH_COMPONENT_NV
#undef WGL_TEXTURE_FLOAT_RGBA_NV
#undef WGL_TEXTURE_FLOAT_RGB_NV
#undef WGL_TEXTURE_FLOAT_RG_NV
#undef WGL_TEXTURE_FLOAT_R_NV
#undef WGL_TEXTURE_FORMAT_ARB
#undef WGL_TEXTURE_RECTANGLE_ATI
#undef WGL_TEXTURE_RECTANGLE_NV
#undef WGL_TEXTURE_RGBA_ARB
#undef WGL_TEXTURE_RGB_ARB
#undef WGL_TEXTURE_TARGET_ARB
#undef WGL_TRANSPARENT_ALPHA_VALUE_ARB
#undef WGL_TRANSPARENT_ARB
#undef WGL_TRANSPARENT_BLUE_VALUE_ARB
#undef WGL_TRANSPARENT_EXT
#undef WGL_TRANSPARENT_GREEN_VALUE_ARB
#undef WGL_TRANSPARENT_INDEX_VALUE_ARB
#undef WGL_TRANSPARENT_RED_VALUE_ARB
#undef WGL_TRANSPARENT_VALUE_EXT
#undef WGL_TYPE_COLORINDEX_ARB
#undef WGL_TYPE_COLORINDEX_EXT
#undef WGL_TYPE_RGBA_ARB
#undef WGL_TYPE_RGBA_EXT
#undef WGL_TYPE_RGBA_FLOAT_ARB
#undef WGL_TYPE_RGBA_FLOAT_ATI
#undef WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT
#undef WGL_UNIQUE_ID_NV
#undef WGL_VIDEO_OUT_ALPHA_NV
#undef WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV
#undef WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV
#undef WGL_VIDEO_OUT_COLOR_NV
#undef WGL_VIDEO_OUT_DEPTH_NV
#undef WGL_VIDEO_OUT_FIELD_1
#undef WGL_VIDEO_OUT_FIELD_2
#undef WGL_VIDEO_OUT_FRAME
#undef WGL_VIDEO_OUT_STACKED_FIELDS_1_2
#undef WGL_VIDEO_OUT_STACKED_FIELDS_2_1

#endif

//GL Constants:
constexpr GLenum	GL_1PASS_EXT = 0x80A1;
constexpr GLenum	GL_1PASS_SGIS = 0x80A1;
constexpr GLenum	GL_2PASS_0_EXT = 0x80A2;
constexpr GLenum	GL_2PASS_0_SGIS = 0x80A2;
constexpr GLenum	GL_2PASS_1_EXT = 0x80A3;
constexpr GLenum	GL_2PASS_1_SGIS = 0x80A3;
constexpr GLenum	GL_2X_BIT_ATI = 0x00000001;
constexpr GLenum	GL_422_AVERAGE_EXT = 0x80CE;
constexpr GLenum	GL_422_EXT = 0x80CC;
constexpr GLenum	GL_422_REV_AVERAGE_EXT = 0x80CF;
constexpr GLenum	GL_422_REV_EXT = 0x80CD;
constexpr GLenum	GL_4PASS_0_EXT = 0x80A4;
constexpr GLenum	GL_4PASS_0_SGIS = 0x80A4;
constexpr GLenum	GL_4PASS_1_EXT = 0x80A5;
constexpr GLenum	GL_4PASS_1_SGIS = 0x80A5;
constexpr GLenum	GL_4PASS_2_EXT = 0x80A6;
constexpr GLenum	GL_4PASS_2_SGIS = 0x80A6;
constexpr GLenum	GL_4PASS_3_EXT = 0x80A7;
constexpr GLenum	GL_4PASS_3_SGIS = 0x80A7;
constexpr GLenum	GL_4X_BIT_ATI = 0x00000002;
constexpr GLenum	GL_8X_BIT_ATI = 0x00000004;
constexpr GLenum	GL_ABGR_EXT = 0x8000;
constexpr GLenum	GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
constexpr GLenum	GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
constexpr GLenum	GL_ACTIVE_ATTRIBUTES = 0x8B89;
constexpr GLenum	GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
constexpr GLenum	GL_ACTIVE_PROGRAM = 0x8259;
constexpr GLenum	GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
constexpr GLenum	GL_ACTIVE_RESOURCES = 0x92F5;
constexpr GLenum	GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
constexpr GLenum	GL_ACTIVE_SUBROUTINES = 0x8DE5;
constexpr GLenum	GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
constexpr GLenum	GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
constexpr GLenum	GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
constexpr GLenum	GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
constexpr GLenum	GL_ACTIVE_TEXTURE = 0x84E0;
constexpr GLenum	GL_ACTIVE_TEXTURE_ARB = 0x84E0;
constexpr GLenum	GL_ACTIVE_UNIFORMS = 0x8B86;
constexpr GLenum	GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
constexpr GLenum	GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
constexpr GLenum	GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
constexpr GLenum	GL_ACTIVE_VARIABLES = 0x9305;
constexpr GLenum	GL_ACTIVE_VARYINGS_NV = 0x8C81;
constexpr GLenum	GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
constexpr GLenum	GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
constexpr GLenum	GL_ADD_ATI = 0x8963;
constexpr GLenum	GL_ADD_SIGNED = 0x8574;
constexpr GLenum	GL_ADD_SIGNED_ARB = 0x8574;
constexpr GLenum	GL_ADD_SIGNED_EXT = 0x8574;
constexpr GLenum	GL_ADJACENT_PAIRS_NV = 0x90AE;
constexpr GLenum	GL_AFFINE_2D_NV = 0x9092;
constexpr GLenum	GL_AFFINE_3D_NV = 0x9094;
constexpr GLenum	GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
constexpr GLenum	GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
constexpr GLenum	GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
constexpr GLenum	GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
constexpr GLenum	GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
constexpr GLenum	GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
constexpr GLenum	GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
constexpr GLenum	GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
constexpr GLenum	GL_ALL_COMPLETED_NV = 0x84F2;
constexpr GLenum	GL_ALL_PIXELS_AMD = 0xFFFFFFFF;
constexpr GLenum	GL_ALL_SHADER_BITS = 0xFFFFFFFF;
constexpr GLenum	GL_ALL_STATIC_DATA_IBM = 103060;
constexpr GLenum	GL_ALPHA12_EXT = 0x803D;
constexpr GLenum	GL_ALPHA16F_ARB = 0x881C;
constexpr GLenum	GL_ALPHA16I_EXT = 0x8D8A;
constexpr GLenum	GL_ALPHA16UI_EXT = 0x8D78;
constexpr GLenum	GL_ALPHA16_EXT = 0x803E;
constexpr GLenum	GL_ALPHA16_SNORM = 0x9018;
constexpr GLenum	GL_ALPHA32F_ARB = 0x8816;
constexpr GLenum	GL_ALPHA32I_EXT = 0x8D84;
constexpr GLenum	GL_ALPHA32UI_EXT = 0x8D72;
constexpr GLenum	GL_ALPHA4_EXT = 0x803B;
constexpr GLenum	GL_ALPHA8I_EXT = 0x8D90;
constexpr GLenum	GL_ALPHA8UI_EXT = 0x8D7E;
constexpr GLenum	GL_ALPHA8_EXT = 0x803C;
constexpr GLenum	GL_ALPHA8_SNORM = 0x9014;
constexpr GLenum	GL_ALPHA_FLOAT16_APPLE = 0x881C;
constexpr GLenum	GL_ALPHA_FLOAT16_ATI = 0x881C;
constexpr GLenum	GL_ALPHA_FLOAT32_APPLE = 0x8816;
constexpr GLenum	GL_ALPHA_FLOAT32_ATI = 0x8816;
constexpr GLenum	GL_ALPHA_INTEGER = 0x8D97;
constexpr GLenum	GL_ALPHA_INTEGER_EXT = 0x8D97;
constexpr GLenum	GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
constexpr GLenum	GL_ALPHA_MAX_SGIX = 0x8321;
constexpr GLenum	GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
constexpr GLenum	GL_ALPHA_MIN_SGIX = 0x8320;
constexpr GLenum	GL_ALPHA_REF_COMMAND_NV = 0x000F;
constexpr GLenum	GL_ALPHA_SNORM = 0x9010;
constexpr GLenum	GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 0x934D;
constexpr GLenum	GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 0x934F;
constexpr GLenum	GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 0x934E;
constexpr GLenum	GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 0x92BF;
constexpr GLenum	GL_ALREADY_SIGNALED = 0x911A;
constexpr GLenum	GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
constexpr GLenum	GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
constexpr GLenum	GL_ANY_SAMPLES_PASSED = 0x8C2F;
constexpr GLenum	GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
constexpr GLenum	GL_ARC_TO_NV = 0xFE;
constexpr GLenum	GL_ARRAY_BUFFER = 0x8892;
constexpr GLenum	GL_ARRAY_BUFFER_ARB = 0x8892;
constexpr GLenum	GL_ARRAY_BUFFER_BINDING = 0x8894;
constexpr GLenum	GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
constexpr GLenum	GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
constexpr GLenum	GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
constexpr GLenum	GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
constexpr GLenum	GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
constexpr GLenum	GL_ARRAY_SIZE = 0x92FB;
constexpr GLenum	GL_ARRAY_STRIDE = 0x92FE;
constexpr GLenum	GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
constexpr GLenum	GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
constexpr GLenum	GL_ASYNC_MARKER_SGIX = 0x8329;
constexpr GLenum	GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
constexpr GLenum	GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
constexpr GLenum	GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
constexpr GLenum	GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
constexpr GLenum	GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
constexpr GLenum	GL_ATTACHED_SHADERS = 0x8B85;
constexpr GLenum	GL_ATTENUATION_EXT = 0x834D;
constexpr GLenum	GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
constexpr GLenum	GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
constexpr GLenum	GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
constexpr GLenum	GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
constexpr GLenum	GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
constexpr GLenum	GL_AUTO_GENERATE_MIPMAP = 0x8295;
constexpr GLenum	GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
constexpr GLenum	GL_AVERAGE_EXT = 0x8335;
constexpr GLenum	GL_BACK_NORMALS_HINT_PGI = 0x1A223;
constexpr GLenum	GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
constexpr GLenum	GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
constexpr GLenum	GL_BEVEL_NV = 0x90A6;
constexpr GLenum	GL_BGR = 0x80E0;
constexpr GLenum	GL_BGRA = 0x80E1;
constexpr GLenum	GL_BGRA_EXT = 0x80E1;
constexpr GLenum	GL_BGRA_INTEGER = 0x8D9B;
constexpr GLenum	GL_BGRA_INTEGER_EXT = 0x8D9B;
constexpr GLenum	GL_BGR_EXT = 0x80E0;
constexpr GLenum	GL_BGR_INTEGER = 0x8D9A;
constexpr GLenum	GL_BGR_INTEGER_EXT = 0x8D9A;
constexpr GLenum	GL_BIAS_BIT_ATI = 0x00000008;
constexpr GLenum	GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
constexpr GLenum	GL_BINORMAL_ARRAY_EXT = 0x843A;
constexpr GLenum	GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
constexpr GLenum	GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
constexpr GLenum	GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
constexpr GLenum	GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
constexpr GLenum	GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
constexpr GLenum	GL_BLEND_COLOR = 0x8005;
constexpr GLenum	GL_BLEND_COLOR_COMMAND_NV = 0x000B;
constexpr GLenum	GL_BLEND_COLOR_EXT = 0x8005;
constexpr GLenum	GL_BLEND_DST_ALPHA = 0x80CA;
constexpr GLenum	GL_BLEND_DST_ALPHA_EXT = 0x80CA;
constexpr GLenum	GL_BLEND_DST_RGB = 0x80C8;
constexpr GLenum	GL_BLEND_DST_RGB_EXT = 0x80C8;
constexpr GLenum	GL_BLEND_EQUATION = 0x8009;
constexpr GLenum	GL_BLEND_EQUATION_ALPHA = 0x883D;
constexpr GLenum	GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
constexpr GLenum	GL_BLEND_EQUATION_EXT = 0x8009;
constexpr GLenum	GL_BLEND_EQUATION_RGB = 0x8009;
constexpr GLenum	GL_BLEND_EQUATION_RGB_EXT = 0x8009;
constexpr GLenum	GL_BLEND_OVERLAP_NV = 0x9281;
constexpr GLenum	GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
constexpr GLenum	GL_BLEND_SRC_ALPHA = 0x80CB;
constexpr GLenum	GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
constexpr GLenum	GL_BLEND_SRC_RGB = 0x80C9;
constexpr GLenum	GL_BLEND_SRC_RGB_EXT = 0x80C9;
constexpr GLenum	GL_BLOCK_INDEX = 0x92FD;
constexpr GLenum	GL_BLUE_BIT_ATI = 0x00000004;
constexpr GLenum	GL_BLUE_INTEGER = 0x8D96;
constexpr GLenum	GL_BLUE_INTEGER_EXT = 0x8D96;
constexpr GLenum	GL_BLUE_MAX_CLAMP_INGR = 0x8566;
constexpr GLenum	GL_BLUE_MIN_CLAMP_INGR = 0x8562;
constexpr GLenum	GL_BLUE_NV = 0x1905;
constexpr GLenum	GL_BOLD_BIT_NV = 0x01;
constexpr GLenum	GL_BOOL = 0x8B56;
constexpr GLenum	GL_BOOL_ARB = 0x8B56;
constexpr GLenum	GL_BOOL_VEC2 = 0x8B57;
constexpr GLenum	GL_BOOL_VEC2_ARB = 0x8B57;
constexpr GLenum	GL_BOOL_VEC3 = 0x8B58;
constexpr GLenum	GL_BOOL_VEC3_ARB = 0x8B58;
constexpr GLenum	GL_BOOL_VEC4 = 0x8B59;
constexpr GLenum	GL_BOOL_VEC4_ARB = 0x8B59;
constexpr GLenum	GL_BOUNDING_BOX_NV = 0x908D;
constexpr GLenum	GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
constexpr GLenum	GL_BUFFER = 0x82E0;
constexpr GLenum	GL_BUFFER_ACCESS = 0x88BB;
constexpr GLenum	GL_BUFFER_ACCESS_ARB = 0x88BB;
constexpr GLenum	GL_BUFFER_ACCESS_FLAGS = 0x911F;
constexpr GLenum	GL_BUFFER_BINDING = 0x9302;
constexpr GLenum	GL_BUFFER_DATA_SIZE = 0x9303;
constexpr GLenum	GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
constexpr GLenum	GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
constexpr GLenum	GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
constexpr GLenum	GL_BUFFER_MAPPED = 0x88BC;
constexpr GLenum	GL_BUFFER_MAPPED_ARB = 0x88BC;
constexpr GLenum	GL_BUFFER_MAP_LENGTH = 0x9120;
constexpr GLenum	GL_BUFFER_MAP_OFFSET = 0x9121;
constexpr GLenum	GL_BUFFER_MAP_POINTER = 0x88BD;
constexpr GLenum	GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
constexpr GLenum	GL_BUFFER_OBJECT_APPLE = 0x85B3;
constexpr GLenum	GL_BUFFER_OBJECT_EXT = 0x9151;
constexpr GLenum	GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
constexpr GLenum	GL_BUFFER_SIZE = 0x8764;
constexpr GLenum	GL_BUFFER_SIZE_ARB = 0x8764;
constexpr GLenum	GL_BUFFER_STORAGE_FLAGS = 0x8220;
constexpr GLenum	GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
constexpr GLenum	GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
constexpr GLenum	GL_BUFFER_USAGE = 0x8765;
constexpr GLenum	GL_BUFFER_USAGE_ARB = 0x8765;
constexpr GLenum	GL_BUFFER_VARIABLE = 0x92E5;
constexpr GLenum	GL_BUMP_ENVMAP_ATI = 0x877B;
constexpr GLenum	GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
constexpr GLenum	GL_BUMP_ROT_MATRIX_ATI = 0x8775;
constexpr GLenum	GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
constexpr GLenum	GL_BUMP_TARGET_ATI = 0x877C;
constexpr GLenum	GL_BUMP_TEX_UNITS_ATI = 0x8778;
constexpr GLenum	GL_CAVEAT_SUPPORT = 0x82B8;
constexpr GLenum	GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
constexpr GLenum	GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
constexpr GLenum	GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
constexpr GLenum	GL_CLAMP_FRAGMENT_COLOR = 0x891B;
constexpr GLenum	GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
constexpr GLenum	GL_CLAMP_READ_COLOR = 0x891C;
constexpr GLenum	GL_CLAMP_READ_COLOR_ARB = 0x891C;
constexpr GLenum	GL_CLAMP_TO_BORDER = 0x812D;
constexpr GLenum	GL_CLAMP_TO_BORDER_ARB = 0x812D;
constexpr GLenum	GL_CLAMP_TO_BORDER_SGIS = 0x812D;
constexpr GLenum	GL_CLAMP_TO_EDGE = 0x812F;
constexpr GLenum	GL_CLAMP_TO_EDGE_SGIS = 0x812F;
constexpr GLenum	GL_CLAMP_VERTEX_COLOR = 0x891A;
constexpr GLenum	GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
constexpr GLenum	GL_CLEAR_BUFFER = 0x82B4;
constexpr GLenum	GL_CLEAR_TEXTURE = 0x9365;
constexpr GLenum	GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
constexpr GLenum	GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
constexpr GLenum	GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
constexpr GLenum	GL_CLIENT_STORAGE_BIT = 0x0200;
constexpr GLenum	GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
constexpr GLenum	GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
constexpr GLenum	GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
constexpr GLenum	GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
constexpr GLenum	GL_CLIP_DEPTH_MODE = 0x935D;
constexpr GLenum	GL_CLIP_DISTANCE0 = 0x3000;
constexpr GLenum	GL_CLIP_DISTANCE1 = 0x3001;
constexpr GLenum	GL_CLIP_DISTANCE2 = 0x3002;
constexpr GLenum	GL_CLIP_DISTANCE3 = 0x3003;
constexpr GLenum	GL_CLIP_DISTANCE4 = 0x3004;
constexpr GLenum	GL_CLIP_DISTANCE5 = 0x3005;
constexpr GLenum	GL_CLIP_DISTANCE_NV = 0x8C7A;
constexpr GLenum	GL_CLIP_FAR_HINT_PGI = 0x1A221;
constexpr GLenum	GL_CLIP_NEAR_HINT_PGI = 0x1A220;
constexpr GLenum	GL_CLIP_ORIGIN = 0x935C;
constexpr GLenum	GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
constexpr GLenum	GL_CLOSE_PATH_NV = 0x00;
constexpr GLenum	GL_CMYKA_EXT = 0x800D;
constexpr GLenum	GL_CMYK_EXT = 0x800C;
constexpr GLenum	GL_CND0_ATI = 0x896B;
constexpr GLenum	GL_CND_ATI = 0x896A;
constexpr GLenum	GL_COLOR3_BIT_PGI = 0x00010000;
constexpr GLenum	GL_COLOR4_BIT_PGI = 0x00020000;
constexpr GLenum	GL_COLORBURN_KHR = 0x929A;
constexpr GLenum	GL_COLORBURN_NV = 0x929A;
constexpr GLenum	GL_COLORDODGE_KHR = 0x9299;
constexpr GLenum	GL_COLORDODGE_NV = 0x9299;
constexpr GLenum	GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
constexpr GLenum	GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
constexpr GLenum	GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
constexpr GLenum	GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
constexpr GLenum	GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
constexpr GLenum	GL_COLOR_ARRAY_EXT = 0x8076;
constexpr GLenum	GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
constexpr GLenum	GL_COLOR_ARRAY_LIST_IBM = 103072;
constexpr GLenum	GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
constexpr GLenum	GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
constexpr GLenum	GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
constexpr GLenum	GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
constexpr GLenum	GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
constexpr GLenum	GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
constexpr GLenum	GL_COLOR_ATTACHMENT0 = 0x8CE0;
constexpr GLenum	GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
constexpr GLenum	GL_COLOR_ATTACHMENT1 = 0x8CE1;
constexpr GLenum	GL_COLOR_ATTACHMENT10 = 0x8CEA;
constexpr GLenum	GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
constexpr GLenum	GL_COLOR_ATTACHMENT11 = 0x8CEB;
constexpr GLenum	GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
constexpr GLenum	GL_COLOR_ATTACHMENT12 = 0x8CEC;
constexpr GLenum	GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
constexpr GLenum	GL_COLOR_ATTACHMENT13 = 0x8CED;
constexpr GLenum	GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
constexpr GLenum	GL_COLOR_ATTACHMENT14 = 0x8CEE;
constexpr GLenum	GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
constexpr GLenum	GL_COLOR_ATTACHMENT15 = 0x8CEF;
constexpr GLenum	GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
constexpr GLenum	GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
constexpr GLenum	GL_COLOR_ATTACHMENT2 = 0x8CE2;
constexpr GLenum	GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
constexpr GLenum	GL_COLOR_ATTACHMENT3 = 0x8CE3;
constexpr GLenum	GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
constexpr GLenum	GL_COLOR_ATTACHMENT4 = 0x8CE4;
constexpr GLenum	GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
constexpr GLenum	GL_COLOR_ATTACHMENT5 = 0x8CE5;
constexpr GLenum	GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
constexpr GLenum	GL_COLOR_ATTACHMENT6 = 0x8CE6;
constexpr GLenum	GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
constexpr GLenum	GL_COLOR_ATTACHMENT7 = 0x8CE7;
constexpr GLenum	GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
constexpr GLenum	GL_COLOR_ATTACHMENT8 = 0x8CE8;
constexpr GLenum	GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
constexpr GLenum	GL_COLOR_ATTACHMENT9 = 0x8CE9;
constexpr GLenum	GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
constexpr GLenum	GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
constexpr GLenum	GL_COLOR_COMPONENTS = 0x8283;
constexpr GLenum	GL_COLOR_ENCODING = 0x8296;
constexpr GLenum	GL_COLOR_FLOAT_APPLE = 0x8A0F;
constexpr GLenum	GL_COLOR_INDEX12_EXT = 0x80E6;
constexpr GLenum	GL_COLOR_INDEX16_EXT = 0x80E7;
constexpr GLenum	GL_COLOR_INDEX1_EXT = 0x80E2;
constexpr GLenum	GL_COLOR_INDEX2_EXT = 0x80E3;
constexpr GLenum	GL_COLOR_INDEX4_EXT = 0x80E4;
constexpr GLenum	GL_COLOR_INDEX8_EXT = 0x80E5;
constexpr GLenum	GL_COLOR_MATRIX = 0x80B1;
constexpr GLenum	GL_COLOR_MATRIX_SGI = 0x80B1;
constexpr GLenum	GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
constexpr GLenum	GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
constexpr GLenum	GL_COLOR_RENDERABLE = 0x8286;
constexpr GLenum	GL_COLOR_SAMPLES_NV = 0x8E20;
constexpr GLenum	GL_COLOR_SUM = 0x8458;
constexpr GLenum	GL_COLOR_SUM_ARB = 0x8458;
constexpr GLenum	GL_COLOR_SUM_CLAMP_NV = 0x854F;
constexpr GLenum	GL_COLOR_SUM_EXT = 0x8458;
constexpr GLenum	GL_COLOR_TABLE = 0x80D0;
constexpr GLenum	GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
constexpr GLenum	GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
constexpr GLenum	GL_COLOR_TABLE_BIAS = 0x80D7;
constexpr GLenum	GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
constexpr GLenum	GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
constexpr GLenum	GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
constexpr GLenum	GL_COLOR_TABLE_FORMAT = 0x80D8;
constexpr GLenum	GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
constexpr GLenum	GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
constexpr GLenum	GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
constexpr GLenum	GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
constexpr GLenum	GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
constexpr GLenum	GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
constexpr GLenum	GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
constexpr GLenum	GL_COLOR_TABLE_RED_SIZE = 0x80DA;
constexpr GLenum	GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
constexpr GLenum	GL_COLOR_TABLE_SCALE = 0x80D6;
constexpr GLenum	GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
constexpr GLenum	GL_COLOR_TABLE_SGI = 0x80D0;
constexpr GLenum	GL_COLOR_TABLE_WIDTH = 0x80D9;
constexpr GLenum	GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
constexpr GLenum	GL_COMBINE = 0x8570;
constexpr GLenum	GL_COMBINE4_NV = 0x8503;
constexpr GLenum	GL_COMBINER0_NV = 0x8550;
constexpr GLenum	GL_COMBINER1_NV = 0x8551;
constexpr GLenum	GL_COMBINER2_NV = 0x8552;
constexpr GLenum	GL_COMBINER3_NV = 0x8553;
constexpr GLenum	GL_COMBINER4_NV = 0x8554;
constexpr GLenum	GL_COMBINER5_NV = 0x8555;
constexpr GLenum	GL_COMBINER6_NV = 0x8556;
constexpr GLenum	GL_COMBINER7_NV = 0x8557;
constexpr GLenum	GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
constexpr GLenum	GL_COMBINER_AB_OUTPUT_NV = 0x854A;
constexpr GLenum	GL_COMBINER_BIAS_NV = 0x8549;
constexpr GLenum	GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
constexpr GLenum	GL_COMBINER_CD_OUTPUT_NV = 0x854B;
constexpr GLenum	GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
constexpr GLenum	GL_COMBINER_INPUT_NV = 0x8542;
constexpr GLenum	GL_COMBINER_MAPPING_NV = 0x8543;
constexpr GLenum	GL_COMBINER_MUX_SUM_NV = 0x8547;
constexpr GLenum	GL_COMBINER_SCALE_NV = 0x8548;
constexpr GLenum	GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
constexpr GLenum	GL_COMBINE_ALPHA = 0x8572;
constexpr GLenum	GL_COMBINE_ALPHA_ARB = 0x8572;
constexpr GLenum	GL_COMBINE_ALPHA_EXT = 0x8572;
constexpr GLenum	GL_COMBINE_ARB = 0x8570;
constexpr GLenum	GL_COMBINE_EXT = 0x8570;
constexpr GLenum	GL_COMBINE_RGB = 0x8571;
constexpr GLenum	GL_COMBINE_RGB_ARB = 0x8571;
constexpr GLenum	GL_COMBINE_RGB_EXT = 0x8571;
constexpr GLenum	GL_COMMAND_BARRIER_BIT = 0x00000040;
constexpr GLenum	GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
constexpr GLenum	GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
constexpr GLenum	GL_COMPARE_REF_TO_TEXTURE = 0x884E;
constexpr GLenum	GL_COMPARE_R_TO_TEXTURE = 0x884E;
constexpr GLenum	GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
constexpr GLenum	GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
constexpr GLenum	GL_COMPILE_STATUS = 0x8B81;
constexpr GLenum	GL_COMPLETION_STATUS_ARB = 0x91B1;
constexpr GLenum	GL_COMPLETION_STATUS_KHR = 0x91B1;
constexpr GLenum	GL_COMPRESSED_ALPHA = 0x84E9;
constexpr GLenum	GL_COMPRESSED_ALPHA_ARB = 0x84E9;
constexpr GLenum	GL_COMPRESSED_INTENSITY = 0x84EC;
constexpr GLenum	GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
constexpr GLenum	GL_COMPRESSED_LUMINANCE = 0x84EA;
constexpr GLenum	GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
constexpr GLenum	GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
constexpr GLenum	GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
constexpr GLenum	GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
constexpr GLenum	GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
constexpr GLenum	GL_COMPRESSED_R11_EAC = 0x9270;
constexpr GLenum	GL_COMPRESSED_RED = 0x8225;
constexpr GLenum	GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
constexpr GLenum	GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
constexpr GLenum	GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
constexpr GLenum	GL_COMPRESSED_RG = 0x8226;
constexpr GLenum	GL_COMPRESSED_RG11_EAC = 0x9272;
constexpr GLenum	GL_COMPRESSED_RGB = 0x84ED;
constexpr GLenum	GL_COMPRESSED_RGB8_ETC2 = 0x9274;
constexpr GLenum	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
constexpr GLenum	GL_COMPRESSED_RGBA = 0x84EE;
constexpr GLenum	GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
constexpr GLenum	GL_COMPRESSED_RGBA_ARB = 0x84EE;
constexpr GLenum	GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
constexpr GLenum	GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
constexpr GLenum	GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
constexpr GLenum	GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
constexpr GLenum	GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
constexpr GLenum	GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
constexpr GLenum	GL_COMPRESSED_RGB_ARB = 0x84ED;
constexpr GLenum	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
constexpr GLenum	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
constexpr GLenum	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
constexpr GLenum	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
constexpr GLenum	GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
constexpr GLenum	GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
constexpr GLenum	GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
constexpr GLenum	GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
constexpr GLenum	GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
constexpr GLenum	GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
constexpr GLenum	GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
constexpr GLenum	GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
constexpr GLenum	GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
constexpr GLenum	GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
constexpr GLenum	GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
constexpr GLenum	GL_COMPRESSED_SLUMINANCE = 0x8C4A;
constexpr GLenum	GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
constexpr GLenum	GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
constexpr GLenum	GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
constexpr GLenum	GL_COMPRESSED_SRGB = 0x8C48;
constexpr GLenum	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
constexpr GLenum	GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
constexpr GLenum	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
constexpr GLenum	GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
constexpr GLenum	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
constexpr GLenum	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
constexpr GLenum	GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
constexpr GLenum	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
constexpr GLenum	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
constexpr GLenum	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
constexpr GLenum	GL_COMPRESSED_SRGB_EXT = 0x8C48;
constexpr GLenum	GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
constexpr GLenum	GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
constexpr GLenum	GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
constexpr GLenum	GL_COMPUTE_PROGRAM_NV = 0x90FB;
constexpr GLenum	GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
constexpr GLenum	GL_COMPUTE_SHADER = 0x91B9;
constexpr GLenum	GL_COMPUTE_SHADER_BIT = 0x00000020;
constexpr GLenum	GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
constexpr GLenum	GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
constexpr GLenum	GL_COMPUTE_SUBROUTINE = 0x92ED;
constexpr GLenum	GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
constexpr GLenum	GL_COMPUTE_TEXTURE = 0x82A0;
constexpr GLenum	GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
constexpr GLenum	GL_COMP_BIT_ATI = 0x00000002;
constexpr GLenum	GL_CONDITION_SATISFIED = 0x911C;
constexpr GLenum	GL_CONFORMANT_NV = 0x9374;
constexpr GLenum	GL_CONIC_CURVE_TO_NV = 0x1A;
constexpr GLenum	GL_CONJOINT_NV = 0x9284;
constexpr GLenum	GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x83FE;
constexpr GLenum	GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
constexpr GLenum	GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
constexpr GLenum	GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
constexpr GLenum	GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
constexpr GLenum	GL_CONSERVATIVE_RASTER_MODE_NV = 0x954D;
constexpr GLenum	GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954E;
constexpr GLenum	GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954F;
constexpr GLenum	GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
constexpr GLenum	GL_CONSTANT = 0x8576;
constexpr GLenum	GL_CONSTANT_ALPHA = 0x8003;
constexpr GLenum	GL_CONSTANT_ALPHA_EXT = 0x8003;
constexpr GLenum	GL_CONSTANT_ARB = 0x8576;
constexpr GLenum	GL_CONSTANT_BORDER = 0x8151;
constexpr GLenum	GL_CONSTANT_COLOR = 0x8001;
constexpr GLenum	GL_CONSTANT_COLOR0_NV = 0x852A;
constexpr GLenum	GL_CONSTANT_COLOR1_NV = 0x852B;
constexpr GLenum	GL_CONSTANT_COLOR_EXT = 0x8001;
constexpr GLenum	GL_CONSTANT_EXT = 0x8576;
constexpr GLenum	GL_CONST_EYE_NV = 0x86E5;
constexpr GLenum	GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
constexpr GLenum	GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
constexpr GLenum	GL_CONTEXT_FLAGS = 0x821E;
constexpr GLenum	GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
constexpr GLenum	GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
constexpr GLenum	GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
constexpr GLenum	GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
constexpr GLenum	GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
constexpr GLenum	GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
constexpr GLenum	GL_CONTEXT_LOST = 0x0507;
constexpr GLenum	GL_CONTEXT_PROFILE_MASK = 0x9126;
constexpr GLenum	GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
constexpr GLenum	GL_CONTINUOUS_AMD = 0x9007;
constexpr GLenum	GL_CONTRAST_NV = 0x92A1;
constexpr GLenum	GL_CONVEX_HULL_NV = 0x908B;
constexpr GLenum	GL_CONVOLUTION_1D = 0x8010;
constexpr GLenum	GL_CONVOLUTION_1D_EXT = 0x8010;
constexpr GLenum	GL_CONVOLUTION_2D = 0x8011;
constexpr GLenum	GL_CONVOLUTION_2D_EXT = 0x8011;
constexpr GLenum	GL_CONVOLUTION_BORDER_COLOR = 0x8154;
constexpr GLenum	GL_CONVOLUTION_BORDER_MODE = 0x8013;
constexpr GLenum	GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
constexpr GLenum	GL_CONVOLUTION_FILTER_BIAS = 0x8015;
constexpr GLenum	GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
constexpr GLenum	GL_CONVOLUTION_FILTER_SCALE = 0x8014;
constexpr GLenum	GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
constexpr GLenum	GL_CONVOLUTION_FORMAT = 0x8017;
constexpr GLenum	GL_CONVOLUTION_FORMAT_EXT = 0x8017;
constexpr GLenum	GL_CONVOLUTION_HEIGHT = 0x8019;
constexpr GLenum	GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
constexpr GLenum	GL_CONVOLUTION_HINT_SGIX = 0x8316;
constexpr GLenum	GL_CONVOLUTION_WIDTH = 0x8018;
constexpr GLenum	GL_CONVOLUTION_WIDTH_EXT = 0x8018;
constexpr GLenum	GL_CON_0_ATI = 0x8941;
constexpr GLenum	GL_CON_1_ATI = 0x8942;
constexpr GLenum	GL_CON_2_ATI = 0x8943;
constexpr GLenum	GL_CON_3_ATI = 0x8944;
constexpr GLenum	GL_CON_4_ATI = 0x8945;
constexpr GLenum	GL_CON_5_ATI = 0x8946;
constexpr GLenum	GL_CON_6_ATI = 0x8947;
constexpr GLenum	GL_CON_7_ATI = 0x8948;
constexpr GLenum	GL_COORD_REPLACE = 0x8862;
constexpr GLenum	GL_COORD_REPLACE_ARB = 0x8862;
constexpr GLenum	GL_COORD_REPLACE_NV = 0x8862;
constexpr GLenum	GL_COPY_READ_BUFFER = 0x8F36;
constexpr GLenum	GL_COPY_READ_BUFFER_BINDING = 0x8F36;
constexpr GLenum	GL_COPY_WRITE_BUFFER = 0x8F37;
constexpr GLenum	GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
constexpr GLenum	GL_COUNTER_RANGE_AMD = 0x8BC1;
constexpr GLenum	GL_COUNTER_TYPE_AMD = 0x8BC0;
constexpr GLenum	GL_COUNT_DOWN_NV = 0x9089;
constexpr GLenum	GL_COUNT_UP_NV = 0x9088;
constexpr GLenum	GL_COVERAGE_MODULATION_NV = 0x9332;
constexpr GLenum	GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
constexpr GLenum	GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
constexpr GLenum	GL_CUBIC_CURVE_TO_NV = 0x0C;
constexpr GLenum	GL_CUBIC_EXT = 0x8334;
constexpr GLenum	GL_CULL_FRAGMENT_NV = 0x86E7;
constexpr GLenum	GL_CULL_MODES_NV = 0x86E0;
constexpr GLenum	GL_CULL_VERTEX_EXT = 0x81AA;
constexpr GLenum	GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
constexpr GLenum	GL_CULL_VERTEX_IBM = 103050;
constexpr GLenum	GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
constexpr GLenum	GL_CURRENT_ATTRIB_NV = 0x8626;
constexpr GLenum	GL_CURRENT_BINORMAL_EXT = 0x843C;
constexpr GLenum	GL_CURRENT_FOG_COORD = 0x8453;
constexpr GLenum	GL_CURRENT_FOG_COORDINATE = 0x8453;
constexpr GLenum	GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
constexpr GLenum	GL_CURRENT_MATRIX_ARB = 0x8641;
constexpr GLenum	GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
constexpr GLenum	GL_CURRENT_MATRIX_NV = 0x8641;
constexpr GLenum	GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
constexpr GLenum	GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
constexpr GLenum	GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
constexpr GLenum	GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
constexpr GLenum	GL_CURRENT_PROGRAM = 0x8B8D;
constexpr GLenum	GL_CURRENT_QUERY = 0x8865;
constexpr GLenum	GL_CURRENT_QUERY_ARB = 0x8865;
constexpr GLenum	GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
constexpr GLenum	GL_CURRENT_SECONDARY_COLOR = 0x8459;
constexpr GLenum	GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
constexpr GLenum	GL_CURRENT_TANGENT_EXT = 0x843B;
constexpr GLenum	GL_CURRENT_TIME_NV = 0x8E28;
constexpr GLenum	GL_CURRENT_VERTEX_ATTRIB = 0x8626;
constexpr GLenum	GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
constexpr GLenum	GL_CURRENT_VERTEX_EXT = 0x87E2;
constexpr GLenum	GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
constexpr GLenum	GL_CURRENT_WEIGHT_ARB = 0x86A8;
constexpr GLenum	GL_D3D12_FENCE_VALUE_EXT = 0x9595;
constexpr GLenum	GL_DARKEN_KHR = 0x9297;
constexpr GLenum	GL_DARKEN_NV = 0x9297;
constexpr GLenum	GL_DATA_BUFFER_AMD = 0x9151;
constexpr GLenum	GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
constexpr GLenum	GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
constexpr GLenum	GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
constexpr GLenum	GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
constexpr GLenum	GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
constexpr GLenum	GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
constexpr GLenum	GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
constexpr GLenum	GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
constexpr GLenum	GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
constexpr GLenum	GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
constexpr GLenum	GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
constexpr GLenum	GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
constexpr GLenum	GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
constexpr GLenum	GL_DEBUG_LOGGED_MESSAGES = 0x9145;
constexpr GLenum	GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
constexpr GLenum	GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
constexpr GLenum	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
constexpr GLenum	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
constexpr GLenum	GL_DEBUG_OUTPUT = 0x92E0;
constexpr GLenum	GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
constexpr GLenum	GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
constexpr GLenum	GL_DEBUG_SEVERITY_HIGH = 0x9146;
constexpr GLenum	GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
constexpr GLenum	GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
constexpr GLenum	GL_DEBUG_SEVERITY_LOW = 0x9148;
constexpr GLenum	GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
constexpr GLenum	GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
constexpr GLenum	GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
constexpr GLenum	GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
constexpr GLenum	GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
constexpr GLenum	GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
constexpr GLenum	GL_DEBUG_SOURCE_API = 0x8246;
constexpr GLenum	GL_DEBUG_SOURCE_API_ARB = 0x8246;
constexpr GLenum	GL_DEBUG_SOURCE_APPLICATION = 0x824A;
constexpr GLenum	GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
constexpr GLenum	GL_DEBUG_SOURCE_OTHER = 0x824B;
constexpr GLenum	GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
constexpr GLenum	GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
constexpr GLenum	GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
constexpr GLenum	GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
constexpr GLenum	GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
constexpr GLenum	GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
constexpr GLenum	GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
constexpr GLenum	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
constexpr GLenum	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
constexpr GLenum	GL_DEBUG_TYPE_ERROR = 0x824C;
constexpr GLenum	GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
constexpr GLenum	GL_DEBUG_TYPE_MARKER = 0x8268;
constexpr GLenum	GL_DEBUG_TYPE_OTHER = 0x8251;
constexpr GLenum	GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
constexpr GLenum	GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
constexpr GLenum	GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
constexpr GLenum	GL_DEBUG_TYPE_POP_GROUP = 0x826A;
constexpr GLenum	GL_DEBUG_TYPE_PORTABILITY = 0x824F;
constexpr GLenum	GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
constexpr GLenum	GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
constexpr GLenum	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
constexpr GLenum	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
constexpr GLenum	GL_DECODE_EXT = 0x8A49;
constexpr GLenum	GL_DECR_WRAP = 0x8508;
constexpr GLenum	GL_DECR_WRAP_EXT = 0x8508;
constexpr GLenum	GL_DEDICATED_MEMORY_OBJECT_EXT = 0x9581;
constexpr GLenum	GL_DELETE_STATUS = 0x8B80;
constexpr GLenum	GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
constexpr GLenum	GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
constexpr GLenum	GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
constexpr GLenum	GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
constexpr GLenum	GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
constexpr GLenum	GL_DEPTH24_STENCIL8 = 0x88F0;
constexpr GLenum	GL_DEPTH24_STENCIL8_EXT = 0x88F0;
constexpr GLenum	GL_DEPTH32F_STENCIL8 = 0x8CAD;
constexpr GLenum	GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
constexpr GLenum	GL_DEPTH_ATTACHMENT = 0x8D00;
constexpr GLenum	GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
constexpr GLenum	GL_DEPTH_BOUNDS_EXT = 0x8891;
constexpr GLenum	GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
constexpr GLenum	GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
constexpr GLenum	GL_DEPTH_CLAMP = 0x864F;
constexpr GLenum	GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
constexpr GLenum	GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
constexpr GLenum	GL_DEPTH_CLAMP_NV = 0x864F;
constexpr GLenum	GL_DEPTH_COMPONENT16 = 0x81A5;
constexpr GLenum	GL_DEPTH_COMPONENT16_ARB = 0x81A5;
constexpr GLenum	GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
constexpr GLenum	GL_DEPTH_COMPONENT24 = 0x81A6;
constexpr GLenum	GL_DEPTH_COMPONENT24_ARB = 0x81A6;
constexpr GLenum	GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
constexpr GLenum	GL_DEPTH_COMPONENT32 = 0x81A7;
constexpr GLenum	GL_DEPTH_COMPONENT32F = 0x8CAC;
constexpr GLenum	GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
constexpr GLenum	GL_DEPTH_COMPONENT32_ARB = 0x81A7;
constexpr GLenum	GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
constexpr GLenum	GL_DEPTH_COMPONENTS = 0x8284;
constexpr GLenum	GL_DEPTH_RENDERABLE = 0x8287;
constexpr GLenum	GL_DEPTH_SAMPLES_NV = 0x932D;
constexpr GLenum	GL_DEPTH_STENCIL = 0x84F9;
constexpr GLenum	GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
constexpr GLenum	GL_DEPTH_STENCIL_EXT = 0x84F9;
constexpr GLenum	GL_DEPTH_STENCIL_NV = 0x84F9;
constexpr GLenum	GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
constexpr GLenum	GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
constexpr GLenum	GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
constexpr GLenum	GL_DEPTH_TEXTURE_MODE = 0x884B;
constexpr GLenum	GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
constexpr GLenum	GL_DEVICE_LUID_EXT = 0x9599;
constexpr GLenum	GL_DEVICE_NODE_MASK_EXT = 0x959A;
constexpr GLenum	GL_DEVICE_UUID_EXT = 0x9597;
constexpr GLenum	GL_DIFFERENCE_KHR = 0x929E;
constexpr GLenum	GL_DIFFERENCE_NV = 0x929E;
constexpr GLenum	GL_DISCARD_ATI = 0x8763;
constexpr GLenum	GL_DISCARD_NV = 0x8530;
constexpr GLenum	GL_DISCRETE_AMD = 0x9006;
constexpr GLenum	GL_DISJOINT_NV = 0x9283;
constexpr GLenum	GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
constexpr GLenum	GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
constexpr GLenum	GL_DISPLAY_LIST = 0x82E7;
constexpr GLenum	GL_DISTANCE_ATTENUATION_EXT = 0x8129;
constexpr GLenum	GL_DOT2_ADD_ATI = 0x896C;
constexpr GLenum	GL_DOT3_ATI = 0x8966;
constexpr GLenum	GL_DOT3_RGB = 0x86AE;
constexpr GLenum	GL_DOT3_RGBA = 0x86AF;
constexpr GLenum	GL_DOT3_RGBA_ARB = 0x86AF;
constexpr GLenum	GL_DOT3_RGBA_EXT = 0x8741;
constexpr GLenum	GL_DOT3_RGB_ARB = 0x86AE;
constexpr GLenum	GL_DOT3_RGB_EXT = 0x8740;
constexpr GLenum	GL_DOT4_ATI = 0x8967;
constexpr GLenum	GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
constexpr GLenum	GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
constexpr GLenum	GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
constexpr GLenum	GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
constexpr GLenum	GL_DOT_PRODUCT_NV = 0x86EC;
constexpr GLenum	GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
constexpr GLenum	GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
constexpr GLenum	GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
constexpr GLenum	GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
constexpr GLenum	GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
constexpr GLenum	GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
constexpr GLenum	GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
constexpr GLenum	GL_DOUBLE_MAT2 = 0x8F46;
constexpr GLenum	GL_DOUBLE_MAT2_EXT = 0x8F46;
constexpr GLenum	GL_DOUBLE_MAT3 = 0x8F47;
constexpr GLenum	GL_DOUBLE_MAT3_EXT = 0x8F47;
constexpr GLenum	GL_DOUBLE_MAT4 = 0x8F48;
constexpr GLenum	GL_DOUBLE_MAT4_EXT = 0x8F48;
constexpr GLenum	GL_DOUBLE_VEC2 = 0x8FFC;
constexpr GLenum	GL_DOUBLE_VEC2_EXT = 0x8FFC;
constexpr GLenum	GL_DOUBLE_VEC3 = 0x8FFD;
constexpr GLenum	GL_DOUBLE_VEC3_EXT = 0x8FFD;
constexpr GLenum	GL_DOUBLE_VEC4 = 0x8FFE;
constexpr GLenum	GL_DOUBLE_VEC4_EXT = 0x8FFE;
constexpr GLenum	GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
constexpr GLenum	GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
constexpr GLenum	GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
constexpr GLenum	GL_DRAW_BUFFER0 = 0x8825;
constexpr GLenum	GL_DRAW_BUFFER0_ARB = 0x8825;
constexpr GLenum	GL_DRAW_BUFFER0_ATI = 0x8825;
constexpr GLenum	GL_DRAW_BUFFER1 = 0x8826;
constexpr GLenum	GL_DRAW_BUFFER10 = 0x882F;
constexpr GLenum	GL_DRAW_BUFFER10_ARB = 0x882F;
constexpr GLenum	GL_DRAW_BUFFER10_ATI = 0x882F;
constexpr GLenum	GL_DRAW_BUFFER11 = 0x8830;
constexpr GLenum	GL_DRAW_BUFFER11_ARB = 0x8830;
constexpr GLenum	GL_DRAW_BUFFER11_ATI = 0x8830;
constexpr GLenum	GL_DRAW_BUFFER12 = 0x8831;
constexpr GLenum	GL_DRAW_BUFFER12_ARB = 0x8831;
constexpr GLenum	GL_DRAW_BUFFER12_ATI = 0x8831;
constexpr GLenum	GL_DRAW_BUFFER13 = 0x8832;
constexpr GLenum	GL_DRAW_BUFFER13_ARB = 0x8832;
constexpr GLenum	GL_DRAW_BUFFER13_ATI = 0x8832;
constexpr GLenum	GL_DRAW_BUFFER14 = 0x8833;
constexpr GLenum	GL_DRAW_BUFFER14_ARB = 0x8833;
constexpr GLenum	GL_DRAW_BUFFER14_ATI = 0x8833;
constexpr GLenum	GL_DRAW_BUFFER15 = 0x8834;
constexpr GLenum	GL_DRAW_BUFFER15_ARB = 0x8834;
constexpr GLenum	GL_DRAW_BUFFER15_ATI = 0x8834;
constexpr GLenum	GL_DRAW_BUFFER1_ARB = 0x8826;
constexpr GLenum	GL_DRAW_BUFFER1_ATI = 0x8826;
constexpr GLenum	GL_DRAW_BUFFER2 = 0x8827;
constexpr GLenum	GL_DRAW_BUFFER2_ARB = 0x8827;
constexpr GLenum	GL_DRAW_BUFFER2_ATI = 0x8827;
constexpr GLenum	GL_DRAW_BUFFER3 = 0x8828;
constexpr GLenum	GL_DRAW_BUFFER3_ARB = 0x8828;
constexpr GLenum	GL_DRAW_BUFFER3_ATI = 0x8828;
constexpr GLenum	GL_DRAW_BUFFER4 = 0x8829;
constexpr GLenum	GL_DRAW_BUFFER4_ARB = 0x8829;
constexpr GLenum	GL_DRAW_BUFFER4_ATI = 0x8829;
constexpr GLenum	GL_DRAW_BUFFER5 = 0x882A;
constexpr GLenum	GL_DRAW_BUFFER5_ARB = 0x882A;
constexpr GLenum	GL_DRAW_BUFFER5_ATI = 0x882A;
constexpr GLenum	GL_DRAW_BUFFER6 = 0x882B;
constexpr GLenum	GL_DRAW_BUFFER6_ARB = 0x882B;
constexpr GLenum	GL_DRAW_BUFFER6_ATI = 0x882B;
constexpr GLenum	GL_DRAW_BUFFER7 = 0x882C;
constexpr GLenum	GL_DRAW_BUFFER7_ARB = 0x882C;
constexpr GLenum	GL_DRAW_BUFFER7_ATI = 0x882C;
constexpr GLenum	GL_DRAW_BUFFER8 = 0x882D;
constexpr GLenum	GL_DRAW_BUFFER8_ARB = 0x882D;
constexpr GLenum	GL_DRAW_BUFFER8_ATI = 0x882D;
constexpr GLenum	GL_DRAW_BUFFER9 = 0x882E;
constexpr GLenum	GL_DRAW_BUFFER9_ARB = 0x882E;
constexpr GLenum	GL_DRAW_BUFFER9_ATI = 0x882E;
constexpr GLenum	GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
constexpr GLenum	GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
constexpr GLenum	GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
constexpr GLenum	GL_DRAW_FRAMEBUFFER = 0x8CA9;
constexpr GLenum	GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
constexpr GLenum	GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
constexpr GLenum	GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
constexpr GLenum	GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
constexpr GLenum	GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
constexpr GLenum	GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
constexpr GLenum	GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
constexpr GLenum	GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
constexpr GLenum	GL_DRAW_PIXELS_APPLE = 0x8A0A;
constexpr GLenum	GL_DRIVER_UUID_EXT = 0x9598;
constexpr GLenum	GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
constexpr GLenum	GL_DSDT8_MAG8_NV = 0x870A;
constexpr GLenum	GL_DSDT8_NV = 0x8709;
constexpr GLenum	GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
constexpr GLenum	GL_DSDT_MAG_NV = 0x86F6;
constexpr GLenum	GL_DSDT_MAG_VIB_NV = 0x86F7;
constexpr GLenum	GL_DSDT_NV = 0x86F5;
constexpr GLenum	GL_DST_ATOP_NV = 0x928F;
constexpr GLenum	GL_DST_IN_NV = 0x928B;
constexpr GLenum	GL_DST_NV = 0x9287;
constexpr GLenum	GL_DST_OUT_NV = 0x928D;
constexpr GLenum	GL_DST_OVER_NV = 0x9289;
constexpr GLenum	GL_DS_BIAS_NV = 0x8716;
constexpr GLenum	GL_DS_SCALE_NV = 0x8710;
constexpr GLenum	GL_DT_BIAS_NV = 0x8717;
constexpr GLenum	GL_DT_SCALE_NV = 0x8711;
constexpr GLenum	GL_DU8DV8_ATI = 0x877A;
constexpr GLenum	GL_DUDV_ATI = 0x8779;
constexpr GLenum	GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
constexpr GLenum	GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
constexpr GLenum	GL_DYNAMIC_ATI = 0x8761;
constexpr GLenum	GL_DYNAMIC_COPY = 0x88EA;
constexpr GLenum	GL_DYNAMIC_COPY_ARB = 0x88EA;
constexpr GLenum	GL_DYNAMIC_DRAW = 0x88E8;
constexpr GLenum	GL_DYNAMIC_DRAW_ARB = 0x88E8;
constexpr GLenum	GL_DYNAMIC_READ = 0x88E9;
constexpr GLenum	GL_DYNAMIC_READ_ARB = 0x88E9;
constexpr GLenum	GL_DYNAMIC_STORAGE_BIT = 0x0100;
constexpr GLenum	GL_EDGEFLAG_BIT_PGI = 0x00040000;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
constexpr GLenum	GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
constexpr GLenum	GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
constexpr GLenum	GL_EIGHTH_BIT_ATI = 0x00000020;
constexpr GLenum	GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
constexpr GLenum	GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
constexpr GLenum	GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
constexpr GLenum	GL_ELEMENT_ARRAY_ATI = 0x8768;
constexpr GLenum	GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
constexpr GLenum	GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
constexpr GLenum	GL_ELEMENT_ARRAY_BUFFER = 0x8893;
constexpr GLenum	GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
constexpr GLenum	GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
constexpr GLenum	GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
constexpr GLenum	GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
constexpr GLenum	GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
constexpr GLenum	GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
constexpr GLenum	GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
constexpr GLenum	GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
constexpr GLenum	GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
constexpr GLenum	GL_EMBOSS_CONSTANT_NV = 0x855E;
constexpr GLenum	GL_EMBOSS_LIGHT_NV = 0x855D;
constexpr GLenum	GL_EMBOSS_MAP_NV = 0x855F;
constexpr GLenum	GL_EVAL_2D_NV = 0x86C0;
constexpr GLenum	GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
constexpr GLenum	GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
constexpr GLenum	GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
constexpr GLenum	GL_EXCLUSION_KHR = 0x92A0;
constexpr GLenum	GL_EXCLUSION_NV = 0x92A0;
constexpr GLenum	GL_EXCLUSIVE_EXT = 0x8F11;
constexpr GLenum	GL_EXPAND_NEGATE_NV = 0x8539;
constexpr GLenum	GL_EXPAND_NORMAL_NV = 0x8538;
constexpr GLenum	GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
constexpr GLenum	GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
constexpr GLenum	GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
constexpr GLenum	GL_EYE_LINE_SGIS = 0x81F6;
constexpr GLenum	GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
constexpr GLenum	GL_EYE_POINT_SGIS = 0x81F4;
constexpr GLenum	GL_EYE_RADIAL_NV = 0x855B;
constexpr GLenum	GL_E_TIMES_F_NV = 0x8531;
constexpr GLenum	GL_FACTOR_MAX_AMD = 0x901D;
constexpr GLenum	GL_FACTOR_MIN_AMD = 0x901C;
constexpr GLenum	GL_FAILURE_NV = 0x9030;
constexpr GLenum	GL_FENCE_APPLE = 0x8A0B;
constexpr GLenum	GL_FENCE_CONDITION_NV = 0x84F4;
constexpr GLenum	GL_FENCE_STATUS_NV = 0x84F3;
constexpr GLenum	GL_FIELDS_NV = 0x8E27;
constexpr GLenum	GL_FIELD_LOWER_NV = 0x9023;
constexpr GLenum	GL_FIELD_UPPER_NV = 0x9022;
constexpr GLenum	GL_FILE_NAME_NV = 0x9074;
constexpr GLenum	GL_FILL_RECTANGLE_NV = 0x933C;
constexpr GLenum	GL_FILTER = 0x829A;
constexpr GLenum	GL_FIRST_TO_REST_NV = 0x90AF;
constexpr GLenum	GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
constexpr GLenum	GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
constexpr GLenum	GL_FIXED = 0x140C;
constexpr GLenum	GL_FIXED_ONLY = 0x891D;
constexpr GLenum	GL_FIXED_ONLY_ARB = 0x891D;
constexpr GLenum	GL_FLOAT16_MAT2_AMD = 0x91C5;
constexpr GLenum	GL_FLOAT16_MAT3_AMD = 0x91C6;
constexpr GLenum	GL_FLOAT16_MAT4_AMD = 0x91C7;
constexpr GLenum	GL_FLOAT16_NV = 0x8FF8;
constexpr GLenum	GL_FLOAT16_VEC2_NV = 0x8FF9;
constexpr GLenum	GL_FLOAT16_VEC3_NV = 0x8FFA;
constexpr GLenum	GL_FLOAT16_VEC4_NV = 0x8FFB;
constexpr GLenum	GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
constexpr GLenum	GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
constexpr GLenum	GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
constexpr GLenum	GL_FLOAT_MAT2 = 0x8B5A;
constexpr GLenum	GL_FLOAT_MAT2_ARB = 0x8B5A;
constexpr GLenum	GL_FLOAT_MAT3 = 0x8B5B;
constexpr GLenum	GL_FLOAT_MAT3_ARB = 0x8B5B;
constexpr GLenum	GL_FLOAT_MAT4 = 0x8B5C;
constexpr GLenum	GL_FLOAT_MAT4_ARB = 0x8B5C;
constexpr GLenum	GL_FLOAT_R16_NV = 0x8884;
constexpr GLenum	GL_FLOAT_R32_NV = 0x8885;
constexpr GLenum	GL_FLOAT_RG16_NV = 0x8886;
constexpr GLenum	GL_FLOAT_RG32_NV = 0x8887;
constexpr GLenum	GL_FLOAT_RGB16_NV = 0x8888;
constexpr GLenum	GL_FLOAT_RGB32_NV = 0x8889;
constexpr GLenum	GL_FLOAT_RGBA16_NV = 0x888A;
constexpr GLenum	GL_FLOAT_RGBA32_NV = 0x888B;
constexpr GLenum	GL_FLOAT_RGBA_MODE_NV = 0x888E;
constexpr GLenum	GL_FLOAT_RGBA_NV = 0x8883;
constexpr GLenum	GL_FLOAT_RGB_NV = 0x8882;
constexpr GLenum	GL_FLOAT_RG_NV = 0x8881;
constexpr GLenum	GL_FLOAT_R_NV = 0x8880;
constexpr GLenum	GL_FLOAT_VEC2 = 0x8B50;
constexpr GLenum	GL_FLOAT_VEC2_ARB = 0x8B50;
constexpr GLenum	GL_FLOAT_VEC3 = 0x8B51;
constexpr GLenum	GL_FLOAT_VEC3_ARB = 0x8B51;
constexpr GLenum	GL_FLOAT_VEC4 = 0x8B52;
constexpr GLenum	GL_FLOAT_VEC4_ARB = 0x8B52;
constexpr GLenum	GL_FOG_COORD = 0x8451;
constexpr GLenum	GL_FOG_COORDINATE = 0x8451;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY = 0x8457;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
constexpr GLenum	GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
constexpr GLenum	GL_FOG_COORDINATE_EXT = 0x8451;
constexpr GLenum	GL_FOG_COORDINATE_SOURCE = 0x8450;
constexpr GLenum	GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
constexpr GLenum	GL_FOG_COORD_ARRAY = 0x8457;
constexpr GLenum	GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
constexpr GLenum	GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
constexpr GLenum	GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
constexpr GLenum	GL_FOG_COORD_ARRAY_POINTER = 0x8456;
constexpr GLenum	GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
constexpr GLenum	GL_FOG_COORD_ARRAY_TYPE = 0x8454;
constexpr GLenum	GL_FOG_COORD_SRC = 0x8450;
constexpr GLenum	GL_FOG_DISTANCE_MODE_NV = 0x855A;
constexpr GLenum	GL_FOG_OFFSET_SGIX = 0x8198;
constexpr GLenum	GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
constexpr GLenum	GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
constexpr GLenum	GL_FONT_ASCENDER_BIT_NV = 0x00200000;
constexpr GLenum	GL_FONT_DESCENDER_BIT_NV = 0x00400000;
constexpr GLenum	GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
constexpr GLenum	GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
constexpr GLenum	GL_FONT_HEIGHT_BIT_NV = 0x00800000;
constexpr GLenum	GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
constexpr GLenum	GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
constexpr GLenum	GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
constexpr GLenum	GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
constexpr GLenum	GL_FONT_UNAVAILABLE_NV = 0x936A;
constexpr GLenum	GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
constexpr GLenum	GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
constexpr GLenum	GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
constexpr GLenum	GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
constexpr GLenum	GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
constexpr GLenum	GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
constexpr GLenum	GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
constexpr GLenum	GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
constexpr GLenum	GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
constexpr GLenum	GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
constexpr GLenum	GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
constexpr GLenum	GL_FRACTIONAL_EVEN = 0x8E7C;
constexpr GLenum	GL_FRACTIONAL_ODD = 0x8E7B;
constexpr GLenum	GL_FRAGMENT_COLOR_EXT = 0x834C;
constexpr GLenum	GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
constexpr GLenum	GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
constexpr GLenum	GL_FRAGMENT_DEPTH = 0x8452;
constexpr GLenum	GL_FRAGMENT_DEPTH_EXT = 0x8452;
constexpr GLenum	GL_FRAGMENT_INPUT_NV = 0x936D;
constexpr GLenum	GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
constexpr GLenum	GL_FRAGMENT_MATERIAL_EXT = 0x8349;
constexpr GLenum	GL_FRAGMENT_NORMAL_EXT = 0x834A;
constexpr GLenum	GL_FRAGMENT_PROGRAM_ARB = 0x8804;
constexpr GLenum	GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
constexpr GLenum	GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
constexpr GLenum	GL_FRAGMENT_PROGRAM_NV = 0x8870;
constexpr GLenum	GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
constexpr GLenum	GL_FRAGMENT_SHADER = 0x8B30;
constexpr GLenum	GL_FRAGMENT_SHADER_ARB = 0x8B30;
constexpr GLenum	GL_FRAGMENT_SHADER_ATI = 0x8920;
constexpr GLenum	GL_FRAGMENT_SHADER_BIT = 0x00000002;
constexpr GLenum	GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
constexpr GLenum	GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
constexpr GLenum	GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52;
constexpr GLenum	GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
constexpr GLenum	GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
constexpr GLenum	GL_FRAGMENT_SUBROUTINE = 0x92EC;
constexpr GLenum	GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
constexpr GLenum	GL_FRAGMENT_TEXTURE = 0x829F;
constexpr GLenum	GL_FRAMEBUFFER = 0x8D40;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
constexpr GLenum	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
constexpr GLenum	GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
constexpr GLenum	GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
constexpr GLenum	GL_FRAMEBUFFER_BINDING = 0x8CA6;
constexpr GLenum	GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
constexpr GLenum	GL_FRAMEBUFFER_BLEND = 0x828B;
constexpr GLenum	GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
constexpr GLenum	GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
constexpr GLenum	GL_FRAMEBUFFER_DEFAULT = 0x8218;
constexpr GLenum	GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
constexpr GLenum	GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
constexpr GLenum	GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
constexpr GLenum	GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
constexpr GLenum	GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
constexpr GLenum	GL_FRAMEBUFFER_EXT = 0x8D40;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
constexpr GLenum	GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633;
constexpr GLenum	GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
constexpr GLenum	GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
constexpr GLenum	GL_FRAMEBUFFER_RENDERABLE = 0x8289;
constexpr GLenum	GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
constexpr GLenum	GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
constexpr GLenum	GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
constexpr GLenum	GL_FRAMEBUFFER_SRGB = 0x8DB9;
constexpr GLenum	GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
constexpr GLenum	GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
constexpr GLenum	GL_FRAMEBUFFER_UNDEFINED = 0x8219;
constexpr GLenum	GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
constexpr GLenum	GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
constexpr GLenum	GL_FRAME_NV = 0x8E26;
constexpr GLenum	GL_FRONT_FACE_COMMAND_NV = 0x0012;
constexpr GLenum	GL_FULL_RANGE_EXT = 0x87E1;
constexpr GLenum	GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
constexpr GLenum	GL_FULL_SUPPORT = 0x82B7;
constexpr GLenum	GL_FUNC_ADD = 0x8006;
constexpr GLenum	GL_FUNC_ADD_EXT = 0x8006;
constexpr GLenum	GL_FUNC_REVERSE_SUBTRACT = 0x800B;
constexpr GLenum	GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
constexpr GLenum	GL_FUNC_SUBTRACT = 0x800A;
constexpr GLenum	GL_FUNC_SUBTRACT_EXT = 0x800A;
constexpr GLenum	GL_GENERATE_MIPMAP = 0x8191;
constexpr GLenum	GL_GENERATE_MIPMAP_HINT = 0x8192;
constexpr GLenum	GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
constexpr GLenum	GL_GENERATE_MIPMAP_SGIS = 0x8191;
constexpr GLenum	GL_GENERIC_ATTRIB_NV = 0x8C7D;
constexpr GLenum	GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
constexpr GLenum	GL_GEOMETRY_INPUT_TYPE = 0x8917;
constexpr GLenum	GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
constexpr GLenum	GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
constexpr GLenum	GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
constexpr GLenum	GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
constexpr GLenum	GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
constexpr GLenum	GL_GEOMETRY_PROGRAM_NV = 0x8C26;
constexpr GLenum	GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
constexpr GLenum	GL_GEOMETRY_SHADER = 0x8DD9;
constexpr GLenum	GL_GEOMETRY_SHADER_ARB = 0x8DD9;
constexpr GLenum	GL_GEOMETRY_SHADER_BIT = 0x00000004;
constexpr GLenum	GL_GEOMETRY_SHADER_EXT = 0x8DD9;
constexpr GLenum	GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
constexpr GLenum	GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
constexpr GLenum	GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
constexpr GLenum	GL_GEOMETRY_SUBROUTINE = 0x92EB;
constexpr GLenum	GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
constexpr GLenum	GL_GEOMETRY_TEXTURE = 0x829E;
constexpr GLenum	GL_GEOMETRY_VERTICES_OUT = 0x8916;
constexpr GLenum	GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
constexpr GLenum	GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
constexpr GLenum	GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
constexpr GLenum	GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
constexpr GLenum	GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
constexpr GLenum	GL_GLOBAL_ALPHA_SUN = 0x81D9;
constexpr GLenum	GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
constexpr GLenum	GL_GLYPH_HEIGHT_BIT_NV = 0x02;
constexpr GLenum	GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
constexpr GLenum	GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
constexpr GLenum	GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
constexpr GLenum	GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
constexpr GLenum	GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
constexpr GLenum	GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
constexpr GLenum	GL_GLYPH_WIDTH_BIT_NV = 0x01;
constexpr GLenum	GL_GPU_ADDRESS_NV = 0x8F34;
constexpr GLenum	GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
constexpr GLenum	GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
constexpr GLenum	GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
constexpr GLenum	GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
constexpr GLenum	GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
constexpr GLenum	GL_GREEN_BIT_ATI = 0x00000002;
constexpr GLenum	GL_GREEN_INTEGER = 0x8D95;
constexpr GLenum	GL_GREEN_INTEGER_EXT = 0x8D95;
constexpr GLenum	GL_GREEN_MAX_CLAMP_INGR = 0x8565;
constexpr GLenum	GL_GREEN_MIN_CLAMP_INGR = 0x8561;
constexpr GLenum	GL_GREEN_NV = 0x1904;
constexpr GLenum	GL_GUILTY_CONTEXT_RESET = 0x8253;
constexpr GLenum	GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
constexpr GLenum	GL_HALF_APPLE = 0x140B;
constexpr GLenum	GL_HALF_BIAS_NEGATE_NV = 0x853B;
constexpr GLenum	GL_HALF_BIAS_NORMAL_NV = 0x853A;
constexpr GLenum	GL_HALF_BIT_ATI = 0x00000008;
constexpr GLenum	GL_HALF_FLOAT = 0x140B;
constexpr GLenum	GL_HALF_FLOAT_ARB = 0x140B;
constexpr GLenum	GL_HALF_FLOAT_NV = 0x140B;
constexpr GLenum	GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 0x958B;
constexpr GLenum	GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x958C;
constexpr GLenum	GL_HANDLE_TYPE_D3D12_FENCE_EXT = 0x9594;
constexpr GLenum	GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x958A;
constexpr GLenum	GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x9589;
constexpr GLenum	GL_HANDLE_TYPE_OPAQUE_FD_EXT = 0x9586;
constexpr GLenum	GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x9587;
constexpr GLenum	GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x9588;
constexpr GLenum	GL_HARDLIGHT_KHR = 0x929B;
constexpr GLenum	GL_HARDLIGHT_NV = 0x929B;
constexpr GLenum	GL_HARDMIX_NV = 0x92A9;
constexpr GLenum	GL_HIGH_FLOAT = 0x8DF2;
constexpr GLenum	GL_HIGH_INT = 0x8DF5;
constexpr GLenum	GL_HILO16_NV = 0x86F8;
constexpr GLenum	GL_HILO8_NV = 0x885E;
constexpr GLenum	GL_HILO_NV = 0x86F4;
constexpr GLenum	GL_HISTOGRAM = 0x8024;
constexpr GLenum	GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
constexpr GLenum	GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
constexpr GLenum	GL_HISTOGRAM_BLUE_SIZE = 0x802A;
constexpr GLenum	GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
constexpr GLenum	GL_HISTOGRAM_EXT = 0x8024;
constexpr GLenum	GL_HISTOGRAM_FORMAT = 0x8027;
constexpr GLenum	GL_HISTOGRAM_FORMAT_EXT = 0x8027;
constexpr GLenum	GL_HISTOGRAM_GREEN_SIZE = 0x8029;
constexpr GLenum	GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
constexpr GLenum	GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
constexpr GLenum	GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
constexpr GLenum	GL_HISTOGRAM_RED_SIZE = 0x8028;
constexpr GLenum	GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
constexpr GLenum	GL_HISTOGRAM_SINK = 0x802D;
constexpr GLenum	GL_HISTOGRAM_SINK_EXT = 0x802D;
constexpr GLenum	GL_HISTOGRAM_WIDTH = 0x8026;
constexpr GLenum	GL_HISTOGRAM_WIDTH_EXT = 0x8026;
constexpr GLenum	GL_HI_BIAS_NV = 0x8714;
constexpr GLenum	GL_HI_SCALE_NV = 0x870E;
constexpr GLenum	GL_HORIZONTAL_LINE_TO_NV = 0x06;
constexpr GLenum	GL_HSL_COLOR_KHR = 0x92AF;
constexpr GLenum	GL_HSL_COLOR_NV = 0x92AF;
constexpr GLenum	GL_HSL_HUE_KHR = 0x92AD;
constexpr GLenum	GL_HSL_HUE_NV = 0x92AD;
constexpr GLenum	GL_HSL_LUMINOSITY_KHR = 0x92B0;
constexpr GLenum	GL_HSL_LUMINOSITY_NV = 0x92B0;
constexpr GLenum	GL_HSL_SATURATION_KHR = 0x92AE;
constexpr GLenum	GL_HSL_SATURATION_NV = 0x92AE;
constexpr GLenum	GL_IDENTITY_NV = 0x862A;
constexpr GLenum	GL_IMAGE_1D = 0x904C;
constexpr GLenum	GL_IMAGE_1D_ARRAY = 0x9052;
constexpr GLenum	GL_IMAGE_1D_ARRAY_EXT = 0x9052;
constexpr GLenum	GL_IMAGE_1D_EXT = 0x904C;
constexpr GLenum	GL_IMAGE_2D = 0x904D;
constexpr GLenum	GL_IMAGE_2D_ARRAY = 0x9053;
constexpr GLenum	GL_IMAGE_2D_ARRAY_EXT = 0x9053;
constexpr GLenum	GL_IMAGE_2D_EXT = 0x904D;
constexpr GLenum	GL_IMAGE_2D_MULTISAMPLE = 0x9055;
constexpr GLenum	GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
constexpr GLenum	GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
constexpr GLenum	GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
constexpr GLenum	GL_IMAGE_2D_RECT = 0x904F;
constexpr GLenum	GL_IMAGE_2D_RECT_EXT = 0x904F;
constexpr GLenum	GL_IMAGE_3D = 0x904E;
constexpr GLenum	GL_IMAGE_3D_EXT = 0x904E;
constexpr GLenum	GL_IMAGE_BINDING_ACCESS = 0x8F3E;
constexpr GLenum	GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
constexpr GLenum	GL_IMAGE_BINDING_FORMAT = 0x906E;
constexpr GLenum	GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
constexpr GLenum	GL_IMAGE_BINDING_LAYER = 0x8F3D;
constexpr GLenum	GL_IMAGE_BINDING_LAYERED = 0x8F3C;
constexpr GLenum	GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
constexpr GLenum	GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
constexpr GLenum	GL_IMAGE_BINDING_LEVEL = 0x8F3B;
constexpr GLenum	GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
constexpr GLenum	GL_IMAGE_BINDING_NAME = 0x8F3A;
constexpr GLenum	GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
constexpr GLenum	GL_IMAGE_BUFFER = 0x9051;
constexpr GLenum	GL_IMAGE_BUFFER_EXT = 0x9051;
constexpr GLenum	GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
constexpr GLenum	GL_IMAGE_CLASS_11_11_10 = 0x82C2;
constexpr GLenum	GL_IMAGE_CLASS_1_X_16 = 0x82BE;
constexpr GLenum	GL_IMAGE_CLASS_1_X_32 = 0x82BB;
constexpr GLenum	GL_IMAGE_CLASS_1_X_8 = 0x82C1;
constexpr GLenum	GL_IMAGE_CLASS_2_X_16 = 0x82BD;
constexpr GLenum	GL_IMAGE_CLASS_2_X_32 = 0x82BA;
constexpr GLenum	GL_IMAGE_CLASS_2_X_8 = 0x82C0;
constexpr GLenum	GL_IMAGE_CLASS_4_X_16 = 0x82BC;
constexpr GLenum	GL_IMAGE_CLASS_4_X_32 = 0x82B9;
constexpr GLenum	GL_IMAGE_CLASS_4_X_8 = 0x82BF;
constexpr GLenum	GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
constexpr GLenum	GL_IMAGE_CUBE = 0x9050;
constexpr GLenum	GL_IMAGE_CUBE_EXT = 0x9050;
constexpr GLenum	GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
constexpr GLenum	GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
constexpr GLenum	GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
constexpr GLenum	GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
constexpr GLenum	GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
constexpr GLenum	GL_IMAGE_PIXEL_FORMAT = 0x82A9;
constexpr GLenum	GL_IMAGE_PIXEL_TYPE = 0x82AA;
constexpr GLenum	GL_IMAGE_TEXEL_SIZE = 0x82A7;
constexpr GLenum	GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
constexpr GLenum	GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
constexpr GLenum	GL_INCLUSIVE_EXT = 0x8F10;
constexpr GLenum	GL_INCR_WRAP = 0x8507;
constexpr GLenum	GL_INCR_WRAP_EXT = 0x8507;
constexpr GLenum	GL_INDEX = 0x8222;
constexpr GLenum	GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
constexpr GLenum	GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
constexpr GLenum	GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
constexpr GLenum	GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
constexpr GLenum	GL_INDEX_ARRAY_EXT = 0x8077;
constexpr GLenum	GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
constexpr GLenum	GL_INDEX_ARRAY_LIST_IBM = 103073;
constexpr GLenum	GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
constexpr GLenum	GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
constexpr GLenum	GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
constexpr GLenum	GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
constexpr GLenum	GL_INDEX_BIT_PGI = 0x00080000;
constexpr GLenum	GL_INFO_LOG_LENGTH = 0x8B84;
constexpr GLenum	GL_INNOCENT_CONTEXT_RESET = 0x8254;
constexpr GLenum	GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
constexpr GLenum	GL_INT16_NV = 0x8FE4;
constexpr GLenum	GL_INT16_VEC2_NV = 0x8FE5;
constexpr GLenum	GL_INT16_VEC3_NV = 0x8FE6;
constexpr GLenum	GL_INT16_VEC4_NV = 0x8FE7;
constexpr GLenum	GL_INT64_ARB = 0x140E;
constexpr GLenum	GL_INT64_NV = 0x140E;
constexpr GLenum	GL_INT64_VEC2_ARB = 0x8FE9;
constexpr GLenum	GL_INT64_VEC2_NV = 0x8FE9;
constexpr GLenum	GL_INT64_VEC3_ARB = 0x8FEA;
constexpr GLenum	GL_INT64_VEC3_NV = 0x8FEA;
constexpr GLenum	GL_INT64_VEC4_ARB = 0x8FEB;
constexpr GLenum	GL_INT64_VEC4_NV = 0x8FEB;
constexpr GLenum	GL_INT8_NV = 0x8FE0;
constexpr GLenum	GL_INT8_VEC2_NV = 0x8FE1;
constexpr GLenum	GL_INT8_VEC3_NV = 0x8FE2;
constexpr GLenum	GL_INT8_VEC4_NV = 0x8FE3;
constexpr GLenum	GL_INTENSITY12_EXT = 0x804C;
constexpr GLenum	GL_INTENSITY16F_ARB = 0x881D;
constexpr GLenum	GL_INTENSITY16I_EXT = 0x8D8B;
constexpr GLenum	GL_INTENSITY16UI_EXT = 0x8D79;
constexpr GLenum	GL_INTENSITY16_EXT = 0x804D;
constexpr GLenum	GL_INTENSITY16_SNORM = 0x901B;
constexpr GLenum	GL_INTENSITY32F_ARB = 0x8817;
constexpr GLenum	GL_INTENSITY32I_EXT = 0x8D85;
constexpr GLenum	GL_INTENSITY32UI_EXT = 0x8D73;
constexpr GLenum	GL_INTENSITY4_EXT = 0x804A;
constexpr GLenum	GL_INTENSITY8I_EXT = 0x8D91;
constexpr GLenum	GL_INTENSITY8UI_EXT = 0x8D7F;
constexpr GLenum	GL_INTENSITY8_EXT = 0x804B;
constexpr GLenum	GL_INTENSITY8_SNORM = 0x9017;
constexpr GLenum	GL_INTENSITY_EXT = 0x8049;
constexpr GLenum	GL_INTENSITY_FLOAT16_APPLE = 0x881D;
constexpr GLenum	GL_INTENSITY_FLOAT16_ATI = 0x881D;
constexpr GLenum	GL_INTENSITY_FLOAT32_APPLE = 0x8817;
constexpr GLenum	GL_INTENSITY_FLOAT32_ATI = 0x8817;
constexpr GLenum	GL_INTENSITY_SNORM = 0x9013;
constexpr GLenum	GL_INTERLACE_OML = 0x8980;
constexpr GLenum	GL_INTERLACE_READ_INGR = 0x8568;
constexpr GLenum	GL_INTERLACE_READ_OML = 0x8981;
constexpr GLenum	GL_INTERLACE_SGIX = 0x8094;
constexpr GLenum	GL_INTERLEAVED_ATTRIBS = 0x8C8C;
constexpr GLenum	GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
constexpr GLenum	GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
constexpr GLenum	GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
constexpr GLenum	GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
constexpr GLenum	GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
constexpr GLenum	GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
constexpr GLenum	GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
constexpr GLenum	GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
constexpr GLenum	GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
constexpr GLenum	GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
constexpr GLenum	GL_INTERNALFORMAT_PREFERRED = 0x8270;
constexpr GLenum	GL_INTERNALFORMAT_RED_SIZE = 0x8271;
constexpr GLenum	GL_INTERNALFORMAT_RED_TYPE = 0x8278;
constexpr GLenum	GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
constexpr GLenum	GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
constexpr GLenum	GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
constexpr GLenum	GL_INTERNALFORMAT_SUPPORTED = 0x826F;
constexpr GLenum	GL_INTERPOLATE = 0x8575;
constexpr GLenum	GL_INTERPOLATE_ARB = 0x8575;
constexpr GLenum	GL_INTERPOLATE_EXT = 0x8575;
constexpr GLenum	GL_INT_2_10_10_10_REV = 0x8D9F;
constexpr GLenum	GL_INT_IMAGE_1D = 0x9057;
constexpr GLenum	GL_INT_IMAGE_1D_ARRAY = 0x905D;
constexpr GLenum	GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
constexpr GLenum	GL_INT_IMAGE_1D_EXT = 0x9057;
constexpr GLenum	GL_INT_IMAGE_2D = 0x9058;
constexpr GLenum	GL_INT_IMAGE_2D_ARRAY = 0x905E;
constexpr GLenum	GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
constexpr GLenum	GL_INT_IMAGE_2D_EXT = 0x9058;
constexpr GLenum	GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
constexpr GLenum	GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
constexpr GLenum	GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
constexpr GLenum	GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
constexpr GLenum	GL_INT_IMAGE_2D_RECT = 0x905A;
constexpr GLenum	GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
constexpr GLenum	GL_INT_IMAGE_3D = 0x9059;
constexpr GLenum	GL_INT_IMAGE_3D_EXT = 0x9059;
constexpr GLenum	GL_INT_IMAGE_BUFFER = 0x905C;
constexpr GLenum	GL_INT_IMAGE_BUFFER_EXT = 0x905C;
constexpr GLenum	GL_INT_IMAGE_CUBE = 0x905B;
constexpr GLenum	GL_INT_IMAGE_CUBE_EXT = 0x905B;
constexpr GLenum	GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
constexpr GLenum	GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
constexpr GLenum	GL_INT_SAMPLER_1D = 0x8DC9;
constexpr GLenum	GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
constexpr GLenum	GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
constexpr GLenum	GL_INT_SAMPLER_1D_EXT = 0x8DC9;
constexpr GLenum	GL_INT_SAMPLER_2D = 0x8DCA;
constexpr GLenum	GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
constexpr GLenum	GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
constexpr GLenum	GL_INT_SAMPLER_2D_EXT = 0x8DCA;
constexpr GLenum	GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
constexpr GLenum	GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
constexpr GLenum	GL_INT_SAMPLER_2D_RECT = 0x8DCD;
constexpr GLenum	GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
constexpr GLenum	GL_INT_SAMPLER_3D = 0x8DCB;
constexpr GLenum	GL_INT_SAMPLER_3D_EXT = 0x8DCB;
constexpr GLenum	GL_INT_SAMPLER_BUFFER = 0x8DD0;
constexpr GLenum	GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
constexpr GLenum	GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
constexpr GLenum	GL_INT_SAMPLER_CUBE = 0x8DCC;
constexpr GLenum	GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
constexpr GLenum	GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
constexpr GLenum	GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
constexpr GLenum	GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
constexpr GLenum	GL_INT_VEC2 = 0x8B53;
constexpr GLenum	GL_INT_VEC2_ARB = 0x8B53;
constexpr GLenum	GL_INT_VEC3 = 0x8B54;
constexpr GLenum	GL_INT_VEC3_ARB = 0x8B54;
constexpr GLenum	GL_INT_VEC4 = 0x8B55;
constexpr GLenum	GL_INT_VEC4_ARB = 0x8B55;
constexpr GLenum	GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
constexpr GLenum	GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
constexpr GLenum	GL_INVALID_INDEX = 0xFFFFFFFFu;
constexpr GLenum	GL_INVARIANT_DATATYPE_EXT = 0x87EB;
constexpr GLenum	GL_INVARIANT_EXT = 0x87C2;
constexpr GLenum	GL_INVARIANT_VALUE_EXT = 0x87EA;
constexpr GLenum	GL_INVERSE_NV = 0x862B;
constexpr GLenum	GL_INVERSE_TRANSPOSE_NV = 0x862D;
constexpr GLenum	GL_INVERTED_SCREEN_W_REND = 0x8491;
constexpr GLenum	GL_INVERT_OVG_NV = 0x92B4;
constexpr GLenum	GL_INVERT_RGB_NV = 0x92A3;
constexpr GLenum	GL_ISOLINES = 0x8E7A;
constexpr GLenum	GL_IS_PER_PATCH = 0x92E7;
constexpr GLenum	GL_IS_ROW_MAJOR = 0x9300;
constexpr GLenum	GL_ITALIC_BIT_NV = 0x02;
constexpr GLenum	GL_LARGE_CCW_ARC_TO_NV = 0x16;
constexpr GLenum	GL_LARGE_CW_ARC_TO_NV = 0x18;
constexpr GLenum	GL_LAST_VERTEX_CONVENTION = 0x8E4E;
constexpr GLenum	GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
constexpr GLenum	GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
constexpr GLenum	GL_LAYER_PROVOKING_VERTEX = 0x825E;
constexpr GLenum	GL_LAYOUT_COLOR_ATTACHMENT_EXT = 0x958E;
constexpr GLenum	GL_LAYOUT_DEFAULT_INTEL = 0;
constexpr GLenum	GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x958F;
constexpr GLenum	GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x9590;
constexpr GLenum	GL_LAYOUT_GENERAL_EXT = 0x958D;
constexpr GLenum	GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
constexpr GLenum	GL_LAYOUT_LINEAR_INTEL = 1;
constexpr GLenum	GL_LAYOUT_SHADER_READ_ONLY_EXT = 0x9591;
constexpr GLenum	GL_LAYOUT_TRANSFER_DST_EXT = 0x9593;
constexpr GLenum	GL_LAYOUT_TRANSFER_SRC_EXT = 0x9592;
constexpr GLenum	GL_LERP_ATI = 0x8969;
constexpr GLenum	GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800;
constexpr GLenum	GL_LIGHTEN_KHR = 0x9298;
constexpr GLenum	GL_LIGHTEN_NV = 0x9298;
constexpr GLenum	GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
constexpr GLenum	GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
constexpr GLenum	GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
constexpr GLenum	GL_LINEARBURN_NV = 0x92A5;
constexpr GLenum	GL_LINEARDODGE_NV = 0x92A4;
constexpr GLenum	GL_LINEARLIGHT_NV = 0x92A7;
constexpr GLenum	GL_LINEAR_TILING_EXT = 0x9585;
constexpr GLenum	GL_LINES_ADJACENCY = 0x000A;
constexpr GLenum	GL_LINES_ADJACENCY_ARB = 0x000A;
constexpr GLenum	GL_LINES_ADJACENCY_EXT = 0x000A;
constexpr GLenum	GL_LINE_STRIP_ADJACENCY = 0x000B;
constexpr GLenum	GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
constexpr GLenum	GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
constexpr GLenum	GL_LINE_TO_NV = 0x04;
constexpr GLenum	GL_LINE_WIDTH_COMMAND_NV = 0x000D;
constexpr GLenum	GL_LINK_STATUS = 0x8B82;
constexpr GLenum	GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
constexpr GLenum	GL_LOCAL_CONSTANT_EXT = 0x87C3;
constexpr GLenum	GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
constexpr GLenum	GL_LOCAL_EXT = 0x87C4;
constexpr GLenum	GL_LOCATION = 0x930E;
constexpr GLenum	GL_LOCATION_COMPONENT = 0x934A;
constexpr GLenum	GL_LOCATION_INDEX = 0x930F;
constexpr GLenum	GL_LOSE_CONTEXT_ON_RESET = 0x8252;
constexpr GLenum	GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
constexpr GLenum	GL_LOWER_LEFT = 0x8CA1;
constexpr GLenum	GL_LOW_FLOAT = 0x8DF0;
constexpr GLenum	GL_LOW_INT = 0x8DF3;
constexpr GLenum	GL_LO_BIAS_NV = 0x8715;
constexpr GLenum	GL_LO_SCALE_NV = 0x870F;
constexpr GLenum	GL_LUID_SIZE_EXT = 8;
constexpr GLenum	GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
constexpr GLenum	GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
constexpr GLenum	GL_LUMINANCE12_EXT = 0x8041;
constexpr GLenum	GL_LUMINANCE16F_ARB = 0x881E;
constexpr GLenum	GL_LUMINANCE16I_EXT = 0x8D8C;
constexpr GLenum	GL_LUMINANCE16UI_EXT = 0x8D7A;
constexpr GLenum	GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
constexpr GLenum	GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
constexpr GLenum	GL_LUMINANCE16_EXT = 0x8042;
constexpr GLenum	GL_LUMINANCE16_SNORM = 0x9019;
constexpr GLenum	GL_LUMINANCE32F_ARB = 0x8818;
constexpr GLenum	GL_LUMINANCE32I_EXT = 0x8D86;
constexpr GLenum	GL_LUMINANCE32UI_EXT = 0x8D74;
constexpr GLenum	GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
constexpr GLenum	GL_LUMINANCE4_EXT = 0x803F;
constexpr GLenum	GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
constexpr GLenum	GL_LUMINANCE8I_EXT = 0x8D92;
constexpr GLenum	GL_LUMINANCE8UI_EXT = 0x8D80;
constexpr GLenum	GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
constexpr GLenum	GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
constexpr GLenum	GL_LUMINANCE8_EXT = 0x8040;
constexpr GLenum	GL_LUMINANCE8_SNORM = 0x9015;
constexpr GLenum	GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
constexpr GLenum	GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
constexpr GLenum	GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
constexpr GLenum	GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
constexpr GLenum	GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
constexpr GLenum	GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
constexpr GLenum	GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
constexpr GLenum	GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
constexpr GLenum	GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
constexpr GLenum	GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
constexpr GLenum	GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
constexpr GLenum	GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
constexpr GLenum	GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
constexpr GLenum	GL_LUMINANCE_ALPHA_SNORM = 0x9012;
constexpr GLenum	GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
constexpr GLenum	GL_LUMINANCE_FLOAT16_ATI = 0x881E;
constexpr GLenum	GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
constexpr GLenum	GL_LUMINANCE_FLOAT32_ATI = 0x8818;
constexpr GLenum	GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
constexpr GLenum	GL_LUMINANCE_SNORM = 0x9011;
constexpr GLenum	GL_MAD_ATI = 0x8968;
constexpr GLenum	GL_MAGNITUDE_BIAS_NV = 0x8718;
constexpr GLenum	GL_MAGNITUDE_SCALE_NV = 0x8712;
constexpr GLenum	GL_MAJOR_VERSION = 0x821B;
constexpr GLenum	GL_MANUAL_GENERATE_MIPMAP = 0x8294;
constexpr GLenum	GL_MAP1_BINORMAL_EXT = 0x8446;
constexpr GLenum	GL_MAP1_TANGENT_EXT = 0x8444;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
constexpr GLenum	GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
constexpr GLenum	GL_MAP2_BINORMAL_EXT = 0x8447;
constexpr GLenum	GL_MAP2_TANGENT_EXT = 0x8445;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
constexpr GLenum	GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
constexpr GLenum	GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
constexpr GLenum	GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
constexpr GLenum	GL_MAP_COHERENT_BIT = 0x0080;
constexpr GLenum	GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
constexpr GLenum	GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
constexpr GLenum	GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
constexpr GLenum	GL_MAP_PERSISTENT_BIT = 0x0040;
constexpr GLenum	GL_MAP_READ_BIT = 0x0001;
constexpr GLenum	GL_MAP_TESSELLATION_NV = 0x86C2;
constexpr GLenum	GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
constexpr GLenum	GL_MAP_WRITE_BIT = 0x0002;
constexpr GLenum	GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
constexpr GLenum	GL_MATRIX0_ARB = 0x88C0;
constexpr GLenum	GL_MATRIX0_NV = 0x8630;
constexpr GLenum	GL_MATRIX10_ARB = 0x88CA;
constexpr GLenum	GL_MATRIX11_ARB = 0x88CB;
constexpr GLenum	GL_MATRIX12_ARB = 0x88CC;
constexpr GLenum	GL_MATRIX13_ARB = 0x88CD;
constexpr GLenum	GL_MATRIX14_ARB = 0x88CE;
constexpr GLenum	GL_MATRIX15_ARB = 0x88CF;
constexpr GLenum	GL_MATRIX16_ARB = 0x88D0;
constexpr GLenum	GL_MATRIX17_ARB = 0x88D1;
constexpr GLenum	GL_MATRIX18_ARB = 0x88D2;
constexpr GLenum	GL_MATRIX19_ARB = 0x88D3;
constexpr GLenum	GL_MATRIX1_ARB = 0x88C1;
constexpr GLenum	GL_MATRIX1_NV = 0x8631;
constexpr GLenum	GL_MATRIX20_ARB = 0x88D4;
constexpr GLenum	GL_MATRIX21_ARB = 0x88D5;
constexpr GLenum	GL_MATRIX22_ARB = 0x88D6;
constexpr GLenum	GL_MATRIX23_ARB = 0x88D7;
constexpr GLenum	GL_MATRIX24_ARB = 0x88D8;
constexpr GLenum	GL_MATRIX25_ARB = 0x88D9;
constexpr GLenum	GL_MATRIX26_ARB = 0x88DA;
constexpr GLenum	GL_MATRIX27_ARB = 0x88DB;
constexpr GLenum	GL_MATRIX28_ARB = 0x88DC;
constexpr GLenum	GL_MATRIX29_ARB = 0x88DD;
constexpr GLenum	GL_MATRIX2_ARB = 0x88C2;
constexpr GLenum	GL_MATRIX2_NV = 0x8632;
constexpr GLenum	GL_MATRIX30_ARB = 0x88DE;
constexpr GLenum	GL_MATRIX31_ARB = 0x88DF;
constexpr GLenum	GL_MATRIX3_ARB = 0x88C3;
constexpr GLenum	GL_MATRIX3_NV = 0x8633;
constexpr GLenum	GL_MATRIX4_ARB = 0x88C4;
constexpr GLenum	GL_MATRIX4_NV = 0x8634;
constexpr GLenum	GL_MATRIX5_ARB = 0x88C5;
constexpr GLenum	GL_MATRIX5_NV = 0x8635;
constexpr GLenum	GL_MATRIX6_ARB = 0x88C6;
constexpr GLenum	GL_MATRIX6_NV = 0x8636;
constexpr GLenum	GL_MATRIX7_ARB = 0x88C7;
constexpr GLenum	GL_MATRIX7_NV = 0x8637;
constexpr GLenum	GL_MATRIX8_ARB = 0x88C8;
constexpr GLenum	GL_MATRIX9_ARB = 0x88C9;
constexpr GLenum	GL_MATRIX_EXT = 0x87C0;
constexpr GLenum	GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
constexpr GLenum	GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
constexpr GLenum	GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
constexpr GLenum	GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
constexpr GLenum	GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
constexpr GLenum	GL_MATRIX_PALETTE_ARB = 0x8840;
constexpr GLenum	GL_MATRIX_STRIDE = 0x92FF;
constexpr GLenum	GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
constexpr GLenum	GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
constexpr GLenum	GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
constexpr GLenum	GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
constexpr GLenum	GL_MAT_EMISSION_BIT_PGI = 0x00800000;
constexpr GLenum	GL_MAT_SHININESS_BIT_PGI = 0x02000000;
constexpr GLenum	GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
constexpr GLenum	GL_MAX = 0x8008;
constexpr GLenum	GL_MAX_3D_TEXTURE_SIZE = 0x8073;
constexpr GLenum	GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
constexpr GLenum	GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
constexpr GLenum	GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
constexpr GLenum	GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
constexpr GLenum	GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
constexpr GLenum	GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
constexpr GLenum	GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
constexpr GLenum	GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
constexpr GLenum	GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
constexpr GLenum	GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
constexpr GLenum	GL_MAX_CLIP_DISTANCES = 0x0D32;
constexpr GLenum	GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
constexpr GLenum	GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
constexpr GLenum	GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
constexpr GLenum	GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
constexpr GLenum	GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
constexpr GLenum	GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
constexpr GLenum	GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
constexpr GLenum	GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
constexpr GLenum	GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
constexpr GLenum	GL_MAX_COMBINED_DIMENSIONS = 0x8282;
constexpr GLenum	GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
constexpr GLenum	GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
constexpr GLenum	GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
constexpr GLenum	GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
constexpr GLenum	GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
constexpr GLenum	GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
constexpr GLenum	GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
constexpr GLenum	GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
constexpr GLenum	GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
constexpr GLenum	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
constexpr GLenum	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
constexpr GLenum	GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
constexpr GLenum	GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
constexpr GLenum	GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
constexpr GLenum	GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
constexpr GLenum	GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
constexpr GLenum	GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
constexpr GLenum	GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
constexpr GLenum	GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
constexpr GLenum	GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
constexpr GLenum	GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
constexpr GLenum	GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
constexpr GLenum	GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
constexpr GLenum	GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
constexpr GLenum	GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
constexpr GLenum	GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
constexpr GLenum	GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
constexpr GLenum	GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
constexpr GLenum	GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
constexpr GLenum	GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
constexpr GLenum	GL_MAX_CONVOLUTION_WIDTH = 0x801A;
constexpr GLenum	GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
constexpr GLenum	GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
constexpr GLenum	GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
constexpr GLenum	GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
constexpr GLenum	GL_MAX_CULL_DISTANCES = 0x82F9;
constexpr GLenum	GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
constexpr GLenum	GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
constexpr GLenum	GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
constexpr GLenum	GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
constexpr GLenum	GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
constexpr GLenum	GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
constexpr GLenum	GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
constexpr GLenum	GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
constexpr GLenum	GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
constexpr GLenum	GL_MAX_DEPTH = 0x8280;
constexpr GLenum	GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
constexpr GLenum	GL_MAX_DRAW_BUFFERS = 0x8824;
constexpr GLenum	GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
constexpr GLenum	GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
constexpr GLenum	GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
constexpr GLenum	GL_MAX_ELEMENTS_INDICES = 0x80E9;
constexpr GLenum	GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
constexpr GLenum	GL_MAX_ELEMENTS_VERTICES = 0x80E8;
constexpr GLenum	GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
constexpr GLenum	GL_MAX_ELEMENT_INDEX = 0x8D6B;
constexpr GLenum	GL_MAX_EXT = 0x8008;
constexpr GLenum	GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
constexpr GLenum	GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
constexpr GLenum	GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
constexpr GLenum	GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
constexpr GLenum	GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
constexpr GLenum	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
constexpr GLenum	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
constexpr GLenum	GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
constexpr GLenum	GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
constexpr GLenum	GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
constexpr GLenum	GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
constexpr GLenum	GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
constexpr GLenum	GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
constexpr GLenum	GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
constexpr GLenum	GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
constexpr GLenum	GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
constexpr GLenum	GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
constexpr GLenum	GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
constexpr GLenum	GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
constexpr GLenum	GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
constexpr GLenum	GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
constexpr GLenum	GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
constexpr GLenum	GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
constexpr GLenum	GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
constexpr GLenum	GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
constexpr GLenum	GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
constexpr GLenum	GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
constexpr GLenum	GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
constexpr GLenum	GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
constexpr GLenum	GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
constexpr GLenum	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
constexpr GLenum	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
constexpr GLenum	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
constexpr GLenum	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
constexpr GLenum	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
constexpr GLenum	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
constexpr GLenum	GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
constexpr GLenum	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
constexpr GLenum	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
constexpr GLenum	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
constexpr GLenum	GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
constexpr GLenum	GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
constexpr GLenum	GL_MAX_HEIGHT = 0x827F;
constexpr GLenum	GL_MAX_IMAGE_SAMPLES = 0x906D;
constexpr GLenum	GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
constexpr GLenum	GL_MAX_IMAGE_UNITS = 0x8F38;
constexpr GLenum	GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
constexpr GLenum	GL_MAX_INTEGER_SAMPLES = 0x9110;
constexpr GLenum	GL_MAX_LABEL_LENGTH = 0x82E8;
constexpr GLenum	GL_MAX_LAYERS = 0x8281;
constexpr GLenum	GL_MAX_LGPU_GPUS_NVX = 0x92BA;
constexpr GLenum	GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
constexpr GLenum	GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
constexpr GLenum	GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
constexpr GLenum	GL_MAX_NAME_LENGTH = 0x92F6;
constexpr GLenum	GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
constexpr GLenum	GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
constexpr GLenum	GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
constexpr GLenum	GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
constexpr GLenum	GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
constexpr GLenum	GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
constexpr GLenum	GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
constexpr GLenum	GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
constexpr GLenum	GL_MAX_PATCH_VERTICES = 0x8E7D;
constexpr GLenum	GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
constexpr GLenum	GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
constexpr GLenum	GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
constexpr GLenum	GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
constexpr GLenum	GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
constexpr GLenum	GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
constexpr GLenum	GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
constexpr GLenum	GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
constexpr GLenum	GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
constexpr GLenum	GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
constexpr GLenum	GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
constexpr GLenum	GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
constexpr GLenum	GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
constexpr GLenum	GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
constexpr GLenum	GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
constexpr GLenum	GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
constexpr GLenum	GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
constexpr GLenum	GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
constexpr GLenum	GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
constexpr GLenum	GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
constexpr GLenum	GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
constexpr GLenum	GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
constexpr GLenum	GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
constexpr GLenum	GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
constexpr GLenum	GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
constexpr GLenum	GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
constexpr GLenum	GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
constexpr GLenum	GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
constexpr GLenum	GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
constexpr GLenum	GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
constexpr GLenum	GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
constexpr GLenum	GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
constexpr GLenum	GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
constexpr GLenum	GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
constexpr GLenum	GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
constexpr GLenum	GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
constexpr GLenum	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
constexpr GLenum	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
constexpr GLenum	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
constexpr GLenum	GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
constexpr GLenum	GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
constexpr GLenum	GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
constexpr GLenum	GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
constexpr GLenum	GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
constexpr GLenum	GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
constexpr GLenum	GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
constexpr GLenum	GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
constexpr GLenum	GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
constexpr GLenum	GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
constexpr GLenum	GL_MAX_SAMPLES = 0x8D57;
constexpr GLenum	GL_MAX_SAMPLES_EXT = 0x8D57;
constexpr GLenum	GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
constexpr GLenum	GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
constexpr GLenum	GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
constexpr GLenum	GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
constexpr GLenum	GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
constexpr GLenum	GL_MAX_SHADER_COMPILER_THREADS_KHR = 0x91B0;
constexpr GLenum	GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
constexpr GLenum	GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
constexpr GLenum	GL_MAX_SHININESS_NV = 0x8504;
constexpr GLenum	GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
constexpr GLenum	GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
constexpr GLenum	GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
constexpr GLenum	GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
constexpr GLenum	GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
constexpr GLenum	GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
constexpr GLenum	GL_MAX_SPOT_EXPONENT_NV = 0x8505;
constexpr GLenum	GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
constexpr GLenum	GL_MAX_SUBROUTINES = 0x8DE7;
constexpr GLenum	GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
constexpr GLenum	GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
constexpr GLenum	GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
constexpr GLenum	GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
constexpr GLenum	GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
constexpr GLenum	GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
constexpr GLenum	GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
constexpr GLenum	GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
constexpr GLenum	GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
constexpr GLenum	GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
constexpr GLenum	GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
constexpr GLenum	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
constexpr GLenum	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
constexpr GLenum	GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
constexpr GLenum	GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
constexpr GLenum	GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
constexpr GLenum	GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
constexpr GLenum	GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
constexpr GLenum	GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
constexpr GLenum	GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
constexpr GLenum	GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
constexpr GLenum	GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
constexpr GLenum	GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
constexpr GLenum	GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
constexpr GLenum	GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
constexpr GLenum	GL_MAX_TEXTURE_COORDS = 0x8871;
constexpr GLenum	GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
constexpr GLenum	GL_MAX_TEXTURE_COORDS_NV = 0x8871;
constexpr GLenum	GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
constexpr GLenum	GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
constexpr GLenum	GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
constexpr GLenum	GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
constexpr GLenum	GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
constexpr GLenum	GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
constexpr GLenum	GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
constexpr GLenum	GL_MAX_TEXTURE_UNITS = 0x84E2;
constexpr GLenum	GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
constexpr GLenum	GL_MAX_TRACK_MATRICES_NV = 0x862F;
constexpr GLenum	GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
constexpr GLenum	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
constexpr GLenum	GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
constexpr GLenum	GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
constexpr GLenum	GL_MAX_UNIFORM_LOCATIONS = 0x826E;
constexpr GLenum	GL_MAX_VARYING_COMPONENTS = 0x8B4B;
constexpr GLenum	GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
constexpr GLenum	GL_MAX_VARYING_FLOATS = 0x8B4B;
constexpr GLenum	GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
constexpr GLenum	GL_MAX_VARYING_VECTORS = 0x8DFC;
constexpr GLenum	GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
constexpr GLenum	GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
constexpr GLenum	GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
constexpr GLenum	GL_MAX_VERTEX_ATTRIBS = 0x8869;
constexpr GLenum	GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
constexpr GLenum	GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
constexpr GLenum	GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
constexpr GLenum	GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
constexpr GLenum	GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
constexpr GLenum	GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
constexpr GLenum	GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
constexpr GLenum	GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
constexpr GLenum	GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
constexpr GLenum	GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
constexpr GLenum	GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
constexpr GLenum	GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
constexpr GLenum	GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
constexpr GLenum	GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
constexpr GLenum	GL_MAX_VERTEX_STREAMS = 0x8E71;
constexpr GLenum	GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
constexpr GLenum	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
constexpr GLenum	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
constexpr GLenum	GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
constexpr GLenum	GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
constexpr GLenum	GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
constexpr GLenum	GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
constexpr GLenum	GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
constexpr GLenum	GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
constexpr GLenum	GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
constexpr GLenum	GL_MAX_VIEWPORTS = 0x825B;
constexpr GLenum	GL_MAX_VIEWS_OVR = 0x9631;
constexpr GLenum	GL_MAX_WIDTH = 0x827E;
constexpr GLenum	GL_MAX_WINDOW_RECTANGLES_EXT = 0x8F14;
constexpr GLenum	GL_MEDIUM_FLOAT = 0x8DF1;
constexpr GLenum	GL_MEDIUM_INT = 0x8DF4;
constexpr GLenum	GL_MIN = 0x8007;
constexpr GLenum	GL_MINMAX = 0x802E;
constexpr GLenum	GL_MINMAX_EXT = 0x802E;
constexpr GLenum	GL_MINMAX_FORMAT = 0x802F;
constexpr GLenum	GL_MINMAX_FORMAT_EXT = 0x802F;
constexpr GLenum	GL_MINMAX_SINK = 0x8030;
constexpr GLenum	GL_MINMAX_SINK_EXT = 0x8030;
constexpr GLenum	GL_MINOR_VERSION = 0x821C;
constexpr GLenum	GL_MINUS_CLAMPED_NV = 0x92B3;
constexpr GLenum	GL_MINUS_NV = 0x929F;
constexpr GLenum	GL_MIN_EXT = 0x8007;
constexpr GLenum	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
constexpr GLenum	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
constexpr GLenum	GL_MIN_LOD_WARNING_AMD = 0x919C;
constexpr GLenum	GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
constexpr GLenum	GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
constexpr GLenum	GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
constexpr GLenum	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
constexpr GLenum	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
constexpr GLenum	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
constexpr GLenum	GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
constexpr GLenum	GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
constexpr GLenum	GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
constexpr GLenum	GL_MIPMAP = 0x8293;
constexpr GLenum	GL_MIRRORED_REPEAT = 0x8370;
constexpr GLenum	GL_MIRRORED_REPEAT_ARB = 0x8370;
constexpr GLenum	GL_MIRRORED_REPEAT_IBM = 0x8370;
constexpr GLenum	GL_MIRROR_CLAMP_ATI = 0x8742;
constexpr GLenum	GL_MIRROR_CLAMP_EXT = 0x8742;
constexpr GLenum	GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
constexpr GLenum	GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
constexpr GLenum	GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
constexpr GLenum	GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
constexpr GLenum	GL_MITER_REVERT_NV = 0x90A7;
constexpr GLenum	GL_MITER_TRUNCATE_NV = 0x90A8;
constexpr GLenum	GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
constexpr GLenum	GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
constexpr GLenum	GL_MODELVIEW0_ARB = 0x1700;
constexpr GLenum	GL_MODELVIEW0_EXT = 0x1700;
constexpr GLenum	GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
constexpr GLenum	GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
constexpr GLenum	GL_MODELVIEW10_ARB = 0x872A;
constexpr GLenum	GL_MODELVIEW11_ARB = 0x872B;
constexpr GLenum	GL_MODELVIEW12_ARB = 0x872C;
constexpr GLenum	GL_MODELVIEW13_ARB = 0x872D;
constexpr GLenum	GL_MODELVIEW14_ARB = 0x872E;
constexpr GLenum	GL_MODELVIEW15_ARB = 0x872F;
constexpr GLenum	GL_MODELVIEW16_ARB = 0x8730;
constexpr GLenum	GL_MODELVIEW17_ARB = 0x8731;
constexpr GLenum	GL_MODELVIEW18_ARB = 0x8732;
constexpr GLenum	GL_MODELVIEW19_ARB = 0x8733;
constexpr GLenum	GL_MODELVIEW1_ARB = 0x850A;
constexpr GLenum	GL_MODELVIEW1_EXT = 0x850A;
constexpr GLenum	GL_MODELVIEW1_MATRIX_EXT = 0x8506;
constexpr GLenum	GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
constexpr GLenum	GL_MODELVIEW20_ARB = 0x8734;
constexpr GLenum	GL_MODELVIEW21_ARB = 0x8735;
constexpr GLenum	GL_MODELVIEW22_ARB = 0x8736;
constexpr GLenum	GL_MODELVIEW23_ARB = 0x8737;
constexpr GLenum	GL_MODELVIEW24_ARB = 0x8738;
constexpr GLenum	GL_MODELVIEW25_ARB = 0x8739;
constexpr GLenum	GL_MODELVIEW26_ARB = 0x873A;
constexpr GLenum	GL_MODELVIEW27_ARB = 0x873B;
constexpr GLenum	GL_MODELVIEW28_ARB = 0x873C;
constexpr GLenum	GL_MODELVIEW29_ARB = 0x873D;
constexpr GLenum	GL_MODELVIEW2_ARB = 0x8722;
constexpr GLenum	GL_MODELVIEW30_ARB = 0x873E;
constexpr GLenum	GL_MODELVIEW31_ARB = 0x873F;
constexpr GLenum	GL_MODELVIEW3_ARB = 0x8723;
constexpr GLenum	GL_MODELVIEW4_ARB = 0x8724;
constexpr GLenum	GL_MODELVIEW5_ARB = 0x8725;
constexpr GLenum	GL_MODELVIEW6_ARB = 0x8726;
constexpr GLenum	GL_MODELVIEW7_ARB = 0x8727;
constexpr GLenum	GL_MODELVIEW8_ARB = 0x8728;
constexpr GLenum	GL_MODELVIEW9_ARB = 0x8729;
constexpr GLenum	GL_MODELVIEW_PROJECTION_NV = 0x8629;
constexpr GLenum	GL_MODULATE_ADD_ATI = 0x8744;
constexpr GLenum	GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
constexpr GLenum	GL_MODULATE_SUBTRACT_ATI = 0x8746;
constexpr GLenum	GL_MOVE_TO_CONTINUES_NV = 0x90B6;
constexpr GLenum	GL_MOVE_TO_NV = 0x02;
constexpr GLenum	GL_MOVE_TO_RESETS_NV = 0x90B5;
constexpr GLenum	GL_MOV_ATI = 0x8961;
constexpr GLenum	GL_MULTICAST_GPUS_NV = 0x92BA;
constexpr GLenum	GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9549;
constexpr GLenum	GL_MULTIPLY_KHR = 0x9294;
constexpr GLenum	GL_MULTIPLY_NV = 0x9294;
constexpr GLenum	GL_MULTISAMPLE = 0x809D;
constexpr GLenum	GL_MULTISAMPLES_NV = 0x9371;
constexpr GLenum	GL_MULTISAMPLE_3DFX = 0x86B2;
constexpr GLenum	GL_MULTISAMPLE_ARB = 0x809D;
constexpr GLenum	GL_MULTISAMPLE_BIT = 0x20000000;
constexpr GLenum	GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
constexpr GLenum	GL_MULTISAMPLE_BIT_ARB = 0x20000000;
constexpr GLenum	GL_MULTISAMPLE_BIT_EXT = 0x20000000;
constexpr GLenum	GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
constexpr GLenum	GL_MULTISAMPLE_EXT = 0x809D;
constexpr GLenum	GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
constexpr GLenum	GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
constexpr GLenum	GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
constexpr GLenum	GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
constexpr GLenum	GL_MULTISAMPLE_SGIS = 0x809D;
constexpr GLenum	GL_MUL_ATI = 0x8964;
constexpr GLenum	GL_MVP_MATRIX_EXT = 0x87E3;
constexpr GLenum	GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
constexpr GLenum	GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
constexpr GLenum	GL_NAME_LENGTH = 0x92F9;
constexpr GLenum	GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
constexpr GLenum	GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
constexpr GLenum	GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
constexpr GLenum	GL_NEGATE_BIT_ATI = 0x00000004;
constexpr GLenum	GL_NEGATIVE_ONE_EXT = 0x87DF;
constexpr GLenum	GL_NEGATIVE_ONE_TO_ONE = 0x935E;
constexpr GLenum	GL_NEGATIVE_W_EXT = 0x87DC;
constexpr GLenum	GL_NEGATIVE_X_EXT = 0x87D9;
constexpr GLenum	GL_NEGATIVE_Y_EXT = 0x87DA;
constexpr GLenum	GL_NEGATIVE_Z_EXT = 0x87DB;
constexpr GLenum	GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
constexpr GLenum	GL_NOP_COMMAND_NV = 0x0001;
constexpr GLenum	GL_NORMALIZED_RANGE_EXT = 0x87E0;
constexpr GLenum	GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
constexpr GLenum	GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
constexpr GLenum	GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
constexpr GLenum	GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
constexpr GLenum	GL_NORMAL_ARRAY_EXT = 0x8075;
constexpr GLenum	GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
constexpr GLenum	GL_NORMAL_ARRAY_LIST_IBM = 103071;
constexpr GLenum	GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
constexpr GLenum	GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
constexpr GLenum	GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
constexpr GLenum	GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
constexpr GLenum	GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
constexpr GLenum	GL_NORMAL_BIT_PGI = 0x08000000;
constexpr GLenum	GL_NORMAL_MAP = 0x8511;
constexpr GLenum	GL_NORMAL_MAP_ARB = 0x8511;
constexpr GLenum	GL_NORMAL_MAP_EXT = 0x8511;
constexpr GLenum	GL_NORMAL_MAP_NV = 0x8511;
constexpr GLenum	GL_NO_RESET_NOTIFICATION = 0x8261;
constexpr GLenum	GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
constexpr GLenum	GL_NUM_ACTIVE_VARIABLES = 0x9304;
constexpr GLenum	GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
constexpr GLenum	GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
constexpr GLenum	GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
constexpr GLenum	GL_NUM_DEVICE_UUIDS_EXT = 0x9596;
constexpr GLenum	GL_NUM_EXTENSIONS = 0x821D;
constexpr GLenum	GL_NUM_FILL_STREAMS_NV = 0x8E29;
constexpr GLenum	GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
constexpr GLenum	GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
constexpr GLenum	GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
constexpr GLenum	GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
constexpr GLenum	GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
constexpr GLenum	GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
constexpr GLenum	GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
constexpr GLenum	GL_NUM_PASSES_ATI = 0x8970;
constexpr GLenum	GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
constexpr GLenum	GL_NUM_SAMPLE_COUNTS = 0x9380;
constexpr GLenum	GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
constexpr GLenum	GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
constexpr GLenum	GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
constexpr GLenum	GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
constexpr GLenum	GL_NUM_TILING_TYPES_EXT = 0x9582;
constexpr GLenum	GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
constexpr GLenum	GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
constexpr GLenum	GL_NUM_WINDOW_RECTANGLES_EXT = 0x8F15;
constexpr GLenum	GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
constexpr GLenum	GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
constexpr GLenum	GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
constexpr GLenum	GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
constexpr GLenum	GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
constexpr GLenum	GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
constexpr GLenum	GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
constexpr GLenum	GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
constexpr GLenum	GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
constexpr GLenum	GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
constexpr GLenum	GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
constexpr GLenum	GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
constexpr GLenum	GL_OBJECT_LINE_SGIS = 0x81F7;
constexpr GLenum	GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
constexpr GLenum	GL_OBJECT_POINT_SGIS = 0x81F5;
constexpr GLenum	GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
constexpr GLenum	GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
constexpr GLenum	GL_OBJECT_TYPE = 0x9112;
constexpr GLenum	GL_OBJECT_TYPE_ARB = 0x8B4E;
constexpr GLenum	GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
constexpr GLenum	GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
constexpr GLenum	GL_OFFSET = 0x92FC;
constexpr GLenum	GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
constexpr GLenum	GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
constexpr GLenum	GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
constexpr GLenum	GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
constexpr GLenum	GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
constexpr GLenum	GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
constexpr GLenum	GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
constexpr GLenum	GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
constexpr GLenum	GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
constexpr GLenum	GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
constexpr GLenum	GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
constexpr GLenum	GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
constexpr GLenum	GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
constexpr GLenum	GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
constexpr GLenum	GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
constexpr GLenum	GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
constexpr GLenum	GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
constexpr GLenum	GL_ONE_EXT = 0x87DE;
constexpr GLenum	GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
constexpr GLenum	GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
constexpr GLenum	GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
constexpr GLenum	GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
constexpr GLenum	GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
constexpr GLenum	GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
constexpr GLenum	GL_OPERAND0_ALPHA = 0x8598;
constexpr GLenum	GL_OPERAND0_ALPHA_ARB = 0x8598;
constexpr GLenum	GL_OPERAND0_ALPHA_EXT = 0x8598;
constexpr GLenum	GL_OPERAND0_RGB = 0x8590;
constexpr GLenum	GL_OPERAND0_RGB_ARB = 0x8590;
constexpr GLenum	GL_OPERAND0_RGB_EXT = 0x8590;
constexpr GLenum	GL_OPERAND1_ALPHA = 0x8599;
constexpr GLenum	GL_OPERAND1_ALPHA_ARB = 0x8599;
constexpr GLenum	GL_OPERAND1_ALPHA_EXT = 0x8599;
constexpr GLenum	GL_OPERAND1_RGB = 0x8591;
constexpr GLenum	GL_OPERAND1_RGB_ARB = 0x8591;
constexpr GLenum	GL_OPERAND1_RGB_EXT = 0x8591;
constexpr GLenum	GL_OPERAND2_ALPHA = 0x859A;
constexpr GLenum	GL_OPERAND2_ALPHA_ARB = 0x859A;
constexpr GLenum	GL_OPERAND2_ALPHA_EXT = 0x859A;
constexpr GLenum	GL_OPERAND2_RGB = 0x8592;
constexpr GLenum	GL_OPERAND2_RGB_ARB = 0x8592;
constexpr GLenum	GL_OPERAND2_RGB_EXT = 0x8592;
constexpr GLenum	GL_OPERAND3_ALPHA_NV = 0x859B;
constexpr GLenum	GL_OPERAND3_RGB_NV = 0x8593;
constexpr GLenum	GL_OPTIMAL_TILING_EXT = 0x9584;
constexpr GLenum	GL_OP_ADD_EXT = 0x8787;
constexpr GLenum	GL_OP_CLAMP_EXT = 0x878E;
constexpr GLenum	GL_OP_CROSS_PRODUCT_EXT = 0x8797;
constexpr GLenum	GL_OP_DOT3_EXT = 0x8784;
constexpr GLenum	GL_OP_DOT4_EXT = 0x8785;
constexpr GLenum	GL_OP_EXP_BASE_2_EXT = 0x8791;
constexpr GLenum	GL_OP_FLOOR_EXT = 0x878F;
constexpr GLenum	GL_OP_FRAC_EXT = 0x8789;
constexpr GLenum	GL_OP_INDEX_EXT = 0x8782;
constexpr GLenum	GL_OP_LOG_BASE_2_EXT = 0x8792;
constexpr GLenum	GL_OP_MADD_EXT = 0x8788;
constexpr GLenum	GL_OP_MAX_EXT = 0x878A;
constexpr GLenum	GL_OP_MIN_EXT = 0x878B;
constexpr GLenum	GL_OP_MOV_EXT = 0x8799;
constexpr GLenum	GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
constexpr GLenum	GL_OP_MUL_EXT = 0x8786;
constexpr GLenum	GL_OP_NEGATE_EXT = 0x8783;
constexpr GLenum	GL_OP_POWER_EXT = 0x8793;
constexpr GLenum	GL_OP_RECIP_EXT = 0x8794;
constexpr GLenum	GL_OP_RECIP_SQRT_EXT = 0x8795;
constexpr GLenum	GL_OP_ROUND_EXT = 0x8790;
constexpr GLenum	GL_OP_SET_GE_EXT = 0x878C;
constexpr GLenum	GL_OP_SET_LT_EXT = 0x878D;
constexpr GLenum	GL_OP_SUB_EXT = 0x8796;
constexpr GLenum	GL_OUTPUT_COLOR0_EXT = 0x879B;
constexpr GLenum	GL_OUTPUT_COLOR1_EXT = 0x879C;
constexpr GLenum	GL_OUTPUT_FOG_EXT = 0x87BD;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
constexpr GLenum	GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
constexpr GLenum	GL_OUTPUT_VERTEX_EXT = 0x879A;
constexpr GLenum	GL_OVERLAY_KHR = 0x9296;
constexpr GLenum	GL_OVERLAY_NV = 0x9296;
constexpr GLenum	GL_PACK_CMYK_HINT_EXT = 0x800E;
constexpr GLenum	GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
constexpr GLenum	GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
constexpr GLenum	GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
constexpr GLenum	GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
constexpr GLenum	GL_PACK_IMAGE_HEIGHT = 0x806C;
constexpr GLenum	GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
constexpr GLenum	GL_PACK_INVERT_MESA = 0x8758;
constexpr GLenum	GL_PACK_RESAMPLE_OML = 0x8984;
constexpr GLenum	GL_PACK_RESAMPLE_SGIX = 0x842E;
constexpr GLenum	GL_PACK_ROW_BYTES_APPLE = 0x8A15;
constexpr GLenum	GL_PACK_SKIP_IMAGES = 0x806B;
constexpr GLenum	GL_PACK_SKIP_IMAGES_EXT = 0x806B;
constexpr GLenum	GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
constexpr GLenum	GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
constexpr GLenum	GL_PARAMETER_BUFFER = 0x80EE;
constexpr GLenum	GL_PARAMETER_BUFFER_ARB = 0x80EE;
constexpr GLenum	GL_PARAMETER_BUFFER_BINDING = 0x80EF;
constexpr GLenum	GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
constexpr GLenum	GL_PARTIAL_SUCCESS_NV = 0x902E;
constexpr GLenum	GL_PASS_THROUGH_NV = 0x86E6;
constexpr GLenum	GL_PATCHES = 0x000E;
constexpr GLenum	GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
constexpr GLenum	GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
constexpr GLenum	GL_PATCH_VERTICES = 0x8E72;
constexpr GLenum	GL_PATH_CLIENT_LENGTH_NV = 0x907F;
constexpr GLenum	GL_PATH_COMMAND_COUNT_NV = 0x909D;
constexpr GLenum	GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
constexpr GLenum	GL_PATH_COORD_COUNT_NV = 0x909E;
constexpr GLenum	GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
constexpr GLenum	GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
constexpr GLenum	GL_PATH_DASH_CAPS_NV = 0x907B;
constexpr GLenum	GL_PATH_DASH_OFFSET_NV = 0x907E;
constexpr GLenum	GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
constexpr GLenum	GL_PATH_END_CAPS_NV = 0x9076;
constexpr GLenum	GL_PATH_ERROR_POSITION_NV = 0x90AB;
constexpr GLenum	GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
constexpr GLenum	GL_PATH_FILL_COVER_MODE_NV = 0x9082;
constexpr GLenum	GL_PATH_FILL_MASK_NV = 0x9081;
constexpr GLenum	GL_PATH_FILL_MODE_NV = 0x9080;
constexpr GLenum	GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
constexpr GLenum	GL_PATH_FORMAT_PS_NV = 0x9071;
constexpr GLenum	GL_PATH_FORMAT_SVG_NV = 0x9070;
constexpr GLenum	GL_PATH_GEN_COEFF_NV = 0x90B1;
constexpr GLenum	GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
constexpr GLenum	GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
constexpr GLenum	GL_PATH_GEN_MODE_NV = 0x90B0;
constexpr GLenum	GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
constexpr GLenum	GL_PATH_INITIAL_END_CAP_NV = 0x9077;
constexpr GLenum	GL_PATH_JOIN_STYLE_NV = 0x9079;
constexpr GLenum	GL_PATH_MITER_LIMIT_NV = 0x907A;
constexpr GLenum	GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
constexpr GLenum	GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
constexpr GLenum	GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
constexpr GLenum	GL_PATH_STENCIL_FUNC_NV = 0x90B7;
constexpr GLenum	GL_PATH_STENCIL_REF_NV = 0x90B8;
constexpr GLenum	GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
constexpr GLenum	GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
constexpr GLenum	GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
constexpr GLenum	GL_PATH_STROKE_MASK_NV = 0x9084;
constexpr GLenum	GL_PATH_STROKE_WIDTH_NV = 0x9075;
constexpr GLenum	GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
constexpr GLenum	GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
constexpr GLenum	GL_PERCENTAGE_AMD = 0x8BC3;
constexpr GLenum	GL_PERFMON_RESULT_AMD = 0x8BC6;
constexpr GLenum	GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
constexpr GLenum	GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
constexpr GLenum	GL_PERFORMANCE_MONITOR_AMD = 0x9152;
constexpr GLenum	GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
constexpr GLenum	GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
constexpr GLenum	GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
constexpr GLenum	GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
constexpr GLenum	GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
constexpr GLenum	GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
constexpr GLenum	GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
constexpr GLenum	GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
constexpr GLenum	GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
constexpr GLenum	GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
constexpr GLenum	GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
constexpr GLenum	GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
constexpr GLenum	GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
constexpr GLenum	GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
constexpr GLenum	GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
constexpr GLenum	GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
constexpr GLenum	GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
constexpr GLenum	GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
constexpr GLenum	GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
constexpr GLenum	GL_PERFQUERY_WAIT_INTEL = 0x83FB;
constexpr GLenum	GL_PERTURB_EXT = 0x85AE;
constexpr GLenum	GL_PER_GPU_STORAGE_BIT_NV = 0x0800;
constexpr GLenum	GL_PER_GPU_STORAGE_NV = 0x9548;
constexpr GLenum	GL_PER_STAGE_CONSTANTS_NV = 0x8535;
constexpr GLenum	GL_PHONG_HINT_WIN = 0x80EB;
constexpr GLenum	GL_PHONG_WIN = 0x80EA;
constexpr GLenum	GL_PINLIGHT_NV = 0x92A8;
constexpr GLenum	GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 0x91AE;
constexpr GLenum	GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 0x91AF;
constexpr GLenum	GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
constexpr GLenum	GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
constexpr GLenum	GL_PIXEL_COUNTER_BITS_NV = 0x8864;
constexpr GLenum	GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
constexpr GLenum	GL_PIXEL_COUNT_NV = 0x8866;
constexpr GLenum	GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
constexpr GLenum	GL_PIXEL_MAG_FILTER_EXT = 0x8331;
constexpr GLenum	GL_PIXEL_MIN_FILTER_EXT = 0x8332;
constexpr GLenum	GL_PIXEL_PACK_BUFFER = 0x88EB;
constexpr GLenum	GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
constexpr GLenum	GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
constexpr GLenum	GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
constexpr GLenum	GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
constexpr GLenum	GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
constexpr GLenum	GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
constexpr GLenum	GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
constexpr GLenum	GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
constexpr GLenum	GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
constexpr GLenum	GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
constexpr GLenum	GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
constexpr GLenum	GL_PIXEL_UNPACK_BUFFER = 0x88EC;
constexpr GLenum	GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
constexpr GLenum	GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
constexpr GLenum	GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
constexpr GLenum	GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
constexpr GLenum	GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
constexpr GLenum	GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
constexpr GLenum	GL_PLUS_CLAMPED_NV = 0x92B1;
constexpr GLenum	GL_PLUS_DARKER_NV = 0x9292;
constexpr GLenum	GL_PLUS_NV = 0x9291;
constexpr GLenum	GL_PN_TRIANGLES_ATI = 0x87F0;
constexpr GLenum	GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
constexpr GLenum	GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
constexpr GLenum	GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
constexpr GLenum	GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
constexpr GLenum	GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
constexpr GLenum	GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
constexpr GLenum	GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
constexpr GLenum	GL_POINT_DISTANCE_ATTENUATION = 0x8129;
constexpr GLenum	GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
constexpr GLenum	GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
constexpr GLenum	GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
constexpr GLenum	GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
constexpr GLenum	GL_POINT_SIZE_MAX = 0x8127;
constexpr GLenum	GL_POINT_SIZE_MAX_ARB = 0x8127;
constexpr GLenum	GL_POINT_SIZE_MAX_EXT = 0x8127;
constexpr GLenum	GL_POINT_SIZE_MIN = 0x8126;
constexpr GLenum	GL_POINT_SIZE_MIN_ARB = 0x8126;
constexpr GLenum	GL_POINT_SIZE_MIN_EXT = 0x8126;
constexpr GLenum	GL_POINT_SPRITE = 0x8861;
constexpr GLenum	GL_POINT_SPRITE_ARB = 0x8861;
constexpr GLenum	GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
constexpr GLenum	GL_POINT_SPRITE_NV = 0x8861;
constexpr GLenum	GL_POINT_SPRITE_R_MODE_NV = 0x8863;
constexpr GLenum	GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
constexpr GLenum	GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
constexpr GLenum	GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
constexpr GLenum	GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
constexpr GLenum	GL_POLYGON_OFFSET_EXT = 0x8037;
constexpr GLenum	GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
constexpr GLenum	GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
constexpr GLenum	GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
constexpr GLenum	GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
constexpr GLenum	GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
constexpr GLenum	GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
constexpr GLenum	GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
constexpr GLenum	GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
constexpr GLenum	GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
constexpr GLenum	GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
constexpr GLenum	GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
constexpr GLenum	GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
constexpr GLenum	GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
constexpr GLenum	GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
constexpr GLenum	GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
constexpr GLenum	GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
constexpr GLenum	GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
constexpr GLenum	GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
constexpr GLenum	GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
constexpr GLenum	GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
constexpr GLenum	GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
constexpr GLenum	GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
constexpr GLenum	GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
constexpr GLenum	GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
constexpr GLenum	GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
constexpr GLenum	GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
constexpr GLenum	GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
constexpr GLenum	GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
constexpr GLenum	GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
constexpr GLenum	GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
constexpr GLenum	GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
constexpr GLenum	GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
constexpr GLenum	GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
constexpr GLenum	GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
constexpr GLenum	GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
constexpr GLenum	GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
constexpr GLenum	GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
constexpr GLenum	GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
constexpr GLenum	GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
constexpr GLenum	GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
constexpr GLenum	GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
constexpr GLenum	GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
constexpr GLenum	GL_PRESENT_DURATION_NV = 0x8E2B;
constexpr GLenum	GL_PRESENT_TIME_NV = 0x8E2A;
constexpr GLenum	GL_PRESERVE_ATI = 0x8762;
constexpr GLenum	GL_PREVIOUS = 0x8578;
constexpr GLenum	GL_PREVIOUS_ARB = 0x8578;
constexpr GLenum	GL_PREVIOUS_EXT = 0x8578;
constexpr GLenum	GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
constexpr GLenum	GL_PRIMARY_COLOR = 0x8577;
constexpr GLenum	GL_PRIMARY_COLOR_ARB = 0x8577;
constexpr GLenum	GL_PRIMARY_COLOR_EXT = 0x8577;
constexpr GLenum	GL_PRIMARY_COLOR_NV = 0x852C;
constexpr GLenum	GL_PRIMITIVES_GENERATED = 0x8C87;
constexpr GLenum	GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
constexpr GLenum	GL_PRIMITIVES_GENERATED_NV = 0x8C87;
constexpr GLenum	GL_PRIMITIVES_SUBMITTED = 0x82EF;
constexpr GLenum	GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
constexpr GLenum	GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
constexpr GLenum	GL_PRIMITIVE_ID_NV = 0x8C7C;
constexpr GLenum	GL_PRIMITIVE_RESTART = 0x8F9D;
constexpr GLenum	GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
constexpr GLenum	GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
constexpr GLenum	GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
constexpr GLenum	GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
constexpr GLenum	GL_PRIMITIVE_RESTART_NV = 0x8558;
constexpr GLenum	GL_PROGRAM = 0x82E2;
constexpr GLenum	GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
constexpr GLenum	GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
constexpr GLenum	GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
constexpr GLenum	GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
constexpr GLenum	GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
constexpr GLenum	GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
constexpr GLenum	GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
constexpr GLenum	GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
constexpr GLenum	GL_PROGRAM_BINARY_FORMATS = 0x87FF;
constexpr GLenum	GL_PROGRAM_BINARY_LENGTH = 0x8741;
constexpr GLenum	GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
constexpr GLenum	GL_PROGRAM_BINDING_ARB = 0x8677;
constexpr GLenum	GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
constexpr GLenum	GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
constexpr GLenum	GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
constexpr GLenum	GL_PROGRAM_ERROR_STRING_NV = 0x8874;
constexpr GLenum	GL_PROGRAM_FORMAT_ARB = 0x8876;
constexpr GLenum	GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
constexpr GLenum	GL_PROGRAM_INPUT = 0x92E3;
constexpr GLenum	GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
constexpr GLenum	GL_PROGRAM_LENGTH_ARB = 0x8627;
constexpr GLenum	GL_PROGRAM_LENGTH_NV = 0x8627;
constexpr GLenum	GL_PROGRAM_MATRIX_EXT = 0x8E2D;
constexpr GLenum	GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
constexpr GLenum	GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
constexpr GLenum	GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
constexpr GLenum	GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
constexpr GLenum	GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
constexpr GLenum	GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
constexpr GLenum	GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
constexpr GLenum	GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
constexpr GLenum	GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
constexpr GLenum	GL_PROGRAM_OBJECT_ARB = 0x8B40;
constexpr GLenum	GL_PROGRAM_OBJECT_EXT = 0x8B40;
constexpr GLenum	GL_PROGRAM_OUTPUT = 0x92E4;
constexpr GLenum	GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
constexpr GLenum	GL_PROGRAM_PARAMETER_NV = 0x8644;
constexpr GLenum	GL_PROGRAM_PIPELINE = 0x82E4;
constexpr GLenum	GL_PROGRAM_PIPELINE_BINDING = 0x825A;
constexpr GLenum	GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
constexpr GLenum	GL_PROGRAM_POINT_SIZE = 0x8642;
constexpr GLenum	GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
constexpr GLenum	GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
constexpr GLenum	GL_PROGRAM_RESIDENT_NV = 0x8647;
constexpr GLenum	GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
constexpr GLenum	GL_PROGRAM_SEPARABLE = 0x8258;
constexpr GLenum	GL_PROGRAM_STRING_ARB = 0x8628;
constexpr GLenum	GL_PROGRAM_STRING_NV = 0x8628;
constexpr GLenum	GL_PROGRAM_TARGET_NV = 0x8646;
constexpr GLenum	GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
constexpr GLenum	GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
constexpr GLenum	GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
constexpr GLenum	GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
constexpr GLenum	GL_PROTECTED_MEMORY_OBJECT_EXT = 0x959B;
constexpr GLenum	GL_PROVOKING_VERTEX = 0x8E4F;
constexpr GLenum	GL_PROVOKING_VERTEX_EXT = 0x8E4F;
constexpr GLenum	GL_PROXY_COLOR_TABLE = 0x80D3;
constexpr GLenum	GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
constexpr GLenum	GL_PROXY_HISTOGRAM = 0x8025;
constexpr GLenum	GL_PROXY_HISTOGRAM_EXT = 0x8025;
constexpr GLenum	GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
constexpr GLenum	GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
constexpr GLenum	GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
constexpr GLenum	GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
constexpr GLenum	GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
constexpr GLenum	GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
constexpr GLenum	GL_PROXY_TEXTURE_1D_EXT = 0x8063;
constexpr GLenum	GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
constexpr GLenum	GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
constexpr GLenum	GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
constexpr GLenum	GL_PROXY_TEXTURE_2D_EXT = 0x8064;
constexpr GLenum	GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
constexpr GLenum	GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
constexpr GLenum	GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
constexpr GLenum	GL_PROXY_TEXTURE_3D = 0x8070;
constexpr GLenum	GL_PROXY_TEXTURE_3D_EXT = 0x8070;
constexpr GLenum	GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
constexpr GLenum	GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
constexpr GLenum	GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
constexpr GLenum	GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
constexpr GLenum	GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
constexpr GLenum	GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
constexpr GLenum	GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
constexpr GLenum	GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
constexpr GLenum	GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
constexpr GLenum	GL_PURGEABLE_APPLE = 0x8A1D;
constexpr GLenum	GL_PURGED_CONTEXT_RESET_NV = 0x92BB;
constexpr GLenum	GL_QUADRATIC_CURVE_TO_NV = 0x0A;
constexpr GLenum	GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
constexpr GLenum	GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
constexpr GLenum	GL_QUAD_MESH_SUN = 0x8614;
constexpr GLenum	GL_QUARTER_BIT_ATI = 0x00000010;
constexpr GLenum	GL_QUERY = 0x82E3;
constexpr GLenum	GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
constexpr GLenum	GL_QUERY_BUFFER = 0x9192;
constexpr GLenum	GL_QUERY_BUFFER_AMD = 0x9192;
constexpr GLenum	GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
constexpr GLenum	GL_QUERY_BUFFER_BINDING = 0x9193;
constexpr GLenum	GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
constexpr GLenum	GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
constexpr GLenum	GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
constexpr GLenum	GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
constexpr GLenum	GL_QUERY_BY_REGION_WAIT = 0x8E15;
constexpr GLenum	GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
constexpr GLenum	GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
constexpr GLenum	GL_QUERY_COUNTER_BITS = 0x8864;
constexpr GLenum	GL_QUERY_COUNTER_BITS_ARB = 0x8864;
constexpr GLenum	GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
constexpr GLenum	GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
constexpr GLenum	GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
constexpr GLenum	GL_QUERY_NO_WAIT = 0x8E14;
constexpr GLenum	GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
constexpr GLenum	GL_QUERY_NO_WAIT_NV = 0x8E14;
constexpr GLenum	GL_QUERY_OBJECT_AMD = 0x9153;
constexpr GLenum	GL_QUERY_OBJECT_EXT = 0x9153;
constexpr GLenum	GL_QUERY_RESULT = 0x8866;
constexpr GLenum	GL_QUERY_RESULT_ARB = 0x8866;
constexpr GLenum	GL_QUERY_RESULT_AVAILABLE = 0x8867;
constexpr GLenum	GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
constexpr GLenum	GL_QUERY_RESULT_NO_WAIT = 0x9194;
constexpr GLenum	GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
constexpr GLenum	GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
constexpr GLenum	GL_QUERY_TARGET = 0x82EA;
constexpr GLenum	GL_QUERY_WAIT = 0x8E13;
constexpr GLenum	GL_QUERY_WAIT_INVERTED = 0x8E17;
constexpr GLenum	GL_QUERY_WAIT_NV = 0x8E13;
constexpr GLenum	GL_R11F_G11F_B10F = 0x8C3A;
constexpr GLenum	GL_R11F_G11F_B10F_EXT = 0x8C3A;
constexpr GLenum	GL_R16 = 0x822A;
constexpr GLenum	GL_R16F = 0x822D;
constexpr GLenum	GL_R16I = 0x8233;
constexpr GLenum	GL_R16UI = 0x8234;
constexpr GLenum	GL_R16_SNORM = 0x8F98;
constexpr GLenum	GL_R1UI_C3F_V3F_SUN = 0x85C6;
constexpr GLenum	GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
constexpr GLenum	GL_R1UI_C4UB_V3F_SUN = 0x85C5;
constexpr GLenum	GL_R1UI_N3F_V3F_SUN = 0x85C7;
constexpr GLenum	GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
constexpr GLenum	GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
constexpr GLenum	GL_R1UI_T2F_V3F_SUN = 0x85C9;
constexpr GLenum	GL_R1UI_V3F_SUN = 0x85C4;
constexpr GLenum	GL_R32F = 0x822E;
constexpr GLenum	GL_R32I = 0x8235;
constexpr GLenum	GL_R32UI = 0x8236;
constexpr GLenum	GL_R8 = 0x8229;
constexpr GLenum	GL_R8I = 0x8231;
constexpr GLenum	GL_R8UI = 0x8232;
constexpr GLenum	GL_R8_SNORM = 0x8F94;
constexpr GLenum	GL_RASTERIZER_DISCARD = 0x8C89;
constexpr GLenum	GL_RASTERIZER_DISCARD_EXT = 0x8C89;
constexpr GLenum	GL_RASTERIZER_DISCARD_NV = 0x8C89;
constexpr GLenum	GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
constexpr GLenum	GL_RASTER_MULTISAMPLE_EXT = 0x9327;
constexpr GLenum	GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
constexpr GLenum	GL_RASTER_SAMPLES_EXT = 0x9328;
constexpr GLenum	GL_READ_FRAMEBUFFER = 0x8CA8;
constexpr GLenum	GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
constexpr GLenum	GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
constexpr GLenum	GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
constexpr GLenum	GL_READ_ONLY = 0x88B8;
constexpr GLenum	GL_READ_ONLY_ARB = 0x88B8;
constexpr GLenum	GL_READ_PIXELS = 0x828C;
constexpr GLenum	GL_READ_PIXELS_FORMAT = 0x828D;
constexpr GLenum	GL_READ_PIXELS_TYPE = 0x828E;
constexpr GLenum	GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
constexpr GLenum	GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
constexpr GLenum	GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
constexpr GLenum	GL_READ_WRITE = 0x88BA;
constexpr GLenum	GL_READ_WRITE_ARB = 0x88BA;
constexpr GLenum	GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
constexpr GLenum	GL_RECT_NV = 0xF6;
constexpr GLenum	GL_REDUCE = 0x8016;
constexpr GLenum	GL_REDUCE_EXT = 0x8016;
constexpr GLenum	GL_RED_BIT_ATI = 0x00000001;
constexpr GLenum	GL_RED_INTEGER = 0x8D94;
constexpr GLenum	GL_RED_INTEGER_EXT = 0x8D94;
constexpr GLenum	GL_RED_MAX_CLAMP_INGR = 0x8564;
constexpr GLenum	GL_RED_MIN_CLAMP_INGR = 0x8560;
constexpr GLenum	GL_RED_NV = 0x1903;
constexpr GLenum	GL_RED_SNORM = 0x8F90;
constexpr GLenum	GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
constexpr GLenum	GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
constexpr GLenum	GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
constexpr GLenum	GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
constexpr GLenum	GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
constexpr GLenum	GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
constexpr GLenum	GL_REFLECTION_MAP = 0x8512;
constexpr GLenum	GL_REFLECTION_MAP_ARB = 0x8512;
constexpr GLenum	GL_REFLECTION_MAP_EXT = 0x8512;
constexpr GLenum	GL_REFLECTION_MAP_NV = 0x8512;
constexpr GLenum	GL_REGISTER_COMBINERS_NV = 0x8522;
constexpr GLenum	GL_REG_0_ATI = 0x8921;
constexpr GLenum	GL_REG_1_ATI = 0x8922;
constexpr GLenum	GL_REG_2_ATI = 0x8923;
constexpr GLenum	GL_REG_3_ATI = 0x8924;
constexpr GLenum	GL_REG_4_ATI = 0x8925;
constexpr GLenum	GL_REG_5_ATI = 0x8926;
constexpr GLenum	GL_RELATIVE_ARC_TO_NV = 0xFF;
constexpr GLenum	GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
constexpr GLenum	GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
constexpr GLenum	GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
constexpr GLenum	GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
constexpr GLenum	GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
constexpr GLenum	GL_RELATIVE_LINE_TO_NV = 0x05;
constexpr GLenum	GL_RELATIVE_MOVE_TO_NV = 0x03;
constexpr GLenum	GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
constexpr GLenum	GL_RELATIVE_RECT_NV = 0xF7;
constexpr GLenum	GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
constexpr GLenum	GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
constexpr GLenum	GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
constexpr GLenum	GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
constexpr GLenum	GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
constexpr GLenum	GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
constexpr GLenum	GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
constexpr GLenum	GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
constexpr GLenum	GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
constexpr GLenum	GL_RELEASED_APPLE = 0x8A19;
constexpr GLenum	GL_RENDERBUFFER = 0x8D41;
constexpr GLenum	GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
constexpr GLenum	GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
constexpr GLenum	GL_RENDERBUFFER_BINDING = 0x8CA7;
constexpr GLenum	GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
constexpr GLenum	GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
constexpr GLenum	GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
constexpr GLenum	GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
constexpr GLenum	GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
constexpr GLenum	GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
constexpr GLenum	GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
constexpr GLenum	GL_RENDERBUFFER_EXT = 0x8D41;
constexpr GLenum	GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
constexpr GLenum	GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
constexpr GLenum	GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
constexpr GLenum	GL_RENDERBUFFER_HEIGHT = 0x8D43;
constexpr GLenum	GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
constexpr GLenum	GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
constexpr GLenum	GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
constexpr GLenum	GL_RENDERBUFFER_RED_SIZE = 0x8D50;
constexpr GLenum	GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
constexpr GLenum	GL_RENDERBUFFER_SAMPLES = 0x8CAB;
constexpr GLenum	GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
constexpr GLenum	GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
constexpr GLenum	GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
constexpr GLenum	GL_RENDERBUFFER_WIDTH = 0x8D42;
constexpr GLenum	GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
constexpr GLenum	GL_RENDER_GPU_MASK_NV = 0x9558;
constexpr GLenum	GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
constexpr GLenum	GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
constexpr GLenum	GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
constexpr GLenum	GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
constexpr GLenum	GL_REPLACEMENT_CODE_SUN = 0x81D8;
constexpr GLenum	GL_REPLACE_EXT = 0x8062;
constexpr GLenum	GL_REPLACE_MIDDLE_SUN = 0x0002;
constexpr GLenum	GL_REPLACE_OLDEST_SUN = 0x0003;
constexpr GLenum	GL_REPLACE_VALUE_AMD = 0x874B;
constexpr GLenum	GL_REPLICATE_BORDER = 0x8153;
constexpr GLenum	GL_RESAMPLE_AVERAGE_OML = 0x8988;
constexpr GLenum	GL_RESAMPLE_DECIMATE_OML = 0x8989;
constexpr GLenum	GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
constexpr GLenum	GL_RESAMPLE_REPLICATE_OML = 0x8986;
constexpr GLenum	GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
constexpr GLenum	GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
constexpr GLenum	GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
constexpr GLenum	GL_RESCALE_NORMAL = 0x803A;
constexpr GLenum	GL_RESCALE_NORMAL_EXT = 0x803A;
constexpr GLenum	GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
constexpr GLenum	GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
constexpr GLenum	GL_RESTART_PATH_NV = 0xF0;
constexpr GLenum	GL_RESTART_SUN = 0x0001;
constexpr GLenum	GL_RETAINED_APPLE = 0x8A1B;
constexpr GLenum	GL_RG = 0x8227;
constexpr GLenum	GL_RG16 = 0x822C;
constexpr GLenum	GL_RG16F = 0x822F;
constexpr GLenum	GL_RG16I = 0x8239;
constexpr GLenum	GL_RG16UI = 0x823A;
constexpr GLenum	GL_RG16_SNORM = 0x8F99;
constexpr GLenum	GL_RG32F = 0x8230;
constexpr GLenum	GL_RG32I = 0x823B;
constexpr GLenum	GL_RG32UI = 0x823C;
constexpr GLenum	GL_RG8 = 0x822B;
constexpr GLenum	GL_RG8I = 0x8237;
constexpr GLenum	GL_RG8UI = 0x8238;
constexpr GLenum	GL_RG8_SNORM = 0x8F95;
constexpr GLenum	GL_RGB10_A2UI = 0x906F;
constexpr GLenum	GL_RGB10_A2_EXT = 0x8059;
constexpr GLenum	GL_RGB10_EXT = 0x8052;
constexpr GLenum	GL_RGB12_EXT = 0x8053;
constexpr GLenum	GL_RGB16F = 0x881B;
constexpr GLenum	GL_RGB16F_ARB = 0x881B;
constexpr GLenum	GL_RGB16I = 0x8D89;
constexpr GLenum	GL_RGB16I_EXT = 0x8D89;
constexpr GLenum	GL_RGB16UI = 0x8D77;
constexpr GLenum	GL_RGB16UI_EXT = 0x8D77;
constexpr GLenum	GL_RGB16_EXT = 0x8054;
constexpr GLenum	GL_RGB16_SNORM = 0x8F9A;
constexpr GLenum	GL_RGB2_EXT = 0x804E;
constexpr GLenum	GL_RGB32F = 0x8815;
constexpr GLenum	GL_RGB32F_ARB = 0x8815;
constexpr GLenum	GL_RGB32I = 0x8D83;
constexpr GLenum	GL_RGB32I_EXT = 0x8D83;
constexpr GLenum	GL_RGB32UI = 0x8D71;
constexpr GLenum	GL_RGB32UI_EXT = 0x8D71;
constexpr GLenum	GL_RGB4_EXT = 0x804F;
constexpr GLenum	GL_RGB4_S3TC = 0x83A1;
constexpr GLenum	GL_RGB565 = 0x8D62;
constexpr GLenum	GL_RGB5_A1_EXT = 0x8057;
constexpr GLenum	GL_RGB5_EXT = 0x8050;
constexpr GLenum	GL_RGB8I = 0x8D8F;
constexpr GLenum	GL_RGB8I_EXT = 0x8D8F;
constexpr GLenum	GL_RGB8UI = 0x8D7D;
constexpr GLenum	GL_RGB8UI_EXT = 0x8D7D;
constexpr GLenum	GL_RGB8_EXT = 0x8051;
constexpr GLenum	GL_RGB8_SNORM = 0x8F96;
constexpr GLenum	GL_RGB9_E5 = 0x8C3D;
constexpr GLenum	GL_RGB9_E5_EXT = 0x8C3D;
constexpr GLenum	GL_RGBA12_EXT = 0x805A;
constexpr GLenum	GL_RGBA16F = 0x881A;
constexpr GLenum	GL_RGBA16F_ARB = 0x881A;
constexpr GLenum	GL_RGBA16I = 0x8D88;
constexpr GLenum	GL_RGBA16I_EXT = 0x8D88;
constexpr GLenum	GL_RGBA16UI = 0x8D76;
constexpr GLenum	GL_RGBA16UI_EXT = 0x8D76;
constexpr GLenum	GL_RGBA16_EXT = 0x805B;
constexpr GLenum	GL_RGBA16_SNORM = 0x8F9B;
constexpr GLenum	GL_RGBA2_EXT = 0x8055;
constexpr GLenum	GL_RGBA32F = 0x8814;
constexpr GLenum	GL_RGBA32F_ARB = 0x8814;
constexpr GLenum	GL_RGBA32I = 0x8D82;
constexpr GLenum	GL_RGBA32I_EXT = 0x8D82;
constexpr GLenum	GL_RGBA32UI = 0x8D70;
constexpr GLenum	GL_RGBA32UI_EXT = 0x8D70;
constexpr GLenum	GL_RGBA4_DXT5_S3TC = 0x83A5;
constexpr GLenum	GL_RGBA4_EXT = 0x8056;
constexpr GLenum	GL_RGBA4_S3TC = 0x83A3;
constexpr GLenum	GL_RGBA8I = 0x8D8E;
constexpr GLenum	GL_RGBA8I_EXT = 0x8D8E;
constexpr GLenum	GL_RGBA8UI = 0x8D7C;
constexpr GLenum	GL_RGBA8UI_EXT = 0x8D7C;
constexpr GLenum	GL_RGBA8_EXT = 0x8058;
constexpr GLenum	GL_RGBA8_SNORM = 0x8F97;
constexpr GLenum	GL_RGBA_DXT5_S3TC = 0x83A4;
constexpr GLenum	GL_RGBA_FLOAT16_APPLE = 0x881A;
constexpr GLenum	GL_RGBA_FLOAT16_ATI = 0x881A;
constexpr GLenum	GL_RGBA_FLOAT32_APPLE = 0x8814;
constexpr GLenum	GL_RGBA_FLOAT32_ATI = 0x8814;
constexpr GLenum	GL_RGBA_FLOAT_MODE_ARB = 0x8820;
constexpr GLenum	GL_RGBA_FLOAT_MODE_ATI = 0x8820;
constexpr GLenum	GL_RGBA_INTEGER = 0x8D99;
constexpr GLenum	GL_RGBA_INTEGER_EXT = 0x8D99;
constexpr GLenum	GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
constexpr GLenum	GL_RGBA_S3TC = 0x83A2;
constexpr GLenum	GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
constexpr GLenum	GL_RGBA_SNORM = 0x8F93;
constexpr GLenum	GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
constexpr GLenum	GL_RGB_422_APPLE = 0x8A1F;
constexpr GLenum	GL_RGB_FLOAT16_APPLE = 0x881B;
constexpr GLenum	GL_RGB_FLOAT16_ATI = 0x881B;
constexpr GLenum	GL_RGB_FLOAT32_APPLE = 0x8815;
constexpr GLenum	GL_RGB_FLOAT32_ATI = 0x8815;
constexpr GLenum	GL_RGB_INTEGER = 0x8D98;
constexpr GLenum	GL_RGB_INTEGER_EXT = 0x8D98;
constexpr GLenum	GL_RGB_RAW_422_APPLE = 0x8A51;
constexpr GLenum	GL_RGB_S3TC = 0x83A0;
constexpr GLenum	GL_RGB_SCALE = 0x8573;
constexpr GLenum	GL_RGB_SCALE_ARB = 0x8573;
constexpr GLenum	GL_RGB_SCALE_EXT = 0x8573;
constexpr GLenum	GL_RGB_SNORM = 0x8F92;
constexpr GLenum	GL_RG_INTEGER = 0x8228;
constexpr GLenum	GL_RG_SNORM = 0x8F91;
constexpr GLenum	GL_ROUNDED_RECT2_NV = 0xEA;
constexpr GLenum	GL_ROUNDED_RECT4_NV = 0xEC;
constexpr GLenum	GL_ROUNDED_RECT8_NV = 0xEE;
constexpr GLenum	GL_ROUNDED_RECT_NV = 0xE8;
constexpr GLenum	GL_ROUND_NV = 0x90A4;
constexpr GLenum	GL_SAMPLER = 0x82E6;
constexpr GLenum	GL_SAMPLER_1D = 0x8B5D;
constexpr GLenum	GL_SAMPLER_1D_ARB = 0x8B5D;
constexpr GLenum	GL_SAMPLER_1D_ARRAY = 0x8DC0;
constexpr GLenum	GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
constexpr GLenum	GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
constexpr GLenum	GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
constexpr GLenum	GL_SAMPLER_1D_SHADOW = 0x8B61;
constexpr GLenum	GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
constexpr GLenum	GL_SAMPLER_2D = 0x8B5E;
constexpr GLenum	GL_SAMPLER_2D_ARB = 0x8B5E;
constexpr GLenum	GL_SAMPLER_2D_ARRAY = 0x8DC1;
constexpr GLenum	GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
constexpr GLenum	GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
constexpr GLenum	GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
constexpr GLenum	GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
constexpr GLenum	GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
constexpr GLenum	GL_SAMPLER_2D_RECT = 0x8B63;
constexpr GLenum	GL_SAMPLER_2D_RECT_ARB = 0x8B63;
constexpr GLenum	GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
constexpr GLenum	GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
constexpr GLenum	GL_SAMPLER_2D_SHADOW = 0x8B62;
constexpr GLenum	GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
constexpr GLenum	GL_SAMPLER_3D = 0x8B5F;
constexpr GLenum	GL_SAMPLER_3D_ARB = 0x8B5F;
constexpr GLenum	GL_SAMPLER_BINDING = 0x8919;
constexpr GLenum	GL_SAMPLER_BUFFER = 0x8DC2;
constexpr GLenum	GL_SAMPLER_BUFFER_AMD = 0x9001;
constexpr GLenum	GL_SAMPLER_BUFFER_EXT = 0x8DC2;
constexpr GLenum	GL_SAMPLER_CUBE = 0x8B60;
constexpr GLenum	GL_SAMPLER_CUBE_ARB = 0x8B60;
constexpr GLenum	GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
constexpr GLenum	GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
constexpr GLenum	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
constexpr GLenum	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
constexpr GLenum	GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
constexpr GLenum	GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
constexpr GLenum	GL_SAMPLER_OBJECT_AMD = 0x9155;
constexpr GLenum	GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
constexpr GLenum	GL_SAMPLES = 0x80A9;
constexpr GLenum	GL_SAMPLES_3DFX = 0x86B4;
constexpr GLenum	GL_SAMPLES_ARB = 0x80A9;
constexpr GLenum	GL_SAMPLES_EXT = 0x80A9;
constexpr GLenum	GL_SAMPLES_PASSED = 0x8914;
constexpr GLenum	GL_SAMPLES_PASSED_ARB = 0x8914;
constexpr GLenum	GL_SAMPLES_SGIS = 0x80A9;
constexpr GLenum	GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
constexpr GLenum	GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
constexpr GLenum	GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
constexpr GLenum	GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
constexpr GLenum	GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
constexpr GLenum	GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
constexpr GLenum	GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
constexpr GLenum	GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
constexpr GLenum	GL_SAMPLE_BUFFERS = 0x80A8;
constexpr GLenum	GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
constexpr GLenum	GL_SAMPLE_BUFFERS_ARB = 0x80A8;
constexpr GLenum	GL_SAMPLE_BUFFERS_EXT = 0x80A8;
constexpr GLenum	GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
constexpr GLenum	GL_SAMPLE_COVERAGE = 0x80A0;
constexpr GLenum	GL_SAMPLE_COVERAGE_ARB = 0x80A0;
constexpr GLenum	GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
constexpr GLenum	GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
constexpr GLenum	GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
constexpr GLenum	GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
constexpr GLenum	GL_SAMPLE_LOCATION_ARB = 0x8E50;
constexpr GLenum	GL_SAMPLE_LOCATION_NV = 0x8E50;
constexpr GLenum	GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
constexpr GLenum	GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
constexpr GLenum	GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
constexpr GLenum	GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
constexpr GLenum	GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
constexpr GLenum	GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
constexpr GLenum	GL_SAMPLE_MASK = 0x8E51;
constexpr GLenum	GL_SAMPLE_MASK_EXT = 0x80A0;
constexpr GLenum	GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
constexpr GLenum	GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
constexpr GLenum	GL_SAMPLE_MASK_NV = 0x8E51;
constexpr GLenum	GL_SAMPLE_MASK_SGIS = 0x80A0;
constexpr GLenum	GL_SAMPLE_MASK_VALUE = 0x8E52;
constexpr GLenum	GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
constexpr GLenum	GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
constexpr GLenum	GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
constexpr GLenum	GL_SAMPLE_PATTERN_EXT = 0x80AC;
constexpr GLenum	GL_SAMPLE_PATTERN_SGIS = 0x80AC;
constexpr GLenum	GL_SAMPLE_POSITION = 0x8E50;
constexpr GLenum	GL_SAMPLE_POSITION_NV = 0x8E50;
constexpr GLenum	GL_SAMPLE_SHADING = 0x8C36;
constexpr GLenum	GL_SAMPLE_SHADING_ARB = 0x8C36;
constexpr GLenum	GL_SATURATE_BIT_ATI = 0x00000040;
constexpr GLenum	GL_SCALAR_EXT = 0x87BE;
constexpr GLenum	GL_SCALEBIAS_HINT_SGIX = 0x8322;
constexpr GLenum	GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
constexpr GLenum	GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
constexpr GLenum	GL_SCALE_BY_FOUR_NV = 0x853F;
constexpr GLenum	GL_SCALE_BY_ONE_HALF_NV = 0x8540;
constexpr GLenum	GL_SCALE_BY_TWO_NV = 0x853E;
constexpr GLenum	GL_SCISSOR_COMMAND_NV = 0x0011;
constexpr GLenum	GL_SCREEN_COORDINATES_REND = 0x8490;
constexpr GLenum	GL_SCREEN_KHR = 0x9295;
constexpr GLenum	GL_SCREEN_NV = 0x9295;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY = 0x845E;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
constexpr GLenum	GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
constexpr GLenum	GL_SECONDARY_COLOR_NV = 0x852D;
constexpr GLenum	GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
constexpr GLenum	GL_SEPARABLE_2D = 0x8012;
constexpr GLenum	GL_SEPARABLE_2D_EXT = 0x8012;
constexpr GLenum	GL_SEPARATE_ATTRIBS = 0x8C8D;
constexpr GLenum	GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
constexpr GLenum	GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
constexpr GLenum	GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
constexpr GLenum	GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
constexpr GLenum	GL_SET_AMD = 0x874A;
constexpr GLenum	GL_SHADER = 0x82E1;
constexpr GLenum	GL_SHADER_BINARY_FORMATS = 0x8DF8;
constexpr GLenum	GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
constexpr GLenum	GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551;
constexpr GLenum	GL_SHADER_COMPILER = 0x8DFA;
constexpr GLenum	GL_SHADER_CONSISTENT_NV = 0x86DD;
constexpr GLenum	GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
constexpr GLenum	GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
constexpr GLenum	GL_SHADER_IMAGE_ATOMIC = 0x82A6;
constexpr GLenum	GL_SHADER_IMAGE_LOAD = 0x82A4;
constexpr GLenum	GL_SHADER_IMAGE_STORE = 0x82A5;
constexpr GLenum	GL_SHADER_INCLUDE_ARB = 0x8DAE;
constexpr GLenum	GL_SHADER_OBJECT_ARB = 0x8B48;
constexpr GLenum	GL_SHADER_OBJECT_EXT = 0x8B48;
constexpr GLenum	GL_SHADER_OPERATION_NV = 0x86DF;
constexpr GLenum	GL_SHADER_SOURCE_LENGTH = 0x8B88;
constexpr GLenum	GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
constexpr GLenum	GL_SHADER_STORAGE_BLOCK = 0x92E6;
constexpr GLenum	GL_SHADER_STORAGE_BUFFER = 0x90D2;
constexpr GLenum	GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
constexpr GLenum	GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
constexpr GLenum	GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
constexpr GLenum	GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
constexpr GLenum	GL_SHADER_TYPE = 0x8B4F;
constexpr GLenum	GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
constexpr GLenum	GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
constexpr GLenum	GL_SHADOW_AMBIENT_SGIX = 0x80BF;
constexpr GLenum	GL_SHADOW_ATTENUATION_EXT = 0x834E;
constexpr GLenum	GL_SHARED_EDGE_NV = 0xC0;
constexpr GLenum	GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
constexpr GLenum	GL_SIGNALED = 0x9119;
constexpr GLenum	GL_SIGNED_ALPHA8_NV = 0x8706;
constexpr GLenum	GL_SIGNED_ALPHA_NV = 0x8705;
constexpr GLenum	GL_SIGNED_HILO16_NV = 0x86FA;
constexpr GLenum	GL_SIGNED_HILO8_NV = 0x885F;
constexpr GLenum	GL_SIGNED_HILO_NV = 0x86F9;
constexpr GLenum	GL_SIGNED_IDENTITY_NV = 0x853C;
constexpr GLenum	GL_SIGNED_INTENSITY8_NV = 0x8708;
constexpr GLenum	GL_SIGNED_INTENSITY_NV = 0x8707;
constexpr GLenum	GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
constexpr GLenum	GL_SIGNED_LUMINANCE8_NV = 0x8702;
constexpr GLenum	GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
constexpr GLenum	GL_SIGNED_LUMINANCE_NV = 0x8701;
constexpr GLenum	GL_SIGNED_NEGATE_NV = 0x853D;
constexpr GLenum	GL_SIGNED_NORMALIZED = 0x8F9C;
constexpr GLenum	GL_SIGNED_RGB8_NV = 0x86FF;
constexpr GLenum	GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
constexpr GLenum	GL_SIGNED_RGBA8_NV = 0x86FC;
constexpr GLenum	GL_SIGNED_RGBA_NV = 0x86FB;
constexpr GLenum	GL_SIGNED_RGB_NV = 0x86FE;
constexpr GLenum	GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
constexpr GLenum	GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
constexpr GLenum	GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
constexpr GLenum	GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
constexpr GLenum	GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
constexpr GLenum	GL_SINGLE_COLOR = 0x81F9;
constexpr GLenum	GL_SINGLE_COLOR_EXT = 0x81F9;
constexpr GLenum	GL_SKIP_DECODE_EXT = 0x8A4A;
constexpr GLenum	GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
constexpr GLenum	GL_SLICE_ACCUM_SUN = 0x85CC;
constexpr GLenum	GL_SLUMINANCE = 0x8C46;
constexpr GLenum	GL_SLUMINANCE8 = 0x8C47;
constexpr GLenum	GL_SLUMINANCE8_ALPHA8 = 0x8C45;
constexpr GLenum	GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
constexpr GLenum	GL_SLUMINANCE8_EXT = 0x8C47;
constexpr GLenum	GL_SLUMINANCE_ALPHA = 0x8C44;
constexpr GLenum	GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
constexpr GLenum	GL_SLUMINANCE_EXT = 0x8C46;
constexpr GLenum	GL_SMALL_CCW_ARC_TO_NV = 0x12;
constexpr GLenum	GL_SMALL_CW_ARC_TO_NV = 0x14;
constexpr GLenum	GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
constexpr GLenum	GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
constexpr GLenum	GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
constexpr GLenum	GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
constexpr GLenum	GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
constexpr GLenum	GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
constexpr GLenum	GL_SM_COUNT_NV = 0x933B;
constexpr GLenum	GL_SOFTLIGHT_KHR = 0x929C;
constexpr GLenum	GL_SOFTLIGHT_NV = 0x929C;
constexpr GLenum	GL_SOURCE0_ALPHA = 0x8588;
constexpr GLenum	GL_SOURCE0_ALPHA_ARB = 0x8588;
constexpr GLenum	GL_SOURCE0_ALPHA_EXT = 0x8588;
constexpr GLenum	GL_SOURCE0_RGB = 0x8580;
constexpr GLenum	GL_SOURCE0_RGB_ARB = 0x8580;
constexpr GLenum	GL_SOURCE0_RGB_EXT = 0x8580;
constexpr GLenum	GL_SOURCE1_ALPHA = 0x8589;
constexpr GLenum	GL_SOURCE1_ALPHA_ARB = 0x8589;
constexpr GLenum	GL_SOURCE1_ALPHA_EXT = 0x8589;
constexpr GLenum	GL_SOURCE1_RGB = 0x8581;
constexpr GLenum	GL_SOURCE1_RGB_ARB = 0x8581;
constexpr GLenum	GL_SOURCE1_RGB_EXT = 0x8581;
constexpr GLenum	GL_SOURCE2_ALPHA = 0x858A;
constexpr GLenum	GL_SOURCE2_ALPHA_ARB = 0x858A;
constexpr GLenum	GL_SOURCE2_ALPHA_EXT = 0x858A;
constexpr GLenum	GL_SOURCE2_RGB = 0x8582;
constexpr GLenum	GL_SOURCE2_RGB_ARB = 0x8582;
constexpr GLenum	GL_SOURCE2_RGB_EXT = 0x8582;
constexpr GLenum	GL_SOURCE3_ALPHA_NV = 0x858B;
constexpr GLenum	GL_SOURCE3_RGB_NV = 0x8583;
constexpr GLenum	GL_SPARE0_NV = 0x852E;
constexpr GLenum	GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
constexpr GLenum	GL_SPARE1_NV = 0x852F;
constexpr GLenum	GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
constexpr GLenum	GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
constexpr GLenum	GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
constexpr GLenum	GL_SPIR_V_BINARY = 0x9552;
constexpr GLenum	GL_SPIR_V_BINARY_ARB = 0x9552;
constexpr GLenum	GL_SPIR_V_EXTENSIONS = 0x9553;
constexpr GLenum	GL_SQUARE_NV = 0x90A3;
constexpr GLenum	GL_SR8_EXT = 0x8FBD;
constexpr GLenum	GL_SRC0_ALPHA = 0x8588;
constexpr GLenum	GL_SRC0_RGB = 0x8580;
constexpr GLenum	GL_SRC1_ALPHA = 0x8589;
constexpr GLenum	GL_SRC1_COLOR = 0x88F9;
constexpr GLenum	GL_SRC1_RGB = 0x8581;
constexpr GLenum	GL_SRC2_ALPHA = 0x858A;
constexpr GLenum	GL_SRC2_RGB = 0x8582;
constexpr GLenum	GL_SRC_ATOP_NV = 0x928E;
constexpr GLenum	GL_SRC_IN_NV = 0x928A;
constexpr GLenum	GL_SRC_NV = 0x9286;
constexpr GLenum	GL_SRC_OUT_NV = 0x928C;
constexpr GLenum	GL_SRC_OVER_NV = 0x9288;
constexpr GLenum	GL_SRGB = 0x8C40;
constexpr GLenum	GL_SRGB8 = 0x8C41;
constexpr GLenum	GL_SRGB8_ALPHA8 = 0x8C43;
constexpr GLenum	GL_SRGB8_ALPHA8_EXT = 0x8C43;
constexpr GLenum	GL_SRGB8_EXT = 0x8C41;
constexpr GLenum	GL_SRGB_ALPHA = 0x8C42;
constexpr GLenum	GL_SRGB_ALPHA_EXT = 0x8C42;
constexpr GLenum	GL_SRGB_DECODE_ARB = 0x8299;
constexpr GLenum	GL_SRGB_EXT = 0x8C40;
constexpr GLenum	GL_SRGB_READ = 0x8297;
constexpr GLenum	GL_SRGB_WRITE = 0x8298;
constexpr GLenum	GL_STANDARD_FONT_FORMAT_NV = 0x936C;
constexpr GLenum	GL_STANDARD_FONT_NAME_NV = 0x9072;
constexpr GLenum	GL_STATIC_ATI = 0x8760;
constexpr GLenum	GL_STATIC_COPY = 0x88E6;
constexpr GLenum	GL_STATIC_COPY_ARB = 0x88E6;
constexpr GLenum	GL_STATIC_DRAW = 0x88E4;
constexpr GLenum	GL_STATIC_DRAW_ARB = 0x88E4;
constexpr GLenum	GL_STATIC_READ = 0x88E5;
constexpr GLenum	GL_STATIC_READ_ARB = 0x88E5;
constexpr GLenum	GL_STATIC_VERTEX_ARRAY_IBM = 103061;
constexpr GLenum	GL_STENCIL_ATTACHMENT = 0x8D20;
constexpr GLenum	GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
constexpr GLenum	GL_STENCIL_BACK_FAIL = 0x8801;
constexpr GLenum	GL_STENCIL_BACK_FAIL_ATI = 0x8801;
constexpr GLenum	GL_STENCIL_BACK_FUNC = 0x8800;
constexpr GLenum	GL_STENCIL_BACK_FUNC_ATI = 0x8800;
constexpr GLenum	GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
constexpr GLenum	GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
constexpr GLenum	GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
constexpr GLenum	GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
constexpr GLenum	GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
constexpr GLenum	GL_STENCIL_BACK_REF = 0x8CA3;
constexpr GLenum	GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
constexpr GLenum	GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
constexpr GLenum	GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
constexpr GLenum	GL_STENCIL_COMPONENTS = 0x8285;
constexpr GLenum	GL_STENCIL_INDEX1 = 0x8D46;
constexpr GLenum	GL_STENCIL_INDEX16 = 0x8D49;
constexpr GLenum	GL_STENCIL_INDEX16_EXT = 0x8D49;
constexpr GLenum	GL_STENCIL_INDEX1_EXT = 0x8D46;
constexpr GLenum	GL_STENCIL_INDEX4 = 0x8D47;
constexpr GLenum	GL_STENCIL_INDEX4_EXT = 0x8D47;
constexpr GLenum	GL_STENCIL_INDEX8 = 0x8D48;
constexpr GLenum	GL_STENCIL_INDEX8_EXT = 0x8D48;
constexpr GLenum	GL_STENCIL_OP_VALUE_AMD = 0x874C;
constexpr GLenum	GL_STENCIL_REF_COMMAND_NV = 0x000C;
constexpr GLenum	GL_STENCIL_RENDERABLE = 0x8288;
constexpr GLenum	GL_STENCIL_SAMPLES_NV = 0x932E;
constexpr GLenum	GL_STENCIL_TAG_BITS_EXT = 0x88F2;
constexpr GLenum	GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
constexpr GLenum	GL_STORAGE_CACHED_APPLE = 0x85BE;
constexpr GLenum	GL_STORAGE_CLIENT_APPLE = 0x85B4;
constexpr GLenum	GL_STORAGE_PRIVATE_APPLE = 0x85BD;
constexpr GLenum	GL_STORAGE_SHARED_APPLE = 0x85BF;
constexpr GLenum	GL_STREAM_COPY = 0x88E2;
constexpr GLenum	GL_STREAM_COPY_ARB = 0x88E2;
constexpr GLenum	GL_STREAM_DRAW = 0x88E0;
constexpr GLenum	GL_STREAM_DRAW_ARB = 0x88E0;
constexpr GLenum	GL_STREAM_RASTERIZATION_AMD = 0x91A0;
constexpr GLenum	GL_STREAM_READ = 0x88E1;
constexpr GLenum	GL_STREAM_READ_ARB = 0x88E1;
constexpr GLenum	GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
constexpr GLenum	GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
constexpr GLenum	GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
constexpr GLenum	GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
constexpr GLenum	GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
constexpr GLenum	GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
constexpr GLenum	GL_SUBTRACT = 0x84E7;
constexpr GLenum	GL_SUBTRACT_ARB = 0x84E7;
constexpr GLenum	GL_SUB_ATI = 0x8965;
constexpr GLenum	GL_SUCCESS_NV = 0x902F;
constexpr GLenum	GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
constexpr GLenum	GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
constexpr GLenum	GL_SURFACE_MAPPED_NV = 0x8700;
constexpr GLenum	GL_SURFACE_REGISTERED_NV = 0x86FD;
constexpr GLenum	GL_SURFACE_STATE_NV = 0x86EB;
constexpr GLenum	GL_SWIZZLE_STQ_ATI = 0x8977;
constexpr GLenum	GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
constexpr GLenum	GL_SWIZZLE_STRQ_ATI = 0x897A;
constexpr GLenum	GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
constexpr GLenum	GL_SWIZZLE_STR_ATI = 0x8976;
constexpr GLenum	GL_SWIZZLE_STR_DR_ATI = 0x8978;
constexpr GLenum	GL_SYNC_CL_EVENT_ARB = 0x8240;
constexpr GLenum	GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
constexpr GLenum	GL_SYNC_CONDITION = 0x9113;
constexpr GLenum	GL_SYNC_FENCE = 0x9116;
constexpr GLenum	GL_SYNC_FLAGS = 0x9115;
constexpr GLenum	GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
constexpr GLenum	GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
constexpr GLenum	GL_SYNC_STATUS = 0x9114;
constexpr GLenum	GL_SYNC_X11_FENCE_EXT = 0x90E1;
constexpr GLenum	GL_SYSTEM_FONT_NAME_NV = 0x9073;
constexpr GLenum	GL_TABLE_TOO_LARGE = 0x8031;
constexpr GLenum	GL_TANGENT_ARRAY_EXT = 0x8439;
constexpr GLenum	GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
constexpr GLenum	GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
constexpr GLenum	GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
constexpr GLenum	GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
constexpr GLenum	GL_TESSELLATION_FACTOR_AMD = 0x9005;
constexpr GLenum	GL_TESSELLATION_MODE_AMD = 0x9004;
constexpr GLenum	GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
constexpr GLenum	GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
constexpr GLenum	GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
constexpr GLenum	GL_TESS_CONTROL_SHADER = 0x8E88;
constexpr GLenum	GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
constexpr GLenum	GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
constexpr GLenum	GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
constexpr GLenum	GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
constexpr GLenum	GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
constexpr GLenum	GL_TESS_CONTROL_TEXTURE = 0x829C;
constexpr GLenum	GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
constexpr GLenum	GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
constexpr GLenum	GL_TESS_EVALUATION_SHADER = 0x8E87;
constexpr GLenum	GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
constexpr GLenum	GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
constexpr GLenum	GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
constexpr GLenum	GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
constexpr GLenum	GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
constexpr GLenum	GL_TESS_EVALUATION_TEXTURE = 0x829D;
constexpr GLenum	GL_TESS_GEN_MODE = 0x8E76;
constexpr GLenum	GL_TESS_GEN_POINT_MODE = 0x8E79;
constexpr GLenum	GL_TESS_GEN_SPACING = 0x8E77;
constexpr GLenum	GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
constexpr GLenum	GL_TEXCOORD1_BIT_PGI = 0x10000000;
constexpr GLenum	GL_TEXCOORD2_BIT_PGI = 0x20000000;
constexpr GLenum	GL_TEXCOORD3_BIT_PGI = 0x40000000;
constexpr GLenum	GL_TEXCOORD4_BIT_PGI = 0x80000000;
constexpr GLenum	GL_TEXTURE0 = 0x84C0;
constexpr GLenum	GL_TEXTURE0_ARB = 0x84C0;
constexpr GLenum	GL_TEXTURE1 = 0x84C1;
constexpr GLenum	GL_TEXTURE10 = 0x84CA;
constexpr GLenum	GL_TEXTURE10_ARB = 0x84CA;
constexpr GLenum	GL_TEXTURE11 = 0x84CB;
constexpr GLenum	GL_TEXTURE11_ARB = 0x84CB;
constexpr GLenum	GL_TEXTURE12 = 0x84CC;
constexpr GLenum	GL_TEXTURE12_ARB = 0x84CC;
constexpr GLenum	GL_TEXTURE13 = 0x84CD;
constexpr GLenum	GL_TEXTURE13_ARB = 0x84CD;
constexpr GLenum	GL_TEXTURE14 = 0x84CE;
constexpr GLenum	GL_TEXTURE14_ARB = 0x84CE;
constexpr GLenum	GL_TEXTURE15 = 0x84CF;
constexpr GLenum	GL_TEXTURE15_ARB = 0x84CF;
constexpr GLenum	GL_TEXTURE16 = 0x84D0;
constexpr GLenum	GL_TEXTURE16_ARB = 0x84D0;
constexpr GLenum	GL_TEXTURE17 = 0x84D1;
constexpr GLenum	GL_TEXTURE17_ARB = 0x84D1;
constexpr GLenum	GL_TEXTURE18 = 0x84D2;
constexpr GLenum	GL_TEXTURE18_ARB = 0x84D2;
constexpr GLenum	GL_TEXTURE19 = 0x84D3;
constexpr GLenum	GL_TEXTURE19_ARB = 0x84D3;
constexpr GLenum	GL_TEXTURE1_ARB = 0x84C1;
constexpr GLenum	GL_TEXTURE2 = 0x84C2;
constexpr GLenum	GL_TEXTURE20 = 0x84D4;
constexpr GLenum	GL_TEXTURE20_ARB = 0x84D4;
constexpr GLenum	GL_TEXTURE21 = 0x84D5;
constexpr GLenum	GL_TEXTURE21_ARB = 0x84D5;
constexpr GLenum	GL_TEXTURE22 = 0x84D6;
constexpr GLenum	GL_TEXTURE22_ARB = 0x84D6;
constexpr GLenum	GL_TEXTURE23 = 0x84D7;
constexpr GLenum	GL_TEXTURE23_ARB = 0x84D7;
constexpr GLenum	GL_TEXTURE24 = 0x84D8;
constexpr GLenum	GL_TEXTURE24_ARB = 0x84D8;
constexpr GLenum	GL_TEXTURE25 = 0x84D9;
constexpr GLenum	GL_TEXTURE25_ARB = 0x84D9;
constexpr GLenum	GL_TEXTURE26 = 0x84DA;
constexpr GLenum	GL_TEXTURE26_ARB = 0x84DA;
constexpr GLenum	GL_TEXTURE27 = 0x84DB;
constexpr GLenum	GL_TEXTURE27_ARB = 0x84DB;
constexpr GLenum	GL_TEXTURE28 = 0x84DC;
constexpr GLenum	GL_TEXTURE28_ARB = 0x84DC;
constexpr GLenum	GL_TEXTURE29 = 0x84DD;
constexpr GLenum	GL_TEXTURE29_ARB = 0x84DD;
constexpr GLenum	GL_TEXTURE2_ARB = 0x84C2;
constexpr GLenum	GL_TEXTURE3 = 0x84C3;
constexpr GLenum	GL_TEXTURE30 = 0x84DE;
constexpr GLenum	GL_TEXTURE30_ARB = 0x84DE;
constexpr GLenum	GL_TEXTURE31 = 0x84DF;
constexpr GLenum	GL_TEXTURE31_ARB = 0x84DF;
constexpr GLenum	GL_TEXTURE3_ARB = 0x84C3;
constexpr GLenum	GL_TEXTURE4 = 0x84C4;
constexpr GLenum	GL_TEXTURE4_ARB = 0x84C4;
constexpr GLenum	GL_TEXTURE5 = 0x84C5;
constexpr GLenum	GL_TEXTURE5_ARB = 0x84C5;
constexpr GLenum	GL_TEXTURE6 = 0x84C6;
constexpr GLenum	GL_TEXTURE6_ARB = 0x84C6;
constexpr GLenum	GL_TEXTURE7 = 0x84C7;
constexpr GLenum	GL_TEXTURE7_ARB = 0x84C7;
constexpr GLenum	GL_TEXTURE8 = 0x84C8;
constexpr GLenum	GL_TEXTURE8_ARB = 0x84C8;
constexpr GLenum	GL_TEXTURE9 = 0x84C9;
constexpr GLenum	GL_TEXTURE9_ARB = 0x84C9;
constexpr GLenum	GL_TEXTURE_1D_ARRAY = 0x8C18;
constexpr GLenum	GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
constexpr GLenum	GL_TEXTURE_1D_BINDING_EXT = 0x8068;
constexpr GLenum	GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
constexpr GLenum	GL_TEXTURE_1D_STACK_MESAX = 0x8759;
constexpr GLenum	GL_TEXTURE_2D_ARRAY = 0x8C1A;
constexpr GLenum	GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
constexpr GLenum	GL_TEXTURE_2D_BINDING_EXT = 0x8069;
constexpr GLenum	GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
constexpr GLenum	GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
constexpr GLenum	GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
constexpr GLenum	GL_TEXTURE_2D_STACK_MESAX = 0x875A;
constexpr GLenum	GL_TEXTURE_3D = 0x806F;
constexpr GLenum	GL_TEXTURE_3D_BINDING_EXT = 0x806A;
constexpr GLenum	GL_TEXTURE_3D_EXT = 0x806F;
constexpr GLenum	GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
constexpr GLenum	GL_TEXTURE_ALPHA_TYPE = 0x8C13;
constexpr GLenum	GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
constexpr GLenum	GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
constexpr GLenum	GL_TEXTURE_BASE_LEVEL = 0x813C;
constexpr GLenum	GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
constexpr GLenum	GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
constexpr GLenum	GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
constexpr GLenum	GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
constexpr GLenum	GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
constexpr GLenum	GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
constexpr GLenum	GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
constexpr GLenum	GL_TEXTURE_BINDING_3D = 0x806A;
constexpr GLenum	GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
constexpr GLenum	GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
constexpr GLenum	GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
constexpr GLenum	GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
constexpr GLenum	GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
constexpr GLenum	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
constexpr GLenum	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
constexpr GLenum	GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
constexpr GLenum	GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
constexpr GLenum	GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
constexpr GLenum	GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
constexpr GLenum	GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
constexpr GLenum	GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
constexpr GLenum	GL_TEXTURE_BLUE_TYPE = 0x8C12;
constexpr GLenum	GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
constexpr GLenum	GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
constexpr GLenum	GL_TEXTURE_BUFFER = 0x8C2A;
constexpr GLenum	GL_TEXTURE_BUFFER_ARB = 0x8C2A;
constexpr GLenum	GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
constexpr GLenum	GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
constexpr GLenum	GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
constexpr GLenum	GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
constexpr GLenum	GL_TEXTURE_BUFFER_EXT = 0x8C2A;
constexpr GLenum	GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
constexpr GLenum	GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
constexpr GLenum	GL_TEXTURE_BUFFER_OFFSET = 0x919D;
constexpr GLenum	GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
constexpr GLenum	GL_TEXTURE_BUFFER_SIZE = 0x919E;
constexpr GLenum	GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
constexpr GLenum	GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
constexpr GLenum	GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
constexpr GLenum	GL_TEXTURE_COMPARE_FUNC = 0x884D;
constexpr GLenum	GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
constexpr GLenum	GL_TEXTURE_COMPARE_MODE = 0x884C;
constexpr GLenum	GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
constexpr GLenum	GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
constexpr GLenum	GL_TEXTURE_COMPARE_SGIX = 0x819A;
constexpr GLenum	GL_TEXTURE_COMPRESSED = 0x86A1;
constexpr GLenum	GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
constexpr GLenum	GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
constexpr GLenum	GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
constexpr GLenum	GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
constexpr GLenum	GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
constexpr GLenum	GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
constexpr GLenum	GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
constexpr GLenum	GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
constexpr GLenum	GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
constexpr GLenum	GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
constexpr GLenum	GL_TEXTURE_COORD_NV = 0x8C79;
constexpr GLenum	GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
constexpr GLenum	GL_TEXTURE_CUBE_MAP = 0x8513;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
constexpr GLenum	GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
constexpr GLenum	GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
constexpr GLenum	GL_TEXTURE_DEPTH = 0x8071;
constexpr GLenum	GL_TEXTURE_DEPTH_EXT = 0x8071;
constexpr GLenum	GL_TEXTURE_DEPTH_SIZE = 0x884A;
constexpr GLenum	GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
constexpr GLenum	GL_TEXTURE_DEPTH_TYPE = 0x8C16;
constexpr GLenum	GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
constexpr GLenum	GL_TEXTURE_DS_SIZE_NV = 0x871D;
constexpr GLenum	GL_TEXTURE_DT_SIZE_NV = 0x871E;
constexpr GLenum	GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
constexpr GLenum	GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
constexpr GLenum	GL_TEXTURE_FILTER_CONTROL = 0x8500;
constexpr GLenum	GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
constexpr GLenum	GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
constexpr GLenum	GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
constexpr GLenum	GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
constexpr GLenum	GL_TEXTURE_GATHER = 0x82A2;
constexpr GLenum	GL_TEXTURE_GATHER_SHADOW = 0x82A3;
constexpr GLenum	GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
constexpr GLenum	GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
constexpr GLenum	GL_TEXTURE_GREEN_TYPE = 0x8C11;
constexpr GLenum	GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
constexpr GLenum	GL_TEXTURE_HI_SIZE_NV = 0x871B;
constexpr GLenum	GL_TEXTURE_IMAGE_FORMAT = 0x828F;
constexpr GLenum	GL_TEXTURE_IMAGE_TYPE = 0x8290;
constexpr GLenum	GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
constexpr GLenum	GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
constexpr GLenum	GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
constexpr GLenum	GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
constexpr GLenum	GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
constexpr GLenum	GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
constexpr GLenum	GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
constexpr GLenum	GL_TEXTURE_LIGHT_EXT = 0x8350;
constexpr GLenum	GL_TEXTURE_LOD_BIAS = 0x8501;
constexpr GLenum	GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
constexpr GLenum	GL_TEXTURE_LO_SIZE_NV = 0x871C;
constexpr GLenum	GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
constexpr GLenum	GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
constexpr GLenum	GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
constexpr GLenum	GL_TEXTURE_MAG_SIZE_NV = 0x871F;
constexpr GLenum	GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
constexpr GLenum	GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
constexpr GLenum	GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
constexpr GLenum	GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
constexpr GLenum	GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
constexpr GLenum	GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
constexpr GLenum	GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
constexpr GLenum	GL_TEXTURE_MAX_LEVEL = 0x813D;
constexpr GLenum	GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
constexpr GLenum	GL_TEXTURE_MAX_LOD = 0x813B;
constexpr GLenum	GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
constexpr GLenum	GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
constexpr GLenum	GL_TEXTURE_MIN_LOD = 0x813A;
constexpr GLenum	GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
constexpr GLenum	GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
constexpr GLenum	GL_TEXTURE_NORMAL_EXT = 0x85AF;
constexpr GLenum	GL_TEXTURE_PRIORITY_EXT = 0x8066;
constexpr GLenum	GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
constexpr GLenum	GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
constexpr GLenum	GL_TEXTURE_RECTANGLE = 0x84F5;
constexpr GLenum	GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
constexpr GLenum	GL_TEXTURE_RECTANGLE_NV = 0x84F5;
constexpr GLenum	GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
constexpr GLenum	GL_TEXTURE_REDUCTION_MODE_EXT = 0x9366;
constexpr GLenum	GL_TEXTURE_RED_SIZE_EXT = 0x805C;
constexpr GLenum	GL_TEXTURE_RED_TYPE = 0x8C10;
constexpr GLenum	GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
constexpr GLenum	GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
constexpr GLenum	GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
constexpr GLenum	GL_TEXTURE_RESIDENT_EXT = 0x8067;
constexpr GLenum	GL_TEXTURE_SAMPLES = 0x9106;
constexpr GLenum	GL_TEXTURE_SHADER_NV = 0x86DE;
constexpr GLenum	GL_TEXTURE_SHADOW = 0x82A1;
constexpr GLenum	GL_TEXTURE_SHARED_SIZE = 0x8C3F;
constexpr GLenum	GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
constexpr GLenum	GL_TEXTURE_SPARSE_ARB = 0x91A6;
constexpr GLenum	GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
constexpr GLenum	GL_TEXTURE_STENCIL_SIZE = 0x88F1;
constexpr GLenum	GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
constexpr GLenum	GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
constexpr GLenum	GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
constexpr GLenum	GL_TEXTURE_SWIZZLE_A = 0x8E45;
constexpr GLenum	GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
constexpr GLenum	GL_TEXTURE_SWIZZLE_B = 0x8E44;
constexpr GLenum	GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
constexpr GLenum	GL_TEXTURE_SWIZZLE_G = 0x8E43;
constexpr GLenum	GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
constexpr GLenum	GL_TEXTURE_SWIZZLE_R = 0x8E42;
constexpr GLenum	GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
constexpr GLenum	GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
constexpr GLenum	GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
constexpr GLenum	GL_TEXTURE_TARGET = 0x1006;
constexpr GLenum	GL_TEXTURE_TILING_EXT = 0x9580;
constexpr GLenum	GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
constexpr GLenum	GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
constexpr GLenum	GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
constexpr GLenum	GL_TEXTURE_VIEW = 0x82B5;
constexpr GLenum	GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
constexpr GLenum	GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
constexpr GLenum	GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
constexpr GLenum	GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
constexpr GLenum	GL_TEXTURE_WRAP_R = 0x8072;
constexpr GLenum	GL_TEXTURE_WRAP_R_EXT = 0x8072;
constexpr GLenum	GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
constexpr GLenum	GL_TILING_TYPES_EXT = 0x9583;
constexpr GLenum	GL_TIMEOUT_EXPIRED = 0x911B;
constexpr GLenum	GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull;
constexpr GLenum	GL_TIMESTAMP = 0x8E28;
constexpr GLenum	GL_TIME_ELAPSED = 0x88BF;
constexpr GLenum	GL_TIME_ELAPSED_EXT = 0x88BF;
constexpr GLenum	GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
constexpr GLenum	GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
constexpr GLenum	GL_TRACK_MATRIX_NV = 0x8648;
constexpr GLenum	GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
constexpr GLenum	GL_TRANSFORM_FEEDBACK = 0x8E22;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
constexpr GLenum	GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
constexpr GLenum	GL_TRANSFORM_HINT_APPLE = 0x85B1;
constexpr GLenum	GL_TRANSLATE_2D_NV = 0x9090;
constexpr GLenum	GL_TRANSLATE_3D_NV = 0x9091;
constexpr GLenum	GL_TRANSLATE_X_NV = 0x908E;
constexpr GLenum	GL_TRANSLATE_Y_NV = 0x908F;
constexpr GLenum	GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
constexpr GLenum	GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
constexpr GLenum	GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
constexpr GLenum	GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
constexpr GLenum	GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
constexpr GLenum	GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
constexpr GLenum	GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
constexpr GLenum	GL_TRANSPOSE_NV = 0x862C;
constexpr GLenum	GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
constexpr GLenum	GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
constexpr GLenum	GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
constexpr GLenum	GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
constexpr GLenum	GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
constexpr GLenum	GL_TRIANGLES_ADJACENCY = 0x000C;
constexpr GLenum	GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
constexpr GLenum	GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
constexpr GLenum	GL_TRIANGLE_LIST_SUN = 0x81D7;
constexpr GLenum	GL_TRIANGLE_MESH_SUN = 0x8615;
constexpr GLenum	GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
constexpr GLenum	GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
constexpr GLenum	GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
constexpr GLenum	GL_TRIANGULAR_NV = 0x90A5;
constexpr GLenum	GL_TYPE = 0x92FA;
constexpr GLenum	GL_UNCORRELATED_NV = 0x9282;
constexpr GLenum	GL_UNDEFINED_APPLE = 0x8A1C;
constexpr GLenum	GL_UNDEFINED_VERTEX = 0x8260;
constexpr GLenum	GL_UNIFORM = 0x92E1;
constexpr GLenum	GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
constexpr GLenum	GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
constexpr GLenum	GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
constexpr GLenum	GL_UNIFORM_BARRIER_BIT = 0x00000004;
constexpr GLenum	GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
constexpr GLenum	GL_UNIFORM_BLOCK = 0x92E2;
constexpr GLenum	GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
constexpr GLenum	GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
constexpr GLenum	GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
constexpr GLenum	GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
constexpr GLenum	GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
constexpr GLenum	GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
constexpr GLenum	GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
constexpr GLenum	GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
constexpr GLenum	GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
constexpr GLenum	GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
constexpr GLenum	GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
constexpr GLenum	GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
constexpr GLenum	GL_UNIFORM_BUFFER = 0x8A11;
constexpr GLenum	GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
constexpr GLenum	GL_UNIFORM_BUFFER_BINDING = 0x8A28;
constexpr GLenum	GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
constexpr GLenum	GL_UNIFORM_BUFFER_EXT = 0x8DEE;
constexpr GLenum	GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
constexpr GLenum	GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
constexpr GLenum	GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
constexpr GLenum	GL_UNIFORM_BUFFER_START = 0x8A29;
constexpr GLenum	GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
constexpr GLenum	GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
constexpr GLenum	GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
constexpr GLenum	GL_UNIFORM_NAME_LENGTH = 0x8A39;
constexpr GLenum	GL_UNIFORM_OFFSET = 0x8A3B;
constexpr GLenum	GL_UNIFORM_SIZE = 0x8A38;
constexpr GLenum	GL_UNIFORM_TYPE = 0x8A37;
constexpr GLenum	GL_UNKNOWN_CONTEXT_RESET = 0x8255;
constexpr GLenum	GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
constexpr GLenum	GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
constexpr GLenum	GL_UNPACK_CMYK_HINT_EXT = 0x800F;
constexpr GLenum	GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
constexpr GLenum	GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
constexpr GLenum	GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
constexpr GLenum	GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
constexpr GLenum	GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
constexpr GLenum	GL_UNPACK_IMAGE_HEIGHT = 0x806E;
constexpr GLenum	GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
constexpr GLenum	GL_UNPACK_RESAMPLE_OML = 0x8985;
constexpr GLenum	GL_UNPACK_RESAMPLE_SGIX = 0x842F;
constexpr GLenum	GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
constexpr GLenum	GL_UNPACK_SKIP_IMAGES = 0x806D;
constexpr GLenum	GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
constexpr GLenum	GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
constexpr GLenum	GL_UNSIGNALED = 0x9118;
constexpr GLenum	GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
constexpr GLenum	GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
constexpr GLenum	GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
constexpr GLenum	GL_UNSIGNED_IDENTITY_NV = 0x8536;
constexpr GLenum	GL_UNSIGNED_INT16_NV = 0x8FF0;
constexpr GLenum	GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
constexpr GLenum	GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
constexpr GLenum	GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
constexpr GLenum	GL_UNSIGNED_INT64_AMD = 0x8BC2;
constexpr GLenum	GL_UNSIGNED_INT64_ARB = 0x140F;
constexpr GLenum	GL_UNSIGNED_INT64_NV = 0x140F;
constexpr GLenum	GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
constexpr GLenum	GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
constexpr GLenum	GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
constexpr GLenum	GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
constexpr GLenum	GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
constexpr GLenum	GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
constexpr GLenum	GL_UNSIGNED_INT8_NV = 0x8FEC;
constexpr GLenum	GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
constexpr GLenum	GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
constexpr GLenum	GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
constexpr GLenum	GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
constexpr GLenum	GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
constexpr GLenum	GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
constexpr GLenum	GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
constexpr GLenum	GL_UNSIGNED_INT_24_8 = 0x84FA;
constexpr GLenum	GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
constexpr GLenum	GL_UNSIGNED_INT_24_8_NV = 0x84FA;
constexpr GLenum	GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
constexpr GLenum	GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
constexpr GLenum	GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
constexpr GLenum	GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
constexpr GLenum	GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
constexpr GLenum	GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
constexpr GLenum	GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
constexpr GLenum	GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
constexpr GLenum	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
constexpr GLenum	GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
constexpr GLenum	GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
constexpr GLenum	GL_UNSIGNED_INT_VEC2 = 0x8DC6;
constexpr GLenum	GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
constexpr GLenum	GL_UNSIGNED_INT_VEC3 = 0x8DC7;
constexpr GLenum	GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
constexpr GLenum	GL_UNSIGNED_INT_VEC4 = 0x8DC8;
constexpr GLenum	GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
constexpr GLenum	GL_UNSIGNED_INVERT_NV = 0x8537;
constexpr GLenum	GL_UNSIGNED_NORMALIZED = 0x8C17;
constexpr GLenum	GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
constexpr GLenum	GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
constexpr GLenum	GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
constexpr GLenum	GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
constexpr GLenum	GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
constexpr GLenum	GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
constexpr GLenum	GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
constexpr GLenum	GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
constexpr GLenum	GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
constexpr GLenum	GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
constexpr GLenum	GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
constexpr GLenum	GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
constexpr GLenum	GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
constexpr GLenum	GL_UPPER_LEFT = 0x8CA2;
constexpr GLenum	GL_USE_MISSING_GLYPH_NV = 0x90AA;
constexpr GLenum	GL_UTF16_NV = 0x909B;
constexpr GLenum	GL_UTF8_NV = 0x909A;
constexpr GLenum	GL_UUID_SIZE_EXT = 16;
constexpr GLenum	GL_VALIDATE_STATUS = 0x8B83;
constexpr GLenum	GL_VARIABLE_A_NV = 0x8523;
constexpr GLenum	GL_VARIABLE_B_NV = 0x8524;
constexpr GLenum	GL_VARIABLE_C_NV = 0x8525;
constexpr GLenum	GL_VARIABLE_D_NV = 0x8526;
constexpr GLenum	GL_VARIABLE_E_NV = 0x8527;
constexpr GLenum	GL_VARIABLE_F_NV = 0x8528;
constexpr GLenum	GL_VARIABLE_G_NV = 0x8529;
constexpr GLenum	GL_VARIANT_ARRAY_EXT = 0x87E8;
constexpr GLenum	GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
constexpr GLenum	GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
constexpr GLenum	GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
constexpr GLenum	GL_VARIANT_DATATYPE_EXT = 0x87E5;
constexpr GLenum	GL_VARIANT_EXT = 0x87C1;
constexpr GLenum	GL_VARIANT_VALUE_EXT = 0x87E4;
constexpr GLenum	GL_VBO_FREE_MEMORY_ATI = 0x87FB;
constexpr GLenum	GL_VECTOR_EXT = 0x87BF;
constexpr GLenum	GL_VERSION_1_2 = 1;
constexpr GLenum	GL_VERSION_1_3 = 1;
constexpr GLenum	GL_VERSION_1_4 = 1;
constexpr GLenum	GL_VERSION_1_5 = 1;
constexpr GLenum	GL_VERSION_2_0 = 1;
constexpr GLenum	GL_VERSION_2_1 = 1;
constexpr GLenum	GL_VERSION_3_0 = 1;
constexpr GLenum	GL_VERSION_3_1 = 1;
constexpr GLenum	GL_VERSION_3_2 = 1;
constexpr GLenum	GL_VERSION_3_3 = 1;
constexpr GLenum	GL_VERSION_4_0 = 1;
constexpr GLenum	GL_VERSION_4_1 = 1;
constexpr GLenum	GL_VERSION_4_2 = 1;
constexpr GLenum	GL_VERSION_4_3 = 1;
constexpr GLenum	GL_VERSION_4_4 = 1;
constexpr GLenum	GL_VERSION_4_5 = 1;
constexpr GLenum	GL_VERSION_4_6 = 1;
constexpr GLenum	GL_VERTEX23_BIT_PGI = 0x00000004;
constexpr GLenum	GL_VERTEX4_BIT_PGI = 0x00000008;
constexpr GLenum	GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
constexpr GLenum	GL_VERTEX_ARRAY_BINDING = 0x85B5;
constexpr GLenum	GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
constexpr GLenum	GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
constexpr GLenum	GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
constexpr GLenum	GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
constexpr GLenum	GL_VERTEX_ARRAY_EXT = 0x8074;
constexpr GLenum	GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
constexpr GLenum	GL_VERTEX_ARRAY_LIST_IBM = 103070;
constexpr GLenum	GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
constexpr GLenum	GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
constexpr GLenum	GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
constexpr GLenum	GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
constexpr GLenum	GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
constexpr GLenum	GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
constexpr GLenum	GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
constexpr GLenum	GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
constexpr GLenum	GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
constexpr GLenum	GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
constexpr GLenum	GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
constexpr GLenum	GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
constexpr GLenum	GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
constexpr GLenum	GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
constexpr GLenum	GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
constexpr GLenum	GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
constexpr GLenum	GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
constexpr GLenum	GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
constexpr GLenum	GL_VERTEX_ATTRIB_BINDING = 0x82D4;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
constexpr GLenum	GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
constexpr GLenum	GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
constexpr GLenum	GL_VERTEX_BINDING_BUFFER = 0x8F4F;
constexpr GLenum	GL_VERTEX_BINDING_DIVISOR = 0x82D6;
constexpr GLenum	GL_VERTEX_BINDING_OFFSET = 0x82D7;
constexpr GLenum	GL_VERTEX_BINDING_STRIDE = 0x82D8;
constexpr GLenum	GL_VERTEX_BLEND_ARB = 0x86A7;
constexpr GLenum	GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
constexpr GLenum	GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
constexpr GLenum	GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
constexpr GLenum	GL_VERTEX_ID_NV = 0x8C7B;
constexpr GLenum	GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
constexpr GLenum	GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
constexpr GLenum	GL_VERTEX_PRECLIP_SGIX = 0x83EE;
constexpr GLenum	GL_VERTEX_PROGRAM_ARB = 0x8620;
constexpr GLenum	GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
constexpr GLenum	GL_VERTEX_PROGRAM_NV = 0x8620;
constexpr GLenum	GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
constexpr GLenum	GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
constexpr GLenum	GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
constexpr GLenum	GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
constexpr GLenum	GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
constexpr GLenum	GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
constexpr GLenum	GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
constexpr GLenum	GL_VERTEX_SHADER = 0x8B31;
constexpr GLenum	GL_VERTEX_SHADER_ARB = 0x8B31;
constexpr GLenum	GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
constexpr GLenum	GL_VERTEX_SHADER_BIT = 0x00000001;
constexpr GLenum	GL_VERTEX_SHADER_EXT = 0x8780;
constexpr GLenum	GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
constexpr GLenum	GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
constexpr GLenum	GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
constexpr GLenum	GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
constexpr GLenum	GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
constexpr GLenum	GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
constexpr GLenum	GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
constexpr GLenum	GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
constexpr GLenum	GL_VERTEX_SOURCE_ATI = 0x8774;
constexpr GLenum	GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
constexpr GLenum	GL_VERTEX_STREAM0_ATI = 0x876C;
constexpr GLenum	GL_VERTEX_STREAM1_ATI = 0x876D;
constexpr GLenum	GL_VERTEX_STREAM2_ATI = 0x876E;
constexpr GLenum	GL_VERTEX_STREAM3_ATI = 0x876F;
constexpr GLenum	GL_VERTEX_STREAM4_ATI = 0x8770;
constexpr GLenum	GL_VERTEX_STREAM5_ATI = 0x8771;
constexpr GLenum	GL_VERTEX_STREAM6_ATI = 0x8772;
constexpr GLenum	GL_VERTEX_STREAM7_ATI = 0x8773;
constexpr GLenum	GL_VERTEX_SUBROUTINE = 0x92E8;
constexpr GLenum	GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
constexpr GLenum	GL_VERTEX_TEXTURE = 0x829B;
constexpr GLenum	GL_VERTEX_WEIGHTING_EXT = 0x8509;
constexpr GLenum	GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
constexpr GLenum	GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
constexpr GLenum	GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
constexpr GLenum	GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
constexpr GLenum	GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
constexpr GLenum	GL_VERTICAL_LINE_TO_NV = 0x08;
constexpr GLenum	GL_VERTICES_SUBMITTED = 0x82EE;
constexpr GLenum	GL_VERTICES_SUBMITTED_ARB = 0x82EE;
constexpr GLenum	GL_VIBRANCE_BIAS_NV = 0x8719;
constexpr GLenum	GL_VIBRANCE_SCALE_NV = 0x8713;
constexpr GLenum	GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
constexpr GLenum	GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
constexpr GLenum	GL_VIDEO_BUFFER_NV = 0x9020;
constexpr GLenum	GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
constexpr GLenum	GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
constexpr GLenum	GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
constexpr GLenum	GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
constexpr GLenum	GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
constexpr GLenum	GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
constexpr GLenum	GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
constexpr GLenum	GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
constexpr GLenum	GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
constexpr GLenum	GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
constexpr GLenum	GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
constexpr GLenum	GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
constexpr GLenum	GL_VIEWPORT_COMMAND_NV = 0x0010;
constexpr GLenum	GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
constexpr GLenum	GL_VIEWPORT_POSITION_W_SCALE_NV = 0x937C;
constexpr GLenum	GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937D;
constexpr GLenum	GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937E;
constexpr GLenum	GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_W_NV = 0x935B;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_X_NV = 0x9358;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_Y_NV = 0x9359;
constexpr GLenum	GL_VIEWPORT_SWIZZLE_Z_NV = 0x935A;
constexpr GLenum	GL_VIEW_CLASS_128_BITS = 0x82C4;
constexpr GLenum	GL_VIEW_CLASS_16_BITS = 0x82CA;
constexpr GLenum	GL_VIEW_CLASS_24_BITS = 0x82C9;
constexpr GLenum	GL_VIEW_CLASS_32_BITS = 0x82C8;
constexpr GLenum	GL_VIEW_CLASS_48_BITS = 0x82C7;
constexpr GLenum	GL_VIEW_CLASS_64_BITS = 0x82C6;
constexpr GLenum	GL_VIEW_CLASS_8_BITS = 0x82CB;
constexpr GLenum	GL_VIEW_CLASS_96_BITS = 0x82C5;
constexpr GLenum	GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
constexpr GLenum	GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
constexpr GLenum	GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
constexpr GLenum	GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
constexpr GLenum	GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
constexpr GLenum	GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
constexpr GLenum	GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
constexpr GLenum	GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
constexpr GLenum	GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
constexpr GLenum	GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
constexpr GLenum	GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
constexpr GLenum	GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
constexpr GLenum	GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
constexpr GLenum	GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
constexpr GLenum	GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
constexpr GLenum	GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
constexpr GLenum	GL_VIVIDLIGHT_NV = 0x92A6;
constexpr GLenum	GL_VOLATILE_APPLE = 0x8A1A;
constexpr GLenum	GL_WAIT_FAILED = 0x911D;
constexpr GLenum	GL_WARPS_PER_SM_NV = 0x933A;
constexpr GLenum	GL_WARP_SIZE_NV = 0x9339;
constexpr GLenum	GL_WEIGHTED_AVERAGE_ARB = 0x9367;
constexpr GLenum	GL_WEIGHTED_AVERAGE_EXT = 0x9367;
constexpr GLenum	GL_WEIGHT_ARRAY_ARB = 0x86AD;
constexpr GLenum	GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
constexpr GLenum	GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
constexpr GLenum	GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
constexpr GLenum	GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
constexpr GLenum	GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
constexpr GLenum	GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
constexpr GLenum	GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
constexpr GLenum	GL_WIDE_LINE_HINT_PGI = 0x1A222;
constexpr GLenum	GL_WINDOW_RECTANGLE_EXT = 0x8F12;
constexpr GLenum	GL_WINDOW_RECTANGLE_MODE_EXT = 0x8F13;
constexpr GLenum	GL_WRAP_BORDER_SUN = 0x81D4;
constexpr GLenum	GL_WRITE_DISCARD_NV = 0x88BE;
constexpr GLenum	GL_WRITE_ONLY = 0x88B9;
constexpr GLenum	GL_WRITE_ONLY_ARB = 0x88B9;
constexpr GLenum	GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
constexpr GLenum	GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
constexpr GLenum	GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
constexpr GLenum	GL_W_EXT = 0x87D8;
constexpr GLenum	GL_XOR_NV = 0x1506;
constexpr GLenum	GL_X_EXT = 0x87D5;
constexpr GLenum	GL_YCBAYCR8A_4224_NV = 0x9032;
constexpr GLenum	GL_YCBCR_422_APPLE = 0x85B9;
constexpr GLenum	GL_YCBCR_MESA = 0x8757;
constexpr GLenum	GL_YCBYCR8_422_NV = 0x9031;
constexpr GLenum	GL_YCRCBA_SGIX = 0x8319;
constexpr GLenum	GL_YCRCB_SGIX = 0x8318;
constexpr GLenum	GL_Y_EXT = 0x87D6;
constexpr GLenum	GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
constexpr GLenum	GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
constexpr GLenum	GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
constexpr GLenum	GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
constexpr GLenum	GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
constexpr GLenum	GL_ZERO_EXT = 0x87DD;
constexpr GLenum	GL_ZERO_TO_ONE = 0x935F;
constexpr GLenum	GL_Z_EXT = 0x87D7;
//GL function prototypes:

GLboolean glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout);
void glActiveProgramEXT(GLuint program);
void glActiveShaderProgram(GLuint pipeline, GLuint program);
void glActiveStencilFaceEXT(GLenum face);
void glActiveTexture(GLenum texture);
void glActiveTextureARB(GLenum texture);
void glActiveVaryingNV(GLuint program, const GLchar *name);
void glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void glApplyTextureEXT(GLenum mode);
GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences);
GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences);
void glArrayElementEXT(GLint i);
void glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
void glAsyncMarkerSGIX(GLuint marker);
void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
void glAttachShader(GLuint program, GLuint shader);
void glBeginConditionalRender(GLuint id, GLenum mode);
void glBeginConditionalRenderNV(GLuint id, GLenum mode);
void glBeginConditionalRenderNVX(GLuint id);
void glBeginFragmentShaderATI(void);
void glBeginOcclusionQueryNV(GLuint id);
void glBeginPerfMonitorAMD(GLuint monitor);
void glBeginPerfQueryINTEL(GLuint queryHandle);
void glBeginQuery(GLenum target, GLuint id);
void glBeginQueryARB(GLenum target, GLuint id);
void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
void glBeginTransformFeedback(GLenum primitiveMode);
void glBeginTransformFeedbackEXT(GLenum primitiveMode);
void glBeginTransformFeedbackNV(GLenum primitiveMode);
void glBeginVertexShaderEXT(void);
void glBeginVideoCaptureNV(GLuint video_capture_slot);
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name);
void glBindBuffer(GLenum target, GLuint buffer);
void glBindBufferARB(GLenum target, GLuint buffer);
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer);
void glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer);
void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
void glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
void glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
void glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name);
void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
void glBindFragmentShaderATI(GLuint id);
void glBindFramebuffer(GLenum target, GLuint framebuffer);
void glBindFramebufferEXT(GLenum target, GLuint framebuffer);
void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
void glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures);
GLuint glBindLightParameterEXT(GLenum light, GLenum value);
GLuint glBindMaterialParameterEXT(GLenum face, GLenum value);
void glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture);
GLuint glBindParameterEXT(GLenum value);
void glBindProgramARB(GLenum target, GLuint program);
void glBindProgramNV(GLenum target, GLuint id);
void glBindProgramPipeline(GLuint pipeline);
void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer);
void glBindSampler(GLuint unit, GLuint sampler);
void glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers);
GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value);
void glBindTextureEXT(GLenum target, GLuint texture);
void glBindTextureUnit(GLuint unit, GLuint texture);
GLuint glBindTextureUnitParameterEXT(GLenum unit, GLenum value);
void glBindTextures(GLuint first, GLsizei count, const GLuint *textures);
void glBindTransformFeedback(GLenum target, GLuint id);
void glBindTransformFeedbackNV(GLenum target, GLuint id);
void glBindVertexArray(GLuint array);
void glBindVertexArrayAPPLE(GLuint array);
void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
void glBindVertexShaderEXT(GLuint id);
void glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
void glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
void glBinormalPointerEXT(GLenum type, GLsizei stride, const void *pointer);
void glBlendBarrierKHR(void);
void glBlendBarrierNV(void);
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glBlendEquation(GLenum mode);
void glBlendEquationEXT(GLenum mode);
void glBlendEquationIndexedAMD(GLuint buf, GLenum mode);
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha);
void glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void glBlendEquationi(GLuint buf, GLenum mode);
void glBlendEquationiARB(GLuint buf, GLenum mode);
void glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst);
void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glBlendFunci(GLuint buf, GLenum src, GLenum dst);
void glBlendFunciARB(GLuint buf, GLenum src, GLenum dst);
void glBlendParameteriNV(GLenum pname, GLint value);
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
void glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
void glBufferDataARB(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);
void glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param);
void glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
void glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
void glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
void glCallCommandListNV(GLuint list);
GLenum glCheckFramebufferStatus(GLenum target);
GLenum glCheckFramebufferStatusEXT(GLenum target);
GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
GLenum glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target);
void glClampColor(GLenum target, GLenum clamp);
void glClampColorARB(GLenum target, GLenum clamp);
void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
void glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha);
void glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void glClearDepthdNV(GLdouble depth);
void glClearDepthf(GLfloat d);
void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
void glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
void glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
void glClientActiveTexture(GLenum texture);
void glClientActiveTextureARB(GLenum texture);
void glClientActiveVertexStreamATI(GLenum stream);
void glClientAttribDefaultEXT(GLbitfield mask);
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void glClipControl(GLenum origin, GLenum depth);
void glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
void glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v);
void glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
void glColor3hvNV(const GLhalfNV *v);
void glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v);
void glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
void glColor4hvNV(const GLhalfNV *v);
void glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
void glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v);
void glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
void glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v);
void glColorFormatNV(GLint size, GLenum type, GLsizei stride);
void glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void glColorP3ui(GLenum type, GLuint color);
void glColorP3uiv(GLenum type, const GLuint *color);
void glColorP4ui(GLenum type, GLuint color);
void glColorP4uiv(GLenum type, const GLuint *color);
void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
void glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
void glColorPointervINTEL(GLint size, GLenum type, const void **pointer);
void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table);
void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params);
void glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params);
void glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params);
void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
void glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
void glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
void glCombinerParameterfNV(GLenum pname, GLfloat param);
void glCombinerParameterfvNV(GLenum pname, const GLfloat *params);
void glCombinerParameteriNV(GLenum pname, GLint param);
void glCombinerParameterivNV(GLenum pname, const GLint *params);
void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params);
void glCommandListSegmentsNV(GLuint list, GLuint segments);
void glCompileCommandListNV(GLuint list);
void glCompileShader(GLuint shader);
void glCompileShaderARB(GLhandleARB shaderObj);
void glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
void glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
void glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
void glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
void glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
void glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
void glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
void glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
void glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
void glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
void glConservativeRasterParameterfNV(GLenum pname, GLfloat value);
void glConservativeRasterParameteriNV(GLenum pname, GLint param);
void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params);
void glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params);
void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params);
void glConvolutionParameteri(GLenum target, GLenum pname, GLint params);
void glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params);
void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params);
void glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params);
void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
void glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glCopyPathNV(GLuint resultPath, GLuint srcPath);
void glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
void glCoverFillPathNV(GLuint path, GLenum coverMode);
void glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
void glCoverStrokePathNV(GLuint path, GLenum coverMode);
void glCoverageModulationNV(GLenum components);
void glCoverageModulationTableNV(GLsizei n, const GLfloat *v);
void glCreateBuffers(GLsizei n, GLuint *buffers);
void glCreateCommandListsNV(GLsizei n, GLuint *lists);
void glCreateFramebuffers(GLsizei n, GLuint *framebuffers);
void glCreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects);
void glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle);
GLuint glCreateProgram(void);
GLhandleARB glCreateProgramObjectARB(void);
void glCreateProgramPipelines(GLsizei n, GLuint *pipelines);
void glCreateQueries(GLenum target, GLsizei n, GLuint *ids);
void glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
void glCreateSamplers(GLsizei n, GLuint *samplers);
GLuint glCreateShader(GLenum type);
GLhandleARB glCreateShaderObjectARB(GLenum shaderType);
GLuint glCreateShaderProgramEXT(GLenum type, const GLchar *string);
GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings);
void glCreateStatesNV(GLsizei n, GLuint *states);
GLsync glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
void glCreateTextures(GLenum target, GLsizei n, GLuint *textures);
void glCreateTransformFeedbacks(GLsizei n, GLuint *ids);
void glCreateVertexArrays(GLsizei n, GLuint *arrays);
void glCullParameterdvEXT(GLenum pname, GLdouble *params);
void glCullParameterfvEXT(GLenum pname, GLfloat *params);
void glCurrentPaletteMatrixARB(GLint index);
void glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
void glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void *userParam);
void glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam);
void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
void glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
void glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
void glDeformSGIX(GLbitfield mask);
void glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
void glDeleteBuffers(GLsizei n, const GLuint *buffers);
void glDeleteBuffersARB(GLsizei n, const GLuint *buffers);
void glDeleteCommandListsNV(GLsizei n, const GLuint *lists);
void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences);
void glDeleteFencesNV(GLsizei n, const GLuint *fences);
void glDeleteFragmentShaderATI(GLuint id);
void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers);
void glDeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects);
void glDeleteNamedStringARB(GLint namelen, const GLchar *name);
void glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names);
void glDeleteObjectARB(GLhandleARB obj);
void glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids);
void glDeletePathsNV(GLuint path, GLsizei range);
void glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors);
void glDeletePerfQueryINTEL(GLuint queryHandle);
void glDeleteProgram(GLuint program);
void glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
void glDeleteProgramsARB(GLsizei n, const GLuint *programs);
void glDeleteProgramsNV(GLsizei n, const GLuint *programs);
void glDeleteQueries(GLsizei n, const GLuint *ids);
void glDeleteQueriesARB(GLsizei n, const GLuint *ids);
void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers);
void glDeleteSamplers(GLsizei count, const GLuint *samplers);
void glDeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores);
void glDeleteShader(GLuint shader);
void glDeleteStatesNV(GLsizei n, const GLuint *states);
void glDeleteSync(GLsync sync);
void glDeleteTexturesEXT(GLsizei n, const GLuint *textures);
void glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
void glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids);
void glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays);
void glDeleteVertexShaderEXT(GLuint id);
void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax);
void glDepthBoundsdNV(GLdouble zmin, GLdouble zmax);
void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
void glDepthRangedNV(GLdouble zNear, GLdouble zFar);
void glDepthRangef(GLfloat n, GLfloat f);
void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
void glDetachShader(GLuint program, GLuint shader);
void glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points);
void glDisableClientStateIndexedEXT(GLenum array, GLuint index);
void glDisableClientStateiEXT(GLenum array, GLuint index);
void glDisableIndexedEXT(GLenum target, GLuint index);
void glDisableVariantClientStateEXT(GLuint id);
void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index);
void glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index);
void glDisableVertexArrayEXT(GLuint vaobj, GLenum array);
void glDisableVertexAttribAPPLE(GLuint index, GLenum pname);
void glDisableVertexAttribArray(GLuint index);
void glDisableVertexAttribArrayARB(GLuint index);
void glDisablei(GLenum target, GLuint index);
void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
void glDispatchComputeIndirect(GLintptr indirect);
void glDrawArraysEXT(GLenum mode, GLint first, GLsizei count);
void glDrawArraysIndirect(GLenum mode, const void *indirect);
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
void glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
void glDrawBuffers(GLsizei n, const GLenum *bufs);
void glDrawBuffersARB(GLsizei n, const GLenum *bufs);
void glDrawBuffersATI(GLsizei n, const GLenum *bufs);
void glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
void glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
void glDrawCommandsStatesAddressNV(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
void glDrawCommandsStatesNV(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count);
void glDrawElementArrayATI(GLenum mode, GLsizei count);
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect);
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
void glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
void glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count);
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
void glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
void glDrawTransformFeedback(GLenum mode, GLuint id);
void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
void glDrawTransformFeedbackNV(GLenum mode, GLuint id);
void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
void glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
void glEdgeFlagFormatNV(GLsizei stride);
void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer);
void glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride);
void glElementPointerAPPLE(GLenum type, const void *pointer);
void glElementPointerATI(GLenum type, const void *pointer);
void glEnableClientStateIndexedEXT(GLenum array, GLuint index);
void glEnableClientStateiEXT(GLenum array, GLuint index);
void glEnableIndexedEXT(GLenum target, GLuint index);
void glEnableVariantClientStateEXT(GLuint id);
void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);
void glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index);
void glEnableVertexArrayEXT(GLuint vaobj, GLenum array);
void glEnableVertexAttribAPPLE(GLuint index, GLenum pname);
void glEnableVertexAttribArray(GLuint index);
void glEnableVertexAttribArrayARB(GLuint index);
void glEnablei(GLenum target, GLuint index);
void glEndConditionalRender(void);
void glEndConditionalRenderNV(void);
void glEndConditionalRenderNVX(void);
void glEndFragmentShaderATI(void);
void glEndOcclusionQueryNV(void);
void glEndPerfMonitorAMD(GLuint monitor);
void glEndPerfQueryINTEL(GLuint queryHandle);
void glEndQuery(GLenum target);
void glEndQueryARB(GLenum target);
void glEndQueryIndexed(GLenum target, GLuint index);
void glEndTransformFeedback(void);
void glEndTransformFeedbackEXT(void);
void glEndTransformFeedbackNV(void);
void glEndVertexShaderEXT(void);
void glEndVideoCaptureNV(GLuint video_capture_slot);
void glEvalMapsNV(GLenum target, GLenum mode);
void glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params);
void glExtractComponentEXT(GLuint res, GLuint src, GLuint num);
GLsync glFenceSync(GLenum condition, GLbitfield flags);
void glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
GLint glFinishAsyncSGIX(GLuint *markerp);
void glFinishFenceAPPLE(GLuint fence);
void glFinishFenceNV(GLuint fence);
void glFinishObjectAPPLE(GLenum object, GLint name);
void glFinishTextureSUNX(void);
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size);
void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
void glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length);
void glFlushPixelDataRangeNV(GLenum target);
void glFlushRasterSGIX(void);
void glFlushVertexArrayRangeAPPLE(GLsizei length, void *pointer);
void glFlushVertexArrayRangeNV(void);
void glFogCoordFormatNV(GLenum type, GLsizei stride);
void glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer);
void glFogCoordPointerEXT(GLenum type, GLsizei stride, const void *pointer);
void glFogCoordPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
void glFogCoordd(GLdouble coord);
void glFogCoorddEXT(GLdouble coord);
void glFogCoorddv(const GLdouble *coord);
void glFogCoorddvEXT(const GLdouble *coord);
void glFogCoordf(GLfloat coord);
void glFogCoordfEXT(GLfloat coord);
void glFogCoordfv(const GLfloat *coord);
void glFogCoordfvEXT(const GLfloat *coord);
void glFogCoordhNV(GLhalfNV fog);
void glFogCoordhvNV(const GLhalfNV *fog);
void glFogFuncSGIS(GLsizei n, const GLfloat *points);
void glFragmentColorMaterialSGIX(GLenum face, GLenum mode);
void glFragmentCoverageColorNV(GLuint color);
void glFragmentLightModelfSGIX(GLenum pname, GLfloat param);
void glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params);
void glFragmentLightModeliSGIX(GLenum pname, GLint param);
void glFragmentLightModelivSGIX(GLenum pname, const GLint *params);
void glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param);
void glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params);
void glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param);
void glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params);
void glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param);
void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params);
void glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param);
void glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params);
void glFrameTerminatorGREMEDY(void);
void glFrameZoomSGIX(GLint factor);
void glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode);
void glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs);
void glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
void glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode);
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
void glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
void glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level);
void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level);
void glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
void glFreeObjectBufferATI(GLuint buffer);
GLuint glGenAsyncMarkersSGIX(GLsizei range);
void glGenBuffers(GLsizei n, GLuint *buffers);
void glGenBuffersARB(GLsizei n, GLuint *buffers);
void glGenFencesAPPLE(GLsizei n, GLuint *fences);
void glGenFencesNV(GLsizei n, GLuint *fences);
GLuint glGenFragmentShadersATI(GLuint range);
void glGenFramebuffers(GLsizei n, GLuint *framebuffers);
void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers);
void glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names);
void glGenOcclusionQueriesNV(GLsizei n, GLuint *ids);
GLuint glGenPathsNV(GLsizei range);
void glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors);
void glGenProgramPipelines(GLsizei n, GLuint *pipelines);
void glGenProgramsARB(GLsizei n, GLuint *programs);
void glGenProgramsNV(GLsizei n, GLuint *programs);
void glGenQueries(GLsizei n, GLuint *ids);
void glGenQueriesARB(GLsizei n, GLuint *ids);
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers);
void glGenSamplers(GLsizei count, GLuint *samplers);
void glGenSemaphoresEXT(GLsizei n, GLuint *semaphores);
GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
void glGenTexturesEXT(GLsizei n, GLuint *textures);
void glGenTransformFeedbacks(GLsizei n, GLuint *ids);
void glGenTransformFeedbacksNV(GLsizei n, GLuint *ids);
void glGenVertexArrays(GLsizei n, GLuint *arrays);
void glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays);
GLuint glGenVertexShadersEXT(GLuint range);
void glGenerateMipmap(GLenum target);
void glGenerateMipmapEXT(GLenum target);
void glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target);
void glGenerateTextureMipmap(GLuint texture);
void glGenerateTextureMipmapEXT(GLuint texture, GLenum target);
void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params);
void glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params);
void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLint glGetAttribLocation(GLuint program, const GLchar *name);
GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name);
void glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data);
void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params);
void glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params);
void glGetBufferPointerv(GLenum target, GLenum pname, void **params);
void glGetBufferPointervARB(GLenum target, GLenum pname, void **params);
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);
void glGetColorTable(GLenum target, GLenum format, GLenum type, void *table);
void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void *data);
void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params);
void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params);
void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params);
void glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params);
void glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params);
void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void *table);
void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params);
void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params);
GLuint glGetCommandHeaderNV(GLenum tokenID, GLuint size);
void glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void *img);
void glGetCompressedTexImage(GLenum target, GLint level, void *img);
void glGetCompressedTexImageARB(GLenum target, GLint level, void *img);
void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
void glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void *img);
void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void *image);
void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void *image);
void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params);
void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params);
void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params);
void glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat *v);
GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GLuint glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
GLuint glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void glGetDetailTexFuncSGIS(GLenum target, GLfloat *points);
void glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data);
void glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);
void glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble *params);
void glGetFenceivNV(GLuint fence, GLenum pname, GLint *params);
void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params);
void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params);
void glGetFirstPerfQueryIdINTEL(GLuint *queryId);
void glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data);
void glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
void glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat *params);
void glGetFogFuncSGIS(GLfloat *points);
GLint glGetFragDataIndex(GLuint program, const GLchar *name);
GLint glGetFragDataLocation(GLuint program, const GLchar *name);
GLint glGetFragDataLocationEXT(GLuint program, const GLchar *name);
void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params);
void glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params);
void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params);
void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params);
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
void glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params);
GLenum glGetGraphicsResetStatus(void);
GLenum glGetGraphicsResetStatusARB(void);
GLhandleARB glGetHandleARB(GLenum pname);
void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params);
void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params);
void glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params);
GLuint64 glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
GLuint64 glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params);
void glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params);
void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
void glGetInteger64v(GLenum pname, GLint64 *data);
void glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data);
void glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
void glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result);
void glGetIntegerui64vNV(GLenum value, GLuint64EXT *result);
void glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params);
void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
void glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
void glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
void glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data);
void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data);
void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params);
void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params);
void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params);
void glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params);
void glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params);
void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params);
void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params);
void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params);
void glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
void glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
void glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
void glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
void glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params);
void glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
void glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
void glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
void glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
void glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params);
void glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
void glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params);
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
void glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val);
void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params);
void glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params);
void glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params);
void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params);
void glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void **params);
void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
void glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
void glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
void glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
void glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params);
void glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params);
void glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params);
void glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params);
void glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params);
void glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void *string);
void glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params);
void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
void glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params);
void glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
void glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
void glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId);
void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params);
void glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params);
void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params);
void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params);
void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params);
void glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params);
void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params);
void glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value);
void glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value);
void glGetPathCommandsNV(GLuint path, GLubyte *commands);
void glGetPathCoordsNV(GLuint path, GLfloat *coords);
void glGetPathDashArrayNV(GLuint path, GLfloat *dashArray);
GLfloat glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments);
void glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
void glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
void glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value);
void glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value);
void glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
void glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value);
void glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value);
void glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
void glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
void glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data);
void glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
void glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
void glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
void glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
void glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
void glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId);
void glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
void glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat *params);
void glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint *params);
void glGetPointerIndexedvEXT(GLenum target, GLuint index, void **data);
void glGetPointeri_vEXT(GLenum pname, GLuint index, void **params);
void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params);
void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params);
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params);
void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params);
void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params);
void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params);
void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params);
void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
void glGetProgramStringARB(GLenum target, GLenum pname, void *string);
void glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program);
void glGetProgramiv(GLuint program, GLenum pname, GLint *params);
void glGetProgramivARB(GLenum target, GLenum pname, GLint *params);
void glGetProgramivNV(GLuint id, GLenum pname, GLint *params);
void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params);
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params);
void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params);
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params);
void glGetQueryiv(GLenum target, GLenum pname, GLint *params);
void glGetQueryivARB(GLenum target, GLenum pname, GLint *params);
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params);
void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
void glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params);
void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
void glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points);
GLushort glGetStageIndexNV(GLenum shadertype);
GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param);
void glGetTexBumpParameterivATI(GLenum pname, GLint *param);
void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights);
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params);
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params);
void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void **params);
GLuint64 glGetTextureHandleARB(GLuint texture);
GLuint64 glGetTextureHandleNV(GLuint texture);
void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
void glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params);
void glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params);
void glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
void glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params);
void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
void glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params);
void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params);
void glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params);
void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params);
void glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params);
GLuint64 glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler);
GLuint64 glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler);
void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params);
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location);
void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
GLint glGetUniformBufferSizeEXT(GLuint program, GLint location);
void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
GLint glGetUniformLocation(GLuint program, const GLchar *name);
GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name);
GLintptr glGetUniformOffsetEXT(GLuint program, GLint location);
void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
void glGetUniformdv(GLuint program, GLint location, GLdouble *params);
void glGetUniformfv(GLuint program, GLint location, GLfloat *params);
void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params);
void glGetUniformi64vARB(GLuint program, GLint location, GLint64 *params);
void glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params);
void glGetUniformiv(GLuint program, GLint location, GLint *params);
void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params);
void glGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params);
void glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params);
void glGetUniformuiv(GLuint program, GLint location, GLuint *params);
void glGetUniformuivEXT(GLuint program, GLint location, GLuint *params);
void glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data);
void glGetUnsignedBytevEXT(GLenum pname, GLubyte *data);
void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params);
void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params);
void glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data);
void glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data);
void glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data);
void glGetVariantPointervEXT(GLuint id, GLenum value, void **data);
GLint glGetVaryingLocationNV(GLuint program, const GLchar *name);
void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
void glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
void glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param);
void glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void **param);
void glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void **param);
void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params);
void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params);
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params);
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params);
void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
void glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params);
void glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params);
void glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params);
void glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params);
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
void glGetVertexAttribPointervARB(GLuint index, GLenum pname, void **pointer);
void glGetVertexAttribPointervNV(GLuint index, GLenum pname, void **pointer);
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params);
void glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params);
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params);
void glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params);
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params);
void glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params);
void glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
void glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
void glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
void glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params);
void glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params);
void glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params);
void glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params);
void glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params);
GLVULKANPROCNV glGetVkProcAddrNV(const GLchar *name);
void glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
void glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
void glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img);
void glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
void glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
void glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
void glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
void glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
void glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
void glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values);
void glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values);
void glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values);
void glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern);
void glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
void glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
void glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
void glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
void glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void glGlobalAlphaFactorbSUN(GLbyte factor);
void glGlobalAlphaFactordSUN(GLdouble factor);
void glGlobalAlphaFactorfSUN(GLfloat factor);
void glGlobalAlphaFactoriSUN(GLint factor);
void glGlobalAlphaFactorsSUN(GLshort factor);
void glGlobalAlphaFactorubSUN(GLubyte factor);
void glGlobalAlphaFactoruiSUN(GLuint factor);
void glGlobalAlphaFactorusSUN(GLushort factor);
void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void glIglooInterfaceSGIX(GLenum pname, const void *params);
void glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param);
void glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params);
void glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param);
void glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params);
void glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
void glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void *handle);
void glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void *name);
void glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd);
void glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void *handle);
void glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void *name);
GLsync glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
void glIndexFormatNV(GLenum type, GLsizei stride);
void glIndexFuncEXT(GLenum func, GLclampf ref);
void glIndexMaterialEXT(GLenum face, GLenum mode);
void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
void glIndexPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
void glInsertComponentEXT(GLuint res, GLuint src, GLuint num);
void glInsertEventMarkerEXT(GLsizei length, const GLchar *marker);
void glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
void glInvalidateBufferData(GLuint buffer);
void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void glInvalidateTexImage(GLuint texture, GLint level);
void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLboolean glIsAsyncMarkerSGIX(GLuint marker);
GLboolean glIsBuffer(GLuint buffer);
GLboolean glIsBufferARB(GLuint buffer);
GLboolean glIsBufferResidentNV(GLenum target);
GLboolean glIsCommandListNV(GLuint list);
GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index);
GLboolean glIsEnabledi(GLenum target, GLuint index);
GLboolean glIsFenceAPPLE(GLuint fence);
GLboolean glIsFenceNV(GLuint fence);
GLboolean glIsFramebuffer(GLuint framebuffer);
GLboolean glIsFramebufferEXT(GLuint framebuffer);
GLboolean glIsImageHandleResidentARB(GLuint64 handle);
GLboolean glIsImageHandleResidentNV(GLuint64 handle);
GLboolean glIsMemoryObjectEXT(GLuint memoryObject);
GLboolean glIsNameAMD(GLenum identifier, GLuint name);
GLboolean glIsNamedBufferResidentNV(GLuint buffer);
GLboolean glIsNamedStringARB(GLint namelen, const GLchar *name);
GLboolean glIsObjectBufferATI(GLuint buffer);
GLboolean glIsOcclusionQueryNV(GLuint id);
GLboolean glIsPathNV(GLuint path);
GLboolean glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y);
GLboolean glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y);
GLboolean glIsProgram(GLuint program);
GLboolean glIsProgramARB(GLuint program);
GLboolean glIsProgramNV(GLuint id);
GLboolean glIsProgramPipeline(GLuint pipeline);
GLboolean glIsQuery(GLuint id);
GLboolean glIsQueryARB(GLuint id);
GLboolean glIsRenderbuffer(GLuint renderbuffer);
GLboolean glIsRenderbufferEXT(GLuint renderbuffer);
GLboolean glIsSampler(GLuint sampler);
GLboolean glIsSemaphoreEXT(GLuint semaphore);
GLboolean glIsShader(GLuint shader);
GLboolean glIsStateNV(GLuint state);
GLboolean glIsSync(GLsync sync);
GLboolean glIsTextureEXT(GLuint texture);
GLboolean glIsTextureHandleResidentARB(GLuint64 handle);
GLboolean glIsTextureHandleResidentNV(GLuint64 handle);
GLboolean glIsTransformFeedback(GLuint id);
GLboolean glIsTransformFeedbackNV(GLuint id);
GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap);
GLboolean glIsVertexArray(GLuint array);
GLboolean glIsVertexArrayAPPLE(GLuint array);
GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname);
void glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
void glLGPUInterlockNVX(void);
void glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label);
void glLinkProgram(GLuint program);
void glLinkProgramARB(GLhandleARB programObj);
void glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
void glLoadIdentityDeformationMapSGIX(GLbitfield mask);
void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
void glLoadTransposeMatrixd(const GLdouble *m);
void glLoadTransposeMatrixdARB(const GLdouble *m);
void glLoadTransposeMatrixf(const GLfloat *m);
void glLoadTransposeMatrixfARB(const GLfloat *m);
void glLockArraysEXT(GLint first, GLsizei count);
void glMakeBufferNonResidentNV(GLenum target);
void glMakeBufferResidentNV(GLenum target, GLenum access);
void glMakeImageHandleNonResidentARB(GLuint64 handle);
void glMakeImageHandleNonResidentNV(GLuint64 handle);
void glMakeImageHandleResidentARB(GLuint64 handle, GLenum access);
void glMakeImageHandleResidentNV(GLuint64 handle, GLenum access);
void glMakeNamedBufferNonResidentNV(GLuint buffer);
void glMakeNamedBufferResidentNV(GLuint buffer, GLenum access);
void glMakeTextureHandleNonResidentARB(GLuint64 handle);
void glMakeTextureHandleNonResidentNV(GLuint64 handle);
void glMakeTextureHandleResidentARB(GLuint64 handle);
void glMakeTextureHandleResidentNV(GLuint64 handle);
void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
void glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params);
void glMapParameterivNV(GLenum target, GLenum pname, const GLint *params);
void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer);
void glMatrixIndexubvARB(GLint size, const GLubyte *indices);
void glMatrixIndexuivARB(GLint size, const GLuint *indices);
void glMatrixIndexusvARB(GLint size, const GLushort *indices);
void glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m);
void glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m);
void glMatrixLoadIdentityEXT(GLenum mode);
void glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m);
void glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m);
void glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m);
void glMatrixLoaddEXT(GLenum mode, const GLdouble *m);
void glMatrixLoadfEXT(GLenum mode, const GLfloat *m);
void glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m);
void glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m);
void glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m);
void glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m);
void glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m);
void glMatrixMultdEXT(GLenum mode, const GLdouble *m);
void glMatrixMultfEXT(GLenum mode, const GLfloat *m);
void glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void glMatrixPopEXT(GLenum mode);
void glMatrixPushEXT(GLenum mode);
void glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
void glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
void glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
void glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
void glMaxShaderCompilerThreadsARB(GLuint count);
void glMaxShaderCompilerThreadsKHR(GLuint count);
void glMemoryBarrier(GLbitfield barriers);
void glMemoryBarrierByRegion(GLbitfield barriers);
void glMemoryBarrierEXT(GLbitfield barriers);
void glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params);
void glMinSampleShading(GLfloat value);
void glMinSampleShadingARB(GLfloat value);
void glMinmax(GLenum target, GLenum internalformat, GLboolean sink);
void glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink);
void glMultTransposeMatrixd(const GLdouble *m);
void glMultTransposeMatrixdARB(const GLdouble *m);
void glMultTransposeMatrixf(const GLfloat *m);
void glMultTransposeMatrixfARB(const GLfloat *m);
void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
void glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
void glMultiDrawArraysIndirectAMD(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
void glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
void glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
void glMultiDrawArraysIndirectCount(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void glMultiDrawArraysIndirectCountARB(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount);
void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
void glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
void glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
void glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
void glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
void glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
void glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride);
void glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
void glMultiTexCoord1d(GLenum target, GLdouble s);
void glMultiTexCoord1dARB(GLenum target, GLdouble s);
void glMultiTexCoord1dv(GLenum target, const GLdouble *v);
void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v);
void glMultiTexCoord1f(GLenum target, GLfloat s);
void glMultiTexCoord1fARB(GLenum target, GLfloat s);
void glMultiTexCoord1fv(GLenum target, const GLfloat *v);
void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v);
void glMultiTexCoord1hNV(GLenum target, GLhalfNV s);
void glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v);
void glMultiTexCoord1i(GLenum target, GLint s);
void glMultiTexCoord1iARB(GLenum target, GLint s);
void glMultiTexCoord1iv(GLenum target, const GLint *v);
void glMultiTexCoord1ivARB(GLenum target, const GLint *v);
void glMultiTexCoord1s(GLenum target, GLshort s);
void glMultiTexCoord1sARB(GLenum target, GLshort s);
void glMultiTexCoord1sv(GLenum target, const GLshort *v);
void glMultiTexCoord1svARB(GLenum target, const GLshort *v);
void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
void glMultiTexCoord2dv(GLenum target, const GLdouble *v);
void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v);
void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
void glMultiTexCoord2fv(GLenum target, const GLfloat *v);
void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v);
void glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);
void glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v);
void glMultiTexCoord2i(GLenum target, GLint s, GLint t);
void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t);
void glMultiTexCoord2iv(GLenum target, const GLint *v);
void glMultiTexCoord2ivARB(GLenum target, const GLint *v);
void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t);
void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
void glMultiTexCoord2sv(GLenum target, const GLshort *v);
void glMultiTexCoord2svARB(GLenum target, const GLshort *v);
void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void glMultiTexCoord3dv(GLenum target, const GLdouble *v);
void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v);
void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void glMultiTexCoord3fv(GLenum target, const GLfloat *v);
void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v);
void glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
void glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v);
void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
void glMultiTexCoord3iv(GLenum target, const GLint *v);
void glMultiTexCoord3ivARB(GLenum target, const GLint *v);
void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
void glMultiTexCoord3sv(GLenum target, const GLshort *v);
void glMultiTexCoord3svARB(GLenum target, const GLshort *v);
void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void glMultiTexCoord4dv(GLenum target, const GLdouble *v);
void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v);
void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void glMultiTexCoord4fv(GLenum target, const GLfloat *v);
void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v);
void glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
void glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v);
void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
void glMultiTexCoord4iv(GLenum target, const GLint *v);
void glMultiTexCoord4ivARB(GLenum target, const GLint *v);
void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void glMultiTexCoord4sv(GLenum target, const GLshort *v);
void glMultiTexCoord4svARB(GLenum target, const GLshort *v);
void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
void glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
void glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
void glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
void glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
void glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
void glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
void glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
void glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
void glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
void glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param);
void glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
void glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
void glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
void glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
void glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
void glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
void glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
void glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
void glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
void glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
void glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer);
void glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
void glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void glMulticastBarrierNV(void);
void glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
void glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
void glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 *params);
void glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint *params);
void glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 *params);
void glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint *params);
void glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask);
void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
void glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
void glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
void glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
void glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
void glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
void glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs);
void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
void glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param);
void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
void glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
void glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
void glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
void glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
void glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
void glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params);
void glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params);
void glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
void glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params);
void glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params);
void glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
void glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
void glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
void glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
void glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
GLuint glNewObjectBufferATI(GLsizei size, const void *pointer, GLenum usage);
void glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v);
void glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
void glNormal3hvNV(const GLhalfNV *v);
void glNormalFormatNV(GLenum type, GLsizei stride);
void glNormalP3ui(GLenum type, GLuint coords);
void glNormalP3uiv(GLenum type, const GLuint *coords);
void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
void glNormalPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
void glNormalPointervINTEL(GLenum type, const void **pointer);
void glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
void glNormalStream3bvATI(GLenum stream, const GLbyte *coords);
void glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
void glNormalStream3dvATI(GLenum stream, const GLdouble *coords);
void glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
void glNormalStream3fvATI(GLenum stream, const GLfloat *coords);
void glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz);
void glNormalStream3ivATI(GLenum stream, const GLint *coords);
void glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
void glNormalStream3svATI(GLenum stream, const GLshort *coords);
void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
void glPNTrianglesfATI(GLenum pname, GLfloat param);
void glPNTrianglesiATI(GLenum pname, GLint param);
void glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);
void glPatchParameterfv(GLenum pname, const GLfloat *values);
void glPatchParameteri(GLenum pname, GLint value);
void glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
void glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
void glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
void glPathCoverDepthFuncNV(GLenum func);
void glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray);
void glPathFogGenNV(GLenum genMode);
GLenum glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLenum glPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
void glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
void glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLenum glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
void glPathParameterfNV(GLuint path, GLenum pname, GLfloat value);
void glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value);
void glPathParameteriNV(GLuint path, GLenum pname, GLint value);
void glPathParameterivNV(GLuint path, GLenum pname, const GLint *value);
void glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units);
void glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask);
void glPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString);
void glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
void glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
void glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
void glPauseTransformFeedback(void);
void glPauseTransformFeedbackNV(void);
void glPixelDataRangeNV(GLenum target, GLsizei length, const void *pointer);
void glPixelTexGenSGIX(GLenum mode);
void glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param);
void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params);
void glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param);
void glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params);
GLboolean glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
void glPointParameterf(GLenum pname, GLfloat param);
void glPointParameterfARB(GLenum pname, GLfloat param);
void glPointParameterfEXT(GLenum pname, GLfloat param);
void glPointParameterfv(GLenum pname, const GLfloat *params);
void glPointParameterfvARB(GLenum pname, const GLfloat *params);
void glPointParameterfvEXT(GLenum pname, const GLfloat *params);
void glPointParameteri(GLenum pname, GLint param);
void glPointParameteriNV(GLenum pname, GLint param);
void glPointParameteriv(GLenum pname, const GLint *params);
void glPointParameterivNV(GLenum pname, const GLint *params);
GLint glPollAsyncSGIX(GLuint *markerp);
void glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp);
void glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp);
void glPolygonOffsetEXT(GLfloat factor, GLfloat bias);
void glPopDebugGroup(void);
void glPopGroupMarkerEXT(void);
void glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
void glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
void glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
void glPrimitiveRestartIndex(GLuint index);
void glPrimitiveRestartIndexNV(GLuint index);
void glPrimitiveRestartNV(void);
void glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities);
void glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
void glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
void glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);
void glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
void glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
void glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params);
void glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params);
void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params);
void glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params);
void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
void glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
void glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params);
void glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params);
void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params);
void glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params);
void glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
void glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
void glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v);
void glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v);
void glProgramParameteri(GLuint program, GLenum pname, GLint value);
void glProgramParameteriARB(GLuint program, GLenum pname, GLint value);
void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value);
void glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v);
void glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v);
void glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void *string);
void glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
void glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0);
void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void glProgramUniform1i(GLuint program, GLint location, GLint v0);
void glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x);
void glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x);
void glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
void glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
void glProgramUniform1iEXT(GLuint program, GLint location, GLint v0);
void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
void glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
void glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
void glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x);
void glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x);
void glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
void glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0);
void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
void glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
void glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1);
void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
void glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y);
void glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
void glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
void glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
void glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1);
void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
void glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
void glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y);
void glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
void glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
void glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1);
void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
void glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
void glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
void glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
void glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
void glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
void glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
void glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
void glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
void glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
void glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
void glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
void glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
void glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
void glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
void glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
void glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
void glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
void glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
void glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
void glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value);
void glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value);
void glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
void glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value);
void glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
void glProgramVertexLimitNV(GLenum target, GLint limit);
void glProvokingVertex(GLenum mode);
void glProvokingVertexEXT(GLenum mode);
void glPushClientAttribDefaultEXT(GLbitfield mask);
void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void glPushGroupMarkerEXT(GLsizei length, const GLchar *marker);
void glQueryCounter(GLuint id, GLenum target);
void glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param);
void glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations);
void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void glReferencePlaneSGIX(const GLdouble *equation);
GLboolean glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key);
void glReleaseShaderCompiler(void);
void glRenderGpuMaskNV(GLbitfield mask);
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void **pointer);
void glReplacementCodeubSUN(GLubyte code);
void glReplacementCodeubvSUN(const GLubyte *code);
void glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
void glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v);
void glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
void glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
void glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v);
void glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v);
void glReplacementCodeuiSUN(GLuint code);
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
void glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
void glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v);
void glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
void glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v);
void glReplacementCodeuivSUN(const GLuint *code);
void glReplacementCodeusSUN(GLushort code);
void glReplacementCodeusvSUN(const GLushort *code);
void glRequestResidentProgramsNV(GLsizei n, const GLuint *programs);
void glResetHistogram(GLenum target);
void glResetHistogramEXT(GLenum target);
void glResetMinmax(GLenum target);
void glResetMinmaxEXT(GLenum target);
void glResizeBuffersMESA(void);
void glResumeTransformFeedback(void);
void glResumeTransformFeedbackNV(void);
void glSampleCoverage(GLfloat value, GLboolean invert);
void glSampleCoverageARB(GLfloat value, GLboolean invert);
void glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);
void glSampleMaskEXT(GLclampf value, GLboolean invert);
void glSampleMaskIndexedNV(GLuint index, GLbitfield mask);
void glSampleMaskSGIS(GLclampf value, GLboolean invert);
void glSampleMaski(GLuint maskNumber, GLbitfield mask);
void glSamplePatternEXT(GLenum pattern);
void glSamplePatternSGIS(GLenum pattern);
void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
void glScissorArrayv(GLuint first, GLsizei count, const GLint *v);
void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void glScissorIndexedv(GLuint index, const GLint *v);
void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
void glSecondaryColor3bv(const GLbyte *v);
void glSecondaryColor3bvEXT(const GLbyte *v);
void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
void glSecondaryColor3dv(const GLdouble *v);
void glSecondaryColor3dvEXT(const GLdouble *v);
void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
void glSecondaryColor3fv(const GLfloat *v);
void glSecondaryColor3fvEXT(const GLfloat *v);
void glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
void glSecondaryColor3hvNV(const GLhalfNV *v);
void glSecondaryColor3i(GLint red, GLint green, GLint blue);
void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue);
void glSecondaryColor3iv(const GLint *v);
void glSecondaryColor3ivEXT(const GLint *v);
void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue);
void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
void glSecondaryColor3sv(const GLshort *v);
void glSecondaryColor3svEXT(const GLshort *v);
void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
void glSecondaryColor3ubv(const GLubyte *v);
void glSecondaryColor3ubvEXT(const GLubyte *v);
void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
void glSecondaryColor3uiv(const GLuint *v);
void glSecondaryColor3uivEXT(const GLuint *v);
void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue);
void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
void glSecondaryColor3usv(const GLushort *v);
void glSecondaryColor3usvEXT(const GLushort *v);
void glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride);
void glSecondaryColorP3ui(GLenum type, GLuint color);
void glSecondaryColorP3uiv(GLenum type, const GLuint *color);
void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer);
void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer);
void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
void glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
void glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params);
void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
void glSetFenceAPPLE(GLuint fence);
void glSetFenceNV(GLuint fence, GLenum condition);
void glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value);
void glSetInvariantEXT(GLuint id, GLenum type, const void *addr);
void glSetLocalConstantEXT(GLuint id, GLenum type, const void *addr);
void glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val);
void glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
void glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1);
void glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
void glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
void glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length);
void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
void glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points);
void glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts);
void glSignalVkFenceNV(GLuint64 vkFence);
void glSignalVkSemaphoreNV(GLuint64 vkSemaphore);
void glSpecializeShader(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
void glSpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
void glSpriteParameterfSGIX(GLenum pname, GLfloat param);
void glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params);
void glSpriteParameteriSGIX(GLenum pname, GLint param);
void glSpriteParameterivSGIX(GLenum pname, const GLint *params);
void glStateCaptureNV(GLuint state, GLenum mode);
void glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
void glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask);
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void glStencilMaskSeparate(GLenum face, GLuint mask);
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void glStencilOpValueAMD(GLenum face, GLuint value);
void glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
void glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask);
void glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
void glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
void glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
void glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
void glStringMarkerGREMEDY(GLsizei len, const void *string);
void glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits);
void glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
void glSyncTextureINTEL(GLuint texture);
void glTagSampleBufferSGIX(void);
void glTangentPointerEXT(GLenum type, GLsizei stride, const void *pointer);
void glTbufferMask3DFX(GLuint mask);
void glTessellationFactorAMD(GLfloat factor);
void glTessellationModeAMD(GLenum mode);
GLboolean glTestFenceAPPLE(GLuint fence);
GLboolean glTestFenceNV(GLuint fence);
GLboolean glTestObjectAPPLE(GLenum object, GLuint name);
void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
void glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer);
void glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer);
void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glTexBumpParameterfvATI(GLenum pname, const GLfloat *param);
void glTexBumpParameterivATI(GLenum pname, const GLint *param);
void glTexCoord1hNV(GLhalfNV s);
void glTexCoord1hvNV(const GLhalfNV *v);
void glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
void glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v);
void glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
void glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
void glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v);
void glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
void glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v);
void glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
void glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v);
void glTexCoord2hNV(GLhalfNV s, GLhalfNV t);
void glTexCoord2hvNV(const GLhalfNV *v);
void glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
void glTexCoord3hvNV(const GLhalfNV *v);
void glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
void glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v);
void glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
void glTexCoord4hvNV(const GLhalfNV *v);
void glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride);
void glTexCoordP1ui(GLenum type, GLuint coords);
void glTexCoordP1uiv(GLenum type, const GLuint *coords);
void glTexCoordP2ui(GLenum type, GLuint coords);
void glTexCoordP2uiv(GLenum type, const GLuint *coords);
void glTexCoordP3ui(GLenum type, GLuint coords);
void glTexCoordP3uiv(GLenum type, const GLuint *coords);
void glTexCoordP4ui(GLenum type, GLuint coords);
void glTexCoordP4uiv(GLenum type, const GLuint *coords);
void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
void glTexCoordPointervINTEL(GLint size, GLenum type, const void **pointer);
void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels);
void glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
void glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
void glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params);
void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
void glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params);
void glTexRenderbufferNV(GLenum target, GLuint renderbuffer);
void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
void glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
void glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
void glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels);
void glTextureBarrier(void);
void glTextureBarrierNV(void);
void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
void glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
void glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
void glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
void glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
void glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
void glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
void glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
void glTextureLightEXT(GLenum pname);
void glTextureMaterialEXT(GLenum face, GLenum mode);
void glTextureNormalEXT(GLenum mode);
void glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
void glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params);
void glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params);
void glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params);
void glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params);
void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param);
void glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param);
void glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param);
void glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
void glTextureParameteri(GLuint texture, GLenum pname, GLint param);
void glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param);
void glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param);
void glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params);
void glTextureRangeAPPLE(GLenum target, GLsizei length, const void *pointer);
void glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer);
void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
void glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
void glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
void glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
void glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
void glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
void glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);
void glTransformFeedbackAttribsNV(GLsizei count, const GLint *attribs, GLenum bufferMode);
void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
void glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
void glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
void glUniform1d(GLint location, GLdouble x);
void glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
void glUniform1f(GLint location, GLfloat v0);
void glUniform1fARB(GLint location, GLfloat v0);
void glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value);
void glUniform1i(GLint location, GLint v0);
void glUniform1i64ARB(GLint location, GLint64 x);
void glUniform1i64NV(GLint location, GLint64EXT x);
void glUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value);
void glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
void glUniform1iARB(GLint location, GLint v0);
void glUniform1iv(GLint location, GLsizei count, const GLint *value);
void glUniform1ivARB(GLint location, GLsizei count, const GLint *value);
void glUniform1ui(GLint location, GLuint v0);
void glUniform1ui64ARB(GLint location, GLuint64 x);
void glUniform1ui64NV(GLint location, GLuint64EXT x);
void glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
void glUniform1uiEXT(GLint location, GLuint v0);
void glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value);
void glUniform2d(GLint location, GLdouble x, GLdouble y);
void glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1);
void glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value);
void glUniform2i(GLint location, GLint v0, GLint v1);
void glUniform2i64ARB(GLint location, GLint64 x, GLint64 y);
void glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y);
void glUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value);
void glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
void glUniform2iARB(GLint location, GLint v0, GLint v1);
void glUniform2iv(GLint location, GLsizei count, const GLint *value);
void glUniform2ivARB(GLint location, GLsizei count, const GLint *value);
void glUniform2ui(GLint location, GLuint v0, GLuint v1);
void glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y);
void glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y);
void glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1);
void glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value);
void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
void glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value);
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
void glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z);
void glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
void glUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value);
void glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
void glUniform3iv(GLint location, GLsizei count, const GLint *value);
void glUniform3ivARB(GLint location, GLsizei count, const GLint *value);
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
void glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
void glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
void glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2);
void glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value);
void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
void glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value);
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
void glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
void glUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value);
void glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value);
void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glUniform4iv(GLint location, GLsizei count, const GLint *value);
void glUniform4ivARB(GLint location, GLsizei count, const GLint *value);
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
void glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
void glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
void glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value);
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer);
void glUniformHandleui64ARB(GLint location, GLuint64 value);
void glUniformHandleui64NV(GLint location, GLuint64 value);
void glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value);
void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
void glUniformui64NV(GLint location, GLuint64EXT value);
void glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value);
void glUnlockArraysEXT(void);
GLboolean glUnmapBuffer(GLenum target);
GLboolean glUnmapBufferARB(GLenum target);
GLboolean glUnmapNamedBuffer(GLuint buffer);
GLboolean glUnmapNamedBufferEXT(GLuint buffer);
void glUnmapObjectBufferATI(GLuint buffer);
void glUnmapTexture2DINTEL(GLuint texture, GLint level);
void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
void glUseProgram(GLuint program);
void glUseProgramObjectARB(GLhandleARB programObj);
void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
void glUseShaderProgramEXT(GLenum type, GLuint program);
void glVDPAUFiniNV(void);
void glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void glVDPAUInitNV(const void *vdpDevice, const void *getProcAddress);
GLboolean glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface);
void glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
GLvdpauSurfaceNV glVDPAURegisterOutputSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
void glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access);
void glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
void glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface);
void glValidateProgram(GLuint program);
void glValidateProgramARB(GLhandleARB programObj);
void glValidateProgramPipeline(GLuint pipeline);
void glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void *addr);
void glVariantbvEXT(GLuint id, const GLbyte *addr);
void glVariantdvEXT(GLuint id, const GLdouble *addr);
void glVariantfvEXT(GLuint id, const GLfloat *addr);
void glVariantivEXT(GLuint id, const GLint *addr);
void glVariantsvEXT(GLuint id, const GLshort *addr);
void glVariantubvEXT(GLuint id, const GLubyte *addr);
void glVariantuivEXT(GLuint id, const GLuint *addr);
void glVariantusvEXT(GLuint id, const GLushort *addr);
void glVertex2hNV(GLhalfNV x, GLhalfNV y);
void glVertex2hvNV(const GLhalfNV *v);
void glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
void glVertex3hvNV(const GLhalfNV *v);
void glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
void glVertex4hvNV(const GLhalfNV *v);
void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
void glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
void glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayParameteriAPPLE(GLenum pname, GLint param);
void glVertexArrayRangeAPPLE(GLsizei length, void *pointer);
void glVertexArrayRangeNV(GLsizei length, const void *pointer);
void glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
void glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor);
void glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
void glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor);
void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
void glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void glVertexAttrib1d(GLuint index, GLdouble x);
void glVertexAttrib1dARB(GLuint index, GLdouble x);
void glVertexAttrib1dNV(GLuint index, GLdouble x);
void glVertexAttrib1dv(GLuint index, const GLdouble *v);
void glVertexAttrib1dvARB(GLuint index, const GLdouble *v);
void glVertexAttrib1dvNV(GLuint index, const GLdouble *v);
void glVertexAttrib1f(GLuint index, GLfloat x);
void glVertexAttrib1fARB(GLuint index, GLfloat x);
void glVertexAttrib1fNV(GLuint index, GLfloat x);
void glVertexAttrib1fv(GLuint index, const GLfloat *v);
void glVertexAttrib1fvARB(GLuint index, const GLfloat *v);
void glVertexAttrib1fvNV(GLuint index, const GLfloat *v);
void glVertexAttrib1hNV(GLuint index, GLhalfNV x);
void glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v);
void glVertexAttrib1s(GLuint index, GLshort x);
void glVertexAttrib1sARB(GLuint index, GLshort x);
void glVertexAttrib1sNV(GLuint index, GLshort x);
void glVertexAttrib1sv(GLuint index, const GLshort *v);
void glVertexAttrib1svARB(GLuint index, const GLshort *v);
void glVertexAttrib1svNV(GLuint index, const GLshort *v);
void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
void glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
void glVertexAttrib2dv(GLuint index, const GLdouble *v);
void glVertexAttrib2dvARB(GLuint index, const GLdouble *v);
void glVertexAttrib2dvNV(GLuint index, const GLdouble *v);
void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
void glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
void glVertexAttrib2fv(GLuint index, const GLfloat *v);
void glVertexAttrib2fvARB(GLuint index, const GLfloat *v);
void glVertexAttrib2fvNV(GLuint index, const GLfloat *v);
void glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
void glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v);
void glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
void glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
void glVertexAttrib2sv(GLuint index, const GLshort *v);
void glVertexAttrib2svARB(GLuint index, const GLshort *v);
void glVertexAttrib2svNV(GLuint index, const GLshort *v);
void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void glVertexAttrib3dv(GLuint index, const GLdouble *v);
void glVertexAttrib3dvARB(GLuint index, const GLdouble *v);
void glVertexAttrib3dvNV(GLuint index, const GLdouble *v);
void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void glVertexAttrib3fv(GLuint index, const GLfloat *v);
void glVertexAttrib3fvARB(GLuint index, const GLfloat *v);
void glVertexAttrib3fvNV(GLuint index, const GLfloat *v);
void glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
void glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v);
void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
void glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
void glVertexAttrib3sv(GLuint index, const GLshort *v);
void glVertexAttrib3svARB(GLuint index, const GLshort *v);
void glVertexAttrib3svNV(GLuint index, const GLshort *v);
void glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
void glVertexAttrib4NbvARB(GLuint index, const GLbyte *v);
void glVertexAttrib4Niv(GLuint index, const GLint *v);
void glVertexAttrib4NivARB(GLuint index, const GLint *v);
void glVertexAttrib4Nsv(GLuint index, const GLshort *v);
void glVertexAttrib4NsvARB(GLuint index, const GLshort *v);
void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
void glVertexAttrib4NubvARB(GLuint index, const GLubyte *v);
void glVertexAttrib4Nuiv(GLuint index, const GLuint *v);
void glVertexAttrib4NuivARB(GLuint index, const GLuint *v);
void glVertexAttrib4Nusv(GLuint index, const GLushort *v);
void glVertexAttrib4NusvARB(GLuint index, const GLushort *v);
void glVertexAttrib4bv(GLuint index, const GLbyte *v);
void glVertexAttrib4bvARB(GLuint index, const GLbyte *v);
void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertexAttrib4dv(GLuint index, const GLdouble *v);
void glVertexAttrib4dvARB(GLuint index, const GLdouble *v);
void glVertexAttrib4dvNV(GLuint index, const GLdouble *v);
void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertexAttrib4fv(GLuint index, const GLfloat *v);
void glVertexAttrib4fvARB(GLuint index, const GLfloat *v);
void glVertexAttrib4fvNV(GLuint index, const GLfloat *v);
void glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
void glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v);
void glVertexAttrib4iv(GLuint index, const GLint *v);
void glVertexAttrib4ivARB(GLuint index, const GLint *v);
void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void glVertexAttrib4sv(GLuint index, const GLshort *v);
void glVertexAttrib4svARB(GLuint index, const GLshort *v);
void glVertexAttrib4svNV(GLuint index, const GLshort *v);
void glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void glVertexAttrib4ubv(GLuint index, const GLubyte *v);
void glVertexAttrib4ubvARB(GLuint index, const GLubyte *v);
void glVertexAttrib4ubvNV(GLuint index, const GLubyte *v);
void glVertexAttrib4uiv(GLuint index, const GLuint *v);
void glVertexAttrib4uivARB(GLuint index, const GLuint *v);
void glVertexAttrib4usv(GLuint index, const GLushort *v);
void glVertexAttrib4usvARB(GLuint index, const GLushort *v);
void glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
void glVertexAttribDivisor(GLuint index, GLuint divisor);
void glVertexAttribDivisorARB(GLuint index, GLuint divisor);
void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
void glVertexAttribI1i(GLuint index, GLint x);
void glVertexAttribI1iEXT(GLuint index, GLint x);
void glVertexAttribI1iv(GLuint index, const GLint *v);
void glVertexAttribI1ivEXT(GLuint index, const GLint *v);
void glVertexAttribI1ui(GLuint index, GLuint x);
void glVertexAttribI1uiEXT(GLuint index, GLuint x);
void glVertexAttribI1uiv(GLuint index, const GLuint *v);
void glVertexAttribI1uivEXT(GLuint index, const GLuint *v);
void glVertexAttribI2i(GLuint index, GLint x, GLint y);
void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y);
void glVertexAttribI2iv(GLuint index, const GLint *v);
void glVertexAttribI2ivEXT(GLuint index, const GLint *v);
void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
void glVertexAttribI2uiv(GLuint index, const GLuint *v);
void glVertexAttribI2uivEXT(GLuint index, const GLuint *v);
void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
void glVertexAttribI3iv(GLuint index, const GLint *v);
void glVertexAttribI3ivEXT(GLuint index, const GLint *v);
void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
void glVertexAttribI3uiv(GLuint index, const GLuint *v);
void glVertexAttribI3uivEXT(GLuint index, const GLuint *v);
void glVertexAttribI4bv(GLuint index, const GLbyte *v);
void glVertexAttribI4bvEXT(GLuint index, const GLbyte *v);
void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
void glVertexAttribI4iv(GLuint index, const GLint *v);
void glVertexAttribI4ivEXT(GLuint index, const GLint *v);
void glVertexAttribI4sv(GLuint index, const GLshort *v);
void glVertexAttribI4svEXT(GLuint index, const GLshort *v);
void glVertexAttribI4ubv(GLuint index, const GLubyte *v);
void glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v);
void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void glVertexAttribI4uiv(GLuint index, const GLuint *v);
void glVertexAttribI4uivEXT(GLuint index, const GLuint *v);
void glVertexAttribI4usv(GLuint index, const GLushort *v);
void glVertexAttribI4usvEXT(GLuint index, const GLushort *v);
void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void glVertexAttribL1d(GLuint index, GLdouble x);
void glVertexAttribL1dEXT(GLuint index, GLdouble x);
void glVertexAttribL1dv(GLuint index, const GLdouble *v);
void glVertexAttribL1dvEXT(GLuint index, const GLdouble *v);
void glVertexAttribL1i64NV(GLuint index, GLint64EXT x);
void glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v);
void glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x);
void glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x);
void glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v);
void glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v);
void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
void glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y);
void glVertexAttribL2dv(GLuint index, const GLdouble *v);
void glVertexAttribL2dvEXT(GLuint index, const GLdouble *v);
void glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y);
void glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v);
void glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y);
void glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v);
void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void glVertexAttribL3dv(GLuint index, const GLdouble *v);
void glVertexAttribL3dvEXT(GLuint index, const GLdouble *v);
void glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
void glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v);
void glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
void glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v);
void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertexAttribL4dv(GLuint index, const GLdouble *v);
void glVertexAttribL4dvEXT(GLuint index, const GLdouble *v);
void glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
void glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v);
void glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
void glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v);
void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride);
void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param);
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer);
void glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v);
void glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v);
void glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
void glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v);
void glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v);
void glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v);
void glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
void glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v);
void glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v);
void glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v);
void glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
void glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v);
void glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v);
void glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v);
void glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
void glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v);
void glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v);
void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
void glVertexBlendARB(GLint count);
void glVertexBlendEnvfATI(GLenum pname, GLfloat param);
void glVertexBlendEnviATI(GLenum pname, GLint param);
void glVertexFormatNV(GLint size, GLenum type, GLsizei stride);
void glVertexP2ui(GLenum type, GLuint value);
void glVertexP2uiv(GLenum type, const GLuint *value);
void glVertexP3ui(GLenum type, GLuint value);
void glVertexP3uiv(GLenum type, const GLuint *value);
void glVertexP4ui(GLenum type, GLuint value);
void glVertexP4uiv(GLenum type, const GLuint *value);
void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
void glVertexPointervINTEL(GLint size, GLenum type, const void **pointer);
void glVertexStream1dATI(GLenum stream, GLdouble x);
void glVertexStream1dvATI(GLenum stream, const GLdouble *coords);
void glVertexStream1fATI(GLenum stream, GLfloat x);
void glVertexStream1fvATI(GLenum stream, const GLfloat *coords);
void glVertexStream1iATI(GLenum stream, GLint x);
void glVertexStream1ivATI(GLenum stream, const GLint *coords);
void glVertexStream1sATI(GLenum stream, GLshort x);
void glVertexStream1svATI(GLenum stream, const GLshort *coords);
void glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y);
void glVertexStream2dvATI(GLenum stream, const GLdouble *coords);
void glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y);
void glVertexStream2fvATI(GLenum stream, const GLfloat *coords);
void glVertexStream2iATI(GLenum stream, GLint x, GLint y);
void glVertexStream2ivATI(GLenum stream, const GLint *coords);
void glVertexStream2sATI(GLenum stream, GLshort x, GLshort y);
void glVertexStream2svATI(GLenum stream, const GLshort *coords);
void glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
void glVertexStream3dvATI(GLenum stream, const GLdouble *coords);
void glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
void glVertexStream3fvATI(GLenum stream, const GLfloat *coords);
void glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z);
void glVertexStream3ivATI(GLenum stream, const GLint *coords);
void glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);
void glVertexStream3svATI(GLenum stream, const GLshort *coords);
void glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertexStream4dvATI(GLenum stream, const GLdouble *coords);
void glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertexStream4fvATI(GLenum stream, const GLfloat *coords);
void glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w);
void glVertexStream4ivATI(GLenum stream, const GLint *coords);
void glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
void glVertexStream4svATI(GLenum stream, const GLshort *coords);
void glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer);
void glVertexWeightfEXT(GLfloat weight);
void glVertexWeightfvEXT(const GLfloat *weight);
void glVertexWeighthNV(GLhalfNV weight);
void glVertexWeighthvNV(const GLhalfNV *weight);
GLenum glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
void glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
void glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
void glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
void glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void glViewportIndexedfv(GLuint index, const GLfloat *v);
void glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
void glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
void glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts);
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void glWaitVkSemaphoreNV(GLuint64 vkSemaphore);
void glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer);
void glWeightbvARB(GLint size, const GLbyte *weights);
void glWeightdvARB(GLint size, const GLdouble *weights);
void glWeightfvARB(GLint size, const GLfloat *weights);
void glWeightivARB(GLint size, const GLint *weights);
void glWeightsvARB(GLint size, const GLshort *weights);
void glWeightubvARB(GLint size, const GLubyte *weights);
void glWeightuivARB(GLint size, const GLuint *weights);
void glWeightusvARB(GLint size, const GLushort *weights);
void glWindowPos2d(GLdouble x, GLdouble y);
void glWindowPos2dARB(GLdouble x, GLdouble y);
void glWindowPos2dMESA(GLdouble x, GLdouble y);
void glWindowPos2dv(const GLdouble *v);
void glWindowPos2dvARB(const GLdouble *v);
void glWindowPos2dvMESA(const GLdouble *v);
void glWindowPos2f(GLfloat x, GLfloat y);
void glWindowPos2fARB(GLfloat x, GLfloat y);
void glWindowPos2fMESA(GLfloat x, GLfloat y);
void glWindowPos2fv(const GLfloat *v);
void glWindowPos2fvARB(const GLfloat *v);
void glWindowPos2fvMESA(const GLfloat *v);
void glWindowPos2i(GLint x, GLint y);
void glWindowPos2iARB(GLint x, GLint y);
void glWindowPos2iMESA(GLint x, GLint y);
void glWindowPos2iv(const GLint *v);
void glWindowPos2ivARB(const GLint *v);
void glWindowPos2ivMESA(const GLint *v);
void glWindowPos2s(GLshort x, GLshort y);
void glWindowPos2sARB(GLshort x, GLshort y);
void glWindowPos2sMESA(GLshort x, GLshort y);
void glWindowPos2sv(const GLshort *v);
void glWindowPos2svARB(const GLshort *v);
void glWindowPos2svMESA(const GLshort *v);
void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z);
void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
void glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
void glWindowPos3dv(const GLdouble *v);
void glWindowPos3dvARB(const GLdouble *v);
void glWindowPos3dvMESA(const GLdouble *v);
void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z);
void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
void glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
void glWindowPos3fv(const GLfloat *v);
void glWindowPos3fvARB(const GLfloat *v);
void glWindowPos3fvMESA(const GLfloat *v);
void glWindowPos3i(GLint x, GLint y, GLint z);
void glWindowPos3iARB(GLint x, GLint y, GLint z);
void glWindowPos3iMESA(GLint x, GLint y, GLint z);
void glWindowPos3iv(const GLint *v);
void glWindowPos3ivARB(const GLint *v);
void glWindowPos3ivMESA(const GLint *v);
void glWindowPos3s(GLshort x, GLshort y, GLshort z);
void glWindowPos3sARB(GLshort x, GLshort y, GLshort z);
void glWindowPos3sMESA(GLshort x, GLshort y, GLshort z);
void glWindowPos3sv(const GLshort *v);
void glWindowPos3svARB(const GLshort *v);
void glWindowPos3svMESA(const GLshort *v);
void glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glWindowPos4dvMESA(const GLdouble *v);
void glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glWindowPos4fvMESA(const GLfloat *v);
void glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
void glWindowPos4ivMESA(const GLint *v);
void glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
void glWindowPos4svMESA(const GLshort *v);
void glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box);
void glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);

#if defined(SOGL_WINDOWS)
//WGL Constants
constexpr GLenum	WGL_ACCELERATION_ARB = 0x2003;
constexpr GLenum	WGL_ACCELERATION_EXT = 0x2003;
constexpr GLenum	WGL_ACCESS_READ_ONLY_NV = 0x00000000;
constexpr GLenum	WGL_ACCESS_READ_WRITE_NV = 0x00000001;
constexpr GLenum	WGL_ACCESS_WRITE_DISCARD_NV = 0x00000002;
constexpr GLenum	WGL_ACCUM_ALPHA_BITS_ARB = 0x2021;
constexpr GLenum	WGL_ACCUM_ALPHA_BITS_EXT = 0x2021;
constexpr GLenum	WGL_ACCUM_BITS_ARB = 0x201D;
constexpr GLenum	WGL_ACCUM_BITS_EXT = 0x201D;
constexpr GLenum	WGL_ACCUM_BLUE_BITS_ARB = 0x2020;
constexpr GLenum	WGL_ACCUM_BLUE_BITS_EXT = 0x2020;
constexpr GLenum	WGL_ACCUM_GREEN_BITS_ARB = 0x201F;
constexpr GLenum	WGL_ACCUM_GREEN_BITS_EXT = 0x201F;
constexpr GLenum	WGL_ACCUM_RED_BITS_ARB = 0x201E;
constexpr GLenum	WGL_ACCUM_RED_BITS_EXT = 0x201E;
constexpr GLenum	WGL_ALPHA_BITS_ARB = 0x201B;
constexpr GLenum	WGL_ALPHA_BITS_EXT = 0x201B;
constexpr GLenum	WGL_ALPHA_SHIFT_ARB = 0x201C;
constexpr GLenum	WGL_ALPHA_SHIFT_EXT = 0x201C;
constexpr GLenum	WGL_AUX0_ARB = 0x2087;
constexpr GLenum	WGL_AUX1_ARB = 0x2088;
constexpr GLenum	WGL_AUX2_ARB = 0x2089;
constexpr GLenum	WGL_AUX3_ARB = 0x208A;
constexpr GLenum	WGL_AUX4_ARB = 0x208B;
constexpr GLenum	WGL_AUX5_ARB = 0x208C;
constexpr GLenum	WGL_AUX6_ARB = 0x208D;
constexpr GLenum	WGL_AUX7_ARB = 0x208E;
constexpr GLenum	WGL_AUX8_ARB = 0x208F;
constexpr GLenum	WGL_AUX9_ARB = 0x2090;
constexpr GLenum	WGL_AUX_BUFFERS_ARB = 0x2024;
constexpr GLenum	WGL_AUX_BUFFERS_EXT = 0x2024;
constexpr GLenum	WGL_BACK_COLOR_BUFFER_BIT_ARB = 0x00000002;
constexpr GLenum	WGL_BACK_LEFT_ARB = 0x2085;
constexpr GLenum	WGL_BACK_RIGHT_ARB = 0x2086;
constexpr GLenum	WGL_BIND_TO_TEXTURE_DEPTH_NV = 0x20A3;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV = 0x20A4;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV = 0x20B4;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV = 0x20B3;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV = 0x20B2;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV = 0x20B1;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV = 0x20A1;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV = 0x20A0;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RGBA_ARB = 0x2071;
constexpr GLenum	WGL_BIND_TO_TEXTURE_RGB_ARB = 0x2070;
constexpr GLenum	WGL_BIND_TO_VIDEO_RGBA_NV = 0x20C1;
constexpr GLenum	WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV = 0x20C2;
constexpr GLenum	WGL_BIND_TO_VIDEO_RGB_NV = 0x20C0;
constexpr GLenum	WGL_BLUE_BITS_ARB = 0x2019;
constexpr GLenum	WGL_BLUE_BITS_EXT = 0x2019;
constexpr GLenum	WGL_BLUE_SHIFT_ARB = 0x201A;
constexpr GLenum	WGL_BLUE_SHIFT_EXT = 0x201A;
constexpr GLenum	WGL_COLORSPACE_EXT = 0x309D;
constexpr GLenum	WGL_COLORSPACE_LINEAR_EXT = 0x308A;
constexpr GLenum	WGL_COLORSPACE_SRGB_EXT = 0x3089;
constexpr GLenum	WGL_COLOR_BITS_ARB = 0x2014;
constexpr GLenum	WGL_COLOR_BITS_EXT = 0x2014;
constexpr GLenum	WGL_COLOR_SAMPLES_NV = 0x20B9;
constexpr GLenum	WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;
constexpr GLenum	WGL_CONTEXT_CORE_PROFILE_BIT_ARB = 0x00000001;
constexpr GLenum	WGL_CONTEXT_DEBUG_BIT_ARB = 0x00000001;
constexpr GLenum	WGL_CONTEXT_ES2_PROFILE_BIT_EXT = 0x00000004;
constexpr GLenum	WGL_CONTEXT_ES_PROFILE_BIT_EXT = 0x00000004;
constexpr GLenum	WGL_CONTEXT_FLAGS_ARB = 0x2094;
constexpr GLenum	WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 0x00000002;
constexpr GLenum	WGL_CONTEXT_LAYER_PLANE_ARB = 0x2093;
constexpr GLenum	WGL_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
constexpr GLenum	WGL_CONTEXT_MINOR_VERSION_ARB = 0x2092;
constexpr GLenum	WGL_CONTEXT_PROFILE_MASK_ARB = 0x9126;
constexpr GLenum	WGL_CONTEXT_RESET_ISOLATION_BIT_ARB = 0x00000008;
constexpr GLenum	WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
constexpr GLenum	WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB = 0x00000004;
constexpr GLenum	WGL_COVERAGE_SAMPLES_NV = 0x2042;
constexpr GLenum	WGL_CUBE_MAP_FACE_ARB = 0x207C;
constexpr GLenum	WGL_DEPTH_BITS_ARB = 0x2022;
constexpr GLenum	WGL_DEPTH_BITS_EXT = 0x2022;
constexpr GLenum	WGL_DEPTH_BUFFER_BIT_ARB = 0x00000004;
constexpr GLenum	WGL_DEPTH_COMPONENT_NV = 0x20A7;
constexpr GLenum	WGL_DEPTH_FLOAT_EXT = 0x2040;
constexpr GLenum	WGL_DEPTH_TEXTURE_FORMAT_NV = 0x20A5;
constexpr GLenum	WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D = 0x2050;
constexpr GLenum	WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D = 0x2051;
constexpr GLenum	WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D = 0x2052;
constexpr GLenum	WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D = 0x2053;
constexpr GLenum	WGL_DOUBLE_BUFFER_ARB = 0x2011;
constexpr GLenum	WGL_DOUBLE_BUFFER_EXT = 0x2011;
constexpr GLenum	WGL_DRAW_TO_BITMAP_ARB = 0x2002;
constexpr GLenum	WGL_DRAW_TO_BITMAP_EXT = 0x2002;
constexpr GLenum	WGL_DRAW_TO_PBUFFER_ARB = 0x202D;
constexpr GLenum	WGL_DRAW_TO_PBUFFER_EXT = 0x202D;
constexpr GLenum	WGL_DRAW_TO_WINDOW_ARB = 0x2001;
constexpr GLenum	WGL_DRAW_TO_WINDOW_EXT = 0x2001;
constexpr GLenum	WGL_FLOAT_COMPONENTS_NV = 0x20B0;
constexpr GLenum	WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB = 0x20A9;
constexpr GLenum	WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x20A9;
constexpr GLenum	WGL_FRONT_COLOR_BUFFER_BIT_ARB = 0x00000001;
constexpr GLenum	WGL_FRONT_LEFT_ARB = 0x2083;
constexpr GLenum	WGL_FRONT_RIGHT_ARB = 0x2084;
constexpr GLenum	WGL_FULL_ACCELERATION_ARB = 0x2027;
constexpr GLenum	WGL_FULL_ACCELERATION_EXT = 0x2027;
constexpr GLenum	WGL_GAMMA_EXCLUDE_DESKTOP_I3D = 0x204F;
constexpr GLenum	WGL_GAMMA_TABLE_SIZE_I3D = 0x204E;
constexpr GLenum	WGL_GENERIC_ACCELERATION_ARB = 0x2026;
constexpr GLenum	WGL_GENERIC_ACCELERATION_EXT = 0x2026;
constexpr GLenum	WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D = 0x2049;
constexpr GLenum	WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D = 0x2048;
constexpr GLenum	WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D = 0x204C;
constexpr GLenum	WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D = 0x204A;
constexpr GLenum	WGL_GENLOCK_SOURCE_EDGE_RISING_I3D = 0x204B;
constexpr GLenum	WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D = 0x2046;
constexpr GLenum	WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D = 0x2045;
constexpr GLenum	WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D = 0x2047;
constexpr GLenum	WGL_GENLOCK_SOURCE_MULTIVIEW_I3D = 0x2044;
constexpr GLenum	WGL_GPU_CLOCK_AMD = 0x21A4;
constexpr GLenum	WGL_GPU_FASTEST_TARGET_GPUS_AMD = 0x21A2;
constexpr GLenum	WGL_GPU_NUM_PIPES_AMD = 0x21A5;
constexpr GLenum	WGL_GPU_NUM_RB_AMD = 0x21A7;
constexpr GLenum	WGL_GPU_NUM_SIMD_AMD = 0x21A6;
constexpr GLenum	WGL_GPU_NUM_SPI_AMD = 0x21A8;
constexpr GLenum	WGL_GPU_OPENGL_VERSION_STRING_AMD = 0x1F02;
constexpr GLenum	WGL_GPU_RAM_AMD = 0x21A3;
constexpr GLenum	WGL_GPU_RENDERER_STRING_AMD = 0x1F01;
constexpr GLenum	WGL_GPU_VENDOR_AMD = 0x1F00;
constexpr GLenum	WGL_GREEN_BITS_ARB = 0x2017;
constexpr GLenum	WGL_GREEN_BITS_EXT = 0x2017;
constexpr GLenum	WGL_GREEN_SHIFT_ARB = 0x2018;
constexpr GLenum	WGL_GREEN_SHIFT_EXT = 0x2018;
constexpr GLenum	WGL_IMAGE_BUFFER_LOCK_I3D = 0x00000002;
constexpr GLenum	WGL_IMAGE_BUFFER_MIN_ACCESS_I3D = 0x00000001;
constexpr GLenum	WGL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
constexpr GLenum	WGL_MAX_PBUFFER_HEIGHT_ARB = 0x2030;
constexpr GLenum	WGL_MAX_PBUFFER_HEIGHT_EXT = 0x2030;
constexpr GLenum	WGL_MAX_PBUFFER_PIXELS_ARB = 0x202E;
constexpr GLenum	WGL_MAX_PBUFFER_PIXELS_EXT = 0x202E;
constexpr GLenum	WGL_MAX_PBUFFER_WIDTH_ARB = 0x202F;
constexpr GLenum	WGL_MAX_PBUFFER_WIDTH_EXT = 0x202F;
constexpr GLenum	WGL_MIPMAP_LEVEL_ARB = 0x207B;
constexpr GLenum	WGL_MIPMAP_TEXTURE_ARB = 0x2074;
constexpr GLenum	WGL_NEED_PALETTE_ARB = 0x2004;
constexpr GLenum	WGL_NEED_PALETTE_EXT = 0x2004;
constexpr GLenum	WGL_NEED_SYSTEM_PALETTE_ARB = 0x2005;
constexpr GLenum	WGL_NEED_SYSTEM_PALETTE_EXT = 0x2005;
constexpr GLenum	WGL_NO_ACCELERATION_ARB = 0x2025;
constexpr GLenum	WGL_NO_ACCELERATION_EXT = 0x2025;
constexpr GLenum	WGL_NO_RESET_NOTIFICATION_ARB = 0x8261;
constexpr GLenum	WGL_NO_TEXTURE_ARB = 0x2077;
constexpr GLenum	WGL_NUMBER_OVERLAYS_ARB = 0x2008;
constexpr GLenum	WGL_NUMBER_OVERLAYS_EXT = 0x2008;
constexpr GLenum	WGL_NUMBER_PIXEL_FORMATS_ARB = 0x2000;
constexpr GLenum	WGL_NUMBER_PIXEL_FORMATS_EXT = 0x2000;
constexpr GLenum	WGL_NUMBER_UNDERLAYS_ARB = 0x2009;
constexpr GLenum	WGL_NUMBER_UNDERLAYS_EXT = 0x2009;
constexpr GLenum	WGL_NUM_VIDEO_CAPTURE_SLOTS_NV = 0x20CF;
constexpr GLenum	WGL_NUM_VIDEO_SLOTS_NV = 0x20F0;
constexpr GLenum	WGL_OPTIMAL_PBUFFER_HEIGHT_EXT = 0x2032;
constexpr GLenum	WGL_OPTIMAL_PBUFFER_WIDTH_EXT = 0x2031;
constexpr GLenum	WGL_PBUFFER_HEIGHT_ARB = 0x2035;
constexpr GLenum	WGL_PBUFFER_HEIGHT_EXT = 0x2035;
constexpr GLenum	WGL_PBUFFER_LARGEST_ARB = 0x2033;
constexpr GLenum	WGL_PBUFFER_LARGEST_EXT = 0x2033;
constexpr GLenum	WGL_PBUFFER_LOST_ARB = 0x2036;
constexpr GLenum	WGL_PBUFFER_WIDTH_ARB = 0x2034;
constexpr GLenum	WGL_PBUFFER_WIDTH_EXT = 0x2034;
constexpr GLenum	WGL_PIXEL_TYPE_ARB = 0x2013;
constexpr GLenum	WGL_PIXEL_TYPE_EXT = 0x2013;
constexpr GLenum	WGL_RED_BITS_ARB = 0x2015;
constexpr GLenum	WGL_RED_BITS_EXT = 0x2015;
constexpr GLenum	WGL_RED_SHIFT_ARB = 0x2016;
constexpr GLenum	WGL_RED_SHIFT_EXT = 0x2016;
constexpr GLenum	WGL_SAMPLES_3DFX = 0x2061;
constexpr GLenum	WGL_SAMPLES_ARB = 0x2042;
constexpr GLenum	WGL_SAMPLES_EXT = 0x2042;
constexpr GLenum	WGL_SAMPLE_BUFFERS_3DFX = 0x2060;
constexpr GLenum	WGL_SAMPLE_BUFFERS_ARB = 0x2041;
constexpr GLenum	WGL_SAMPLE_BUFFERS_EXT = 0x2041;
constexpr GLenum	WGL_SHARE_ACCUM_ARB = 0x200E;
constexpr GLenum	WGL_SHARE_ACCUM_EXT = 0x200E;
constexpr GLenum	WGL_SHARE_DEPTH_ARB = 0x200C;
constexpr GLenum	WGL_SHARE_DEPTH_EXT = 0x200C;
constexpr GLenum	WGL_SHARE_STENCIL_ARB = 0x200D;
constexpr GLenum	WGL_SHARE_STENCIL_EXT = 0x200D;
constexpr GLenum	WGL_STENCIL_BITS_ARB = 0x2023;
constexpr GLenum	WGL_STENCIL_BITS_EXT = 0x2023;
constexpr GLenum	WGL_STENCIL_BUFFER_BIT_ARB = 0x00000008;
constexpr GLenum	WGL_STEREO_ARB = 0x2012;
constexpr GLenum	WGL_STEREO_EMITTER_DISABLE_3DL = 0x2056;
constexpr GLenum	WGL_STEREO_EMITTER_ENABLE_3DL = 0x2055;
constexpr GLenum	WGL_STEREO_EXT = 0x2012;
constexpr GLenum	WGL_STEREO_POLARITY_INVERT_3DL = 0x2058;
constexpr GLenum	WGL_STEREO_POLARITY_NORMAL_3DL = 0x2057;
constexpr GLenum	WGL_SUPPORT_GDI_ARB = 0x200F;
constexpr GLenum	WGL_SUPPORT_GDI_EXT = 0x200F;
constexpr GLenum	WGL_SUPPORT_OPENGL_ARB = 0x2010;
constexpr GLenum	WGL_SUPPORT_OPENGL_EXT = 0x2010;
constexpr GLenum	WGL_SWAP_COPY_ARB = 0x2029;
constexpr GLenum	WGL_SWAP_COPY_EXT = 0x2029;
constexpr GLenum	WGL_SWAP_EXCHANGE_ARB = 0x2028;
constexpr GLenum	WGL_SWAP_EXCHANGE_EXT = 0x2028;
constexpr GLenum	WGL_SWAP_LAYER_BUFFERS_ARB = 0x2006;
constexpr GLenum	WGL_SWAP_LAYER_BUFFERS_EXT = 0x2006;
constexpr GLenum	WGL_SWAP_METHOD_ARB = 0x2007;
constexpr GLenum	WGL_SWAP_METHOD_EXT = 0x2007;
constexpr GLenum	WGL_SWAP_UNDEFINED_ARB = 0x202A;
constexpr GLenum	WGL_SWAP_UNDEFINED_EXT = 0x202A;
constexpr GLenum	WGL_TEXTURE_1D_ARB = 0x2079;
constexpr GLenum	WGL_TEXTURE_2D_ARB = 0x207A;
constexpr GLenum	WGL_TEXTURE_CUBE_MAP_ARB = 0x2078;
constexpr GLenum	WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x207E;
constexpr GLenum	WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x2080;
constexpr GLenum	WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x2082;
constexpr GLenum	WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x207D;
constexpr GLenum	WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x207F;
constexpr GLenum	WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x2081;
constexpr GLenum	WGL_TEXTURE_DEPTH_COMPONENT_NV = 0x20A6;
constexpr GLenum	WGL_TEXTURE_FLOAT_RGBA_NV = 0x20B8;
constexpr GLenum	WGL_TEXTURE_FLOAT_RGB_NV = 0x20B7;
constexpr GLenum	WGL_TEXTURE_FLOAT_RG_NV = 0x20B6;
constexpr GLenum	WGL_TEXTURE_FLOAT_R_NV = 0x20B5;
constexpr GLenum	WGL_TEXTURE_FORMAT_ARB = 0x2072;
constexpr GLenum	WGL_TEXTURE_RECTANGLE_ATI = 0x21A5;
constexpr GLenum	WGL_TEXTURE_RECTANGLE_NV = 0x20A2;
constexpr GLenum	WGL_TEXTURE_RGBA_ARB = 0x2076;
constexpr GLenum	WGL_TEXTURE_RGB_ARB = 0x2075;
constexpr GLenum	WGL_TEXTURE_TARGET_ARB = 0x2073;
constexpr GLenum	WGL_TRANSPARENT_ALPHA_VALUE_ARB = 0x203A;
constexpr GLenum	WGL_TRANSPARENT_ARB = 0x200A;
constexpr GLenum	WGL_TRANSPARENT_BLUE_VALUE_ARB = 0x2039;
constexpr GLenum	WGL_TRANSPARENT_EXT = 0x200A;
constexpr GLenum	WGL_TRANSPARENT_GREEN_VALUE_ARB = 0x2038;
constexpr GLenum	WGL_TRANSPARENT_INDEX_VALUE_ARB = 0x203B;
constexpr GLenum	WGL_TRANSPARENT_RED_VALUE_ARB = 0x2037;
constexpr GLenum	WGL_TRANSPARENT_VALUE_EXT = 0x200B;
constexpr GLenum	WGL_TYPE_COLORINDEX_ARB = 0x202C;
constexpr GLenum	WGL_TYPE_COLORINDEX_EXT = 0x202C;
constexpr GLenum	WGL_TYPE_RGBA_ARB = 0x202B;
constexpr GLenum	WGL_TYPE_RGBA_EXT = 0x202B;
constexpr GLenum	WGL_TYPE_RGBA_FLOAT_ARB = 0x21A0;
constexpr GLenum	WGL_TYPE_RGBA_FLOAT_ATI = 0x21A0;
constexpr GLenum	WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT = 0x20A8;
constexpr GLenum	WGL_UNIQUE_ID_NV = 0x20CE;
constexpr GLenum	WGL_VIDEO_OUT_ALPHA_NV = 0x20C4;
constexpr GLenum	WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20C6;
constexpr GLenum	WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20C7;
constexpr GLenum	WGL_VIDEO_OUT_COLOR_NV = 0x20C3;
constexpr GLenum	WGL_VIDEO_OUT_DEPTH_NV = 0x20C5;
constexpr GLenum	WGL_VIDEO_OUT_FIELD_1 = 0x20C9;
constexpr GLenum	WGL_VIDEO_OUT_FIELD_2 = 0x20CA;
constexpr GLenum	WGL_VIDEO_OUT_FRAME = 0x20C8;
constexpr GLenum	WGL_VIDEO_OUT_STACKED_FIELDS_1_2 = 0x20CB;
constexpr GLenum	WGL_VIDEO_OUT_STACKED_FIELDS_2_1 = 0x20CC;
//WGL function prototypes:

BOOL wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count);
BOOL wglBeginFrameTrackingI3D(void);
GLboolean wglBindDisplayColorTableEXT(GLushort id);
BOOL wglBindSwapBarrierNV(GLuint group, GLuint barrier);
BOOL wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer);
BOOL wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
BOOL wglBindVideoDeviceNV(HDC hDc, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
BOOL wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
VOID wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
BOOL wglChoosePixelFormatARB(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
BOOL wglChoosePixelFormatEXT(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
BOOL wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
HDC wglCreateAffinityDCNV(const HGPUNV *phGpuList);
HGLRC wglCreateAssociatedContextAMD(UINT id);
HGLRC wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int *attribList);
HANDLE wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType);
HGLRC wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *attribList);
GLboolean wglCreateDisplayColorTableEXT(GLushort id);
LPVOID wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags);
HPBUFFERARB wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
HPBUFFEREXT wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
BOOL wglDXCloseDeviceNV(HANDLE hDevice);
BOOL wglDXLockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects);
BOOL wglDXObjectAccessNV(HANDLE hObject, GLenum access);
HANDLE wglDXOpenDeviceNV(void *dxDevice);
HANDLE wglDXRegisterObjectNV(HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access);
BOOL wglDXSetResourceShareHandleNV(void *dxObject, HANDLE shareHandle);
BOOL wglDXUnlockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects);
BOOL wglDXUnregisterObjectNV(HANDLE hDevice, HANDLE hObject);
BOOL wglDelayBeforeSwapNV(HDC hDC, GLfloat seconds);
BOOL wglDeleteAssociatedContextAMD(HGLRC hglrc);
VOID wglDeleteBufferRegionARB(HANDLE hRegion);
BOOL wglDeleteDCNV(HDC hdc);
VOID wglDestroyDisplayColorTableEXT(GLushort id);
BOOL wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress);
BOOL wglDestroyPbufferARB(HPBUFFERARB hPbuffer);
BOOL wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer);
BOOL wglDisableFrameLockI3D(void);
BOOL wglDisableGenlockI3D(HDC hDC);
BOOL wglEnableFrameLockI3D(void);
BOOL wglEnableGenlockI3D(HDC hDC);
BOOL wglEndFrameTrackingI3D(void);
BOOL wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
BOOL wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
BOOL wglEnumGpusNV(UINT iGpuIndex, HGPUNV *phGpu);
UINT wglEnumerateVideoCaptureDevicesNV(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList);
int wglEnumerateVideoDevicesNV(HDC hDc, HVIDEOOUTPUTDEVICENV *phDeviceList);
void wglFreeMemoryNV(void *pointer);
BOOL wglGenlockSampleRateI3D(HDC hDC, UINT uRate);
BOOL wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay);
BOOL wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge);
BOOL wglGenlockSourceI3D(HDC hDC, UINT uSource);
UINT wglGetContextGPUIDAMD(HGLRC hglrc);
HGLRC wglGetCurrentAssociatedContextAMD(void);
HDC wglGetCurrentReadDCARB(void);
HDC wglGetCurrentReadDCEXT(void);
BOOL wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int *piValue);
BOOL wglGetFrameUsageI3D(float *pUsage);
UINT wglGetGPUIDsAMD(UINT maxCount, UINT *ids);
INT wglGetGPUInfoAMD(UINT id, INT property, GLenum dataType, UINT size, void *data);
BOOL wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue);
BOOL wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int *piValue);
BOOL wglGetGenlockSampleRateI3D(HDC hDC, UINT *uRate);
BOOL wglGetGenlockSourceDelayI3D(HDC hDC, UINT *uDelay);
BOOL wglGetGenlockSourceEdgeI3D(HDC hDC, UINT *uEdge);
BOOL wglGetGenlockSourceI3D(HDC hDC, UINT *uSource);
BOOL wglGetMscRateOML(HDC hdc, INT32 *numerator, INT32 *denominator);
HDC wglGetPbufferDCARB(HPBUFFERARB hPbuffer);
HDC wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer);
BOOL wglGetPixelFormatAttribfvARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);
BOOL wglGetPixelFormatAttribfvEXT(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues);
BOOL wglGetPixelFormatAttribivARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);
BOOL wglGetPixelFormatAttribivEXT(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues);
int wglGetSwapIntervalEXT(void);
BOOL wglGetSyncValuesOML(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc);
BOOL wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
BOOL wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
BOOL wglIsEnabledFrameLockI3D(BOOL *pFlag);
BOOL wglIsEnabledGenlockI3D(HDC hDC, BOOL *pFlag);
BOOL wglJoinSwapGroupNV(HDC hDC, GLuint group);
GLboolean wglLoadDisplayColorTableEXT(const GLushort *table, GLuint length);
BOOL wglLockVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
BOOL wglMakeAssociatedContextCurrentAMD(HGLRC hglrc);
BOOL wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
BOOL wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
BOOL wglQueryCurrentContextNV(int iAttribute, int *piValue);
BOOL wglQueryFrameCountNV(HDC hDC, GLuint *count);
BOOL wglQueryFrameLockMasterI3D(BOOL *pFlag);
BOOL wglQueryFrameTrackingI3D(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
BOOL wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay);
BOOL wglQueryMaxSwapGroupsNV(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
BOOL wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int *piValue);
BOOL wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue);
BOOL wglQuerySwapGroupNV(HDC hDC, GLuint *group, GLuint *barrier);
BOOL wglQueryVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
BOOL wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID *pAddress, UINT count);
int wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC);
int wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC);
BOOL wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer);
BOOL wglReleaseVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
BOOL wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice);
BOOL wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer);
BOOL wglResetFrameCountNV(HDC hDC);
BOOL wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
BOOL wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height);
BOOL wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);
BOOL wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int *piValue);
BOOL wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue);
BOOL wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int *piValue);
BOOL wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int *piAttribList);
BOOL wglSetStereoEmitterState3DL(HDC hDC, UINT uState);
INT64 wglSwapBuffersMscOML(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
BOOL wglSwapIntervalEXT(int interval);
INT64 wglSwapLayerBuffersMscOML(HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
BOOL wglWaitForMscOML(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc);
BOOL wglWaitForSbcOML(HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc);
#endif

#if defined(SOGL_LINUX)
//GLX Constants
constexpr GLenum	GLX_3DFX_FULLSCREEN_MODE_MESA = 0x2;
constexpr GLenum	GLX_3DFX_WINDOW_MODE_MESA = 0x1;
constexpr GLenum	GLX_ACCUM_BUFFER_BIT = 0x00000080;
constexpr GLenum	GLX_ACCUM_BUFFER_BIT_SGIX = 0x00000080;
constexpr GLenum	GLX_AUX0_EXT = 0x20E2;
constexpr GLenum	GLX_AUX1_EXT = 0x20E3;
constexpr GLenum	GLX_AUX2_EXT = 0x20E4;
constexpr GLenum	GLX_AUX3_EXT = 0x20E5;
constexpr GLenum	GLX_AUX4_EXT = 0x20E6;
constexpr GLenum	GLX_AUX5_EXT = 0x20E7;
constexpr GLenum	GLX_AUX6_EXT = 0x20E8;
constexpr GLenum	GLX_AUX7_EXT = 0x20E9;
constexpr GLenum	GLX_AUX8_EXT = 0x20EA;
constexpr GLenum	GLX_AUX9_EXT = 0x20EB;
constexpr GLenum	GLX_AUX_BUFFERS_BIT = 0x00000010;
constexpr GLenum	GLX_AUX_BUFFERS_BIT_SGIX = 0x00000010;
constexpr GLenum	GLX_BACK_BUFFER_AGE_EXT = 0x20F4;
constexpr GLenum	GLX_BACK_LEFT_BUFFER_BIT = 0x00000004;
constexpr GLenum	GLX_BACK_LEFT_BUFFER_BIT_SGIX = 0x00000004;
constexpr GLenum	GLX_BACK_LEFT_EXT = 0x20E0;
constexpr GLenum	GLX_BACK_RIGHT_BUFFER_BIT = 0x00000008;
constexpr GLenum	GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 0x00000008;
constexpr GLenum	GLX_BACK_RIGHT_EXT = 0x20E1;
constexpr GLenum	GLX_BAD_HYPERPIPE_CONFIG_SGIX = 91;
constexpr GLenum	GLX_BAD_HYPERPIPE_SGIX = 92;
constexpr GLenum	GLX_BIND_TO_MIPMAP_TEXTURE_EXT = 0x20D2;
constexpr GLenum	GLX_BIND_TO_TEXTURE_RGBA_EXT = 0x20D1;
constexpr GLenum	GLX_BIND_TO_TEXTURE_RGB_EXT = 0x20D0;
constexpr GLenum	GLX_BIND_TO_TEXTURE_TARGETS_EXT = 0x20D3;
constexpr GLenum	GLX_BLENDED_RGBA_SGIS = 0x8025;
constexpr GLenum	GLX_BUFFER_CLOBBER_MASK_SGIX = 0x08000000;
constexpr GLenum	GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK = 0x04000000;
constexpr GLenum	GLX_COLOR_INDEX_BIT = 0x00000002;
constexpr GLenum	GLX_COLOR_INDEX_BIT_SGIX = 0x00000002;
constexpr GLenum	GLX_COLOR_INDEX_TYPE = 0x8015;
constexpr GLenum	GLX_COLOR_INDEX_TYPE_SGIX = 0x8015;
constexpr GLenum	GLX_COLOR_SAMPLES_NV = 0x20B3;
constexpr GLenum	GLX_CONFIG_CAVEAT = 0x20;
constexpr GLenum	GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB = 0x2095;
constexpr GLenum	GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;
constexpr GLenum	GLX_CONTEXT_CORE_PROFILE_BIT_ARB = 0x00000001;
constexpr GLenum	GLX_CONTEXT_DEBUG_BIT_ARB = 0x00000001;
constexpr GLenum	GLX_CONTEXT_ES2_PROFILE_BIT_EXT = 0x00000004;
constexpr GLenum	GLX_CONTEXT_ES_PROFILE_BIT_EXT = 0x00000004;
constexpr GLenum	GLX_CONTEXT_FLAGS_ARB = 0x2094;
constexpr GLenum	GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 0x00000002;
constexpr GLenum	GLX_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
constexpr GLenum	GLX_CONTEXT_MINOR_VERSION_ARB = 0x2092;
constexpr GLenum	GLX_CONTEXT_PROFILE_MASK_ARB = 0x9126;
constexpr GLenum	GLX_CONTEXT_RESET_ISOLATION_BIT_ARB = 0x00000008;
constexpr GLenum	GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
constexpr GLenum	GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB = 0x00000004;
constexpr GLenum	GLX_COPY_COMPLETE_INTEL = 0x8181;
constexpr GLenum	GLX_COVERAGE_SAMPLES_NV = 100001;
constexpr GLenum	GLX_DAMAGED = 0x8020;
constexpr GLenum	GLX_DAMAGED_SGIX = 0x8020;
constexpr GLenum	GLX_DEPTH_BUFFER_BIT = 0x00000020;
constexpr GLenum	GLX_DEPTH_BUFFER_BIT_SGIX = 0x00000020;
constexpr GLenum	GLX_DEVICE_ID_NV = 0x20CD;
constexpr GLenum	GLX_DIRECT_COLOR = 0x8003;
constexpr GLenum	GLX_DIRECT_COLOR_EXT = 0x8003;
constexpr GLenum	GLX_DONT_CARE = 0xFFFFFFFF;
constexpr GLenum	GLX_DRAWABLE_TYPE = 0x8010;
constexpr GLenum	GLX_DRAWABLE_TYPE_SGIX = 0x8010;
constexpr GLenum	GLX_EVENT_MASK = 0x801F;
constexpr GLenum	GLX_EVENT_MASK_SGIX = 0x801F;
constexpr GLenum	GLX_EXCHANGE_COMPLETE_INTEL = 0x8180;
constexpr GLenum	GLX_FBCONFIG_ID = 0x8013;
constexpr GLenum	GLX_FBCONFIG_ID_SGIX = 0x8013;
constexpr GLenum	GLX_FLIP_COMPLETE_INTEL = 0x8182;
constexpr GLenum	GLX_FLOAT_COMPONENTS_NV = 0x20B0;
constexpr GLenum	GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB = 0x20B2;
constexpr GLenum	GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x20B2;
constexpr GLenum	GLX_FRONT_LEFT_BUFFER_BIT = 0x00000001;
constexpr GLenum	GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 0x00000001;
constexpr GLenum	GLX_FRONT_LEFT_EXT = 0x20DE;
constexpr GLenum	GLX_FRONT_RIGHT_BUFFER_BIT = 0x00000002;
constexpr GLenum	GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 0x00000002;
constexpr GLenum	GLX_FRONT_RIGHT_EXT = 0x20DF;
constexpr GLenum	GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV = 0x20F7;
constexpr GLenum	GLX_GPU_CLOCK_AMD = 0x21A4;
constexpr GLenum	GLX_GPU_FASTEST_TARGET_GPUS_AMD = 0x21A2;
constexpr GLenum	GLX_GPU_NUM_PIPES_AMD = 0x21A5;
constexpr GLenum	GLX_GPU_NUM_RB_AMD = 0x21A7;
constexpr GLenum	GLX_GPU_NUM_SIMD_AMD = 0x21A6;
constexpr GLenum	GLX_GPU_NUM_SPI_AMD = 0x21A8;
constexpr GLenum	GLX_GPU_OPENGL_VERSION_STRING_AMD = 0x1F02;
constexpr GLenum	GLX_GPU_RAM_AMD = 0x21A3;
constexpr GLenum	GLX_GPU_RENDERER_STRING_AMD = 0x1F01;
constexpr GLenum	GLX_GPU_VENDOR_AMD = 0x1F00;
constexpr GLenum	GLX_GRAY_SCALE = 0x8006;
constexpr GLenum	GLX_GRAY_SCALE_EXT = 0x8006;
constexpr GLenum	GLX_HEIGHT = 0x801E;
constexpr GLenum	GLX_HEIGHT_SGIX = 0x801E;
constexpr GLenum	GLX_HYPERPIPE_DISPLAY_PIPE_SGIX = 0x00000001;
constexpr GLenum	GLX_HYPERPIPE_ID_SGIX = 0x8030;
constexpr GLenum	GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = 80;
constexpr GLenum	GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX = 0x00000004;
constexpr GLenum	GLX_HYPERPIPE_RENDER_PIPE_SGIX = 0x00000002;
constexpr GLenum	GLX_HYPERPIPE_STEREO_SGIX = 0x00000003;
constexpr GLenum	GLX_LARGEST_PBUFFER = 0x801C;
constexpr GLenum	GLX_LARGEST_PBUFFER_SGIX = 0x801C;
constexpr GLenum	GLX_LATE_SWAPS_TEAR_EXT = 0x20F3;
constexpr GLenum	GLX_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
constexpr GLenum	GLX_MAX_PBUFFER_HEIGHT = 0x8017;
constexpr GLenum	GLX_MAX_PBUFFER_HEIGHT_SGIX = 0x8017;
constexpr GLenum	GLX_MAX_PBUFFER_PIXELS = 0x8018;
constexpr GLenum	GLX_MAX_PBUFFER_PIXELS_SGIX = 0x8018;
constexpr GLenum	GLX_MAX_PBUFFER_WIDTH = 0x8016;
constexpr GLenum	GLX_MAX_PBUFFER_WIDTH_SGIX = 0x8016;
constexpr GLenum	GLX_MAX_SWAP_INTERVAL_EXT = 0x20F2;
constexpr GLenum	GLX_MIPMAP_TEXTURE_EXT = 0x20D7;
constexpr GLenum	GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027;
constexpr GLenum	GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026;
constexpr GLenum	GLX_NONE = 0x8000;
constexpr GLenum	GLX_NONE_EXT = 0x8000;
constexpr GLenum	GLX_NON_CONFORMANT_CONFIG = 0x800D;
constexpr GLenum	GLX_NON_CONFORMANT_VISUAL_EXT = 0x800D;
constexpr GLenum	GLX_NO_RESET_NOTIFICATION_ARB = 0x8261;
constexpr GLenum	GLX_NUM_VIDEO_CAPTURE_SLOTS_NV = 0x20CF;
constexpr GLenum	GLX_NUM_VIDEO_SLOTS_NV = 0x20F0;
constexpr GLenum	GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x801A;
constexpr GLenum	GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 0x8019;
constexpr GLenum	GLX_PBUFFER = 0x8023;
constexpr GLenum	GLX_PBUFFER_BIT = 0x00000004;
constexpr GLenum	GLX_PBUFFER_BIT_SGIX = 0x00000004;
constexpr GLenum	GLX_PBUFFER_CLOBBER_MASK = 0x08000000;
constexpr GLenum	GLX_PBUFFER_HEIGHT = 0x8040;
constexpr GLenum	GLX_PBUFFER_SGIX = 0x8023;
constexpr GLenum	GLX_PBUFFER_WIDTH = 0x8041;
constexpr GLenum	GLX_PIPE_RECT_LIMITS_SGIX = 0x00000002;
constexpr GLenum	GLX_PIPE_RECT_SGIX = 0x00000001;
constexpr GLenum	GLX_PIXMAP_BIT = 0x00000002;
constexpr GLenum	GLX_PIXMAP_BIT_SGIX = 0x00000002;
constexpr GLenum	GLX_PRESERVED_CONTENTS = 0x801B;
constexpr GLenum	GLX_PRESERVED_CONTENTS_SGIX = 0x801B;
constexpr GLenum	GLX_PSEUDO_COLOR = 0x8004;
constexpr GLenum	GLX_PSEUDO_COLOR_EXT = 0x8004;
constexpr GLenum	GLX_RENDERER_ACCELERATED_MESA = 0x8186;
constexpr GLenum	GLX_RENDERER_DEVICE_ID_MESA = 0x8184;
constexpr GLenum	GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA = 0x818B;
constexpr GLenum	GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA = 0x818A;
constexpr GLenum	GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA = 0x818D;
constexpr GLenum	GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA = 0x818C;
constexpr GLenum	GLX_RENDERER_PREFERRED_PROFILE_MESA = 0x8189;
constexpr GLenum	GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA = 0x8188;
constexpr GLenum	GLX_RENDERER_VENDOR_ID_MESA = 0x8183;
constexpr GLenum	GLX_RENDERER_VERSION_MESA = 0x8185;
constexpr GLenum	GLX_RENDERER_VIDEO_MEMORY_MESA = 0x8187;
constexpr GLenum	GLX_RENDER_TYPE = 0x8011;
constexpr GLenum	GLX_RENDER_TYPE_SGIX = 0x8011;
constexpr GLenum	GLX_RGBA_BIT = 0x00000001;
constexpr GLenum	GLX_RGBA_BIT_SGIX = 0x00000001;
constexpr GLenum	GLX_RGBA_FLOAT_BIT_ARB = 0x00000004;
constexpr GLenum	GLX_RGBA_FLOAT_TYPE_ARB = 0x20B9;
constexpr GLenum	GLX_RGBA_TYPE = 0x8014;
constexpr GLenum	GLX_RGBA_TYPE_SGIX = 0x8014;
constexpr GLenum	GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT = 0x00000008;
constexpr GLenum	GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT = 0x20B1;
constexpr GLenum	GLX_SAMPLES = 100001;
constexpr GLenum	GLX_SAMPLES_3DFX = 0x8051;
constexpr GLenum	GLX_SAMPLES_ARB = 100001;
constexpr GLenum	GLX_SAMPLES_SGIS = 100001;
constexpr GLenum	GLX_SAMPLE_BUFFERS = 100000;
constexpr GLenum	GLX_SAMPLE_BUFFERS_3DFX = 0x8050;
constexpr GLenum	GLX_SAMPLE_BUFFERS_ARB = 100000;
constexpr GLenum	GLX_SAMPLE_BUFFERS_BIT_SGIX = 0x00000100;
constexpr GLenum	GLX_SAMPLE_BUFFERS_SGIS = 100000;
constexpr GLenum	GLX_SAVED = 0x8021;
constexpr GLenum	GLX_SAVED_SGIX = 0x8021;
constexpr GLenum	GLX_SCREEN = 0x800C;
constexpr GLenum	GLX_SCREEN_EXT = 0x800C;
constexpr GLenum	GLX_SHARE_CONTEXT_EXT = 0x800A;
constexpr GLenum	GLX_SLOW_CONFIG = 0x8001;
constexpr GLenum	GLX_SLOW_VISUAL_EXT = 0x8001;
constexpr GLenum	GLX_STATIC_COLOR = 0x8005;
constexpr GLenum	GLX_STATIC_COLOR_EXT = 0x8005;
constexpr GLenum	GLX_STATIC_GRAY = 0x8007;
constexpr GLenum	GLX_STATIC_GRAY_EXT = 0x8007;
constexpr GLenum	GLX_STENCIL_BUFFER_BIT = 0x00000040;
constexpr GLenum	GLX_STENCIL_BUFFER_BIT_SGIX = 0x00000040;
constexpr GLenum	GLX_STEREO_NOTIFY_EXT = 0x00000000;
constexpr GLenum	GLX_STEREO_NOTIFY_MASK_EXT = 0x00000001;
constexpr GLenum	GLX_STEREO_TREE_EXT = 0x20F5;
constexpr GLenum	GLX_SWAP_COPY_OML = 0x8062;
constexpr GLenum	GLX_SWAP_EXCHANGE_OML = 0x8061;
constexpr GLenum	GLX_SWAP_INTERVAL_EXT = 0x20F1;
constexpr GLenum	GLX_SWAP_METHOD_OML = 0x8060;
constexpr GLenum	GLX_SWAP_UNDEFINED_OML = 0x8063;
constexpr GLenum	GLX_SYNC_FRAME_SGIX = 0x00000000;
constexpr GLenum	GLX_SYNC_SWAP_SGIX = 0x00000001;
constexpr GLenum	GLX_TEXTURE_1D_BIT_EXT = 0x00000001;
constexpr GLenum	GLX_TEXTURE_1D_EXT = 0x20DB;
constexpr GLenum	GLX_TEXTURE_2D_BIT_EXT = 0x00000002;
constexpr GLenum	GLX_TEXTURE_2D_EXT = 0x20DC;
constexpr GLenum	GLX_TEXTURE_FORMAT_EXT = 0x20D5;
constexpr GLenum	GLX_TEXTURE_FORMAT_NONE_EXT = 0x20D8;
constexpr GLenum	GLX_TEXTURE_FORMAT_RGBA_EXT = 0x20DA;
constexpr GLenum	GLX_TEXTURE_FORMAT_RGB_EXT = 0x20D9;
constexpr GLenum	GLX_TEXTURE_RECTANGLE_BIT_EXT = 0x00000004;
constexpr GLenum	GLX_TEXTURE_RECTANGLE_EXT = 0x20DD;
constexpr GLenum	GLX_TEXTURE_TARGET_EXT = 0x20D6;
constexpr GLenum	GLX_TRANSPARENT_ALPHA_VALUE = 0x28;
constexpr GLenum	GLX_TRANSPARENT_ALPHA_VALUE_EXT = 0x28;
constexpr GLenum	GLX_TRANSPARENT_BLUE_VALUE = 0x27;
constexpr GLenum	GLX_TRANSPARENT_BLUE_VALUE_EXT = 0x27;
constexpr GLenum	GLX_TRANSPARENT_GREEN_VALUE = 0x26;
constexpr GLenum	GLX_TRANSPARENT_GREEN_VALUE_EXT = 0x26;
constexpr GLenum	GLX_TRANSPARENT_INDEX = 0x8009;
constexpr GLenum	GLX_TRANSPARENT_INDEX_EXT = 0x8009;
constexpr GLenum	GLX_TRANSPARENT_INDEX_VALUE = 0x24;
constexpr GLenum	GLX_TRANSPARENT_INDEX_VALUE_EXT = 0x24;
constexpr GLenum	GLX_TRANSPARENT_RED_VALUE = 0x25;
constexpr GLenum	GLX_TRANSPARENT_RED_VALUE_EXT = 0x25;
constexpr GLenum	GLX_TRANSPARENT_RGB = 0x8008;
constexpr GLenum	GLX_TRANSPARENT_RGB_EXT = 0x8008;
constexpr GLenum	GLX_TRANSPARENT_TYPE = 0x23;
constexpr GLenum	GLX_TRANSPARENT_TYPE_EXT = 0x23;
constexpr GLenum	GLX_TRUE_COLOR = 0x8002;
constexpr GLenum	GLX_TRUE_COLOR_EXT = 0x8002;
constexpr GLenum	GLX_UNIQUE_ID_NV = 0x20CE;
constexpr GLenum	GLX_VENDOR_NAMES_EXT = 0x20F6;
constexpr GLenum	GLX_VERSION_1_3 = 1;
constexpr GLenum	GLX_VERSION_1_4 = 1;
constexpr GLenum	GLX_VIDEO_OUT_ALPHA_NV = 0x20C4;
constexpr GLenum	GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20C6;
constexpr GLenum	GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20C7;
constexpr GLenum	GLX_VIDEO_OUT_COLOR_NV = 0x20C3;
constexpr GLenum	GLX_VIDEO_OUT_DEPTH_NV = 0x20C5;
constexpr GLenum	GLX_VIDEO_OUT_FIELD_1_NV = 0x20C9;
constexpr GLenum	GLX_VIDEO_OUT_FIELD_2_NV = 0x20CA;
constexpr GLenum	GLX_VIDEO_OUT_FRAME_NV = 0x20C8;
constexpr GLenum	GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = 0x20CB;
constexpr GLenum	GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = 0x20CC;
constexpr GLenum	GLX_VISUAL_CAVEAT_EXT = 0x20;
constexpr GLenum	GLX_VISUAL_ID = 0x800B;
constexpr GLenum	GLX_VISUAL_ID_EXT = 0x800B;
constexpr GLenum	GLX_VISUAL_SELECT_GROUP_SGIX = 0x8028;
constexpr GLenum	GLX_WIDTH = 0x801D;
constexpr GLenum	GLX_WIDTH_SGIX = 0x801D;
constexpr GLenum	GLX_WINDOW = 0x8022;
constexpr GLenum	GLX_WINDOW_BIT = 0x00000001;
constexpr GLenum	GLX_WINDOW_BIT_SGIX = 0x00000001;
constexpr GLenum	GLX_WINDOW_SGIX = 0x8022;
constexpr GLenum	GLX_X_RENDERABLE = 0x8012;
constexpr GLenum	GLX_X_RENDERABLE_SGIX = 0x8012;
constexpr GLenum	GLX_X_VISUAL_TYPE = 0x22;
constexpr GLenum	GLX_X_VISUAL_TYPE_EXT = 0x22;
constexpr GLenum	GLX_Y_INVERTED_EXT = 0x20D4;
//GLX function prototypes:

int glXBindChannelToWindowSGIX(Display *display, int screen, int channel, Window window);
int glXBindHyperpipeSGIX(Display *dpy, int hpId);
Bool glXBindSwapBarrierNV(Display *dpy, GLuint group, GLuint barrier);
void glXBindSwapBarrierSGIX(Display *dpy, GLXDrawable drawable, int barrier);
void glXBindTexImageEXT(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list);
int glXBindVideoCaptureDeviceNV(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
int glXBindVideoDeviceNV(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list);
int glXBindVideoImageNV(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
void glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
int glXChannelRectSGIX(Display *display, int screen, int channel, int x, int y, int w, int h);
int glXChannelRectSyncSGIX(Display *display, int screen, int channel, GLenum synctype);
void glXCopyBufferSubDataNV(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glXCopyImageSubDataNV(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
void glXCopySubBufferMESA(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height);
GLXContext glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list);
GLXContext glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int *attribList);
GLXContext glXCreateContextAttribsARB(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list);
GLXContext glXCreateContextWithConfigSGIX(Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
GLXPbufferSGIX glXCreateGLXPbufferSGIX(Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list);
GLXPixmap glXCreateGLXPixmapMESA(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);
GLXPixmap glXCreateGLXPixmapWithConfigSGIX(Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap);
GLXContext glXCreateNewContext(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
GLXPbuffer glXCreatePbuffer(Display *dpy, GLXFBConfig config, const int *attrib_list);
GLXPixmap glXCreatePixmap(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
GLXWindow glXCreateWindow(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
void glXCushionSGI(Display *dpy, Window window, float cushion);
Bool glXDelayBeforeSwapNV(Display *dpy, GLXDrawable drawable, GLfloat seconds);
Bool glXDeleteAssociatedContextAMD(GLXContext ctx);
void glXDestroyGLXPbufferSGIX(Display *dpy, GLXPbufferSGIX pbuf);
int glXDestroyHyperpipeConfigSGIX(Display *dpy, int hpId);
void glXDestroyPbuffer(Display *dpy, GLXPbuffer pbuf);
void glXDestroyPixmap(Display *dpy, GLXPixmap pixmap);
void glXDestroyWindow(Display *dpy, GLXWindow win);
void glXFreeContextEXT(Display *dpy, GLXContext context);
GLXContextID glXGetContextIDEXT(const GLXContext context);
GLXContext glXGetCurrentAssociatedContextAMD(void);
GLXDrawable glXGetCurrentReadDrawable(void);
GLXDrawable glXGetCurrentReadDrawableSGI(void);
int glXGetFBConfigAttrib(Display *dpy, GLXFBConfig config, int attribute, int *value);
int glXGetFBConfigAttribSGIX(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value);
GLXFBConfigSGIX glXGetFBConfigFromVisualSGIX(Display *dpy, XVisualInfo *vis);
int glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, void *data);
Bool glXGetMscRateOML(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator);
__GLXextFuncPtr glXGetProcAddressARB(const GLubyte *procName);
void glXGetSelectedEvent(Display *dpy, GLXDrawable draw, unsigned long *event_mask);
void glXGetSelectedEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long *mask);
int glXGetSwapIntervalMESA(void);
Bool glXGetSyncValuesOML(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc);
Status glXGetTransparentIndexSUN(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex);
int glXGetVideoDeviceNV(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
int glXGetVideoInfoNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
int glXGetVideoSyncSGI(unsigned int *count);
int glXHyperpipeAttribSGIX(Display *dpy, int timeSlice, int attrib, int size, void *attribList);
int glXHyperpipeConfigSGIX(Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);
GLXContext glXImportContextEXT(Display *dpy, GLXContextID contextID);
Bool glXJoinSwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint group);
void glXJoinSwapGroupSGIX(Display *dpy, GLXDrawable drawable, GLXDrawable member);
void glXLockVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device);
Bool glXMakeAssociatedContextCurrentAMD(GLXContext ctx);
Bool glXMakeContextCurrent(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
Bool glXMakeCurrentReadSGI(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
void glXNamedCopyBufferSubDataNV(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
int glXQueryChannelDeltasSGIX(Display *display, int screen, int channel, int *x, int *y, int *w, int *h);
int glXQueryChannelRectSGIX(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
int glXQueryContext(Display *dpy, GLXContext ctx, int attribute, int *value);
int glXQueryContextInfoEXT(Display *dpy, GLXContext context, int attribute, int *value);
Bool glXQueryCurrentRendererIntegerMESA(int attribute, unsigned int *value);
void glXQueryDrawable(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
Bool glXQueryFrameCountNV(Display *dpy, int screen, GLuint *count);
void glXQueryGLXPbufferSGIX(Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value);
int glXQueryHyperpipeAttribSGIX(Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);
int glXQueryHyperpipeBestAttribSGIX(Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);
Bool glXQueryMaxSwapBarriersSGIX(Display *dpy, int screen, int *max);
Bool glXQueryMaxSwapGroupsNV(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers);
Bool glXQueryRendererIntegerMESA(Display *dpy, int screen, int renderer, int attribute, unsigned int *value);
Bool glXQuerySwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier);
int glXQueryVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value);
Bool glXReleaseBuffersMESA(Display *dpy, GLXDrawable drawable);
void glXReleaseTexImageEXT(Display *dpy, GLXDrawable drawable, int buffer);
void glXReleaseVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device);
int glXReleaseVideoDeviceNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice);
int glXReleaseVideoImageNV(Display *dpy, GLXPbuffer pbuf);
Bool glXResetFrameCountNV(Display *dpy, int screen);
void glXSelectEvent(Display *dpy, GLXDrawable draw, unsigned long event_mask);
void glXSelectEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long mask);
int glXSendPbufferToVideoNV(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock);
GLboolean glXSet3DfxModeMESA(GLint mode);
int64_t glXSwapBuffersMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
void glXSwapIntervalEXT(Display *dpy, GLXDrawable drawable, int interval);
int glXSwapIntervalMESA(unsigned int interval);
int glXSwapIntervalSGI(int interval);
Bool glXWaitForMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc);
Bool glXWaitForSbcOML(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc);
int glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *count);
#endif

//Type defintions:
typedef GLboolean __stdcall gl_acquire_keyed_mutex_win32ext_t(GLuint memory, GLuint64 key, GLuint timeout);
typedef void __stdcall gl_active_program_ext_t(GLuint program);
typedef void __stdcall gl_active_shader_program_t(GLuint pipeline, GLuint program);
typedef void __stdcall gl_active_stencil_face_ext_t(GLenum face);
typedef void __stdcall gl_active_texture_t(GLenum texture);
typedef void __stdcall gl_active_texture_arb_t(GLenum texture);
typedef void __stdcall gl_active_varying_nv_t(GLuint program, const GLchar *name);
typedef void __stdcall gl_alpha_fragment_op1ati_t(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void __stdcall gl_alpha_fragment_op2ati_t(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void __stdcall gl_alpha_fragment_op3ati_t(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void __stdcall gl_apply_texture_ext_t(GLenum mode);
typedef GLboolean __stdcall gl_are_programs_resident_nv_t(GLsizei n, const GLuint *programs, GLboolean *residences);
typedef GLboolean __stdcall gl_are_textures_resident_ext_t(GLsizei n, const GLuint *textures, GLboolean *residences);
typedef void __stdcall gl_array_element_ext_t(GLint i);
typedef void __stdcall gl_array_object_ati_t(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void __stdcall gl_async_marker_sgix_t(GLuint marker);
typedef void __stdcall gl_attach_object_arb_t(GLhandleARB containerObj, GLhandleARB obj);
typedef void __stdcall gl_attach_shader_t(GLuint program, GLuint shader);
typedef void __stdcall gl_begin_conditional_render_t(GLuint id, GLenum mode);
typedef void __stdcall gl_begin_conditional_render_nv_t(GLuint id, GLenum mode);
typedef void __stdcall gl_begin_conditional_render_nvx_t(GLuint id);
typedef void __stdcall gl_begin_fragment_shader_ati_t(void);
typedef void __stdcall gl_begin_occlusion_query_nv_t(GLuint id);
typedef void __stdcall gl_begin_perf_monitor_amd_t(GLuint monitor);
typedef void __stdcall gl_begin_perf_query_intel_t(GLuint queryHandle);
typedef void __stdcall gl_begin_query_t(GLenum target, GLuint id);
typedef void __stdcall gl_begin_query_arb_t(GLenum target, GLuint id);
typedef void __stdcall gl_begin_query_indexed_t(GLenum target, GLuint index, GLuint id);
typedef void __stdcall gl_begin_transform_feedback_t(GLenum primitiveMode);
typedef void __stdcall gl_begin_transform_feedback_ext_t(GLenum primitiveMode);
typedef void __stdcall gl_begin_transform_feedback_nv_t(GLenum primitiveMode);
typedef void __stdcall gl_begin_vertex_shader_ext_t(void);
typedef void __stdcall gl_begin_video_capture_nv_t(GLuint video_capture_slot);
typedef void __stdcall gl_bind_attrib_location_t(GLuint program, GLuint index, const GLchar *name);
typedef void __stdcall gl_bind_attrib_location_arb_t(GLhandleARB programObj, GLuint index, const GLcharARB *name);
typedef void __stdcall gl_bind_buffer_t(GLenum target, GLuint buffer);
typedef void __stdcall gl_bind_buffer_arb_t(GLenum target, GLuint buffer);
typedef void __stdcall gl_bind_buffer_base_t(GLenum target, GLuint index, GLuint buffer);
typedef void __stdcall gl_bind_buffer_base_ext_t(GLenum target, GLuint index, GLuint buffer);
typedef void __stdcall gl_bind_buffer_base_nv_t(GLenum target, GLuint index, GLuint buffer);
typedef void __stdcall gl_bind_buffer_offset_ext_t(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void __stdcall gl_bind_buffer_offset_nv_t(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void __stdcall gl_bind_buffer_range_t(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void __stdcall gl_bind_buffer_range_ext_t(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void __stdcall gl_bind_buffer_range_nv_t(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void __stdcall gl_bind_buffers_base_t(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
typedef void __stdcall gl_bind_buffers_range_t(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
typedef void __stdcall gl_bind_frag_data_location_t(GLuint program, GLuint color, const GLchar *name);
typedef void __stdcall gl_bind_frag_data_location_ext_t(GLuint program, GLuint color, const GLchar *name);
typedef void __stdcall gl_bind_frag_data_location_indexed_t(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
typedef void __stdcall gl_bind_fragment_shader_ati_t(GLuint id);
typedef void __stdcall gl_bind_framebuffer_t(GLenum target, GLuint framebuffer);
typedef void __stdcall gl_bind_framebuffer_ext_t(GLenum target, GLuint framebuffer);
typedef void __stdcall gl_bind_image_texture_t(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void __stdcall gl_bind_image_texture_ext_t(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef void __stdcall gl_bind_image_textures_t(GLuint first, GLsizei count, const GLuint *textures);
typedef GLuint __stdcall gl_bind_light_parameter_ext_t(GLenum light, GLenum value);
typedef GLuint __stdcall gl_bind_material_parameter_ext_t(GLenum face, GLenum value);
typedef void __stdcall gl_bind_multi_texture_ext_t(GLenum texunit, GLenum target, GLuint texture);
typedef GLuint __stdcall gl_bind_parameter_ext_t(GLenum value);
typedef void __stdcall gl_bind_program_arb_t(GLenum target, GLuint program);
typedef void __stdcall gl_bind_program_nv_t(GLenum target, GLuint id);
typedef void __stdcall gl_bind_program_pipeline_t(GLuint pipeline);
typedef void __stdcall gl_bind_renderbuffer_t(GLenum target, GLuint renderbuffer);
typedef void __stdcall gl_bind_renderbuffer_ext_t(GLenum target, GLuint renderbuffer);
typedef void __stdcall gl_bind_sampler_t(GLuint unit, GLuint sampler);
typedef void __stdcall gl_bind_samplers_t(GLuint first, GLsizei count, const GLuint *samplers);
typedef GLuint __stdcall gl_bind_tex_gen_parameter_ext_t(GLenum unit, GLenum coord, GLenum value);
typedef void __stdcall gl_bind_texture_ext_t(GLenum target, GLuint texture);
typedef void __stdcall gl_bind_texture_unit_t(GLuint unit, GLuint texture);
typedef GLuint __stdcall gl_bind_texture_unit_parameter_ext_t(GLenum unit, GLenum value);
typedef void __stdcall gl_bind_textures_t(GLuint first, GLsizei count, const GLuint *textures);
typedef void __stdcall gl_bind_transform_feedback_t(GLenum target, GLuint id);
typedef void __stdcall gl_bind_transform_feedback_nv_t(GLenum target, GLuint id);
typedef void __stdcall gl_bind_vertex_array_t(GLuint array);
typedef void __stdcall gl_bind_vertex_array_apple_t(GLuint array);
typedef void __stdcall gl_bind_vertex_buffer_t(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void __stdcall gl_bind_vertex_buffers_t(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
typedef void __stdcall gl_bind_vertex_shader_ext_t(GLuint id);
typedef void __stdcall gl_bind_video_capture_stream_buffer_nv_t(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
typedef void __stdcall gl_bind_video_capture_stream_texture_nv_t(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
typedef void __stdcall gl_binormal_pointer_ext_t(GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_blend_barrier_khr_t(void);
typedef void __stdcall gl_blend_barrier_nv_t(void);
typedef void __stdcall gl_blend_color_t(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void __stdcall gl_blend_color_ext_t(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void __stdcall gl_blend_equation_t(GLenum mode);
typedef void __stdcall gl_blend_equation_ext_t(GLenum mode);
typedef void __stdcall gl_blend_equation_indexed_amd_t(GLuint buf, GLenum mode);
typedef void __stdcall gl_blend_equation_separate_t(GLenum modeRGB, GLenum modeAlpha);
typedef void __stdcall gl_blend_equation_separate_ext_t(GLenum modeRGB, GLenum modeAlpha);
typedef void __stdcall gl_blend_equation_separate_indexed_amd_t(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void __stdcall gl_blend_equation_separatei_t(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void __stdcall gl_blend_equation_separatei_arb_t(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void __stdcall gl_blend_equationi_t(GLuint buf, GLenum mode);
typedef void __stdcall gl_blend_equationi_arb_t(GLuint buf, GLenum mode);
typedef void __stdcall gl_blend_func_indexed_amd_t(GLuint buf, GLenum src, GLenum dst);
typedef void __stdcall gl_blend_func_separate_t(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void __stdcall gl_blend_func_separate_ext_t(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void __stdcall gl_blend_func_separate_indexed_amd_t(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void __stdcall gl_blend_func_separatei_t(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void __stdcall gl_blend_func_separatei_arb_t(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void __stdcall gl_blend_funci_t(GLuint buf, GLenum src, GLenum dst);
typedef void __stdcall gl_blend_funci_arb_t(GLuint buf, GLenum src, GLenum dst);
typedef void __stdcall gl_blend_parameteri_nv_t(GLenum pname, GLint value);
typedef void __stdcall gl_blit_framebuffer_t(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void __stdcall gl_blit_framebuffer_ext_t(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void __stdcall gl_blit_named_framebuffer_t(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void __stdcall gl_buffer_address_range_nv_t(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void __stdcall gl_buffer_data_t(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
typedef void __stdcall gl_buffer_data_arb_t(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);
typedef void __stdcall gl_buffer_page_commitment_arb_t(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void __stdcall gl_buffer_parameteri_apple_t(GLenum target, GLenum pname, GLint param);
typedef void __stdcall gl_buffer_storage_t(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void __stdcall gl_buffer_storage_external_ext_t(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
typedef void __stdcall gl_buffer_storage_mem_ext_t(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_buffer_sub_data_t(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
typedef void __stdcall gl_buffer_sub_data_arb_t(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
typedef void __stdcall gl_call_command_list_nv_t(GLuint list);
typedef GLenum __stdcall gl_check_framebuffer_status_t(GLenum target);
typedef GLenum __stdcall gl_check_framebuffer_status_ext_t(GLenum target);
typedef GLenum __stdcall gl_check_named_framebuffer_status_t(GLuint framebuffer, GLenum target);
typedef GLenum __stdcall gl_check_named_framebuffer_status_ext_t(GLuint framebuffer, GLenum target);
typedef void __stdcall gl_clamp_color_t(GLenum target, GLenum clamp);
typedef void __stdcall gl_clamp_color_arb_t(GLenum target, GLenum clamp);
typedef void __stdcall gl_clear_buffer_data_t(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_clear_buffer_sub_data_t(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_clear_bufferfi_t(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void __stdcall gl_clear_bufferfv_t(GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void __stdcall gl_clear_bufferiv_t(GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void __stdcall gl_clear_bufferuiv_t(GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void __stdcall gl_clear_color_ii_ext_t(GLint red, GLint green, GLint blue, GLint alpha);
typedef void __stdcall gl_clear_color_iui_ext_t(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void __stdcall gl_clear_depthd_nv_t(GLdouble depth);
typedef void __stdcall gl_clear_depthf_t(GLfloat d);
typedef void __stdcall gl_clear_named_buffer_data_t(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_clear_named_buffer_data_ext_t(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_clear_named_buffer_sub_data_t(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_clear_named_buffer_sub_data_ext_t(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_clear_named_framebufferfi_t(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void __stdcall gl_clear_named_framebufferfv_t(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void __stdcall gl_clear_named_framebufferiv_t(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void __stdcall gl_clear_named_framebufferuiv_t(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void __stdcall gl_clear_tex_image_t(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_clear_tex_sub_image_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_client_active_texture_t(GLenum texture);
typedef void __stdcall gl_client_active_texture_arb_t(GLenum texture);
typedef void __stdcall gl_client_active_vertex_stream_ati_t(GLenum stream);
typedef void __stdcall gl_client_attrib_default_ext_t(GLbitfield mask);
typedef GLenum __stdcall gl_client_wait_sync_t(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void __stdcall gl_clip_control_t(GLenum origin, GLenum depth);
typedef void __stdcall gl_color3f_vertex3f_sun_t(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_color3f_vertex3fv_sun_t(const GLfloat *c, const GLfloat *v);
typedef void __stdcall gl_color3h_nv_t(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void __stdcall gl_color3hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_color4f_normal3f_vertex3f_sun_t(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_color4f_normal3f_vertex3fv_sun_t(const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_color4h_nv_t(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
typedef void __stdcall gl_color4hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_color4ub_vertex2f_sun_t(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef void __stdcall gl_color4ub_vertex2fv_sun_t(const GLubyte *c, const GLfloat *v);
typedef void __stdcall gl_color4ub_vertex3f_sun_t(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_color4ub_vertex3fv_sun_t(const GLubyte *c, const GLfloat *v);
typedef void __stdcall gl_color_format_nv_t(GLint size, GLenum type, GLsizei stride);
typedef void __stdcall gl_color_fragment_op1ati_t(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void __stdcall gl_color_fragment_op2ati_t(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void __stdcall gl_color_fragment_op3ati_t(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void __stdcall gl_color_mask_indexed_ext_t(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void __stdcall gl_color_maski_t(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void __stdcall gl_color_p3ui_t(GLenum type, GLuint color);
typedef void __stdcall gl_color_p3uiv_t(GLenum type, const GLuint *color);
typedef void __stdcall gl_color_p4ui_t(GLenum type, GLuint color);
typedef void __stdcall gl_color_p4uiv_t(GLenum type, const GLuint *color);
typedef void __stdcall gl_color_pointer_ext_t(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void __stdcall gl_color_pointer_list_ibm_t(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void __stdcall gl_color_pointerv_intel_t(GLint size, GLenum type, const void **pointer);
typedef void __stdcall gl_color_sub_table_t(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_color_sub_table_ext_t(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
typedef void __stdcall gl_color_table_t(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void __stdcall gl_color_table_ext_t(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void __stdcall gl_color_table_parameterfv_t(GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_color_table_parameterfv_sgi_t(GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_color_table_parameteriv_t(GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_color_table_parameteriv_sgi_t(GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_color_table_sgi_t(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
typedef void __stdcall gl_combiner_input_nv_t(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void __stdcall gl_combiner_output_nv_t(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef void __stdcall gl_combiner_parameterf_nv_t(GLenum pname, GLfloat param);
typedef void __stdcall gl_combiner_parameterfv_nv_t(GLenum pname, const GLfloat *params);
typedef void __stdcall gl_combiner_parameteri_nv_t(GLenum pname, GLint param);
typedef void __stdcall gl_combiner_parameteriv_nv_t(GLenum pname, const GLint *params);
typedef void __stdcall gl_combiner_stage_parameterfv_nv_t(GLenum stage, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_command_list_segments_nv_t(GLuint list, GLuint segments);
typedef void __stdcall gl_compile_command_list_nv_t(GLuint list);
typedef void __stdcall gl_compile_shader_t(GLuint shader);
typedef void __stdcall gl_compile_shader_arb_t(GLhandleARB shaderObj);
typedef void __stdcall gl_compile_shader_include_arb_t(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
typedef void __stdcall gl_compressed_multi_tex_image1dext_t(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_multi_tex_image2dext_t(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_multi_tex_image3dext_t(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_multi_tex_sub_image1dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_multi_tex_sub_image2dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_multi_tex_sub_image3dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_tex_image1d_t(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_image1darb_t(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_image2d_t(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_image2darb_t(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_image3d_t(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_image3darb_t(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_sub_image1d_t(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_sub_image1darb_t(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_sub_image2d_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_sub_image2darb_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_sub_image3d_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_tex_sub_image3darb_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_texture_image1dext_t(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_texture_image2dext_t(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_texture_image3dext_t(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_texture_sub_image1d_t(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_texture_sub_image1dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_texture_sub_image2d_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_texture_sub_image2dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_compressed_texture_sub_image3d_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void __stdcall gl_compressed_texture_sub_image3dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void __stdcall gl_conservative_raster_parameterf_nv_t(GLenum pname, GLfloat value);
typedef void __stdcall gl_conservative_raster_parameteri_nv_t(GLenum pname, GLint param);
typedef void __stdcall gl_convolution_filter1d_t(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
typedef void __stdcall gl_convolution_filter1dext_t(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
typedef void __stdcall gl_convolution_filter2d_t(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
typedef void __stdcall gl_convolution_filter2dext_t(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
typedef void __stdcall gl_convolution_parameterf_t(GLenum target, GLenum pname, GLfloat params);
typedef void __stdcall gl_convolution_parameterf_ext_t(GLenum target, GLenum pname, GLfloat params);
typedef void __stdcall gl_convolution_parameterfv_t(GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_convolution_parameterfv_ext_t(GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_convolution_parameteri_t(GLenum target, GLenum pname, GLint params);
typedef void __stdcall gl_convolution_parameteri_ext_t(GLenum target, GLenum pname, GLint params);
typedef void __stdcall gl_convolution_parameteriv_t(GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_convolution_parameteriv_ext_t(GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_copy_buffer_sub_data_t(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void __stdcall gl_copy_color_sub_table_t(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_color_sub_table_ext_t(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_color_table_t(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_color_table_sgi_t(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_convolution_filter1d_t(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_convolution_filter1dext_t(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_convolution_filter2d_t(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_convolution_filter2dext_t(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_image_sub_data_t(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void __stdcall gl_copy_image_sub_data_nv_t(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void __stdcall gl_copy_multi_tex_image1dext_t(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void __stdcall gl_copy_multi_tex_image2dext_t(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void __stdcall gl_copy_multi_tex_sub_image1dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_multi_tex_sub_image2dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_multi_tex_sub_image3dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_named_buffer_sub_data_t(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void __stdcall gl_copy_path_nv_t(GLuint resultPath, GLuint srcPath);
typedef void __stdcall gl_copy_tex_image1dext_t(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void __stdcall gl_copy_tex_image2dext_t(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void __stdcall gl_copy_tex_sub_image1dext_t(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_tex_sub_image2dext_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_tex_sub_image3d_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_tex_sub_image3dext_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_texture_image1dext_t(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void __stdcall gl_copy_texture_image2dext_t(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void __stdcall gl_copy_texture_sub_image1d_t(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_texture_sub_image1dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void __stdcall gl_copy_texture_sub_image2d_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_texture_sub_image2dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_texture_sub_image3d_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_copy_texture_sub_image3dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_cover_fill_path_instanced_nv_t(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void __stdcall gl_cover_fill_path_nv_t(GLuint path, GLenum coverMode);
typedef void __stdcall gl_cover_stroke_path_instanced_nv_t(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void __stdcall gl_cover_stroke_path_nv_t(GLuint path, GLenum coverMode);
typedef void __stdcall gl_coverage_modulation_nv_t(GLenum components);
typedef void __stdcall gl_coverage_modulation_table_nv_t(GLsizei n, const GLfloat *v);
typedef void __stdcall gl_create_buffers_t(GLsizei n, GLuint *buffers);
typedef void __stdcall gl_create_command_lists_nv_t(GLsizei n, GLuint *lists);
typedef void __stdcall gl_create_framebuffers_t(GLsizei n, GLuint *framebuffers);
typedef void __stdcall gl_create_memory_objects_ext_t(GLsizei n, GLuint *memoryObjects);
typedef void __stdcall gl_create_perf_query_intel_t(GLuint queryId, GLuint *queryHandle);
typedef GLuint __stdcall gl_create_program_t(void);
typedef GLhandleARB __stdcall gl_create_program_object_arb_t(void);
typedef void __stdcall gl_create_program_pipelines_t(GLsizei n, GLuint *pipelines);
typedef void __stdcall gl_create_queries_t(GLenum target, GLsizei n, GLuint *ids);
typedef void __stdcall gl_create_renderbuffers_t(GLsizei n, GLuint *renderbuffers);
typedef void __stdcall gl_create_samplers_t(GLsizei n, GLuint *samplers);
typedef GLuint __stdcall gl_create_shader_t(GLenum type);
typedef GLhandleARB __stdcall gl_create_shader_object_arb_t(GLenum shaderType);
typedef GLuint __stdcall gl_create_shader_program_ext_t(GLenum type, const GLchar *string);
typedef GLuint __stdcall gl_create_shader_programv_t(GLenum type, GLsizei count, const GLchar *const*strings);
typedef void __stdcall gl_create_states_nv_t(GLsizei n, GLuint *states);
typedef GLsync __stdcall gl_create_sync_from_clevent_arb_t(struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
typedef void __stdcall gl_create_textures_t(GLenum target, GLsizei n, GLuint *textures);
typedef void __stdcall gl_create_transform_feedbacks_t(GLsizei n, GLuint *ids);
typedef void __stdcall gl_create_vertex_arrays_t(GLsizei n, GLuint *arrays);
typedef void __stdcall gl_cull_parameterdv_ext_t(GLenum pname, GLdouble *params);
typedef void __stdcall gl_cull_parameterfv_ext_t(GLenum pname, GLfloat *params);
typedef void __stdcall gl_current_palette_matrix_arb_t(GLint index);
typedef void __stdcall gl_debug_message_callback_t(GLDEBUGPROC callback, const void *userParam);
typedef void __stdcall gl_debug_message_callback_amd_t(GLDEBUGPROCAMD callback, void *userParam);
typedef void __stdcall gl_debug_message_callback_arb_t(GLDEBUGPROCARB callback, const void *userParam);
typedef void __stdcall gl_debug_message_control_t(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void __stdcall gl_debug_message_control_arb_t(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void __stdcall gl_debug_message_enable_amd_t(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void __stdcall gl_debug_message_insert_t(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void __stdcall gl_debug_message_insert_amd_t(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
typedef void __stdcall gl_debug_message_insert_arb_t(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void __stdcall gl_deform_sgix_t(GLbitfield mask);
typedef void __stdcall gl_delete_async_markers_sgix_t(GLuint marker, GLsizei range);
typedef void __stdcall gl_delete_buffers_t(GLsizei n, const GLuint *buffers);
typedef void __stdcall gl_delete_buffers_arb_t(GLsizei n, const GLuint *buffers);
typedef void __stdcall gl_delete_command_lists_nv_t(GLsizei n, const GLuint *lists);
typedef void __stdcall gl_delete_fences_apple_t(GLsizei n, const GLuint *fences);
typedef void __stdcall gl_delete_fences_nv_t(GLsizei n, const GLuint *fences);
typedef void __stdcall gl_delete_fragment_shader_ati_t(GLuint id);
typedef void __stdcall gl_delete_framebuffers_t(GLsizei n, const GLuint *framebuffers);
typedef void __stdcall gl_delete_framebuffers_ext_t(GLsizei n, const GLuint *framebuffers);
typedef void __stdcall gl_delete_memory_objects_ext_t(GLsizei n, const GLuint *memoryObjects);
typedef void __stdcall gl_delete_named_string_arb_t(GLint namelen, const GLchar *name);
typedef void __stdcall gl_delete_names_amd_t(GLenum identifier, GLuint num, const GLuint *names);
typedef void __stdcall gl_delete_object_arb_t(GLhandleARB obj);
typedef void __stdcall gl_delete_occlusion_queries_nv_t(GLsizei n, const GLuint *ids);
typedef void __stdcall gl_delete_paths_nv_t(GLuint path, GLsizei range);
typedef void __stdcall gl_delete_perf_monitors_amd_t(GLsizei n, GLuint *monitors);
typedef void __stdcall gl_delete_perf_query_intel_t(GLuint queryHandle);
typedef void __stdcall gl_delete_program_t(GLuint program);
typedef void __stdcall gl_delete_program_pipelines_t(GLsizei n, const GLuint *pipelines);
typedef void __stdcall gl_delete_programs_arb_t(GLsizei n, const GLuint *programs);
typedef void __stdcall gl_delete_programs_nv_t(GLsizei n, const GLuint *programs);
typedef void __stdcall gl_delete_queries_t(GLsizei n, const GLuint *ids);
typedef void __stdcall gl_delete_queries_arb_t(GLsizei n, const GLuint *ids);
typedef void __stdcall gl_delete_renderbuffers_t(GLsizei n, const GLuint *renderbuffers);
typedef void __stdcall gl_delete_renderbuffers_ext_t(GLsizei n, const GLuint *renderbuffers);
typedef void __stdcall gl_delete_samplers_t(GLsizei count, const GLuint *samplers);
typedef void __stdcall gl_delete_semaphores_ext_t(GLsizei n, const GLuint *semaphores);
typedef void __stdcall gl_delete_shader_t(GLuint shader);
typedef void __stdcall gl_delete_states_nv_t(GLsizei n, const GLuint *states);
typedef void __stdcall gl_delete_sync_t(GLsync sync);
typedef void __stdcall gl_delete_textures_ext_t(GLsizei n, const GLuint *textures);
typedef void __stdcall gl_delete_transform_feedbacks_t(GLsizei n, const GLuint *ids);
typedef void __stdcall gl_delete_transform_feedbacks_nv_t(GLsizei n, const GLuint *ids);
typedef void __stdcall gl_delete_vertex_arrays_t(GLsizei n, const GLuint *arrays);
typedef void __stdcall gl_delete_vertex_arrays_apple_t(GLsizei n, const GLuint *arrays);
typedef void __stdcall gl_delete_vertex_shader_ext_t(GLuint id);
typedef void __stdcall gl_depth_bounds_ext_t(GLclampd zmin, GLclampd zmax);
typedef void __stdcall gl_depth_boundsd_nv_t(GLdouble zmin, GLdouble zmax);
typedef void __stdcall gl_depth_range_arrayv_t(GLuint first, GLsizei count, const GLdouble *v);
typedef void __stdcall gl_depth_range_indexed_t(GLuint index, GLdouble n, GLdouble f);
typedef void __stdcall gl_depth_ranged_nv_t(GLdouble zNear, GLdouble zFar);
typedef void __stdcall gl_depth_rangef_t(GLfloat n, GLfloat f);
typedef void __stdcall gl_detach_object_arb_t(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void __stdcall gl_detach_shader_t(GLuint program, GLuint shader);
typedef void __stdcall gl_detail_tex_func_sgis_t(GLenum target, GLsizei n, const GLfloat *points);
typedef void __stdcall gl_disable_client_state_indexed_ext_t(GLenum array, GLuint index);
typedef void __stdcall gl_disable_client_statei_ext_t(GLenum array, GLuint index);
typedef void __stdcall gl_disable_indexed_ext_t(GLenum target, GLuint index);
typedef void __stdcall gl_disable_variant_client_state_ext_t(GLuint id);
typedef void __stdcall gl_disable_vertex_array_attrib_t(GLuint vaobj, GLuint index);
typedef void __stdcall gl_disable_vertex_array_attrib_ext_t(GLuint vaobj, GLuint index);
typedef void __stdcall gl_disable_vertex_array_ext_t(GLuint vaobj, GLenum array);
typedef void __stdcall gl_disable_vertex_attrib_apple_t(GLuint index, GLenum pname);
typedef void __stdcall gl_disable_vertex_attrib_array_t(GLuint index);
typedef void __stdcall gl_disable_vertex_attrib_array_arb_t(GLuint index);
typedef void __stdcall gl_disablei_t(GLenum target, GLuint index);
typedef void __stdcall gl_dispatch_compute_t(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void __stdcall gl_dispatch_compute_group_size_arb_t(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
typedef void __stdcall gl_dispatch_compute_indirect_t(GLintptr indirect);
typedef void __stdcall gl_draw_arrays_ext_t(GLenum mode, GLint first, GLsizei count);
typedef void __stdcall gl_draw_arrays_indirect_t(GLenum mode, const void *indirect);
typedef void __stdcall gl_draw_arrays_instanced_t(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void __stdcall gl_draw_arrays_instanced_arb_t(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void __stdcall gl_draw_arrays_instanced_base_instance_t(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void __stdcall gl_draw_arrays_instanced_ext_t(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void __stdcall gl_draw_buffers_t(GLsizei n, const GLenum *bufs);
typedef void __stdcall gl_draw_buffers_arb_t(GLsizei n, const GLenum *bufs);
typedef void __stdcall gl_draw_buffers_ati_t(GLsizei n, const GLenum *bufs);
typedef void __stdcall gl_draw_commands_address_nv_t(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
typedef void __stdcall gl_draw_commands_nv_t(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
typedef void __stdcall gl_draw_commands_states_address_nv_t(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void __stdcall gl_draw_commands_states_nv_t(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void __stdcall gl_draw_element_array_apple_t(GLenum mode, GLint first, GLsizei count);
typedef void __stdcall gl_draw_element_array_ati_t(GLenum mode, GLsizei count);
typedef void __stdcall gl_draw_elements_base_vertex_t(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void __stdcall gl_draw_elements_indirect_t(GLenum mode, GLenum type, const void *indirect);
typedef void __stdcall gl_draw_elements_instanced_t(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
typedef void __stdcall gl_draw_elements_instanced_arb_t(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
typedef void __stdcall gl_draw_elements_instanced_base_instance_t(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
typedef void __stdcall gl_draw_elements_instanced_base_vertex_t(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
typedef void __stdcall gl_draw_elements_instanced_base_vertex_base_instance_t(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void __stdcall gl_draw_elements_instanced_ext_t(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
typedef void __stdcall gl_draw_range_element_array_apple_t(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef void __stdcall gl_draw_range_element_array_ati_t(GLenum mode, GLuint start, GLuint end, GLsizei count);
typedef void __stdcall gl_draw_range_elements_t(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
typedef void __stdcall gl_draw_range_elements_base_vertex_t(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void __stdcall gl_draw_range_elements_ext_t(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
typedef void __stdcall gl_draw_texture_nv_t(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef void __stdcall gl_draw_transform_feedback_t(GLenum mode, GLuint id);
typedef void __stdcall gl_draw_transform_feedback_instanced_t(GLenum mode, GLuint id, GLsizei instancecount);
typedef void __stdcall gl_draw_transform_feedback_nv_t(GLenum mode, GLuint id);
typedef void __stdcall gl_draw_transform_feedback_stream_t(GLenum mode, GLuint id, GLuint stream);
typedef void __stdcall gl_draw_transform_feedback_stream_instanced_t(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
typedef void __stdcall gl_draw_vk_image_nv_t(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef void __stdcall gl_edge_flag_format_nv_t(GLsizei stride);
typedef void __stdcall gl_edge_flag_pointer_ext_t(GLsizei stride, GLsizei count, const GLboolean *pointer);
typedef void __stdcall gl_edge_flag_pointer_list_ibm_t(GLint stride, const GLboolean **pointer, GLint ptrstride);
typedef void __stdcall gl_element_pointer_apple_t(GLenum type, const void *pointer);
typedef void __stdcall gl_element_pointer_ati_t(GLenum type, const void *pointer);
typedef void __stdcall gl_enable_client_state_indexed_ext_t(GLenum array, GLuint index);
typedef void __stdcall gl_enable_client_statei_ext_t(GLenum array, GLuint index);
typedef void __stdcall gl_enable_indexed_ext_t(GLenum target, GLuint index);
typedef void __stdcall gl_enable_variant_client_state_ext_t(GLuint id);
typedef void __stdcall gl_enable_vertex_array_attrib_t(GLuint vaobj, GLuint index);
typedef void __stdcall gl_enable_vertex_array_attrib_ext_t(GLuint vaobj, GLuint index);
typedef void __stdcall gl_enable_vertex_array_ext_t(GLuint vaobj, GLenum array);
typedef void __stdcall gl_enable_vertex_attrib_apple_t(GLuint index, GLenum pname);
typedef void __stdcall gl_enable_vertex_attrib_array_t(GLuint index);
typedef void __stdcall gl_enable_vertex_attrib_array_arb_t(GLuint index);
typedef void __stdcall gl_enablei_t(GLenum target, GLuint index);
typedef void __stdcall gl_end_conditional_render_t(void);
typedef void __stdcall gl_end_conditional_render_nv_t(void);
typedef void __stdcall gl_end_conditional_render_nvx_t(void);
typedef void __stdcall gl_end_fragment_shader_ati_t(void);
typedef void __stdcall gl_end_occlusion_query_nv_t(void);
typedef void __stdcall gl_end_perf_monitor_amd_t(GLuint monitor);
typedef void __stdcall gl_end_perf_query_intel_t(GLuint queryHandle);
typedef void __stdcall gl_end_query_t(GLenum target);
typedef void __stdcall gl_end_query_arb_t(GLenum target);
typedef void __stdcall gl_end_query_indexed_t(GLenum target, GLuint index);
typedef void __stdcall gl_end_transform_feedback_t(void);
typedef void __stdcall gl_end_transform_feedback_ext_t(void);
typedef void __stdcall gl_end_transform_feedback_nv_t(void);
typedef void __stdcall gl_end_vertex_shader_ext_t(void);
typedef void __stdcall gl_end_video_capture_nv_t(GLuint video_capture_slot);
typedef void __stdcall gl_eval_maps_nv_t(GLenum target, GLenum mode);
typedef void __stdcall gl_execute_program_nv_t(GLenum target, GLuint id, const GLfloat *params);
typedef void __stdcall gl_extract_component_ext_t(GLuint res, GLuint src, GLuint num);
typedef GLsync __stdcall gl_fence_sync_t(GLenum condition, GLbitfield flags);
typedef void __stdcall gl_final_combiner_input_nv_t(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef GLint __stdcall gl_finish_async_sgix_t(GLuint *markerp);
typedef void __stdcall gl_finish_fence_apple_t(GLuint fence);
typedef void __stdcall gl_finish_fence_nv_t(GLuint fence);
typedef void __stdcall gl_finish_object_apple_t(GLenum object, GLint name);
typedef void __stdcall gl_finish_texture_sunx_t(void);
typedef void __stdcall gl_flush_mapped_buffer_range_t(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void __stdcall gl_flush_mapped_buffer_range_apple_t(GLenum target, GLintptr offset, GLsizeiptr size);
typedef void __stdcall gl_flush_mapped_named_buffer_range_t(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void __stdcall gl_flush_mapped_named_buffer_range_ext_t(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void __stdcall gl_flush_pixel_data_range_nv_t(GLenum target);
typedef void __stdcall gl_flush_raster_sgix_t(void);
typedef void __stdcall gl_flush_vertex_array_range_apple_t(GLsizei length, void *pointer);
typedef void __stdcall gl_flush_vertex_array_range_nv_t(void);
typedef void __stdcall gl_fog_coord_format_nv_t(GLenum type, GLsizei stride);
typedef void __stdcall gl_fog_coord_pointer_t(GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_fog_coord_pointer_ext_t(GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_fog_coord_pointer_list_ibm_t(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void __stdcall gl_fog_coordd_t(GLdouble coord);
typedef void __stdcall gl_fog_coordd_ext_t(GLdouble coord);
typedef void __stdcall gl_fog_coorddv_t(const GLdouble *coord);
typedef void __stdcall gl_fog_coorddv_ext_t(const GLdouble *coord);
typedef void __stdcall gl_fog_coordf_t(GLfloat coord);
typedef void __stdcall gl_fog_coordf_ext_t(GLfloat coord);
typedef void __stdcall gl_fog_coordfv_t(const GLfloat *coord);
typedef void __stdcall gl_fog_coordfv_ext_t(const GLfloat *coord);
typedef void __stdcall gl_fog_coordh_nv_t(GLhalfNV fog);
typedef void __stdcall gl_fog_coordhv_nv_t(const GLhalfNV *fog);
typedef void __stdcall gl_fog_func_sgis_t(GLsizei n, const GLfloat *points);
typedef void __stdcall gl_fragment_color_material_sgix_t(GLenum face, GLenum mode);
typedef void __stdcall gl_fragment_coverage_color_nv_t(GLuint color);
typedef void __stdcall gl_fragment_light_modelf_sgix_t(GLenum pname, GLfloat param);
typedef void __stdcall gl_fragment_light_modelfv_sgix_t(GLenum pname, const GLfloat *params);
typedef void __stdcall gl_fragment_light_modeli_sgix_t(GLenum pname, GLint param);
typedef void __stdcall gl_fragment_light_modeliv_sgix_t(GLenum pname, const GLint *params);
typedef void __stdcall gl_fragment_lightf_sgix_t(GLenum light, GLenum pname, GLfloat param);
typedef void __stdcall gl_fragment_lightfv_sgix_t(GLenum light, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_fragment_lighti_sgix_t(GLenum light, GLenum pname, GLint param);
typedef void __stdcall gl_fragment_lightiv_sgix_t(GLenum light, GLenum pname, const GLint *params);
typedef void __stdcall gl_fragment_materialf_sgix_t(GLenum face, GLenum pname, GLfloat param);
typedef void __stdcall gl_fragment_materialfv_sgix_t(GLenum face, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_fragment_materiali_sgix_t(GLenum face, GLenum pname, GLint param);
typedef void __stdcall gl_fragment_materialiv_sgix_t(GLenum face, GLenum pname, const GLint *params);
typedef void __stdcall gl_frame_terminator_gremedy_t(void);
typedef void __stdcall gl_frame_zoom_sgix_t(GLint factor);
typedef void __stdcall gl_framebuffer_draw_buffer_ext_t(GLuint framebuffer, GLenum mode);
typedef void __stdcall gl_framebuffer_draw_buffers_ext_t(GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void __stdcall gl_framebuffer_parameteri_t(GLenum target, GLenum pname, GLint param);
typedef void __stdcall gl_framebuffer_read_buffer_ext_t(GLuint framebuffer, GLenum mode);
typedef void __stdcall gl_framebuffer_renderbuffer_t(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void __stdcall gl_framebuffer_renderbuffer_ext_t(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void __stdcall gl_framebuffer_sample_locationsfv_arb_t(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_framebuffer_sample_locationsfv_nv_t(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_framebuffer_sample_positionsfv_amd_t(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
typedef void __stdcall gl_framebuffer_texture_t(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void __stdcall gl_framebuffer_texture1d_t(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void __stdcall gl_framebuffer_texture1dext_t(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void __stdcall gl_framebuffer_texture2d_t(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void __stdcall gl_framebuffer_texture2dext_t(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void __stdcall gl_framebuffer_texture3d_t(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void __stdcall gl_framebuffer_texture3dext_t(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void __stdcall gl_framebuffer_texture_arb_t(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void __stdcall gl_framebuffer_texture_ext_t(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void __stdcall gl_framebuffer_texture_face_arb_t(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void __stdcall gl_framebuffer_texture_face_ext_t(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void __stdcall gl_framebuffer_texture_layer_t(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void __stdcall gl_framebuffer_texture_layer_arb_t(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void __stdcall gl_framebuffer_texture_layer_ext_t(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void __stdcall gl_framebuffer_texture_multiview_ovr_t(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
typedef void __stdcall gl_free_object_buffer_ati_t(GLuint buffer);
typedef GLuint __stdcall gl_gen_async_markers_sgix_t(GLsizei range);
typedef void __stdcall gl_gen_buffers_t(GLsizei n, GLuint *buffers);
typedef void __stdcall gl_gen_buffers_arb_t(GLsizei n, GLuint *buffers);
typedef void __stdcall gl_gen_fences_apple_t(GLsizei n, GLuint *fences);
typedef void __stdcall gl_gen_fences_nv_t(GLsizei n, GLuint *fences);
typedef GLuint __stdcall gl_gen_fragment_shaders_ati_t(GLuint range);
typedef void __stdcall gl_gen_framebuffers_t(GLsizei n, GLuint *framebuffers);
typedef void __stdcall gl_gen_framebuffers_ext_t(GLsizei n, GLuint *framebuffers);
typedef void __stdcall gl_gen_names_amd_t(GLenum identifier, GLuint num, GLuint *names);
typedef void __stdcall gl_gen_occlusion_queries_nv_t(GLsizei n, GLuint *ids);
typedef GLuint __stdcall gl_gen_paths_nv_t(GLsizei range);
typedef void __stdcall gl_gen_perf_monitors_amd_t(GLsizei n, GLuint *monitors);
typedef void __stdcall gl_gen_program_pipelines_t(GLsizei n, GLuint *pipelines);
typedef void __stdcall gl_gen_programs_arb_t(GLsizei n, GLuint *programs);
typedef void __stdcall gl_gen_programs_nv_t(GLsizei n, GLuint *programs);
typedef void __stdcall gl_gen_queries_t(GLsizei n, GLuint *ids);
typedef void __stdcall gl_gen_queries_arb_t(GLsizei n, GLuint *ids);
typedef void __stdcall gl_gen_renderbuffers_t(GLsizei n, GLuint *renderbuffers);
typedef void __stdcall gl_gen_renderbuffers_ext_t(GLsizei n, GLuint *renderbuffers);
typedef void __stdcall gl_gen_samplers_t(GLsizei count, GLuint *samplers);
typedef void __stdcall gl_gen_semaphores_ext_t(GLsizei n, GLuint *semaphores);
typedef GLuint __stdcall gl_gen_symbols_ext_t(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
typedef void __stdcall gl_gen_textures_ext_t(GLsizei n, GLuint *textures);
typedef void __stdcall gl_gen_transform_feedbacks_t(GLsizei n, GLuint *ids);
typedef void __stdcall gl_gen_transform_feedbacks_nv_t(GLsizei n, GLuint *ids);
typedef void __stdcall gl_gen_vertex_arrays_t(GLsizei n, GLuint *arrays);
typedef void __stdcall gl_gen_vertex_arrays_apple_t(GLsizei n, GLuint *arrays);
typedef GLuint __stdcall gl_gen_vertex_shaders_ext_t(GLuint range);
typedef void __stdcall gl_generate_mipmap_t(GLenum target);
typedef void __stdcall gl_generate_mipmap_ext_t(GLenum target);
typedef void __stdcall gl_generate_multi_tex_mipmap_ext_t(GLenum texunit, GLenum target);
typedef void __stdcall gl_generate_texture_mipmap_t(GLuint texture);
typedef void __stdcall gl_generate_texture_mipmap_ext_t(GLuint texture, GLenum target);
typedef void __stdcall gl_get_active_atomic_counter_bufferiv_t(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
typedef void __stdcall gl_get_active_attrib_t(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void __stdcall gl_get_active_attrib_arb_t(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
typedef void __stdcall gl_get_active_subroutine_name_t(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void __stdcall gl_get_active_subroutine_uniform_name_t(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void __stdcall gl_get_active_subroutine_uniformiv_t(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
typedef void __stdcall gl_get_active_uniform_t(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void __stdcall gl_get_active_uniform_arb_t(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
typedef void __stdcall gl_get_active_uniform_block_name_t(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
typedef void __stdcall gl_get_active_uniform_blockiv_t(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
typedef void __stdcall gl_get_active_uniform_name_t(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
typedef void __stdcall gl_get_active_uniformsiv_t(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
typedef void __stdcall gl_get_active_varying_nv_t(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void __stdcall gl_get_array_objectfv_ati_t(GLenum array, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_array_objectiv_ati_t(GLenum array, GLenum pname, GLint *params);
typedef void __stdcall gl_get_attached_objects_arb_t(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
typedef void __stdcall gl_get_attached_shaders_t(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
typedef GLint __stdcall gl_get_attrib_location_t(GLuint program, const GLchar *name);
typedef GLint __stdcall gl_get_attrib_location_arb_t(GLhandleARB programObj, const GLcharARB *name);
typedef void __stdcall gl_get_boolean_indexedv_ext_t(GLenum target, GLuint index, GLboolean *data);
typedef void __stdcall gl_get_booleani_v_t(GLenum target, GLuint index, GLboolean *data);
typedef void __stdcall gl_get_buffer_parameteri64v_t(GLenum target, GLenum pname, GLint64 *params);
typedef void __stdcall gl_get_buffer_parameteriv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_buffer_parameteriv_arb_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_buffer_parameterui64v_nv_t(GLenum target, GLenum pname, GLuint64EXT *params);
typedef void __stdcall gl_get_buffer_pointerv_t(GLenum target, GLenum pname, void **params);
typedef void __stdcall gl_get_buffer_pointerv_arb_t(GLenum target, GLenum pname, void **params);
typedef void __stdcall gl_get_buffer_sub_data_t(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
typedef void __stdcall gl_get_buffer_sub_data_arb_t(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);
typedef void __stdcall gl_get_color_table_t(GLenum target, GLenum format, GLenum type, void *table);
typedef void __stdcall gl_get_color_table_ext_t(GLenum target, GLenum format, GLenum type, void *data);
typedef void __stdcall gl_get_color_table_parameterfv_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_color_table_parameterfv_ext_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_color_table_parameterfv_sgi_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_color_table_parameteriv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_color_table_parameteriv_ext_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_color_table_parameteriv_sgi_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_color_table_sgi_t(GLenum target, GLenum format, GLenum type, void *table);
typedef void __stdcall gl_get_combiner_input_parameterfv_nv_t(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_combiner_input_parameteriv_nv_t(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
typedef void __stdcall gl_get_combiner_output_parameterfv_nv_t(GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_combiner_output_parameteriv_nv_t(GLenum stage, GLenum portion, GLenum pname, GLint *params);
typedef void __stdcall gl_get_combiner_stage_parameterfv_nv_t(GLenum stage, GLenum pname, GLfloat *params);
typedef GLuint __stdcall gl_get_command_header_nv_t(GLenum tokenID, GLuint size);
typedef void __stdcall gl_get_compressed_multi_tex_image_ext_t(GLenum texunit, GLenum target, GLint lod, void *img);
typedef void __stdcall gl_get_compressed_tex_image_t(GLenum target, GLint level, void *img);
typedef void __stdcall gl_get_compressed_tex_image_arb_t(GLenum target, GLint level, void *img);
typedef void __stdcall gl_get_compressed_texture_image_t(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
typedef void __stdcall gl_get_compressed_texture_image_ext_t(GLuint texture, GLenum target, GLint lod, void *img);
typedef void __stdcall gl_get_compressed_texture_sub_image_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
typedef void __stdcall gl_get_convolution_filter_t(GLenum target, GLenum format, GLenum type, void *image);
typedef void __stdcall gl_get_convolution_filter_ext_t(GLenum target, GLenum format, GLenum type, void *image);
typedef void __stdcall gl_get_convolution_parameterfv_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_convolution_parameterfv_ext_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_convolution_parameteriv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_convolution_parameteriv_ext_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_coverage_modulation_table_nv_t(GLsizei bufsize, GLfloat *v);
typedef GLuint __stdcall gl_get_debug_message_log_t(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
typedef GLuint __stdcall gl_get_debug_message_log_amd_t(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
typedef GLuint __stdcall gl_get_debug_message_log_arb_t(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
typedef void __stdcall gl_get_detail_tex_func_sgis_t(GLenum target, GLfloat *points);
typedef void __stdcall gl_get_double_indexedv_ext_t(GLenum target, GLuint index, GLdouble *data);
typedef void __stdcall gl_get_doublei_v_t(GLenum target, GLuint index, GLdouble *data);
typedef void __stdcall gl_get_doublei_v_ext_t(GLenum pname, GLuint index, GLdouble *params);
typedef void __stdcall gl_get_fenceiv_nv_t(GLuint fence, GLenum pname, GLint *params);
typedef void __stdcall gl_get_final_combiner_input_parameterfv_nv_t(GLenum variable, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_final_combiner_input_parameteriv_nv_t(GLenum variable, GLenum pname, GLint *params);
typedef void __stdcall gl_get_first_perf_query_id_intel_t(GLuint *queryId);
typedef void __stdcall gl_get_float_indexedv_ext_t(GLenum target, GLuint index, GLfloat *data);
typedef void __stdcall gl_get_floati_v_t(GLenum target, GLuint index, GLfloat *data);
typedef void __stdcall gl_get_floati_v_ext_t(GLenum pname, GLuint index, GLfloat *params);
typedef void __stdcall gl_get_fog_func_sgis_t(GLfloat *points);
typedef GLint __stdcall gl_get_frag_data_index_t(GLuint program, const GLchar *name);
typedef GLint __stdcall gl_get_frag_data_location_t(GLuint program, const GLchar *name);
typedef GLint __stdcall gl_get_frag_data_location_ext_t(GLuint program, const GLchar *name);
typedef void __stdcall gl_get_fragment_lightfv_sgix_t(GLenum light, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_fragment_lightiv_sgix_t(GLenum light, GLenum pname, GLint *params);
typedef void __stdcall gl_get_fragment_materialfv_sgix_t(GLenum face, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_fragment_materialiv_sgix_t(GLenum face, GLenum pname, GLint *params);
typedef void __stdcall gl_get_framebuffer_attachment_parameteriv_t(GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void __stdcall gl_get_framebuffer_attachment_parameteriv_ext_t(GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void __stdcall gl_get_framebuffer_parameterfv_amd_t(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
typedef void __stdcall gl_get_framebuffer_parameteriv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_framebuffer_parameteriv_ext_t(GLuint framebuffer, GLenum pname, GLint *params);
typedef GLenum __stdcall gl_get_graphics_reset_status_t(void);
typedef GLenum __stdcall gl_get_graphics_reset_status_arb_t(void);
typedef GLhandleARB __stdcall gl_get_handle_arb_t(GLenum pname);
typedef void __stdcall gl_get_histogram_t(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void __stdcall gl_get_histogram_ext_t(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void __stdcall gl_get_histogram_parameterfv_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_histogram_parameterfv_ext_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_histogram_parameteriv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_histogram_parameteriv_ext_t(GLenum target, GLenum pname, GLint *params);
typedef GLuint64 __stdcall gl_get_image_handle_arb_t(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef GLuint64 __stdcall gl_get_image_handle_nv_t(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void __stdcall gl_get_image_transform_parameterfv_hp_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_image_transform_parameteriv_hp_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_info_log_arb_t(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
typedef void __stdcall gl_get_integer64i_v_t(GLenum target, GLuint index, GLint64 *data);
typedef void __stdcall gl_get_integer64v_t(GLenum pname, GLint64 *data);
typedef void __stdcall gl_get_integer_indexedv_ext_t(GLenum target, GLuint index, GLint *data);
typedef void __stdcall gl_get_integeri_v_t(GLenum target, GLuint index, GLint *data);
typedef void __stdcall gl_get_integerui64i_v_nv_t(GLenum value, GLuint index, GLuint64EXT *result);
typedef void __stdcall gl_get_integerui64v_nv_t(GLenum value, GLuint64EXT *result);
typedef void __stdcall gl_get_internalformat_sampleiv_nv_t(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params);
typedef void __stdcall gl_get_internalformati64v_t(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
typedef void __stdcall gl_get_internalformativ_t(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
typedef void __stdcall gl_get_invariant_booleanv_ext_t(GLuint id, GLenum value, GLboolean *data);
typedef void __stdcall gl_get_invariant_floatv_ext_t(GLuint id, GLenum value, GLfloat *data);
typedef void __stdcall gl_get_invariant_integerv_ext_t(GLuint id, GLenum value, GLint *data);
typedef void __stdcall gl_get_local_constant_booleanv_ext_t(GLuint id, GLenum value, GLboolean *data);
typedef void __stdcall gl_get_local_constant_floatv_ext_t(GLuint id, GLenum value, GLfloat *data);
typedef void __stdcall gl_get_local_constant_integerv_ext_t(GLuint id, GLenum value, GLint *data);
typedef void __stdcall gl_get_map_attrib_parameterfv_nv_t(GLenum target, GLuint index, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_map_attrib_parameteriv_nv_t(GLenum target, GLuint index, GLenum pname, GLint *params);
typedef void __stdcall gl_get_map_control_points_nv_t(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
typedef void __stdcall gl_get_map_parameterfv_nv_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_map_parameteriv_nv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_memory_object_parameteriv_ext_t(GLuint memoryObject, GLenum pname, GLint *params);
typedef void __stdcall gl_get_minmax_t(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void __stdcall gl_get_minmax_ext_t(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
typedef void __stdcall gl_get_minmax_parameterfv_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_minmax_parameterfv_ext_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_minmax_parameteriv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_minmax_parameteriv_ext_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_multi_tex_envfv_ext_t(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_multi_tex_enviv_ext_t(GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_multi_tex_gendv_ext_t(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
typedef void __stdcall gl_get_multi_tex_genfv_ext_t(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_multi_tex_geniv_ext_t(GLenum texunit, GLenum coord, GLenum pname, GLint *params);
typedef void __stdcall gl_get_multi_tex_image_ext_t(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void __stdcall gl_get_multi_tex_level_parameterfv_ext_t(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_multi_tex_level_parameteriv_ext_t(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void __stdcall gl_get_multi_tex_parameter_iiv_ext_t(GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_multi_tex_parameter_iuiv_ext_t(GLenum texunit, GLenum target, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_multi_tex_parameterfv_ext_t(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_multi_tex_parameteriv_ext_t(GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_multisamplefv_t(GLenum pname, GLuint index, GLfloat *val);
typedef void __stdcall gl_get_multisamplefv_nv_t(GLenum pname, GLuint index, GLfloat *val);
typedef void __stdcall gl_get_named_buffer_parameteri64v_t(GLuint buffer, GLenum pname, GLint64 *params);
typedef void __stdcall gl_get_named_buffer_parameteriv_t(GLuint buffer, GLenum pname, GLint *params);
typedef void __stdcall gl_get_named_buffer_parameteriv_ext_t(GLuint buffer, GLenum pname, GLint *params);
typedef void __stdcall gl_get_named_buffer_parameterui64v_nv_t(GLuint buffer, GLenum pname, GLuint64EXT *params);
typedef void __stdcall gl_get_named_buffer_pointerv_t(GLuint buffer, GLenum pname, void **params);
typedef void __stdcall gl_get_named_buffer_pointerv_ext_t(GLuint buffer, GLenum pname, void **params);
typedef void __stdcall gl_get_named_buffer_sub_data_t(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void __stdcall gl_get_named_buffer_sub_data_ext_t(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void __stdcall gl_get_named_framebuffer_attachment_parameteriv_t(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void __stdcall gl_get_named_framebuffer_attachment_parameteriv_ext_t(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void __stdcall gl_get_named_framebuffer_parameterfv_amd_t(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
typedef void __stdcall gl_get_named_framebuffer_parameteriv_t(GLuint framebuffer, GLenum pname, GLint *param);
typedef void __stdcall gl_get_named_framebuffer_parameteriv_ext_t(GLuint framebuffer, GLenum pname, GLint *params);
typedef void __stdcall gl_get_named_program_local_parameter_iiv_ext_t(GLuint program, GLenum target, GLuint index, GLint *params);
typedef void __stdcall gl_get_named_program_local_parameter_iuiv_ext_t(GLuint program, GLenum target, GLuint index, GLuint *params);
typedef void __stdcall gl_get_named_program_local_parameterdv_ext_t(GLuint program, GLenum target, GLuint index, GLdouble *params);
typedef void __stdcall gl_get_named_program_local_parameterfv_ext_t(GLuint program, GLenum target, GLuint index, GLfloat *params);
typedef void __stdcall gl_get_named_program_string_ext_t(GLuint program, GLenum target, GLenum pname, void *string);
typedef void __stdcall gl_get_named_programiv_ext_t(GLuint program, GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_named_renderbuffer_parameteriv_t(GLuint renderbuffer, GLenum pname, GLint *params);
typedef void __stdcall gl_get_named_renderbuffer_parameteriv_ext_t(GLuint renderbuffer, GLenum pname, GLint *params);
typedef void __stdcall gl_get_named_string_arb_t(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
typedef void __stdcall gl_get_named_stringiv_arb_t(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
typedef void __stdcall gl_get_next_perf_query_id_intel_t(GLuint queryId, GLuint *nextQueryId);
typedef void __stdcall gl_get_object_bufferfv_ati_t(GLuint buffer, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_object_bufferiv_ati_t(GLuint buffer, GLenum pname, GLint *params);
typedef void __stdcall gl_get_object_label_t(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void __stdcall gl_get_object_label_ext_t(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void __stdcall gl_get_object_parameterfv_arb_t(GLhandleARB obj, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_object_parameteriv_apple_t(GLenum objectType, GLuint name, GLenum pname, GLint *params);
typedef void __stdcall gl_get_object_parameteriv_arb_t(GLhandleARB obj, GLenum pname, GLint *params);
typedef void __stdcall gl_get_object_ptr_label_t(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void __stdcall gl_get_occlusion_queryiv_nv_t(GLuint id, GLenum pname, GLint *params);
typedef void __stdcall gl_get_occlusion_queryuiv_nv_t(GLuint id, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_path_color_genfv_nv_t(GLenum color, GLenum pname, GLfloat *value);
typedef void __stdcall gl_get_path_color_geniv_nv_t(GLenum color, GLenum pname, GLint *value);
typedef void __stdcall gl_get_path_commands_nv_t(GLuint path, GLubyte *commands);
typedef void __stdcall gl_get_path_coords_nv_t(GLuint path, GLfloat *coords);
typedef void __stdcall gl_get_path_dash_array_nv_t(GLuint path, GLfloat *dashArray);
typedef GLfloat __stdcall gl_get_path_length_nv_t(GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef void __stdcall gl_get_path_metric_range_nv_t(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
typedef void __stdcall gl_get_path_metrics_nv_t(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
typedef void __stdcall gl_get_path_parameterfv_nv_t(GLuint path, GLenum pname, GLfloat *value);
typedef void __stdcall gl_get_path_parameteriv_nv_t(GLuint path, GLenum pname, GLint *value);
typedef void __stdcall gl_get_path_spacing_nv_t(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
typedef void __stdcall gl_get_path_tex_genfv_nv_t(GLenum texCoordSet, GLenum pname, GLfloat *value);
typedef void __stdcall gl_get_path_tex_geniv_nv_t(GLenum texCoordSet, GLenum pname, GLint *value);
typedef void __stdcall gl_get_perf_counter_info_intel_t(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
typedef void __stdcall gl_get_perf_monitor_counter_data_amd_t(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
typedef void __stdcall gl_get_perf_monitor_counter_info_amd_t(GLuint group, GLuint counter, GLenum pname, void *data);
typedef void __stdcall gl_get_perf_monitor_counter_string_amd_t(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
typedef void __stdcall gl_get_perf_monitor_counters_amd_t(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
typedef void __stdcall gl_get_perf_monitor_group_string_amd_t(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
typedef void __stdcall gl_get_perf_monitor_groups_amd_t(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
typedef void __stdcall gl_get_perf_query_data_intel_t(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
typedef void __stdcall gl_get_perf_query_id_by_name_intel_t(GLchar *queryName, GLuint *queryId);
typedef void __stdcall gl_get_perf_query_info_intel_t(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
typedef void __stdcall gl_get_pixel_transform_parameterfv_ext_t(GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_pixel_transform_parameteriv_ext_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_pointer_indexedv_ext_t(GLenum target, GLuint index, void **data);
typedef void __stdcall gl_get_pointeri_v_ext_t(GLenum pname, GLuint index, void **params);
typedef void __stdcall gl_get_program_binary_t(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
typedef void __stdcall gl_get_program_env_parameterdv_arb_t(GLenum target, GLuint index, GLdouble *params);
typedef void __stdcall gl_get_program_env_parameterfv_arb_t(GLenum target, GLuint index, GLfloat *params);
typedef void __stdcall gl_get_program_info_log_t(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void __stdcall gl_get_program_interfaceiv_t(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
typedef void __stdcall gl_get_program_local_parameterdv_arb_t(GLenum target, GLuint index, GLdouble *params);
typedef void __stdcall gl_get_program_local_parameterfv_arb_t(GLenum target, GLuint index, GLfloat *params);
typedef void __stdcall gl_get_program_named_parameterdv_nv_t(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
typedef void __stdcall gl_get_program_named_parameterfv_nv_t(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
typedef void __stdcall gl_get_program_parameterdv_nv_t(GLenum target, GLuint index, GLenum pname, GLdouble *params);
typedef void __stdcall gl_get_program_parameterfv_nv_t(GLenum target, GLuint index, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_program_pipeline_info_log_t(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void __stdcall gl_get_program_pipelineiv_t(GLuint pipeline, GLenum pname, GLint *params);
typedef GLuint __stdcall gl_get_program_resource_index_t(GLuint program, GLenum programInterface, const GLchar *name);
typedef GLint __stdcall gl_get_program_resource_location_t(GLuint program, GLenum programInterface, const GLchar *name);
typedef GLint __stdcall gl_get_program_resource_location_index_t(GLuint program, GLenum programInterface, const GLchar *name);
typedef void __stdcall gl_get_program_resource_name_t(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void __stdcall gl_get_program_resourcefv_nv_t(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params);
typedef void __stdcall gl_get_program_resourceiv_t(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
typedef void __stdcall gl_get_program_stageiv_t(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
typedef void __stdcall gl_get_program_string_arb_t(GLenum target, GLenum pname, void *string);
typedef void __stdcall gl_get_program_string_nv_t(GLuint id, GLenum pname, GLubyte *program);
typedef void __stdcall gl_get_programiv_t(GLuint program, GLenum pname, GLint *params);
typedef void __stdcall gl_get_programiv_arb_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_programiv_nv_t(GLuint id, GLenum pname, GLint *params);
typedef void __stdcall gl_get_query_buffer_objecti64v_t(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void __stdcall gl_get_query_buffer_objectiv_t(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void __stdcall gl_get_query_buffer_objectui64v_t(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void __stdcall gl_get_query_buffer_objectuiv_t(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void __stdcall gl_get_query_indexediv_t(GLenum target, GLuint index, GLenum pname, GLint *params);
typedef void __stdcall gl_get_query_objecti64v_t(GLuint id, GLenum pname, GLint64 *params);
typedef void __stdcall gl_get_query_objecti64v_ext_t(GLuint id, GLenum pname, GLint64 *params);
typedef void __stdcall gl_get_query_objectiv_t(GLuint id, GLenum pname, GLint *params);
typedef void __stdcall gl_get_query_objectiv_arb_t(GLuint id, GLenum pname, GLint *params);
typedef void __stdcall gl_get_query_objectui64v_t(GLuint id, GLenum pname, GLuint64 *params);
typedef void __stdcall gl_get_query_objectui64v_ext_t(GLuint id, GLenum pname, GLuint64 *params);
typedef void __stdcall gl_get_query_objectuiv_t(GLuint id, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_query_objectuiv_arb_t(GLuint id, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_queryiv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_queryiv_arb_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_renderbuffer_parameteriv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_renderbuffer_parameteriv_ext_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_sampler_parameter_iiv_t(GLuint sampler, GLenum pname, GLint *params);
typedef void __stdcall gl_get_sampler_parameter_iuiv_t(GLuint sampler, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_sampler_parameterfv_t(GLuint sampler, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_sampler_parameteriv_t(GLuint sampler, GLenum pname, GLint *params);
typedef void __stdcall gl_get_semaphore_parameterui64v_ext_t(GLuint semaphore, GLenum pname, GLuint64 *params);
typedef void __stdcall gl_get_separable_filter_t(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
typedef void __stdcall gl_get_separable_filter_ext_t(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
typedef void __stdcall gl_get_shader_info_log_t(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void __stdcall gl_get_shader_precision_format_t(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
typedef void __stdcall gl_get_shader_source_t(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
typedef void __stdcall gl_get_shader_source_arb_t(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
typedef void __stdcall gl_get_shaderiv_t(GLuint shader, GLenum pname, GLint *params);
typedef void __stdcall gl_get_sharpen_tex_func_sgis_t(GLenum target, GLfloat *points);
typedef GLushort __stdcall gl_get_stage_index_nv_t(GLenum shadertype);
typedef GLuint __stdcall gl_get_subroutine_index_t(GLuint program, GLenum shadertype, const GLchar *name);
typedef GLint __stdcall gl_get_subroutine_uniform_location_t(GLuint program, GLenum shadertype, const GLchar *name);
typedef void __stdcall gl_get_synciv_t(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
typedef void __stdcall gl_get_tex_bump_parameterfv_ati_t(GLenum pname, GLfloat *param);
typedef void __stdcall gl_get_tex_bump_parameteriv_ati_t(GLenum pname, GLint *param);
typedef void __stdcall gl_get_tex_filter_func_sgis_t(GLenum target, GLenum filter, GLfloat *weights);
typedef void __stdcall gl_get_tex_parameter_iiv_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_tex_parameter_iiv_ext_t(GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_tex_parameter_iuiv_t(GLenum target, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_tex_parameter_iuiv_ext_t(GLenum target, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_tex_parameter_pointerv_apple_t(GLenum target, GLenum pname, void **params);
typedef GLuint64 __stdcall gl_get_texture_handle_arb_t(GLuint texture);
typedef GLuint64 __stdcall gl_get_texture_handle_nv_t(GLuint texture);
typedef void __stdcall gl_get_texture_image_t(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void __stdcall gl_get_texture_image_ext_t(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void __stdcall gl_get_texture_level_parameterfv_t(GLuint texture, GLint level, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_texture_level_parameterfv_ext_t(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_texture_level_parameteriv_t(GLuint texture, GLint level, GLenum pname, GLint *params);
typedef void __stdcall gl_get_texture_level_parameteriv_ext_t(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void __stdcall gl_get_texture_parameter_iiv_t(GLuint texture, GLenum pname, GLint *params);
typedef void __stdcall gl_get_texture_parameter_iiv_ext_t(GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void __stdcall gl_get_texture_parameter_iuiv_t(GLuint texture, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_texture_parameter_iuiv_ext_t(GLuint texture, GLenum target, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_texture_parameterfv_t(GLuint texture, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_texture_parameterfv_ext_t(GLuint texture, GLenum target, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_texture_parameteriv_t(GLuint texture, GLenum pname, GLint *params);
typedef void __stdcall gl_get_texture_parameteriv_ext_t(GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef GLuint64 __stdcall gl_get_texture_sampler_handle_arb_t(GLuint texture, GLuint sampler);
typedef GLuint64 __stdcall gl_get_texture_sampler_handle_nv_t(GLuint texture, GLuint sampler);
typedef void __stdcall gl_get_texture_sub_image_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void __stdcall gl_get_track_matrixiv_nv_t(GLenum target, GLuint address, GLenum pname, GLint *params);
typedef void __stdcall gl_get_transform_feedback_varying_t(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void __stdcall gl_get_transform_feedback_varying_ext_t(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void __stdcall gl_get_transform_feedback_varying_nv_t(GLuint program, GLuint index, GLint *location);
typedef void __stdcall gl_get_transform_feedbacki64_v_t(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
typedef void __stdcall gl_get_transform_feedbacki_v_t(GLuint xfb, GLenum pname, GLuint index, GLint *param);
typedef void __stdcall gl_get_transform_feedbackiv_t(GLuint xfb, GLenum pname, GLint *param);
typedef GLuint __stdcall gl_get_uniform_block_index_t(GLuint program, const GLchar *uniformBlockName);
typedef GLint __stdcall gl_get_uniform_buffer_size_ext_t(GLuint program, GLint location);
typedef void __stdcall gl_get_uniform_indices_t(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
typedef GLint __stdcall gl_get_uniform_location_t(GLuint program, const GLchar *name);
typedef GLint __stdcall gl_get_uniform_location_arb_t(GLhandleARB programObj, const GLcharARB *name);
typedef GLintptr __stdcall gl_get_uniform_offset_ext_t(GLuint program, GLint location);
typedef void __stdcall gl_get_uniform_subroutineuiv_t(GLenum shadertype, GLint location, GLuint *params);
typedef void __stdcall gl_get_uniformdv_t(GLuint program, GLint location, GLdouble *params);
typedef void __stdcall gl_get_uniformfv_t(GLuint program, GLint location, GLfloat *params);
typedef void __stdcall gl_get_uniformfv_arb_t(GLhandleARB programObj, GLint location, GLfloat *params);
typedef void __stdcall gl_get_uniformi64v_arb_t(GLuint program, GLint location, GLint64 *params);
typedef void __stdcall gl_get_uniformi64v_nv_t(GLuint program, GLint location, GLint64EXT *params);
typedef void __stdcall gl_get_uniformiv_t(GLuint program, GLint location, GLint *params);
typedef void __stdcall gl_get_uniformiv_arb_t(GLhandleARB programObj, GLint location, GLint *params);
typedef void __stdcall gl_get_uniformui64v_arb_t(GLuint program, GLint location, GLuint64 *params);
typedef void __stdcall gl_get_uniformui64v_nv_t(GLuint program, GLint location, GLuint64EXT *params);
typedef void __stdcall gl_get_uniformuiv_t(GLuint program, GLint location, GLuint *params);
typedef void __stdcall gl_get_uniformuiv_ext_t(GLuint program, GLint location, GLuint *params);
typedef void __stdcall gl_get_unsigned_bytei_v_ext_t(GLenum target, GLuint index, GLubyte *data);
typedef void __stdcall gl_get_unsigned_bytev_ext_t(GLenum pname, GLubyte *data);
typedef void __stdcall gl_get_variant_array_objectfv_ati_t(GLuint id, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_variant_array_objectiv_ati_t(GLuint id, GLenum pname, GLint *params);
typedef void __stdcall gl_get_variant_booleanv_ext_t(GLuint id, GLenum value, GLboolean *data);
typedef void __stdcall gl_get_variant_floatv_ext_t(GLuint id, GLenum value, GLfloat *data);
typedef void __stdcall gl_get_variant_integerv_ext_t(GLuint id, GLenum value, GLint *data);
typedef void __stdcall gl_get_variant_pointerv_ext_t(GLuint id, GLenum value, void **data);
typedef GLint __stdcall gl_get_varying_location_nv_t(GLuint program, const GLchar *name);
typedef void __stdcall gl_get_vertex_array_indexed64iv_t(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
typedef void __stdcall gl_get_vertex_array_indexediv_t(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void __stdcall gl_get_vertex_array_integeri_v_ext_t(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void __stdcall gl_get_vertex_array_integerv_ext_t(GLuint vaobj, GLenum pname, GLint *param);
typedef void __stdcall gl_get_vertex_array_pointeri_v_ext_t(GLuint vaobj, GLuint index, GLenum pname, void **param);
typedef void __stdcall gl_get_vertex_array_pointerv_ext_t(GLuint vaobj, GLenum pname, void **param);
typedef void __stdcall gl_get_vertex_arrayiv_t(GLuint vaobj, GLenum pname, GLint *param);
typedef void __stdcall gl_get_vertex_attrib_array_objectfv_ati_t(GLuint index, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_vertex_attrib_array_objectiv_ati_t(GLuint index, GLenum pname, GLint *params);
typedef void __stdcall gl_get_vertex_attrib_iiv_t(GLuint index, GLenum pname, GLint *params);
typedef void __stdcall gl_get_vertex_attrib_iiv_ext_t(GLuint index, GLenum pname, GLint *params);
typedef void __stdcall gl_get_vertex_attrib_iuiv_t(GLuint index, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_vertex_attrib_iuiv_ext_t(GLuint index, GLenum pname, GLuint *params);
typedef void __stdcall gl_get_vertex_attrib_ldv_t(GLuint index, GLenum pname, GLdouble *params);
typedef void __stdcall gl_get_vertex_attrib_ldv_ext_t(GLuint index, GLenum pname, GLdouble *params);
typedef void __stdcall gl_get_vertex_attrib_li64v_nv_t(GLuint index, GLenum pname, GLint64EXT *params);
typedef void __stdcall gl_get_vertex_attrib_lui64v_arb_t(GLuint index, GLenum pname, GLuint64EXT *params);
typedef void __stdcall gl_get_vertex_attrib_lui64v_nv_t(GLuint index, GLenum pname, GLuint64EXT *params);
typedef void __stdcall gl_get_vertex_attrib_pointerv_t(GLuint index, GLenum pname, void **pointer);
typedef void __stdcall gl_get_vertex_attrib_pointerv_arb_t(GLuint index, GLenum pname, void **pointer);
typedef void __stdcall gl_get_vertex_attrib_pointerv_nv_t(GLuint index, GLenum pname, void **pointer);
typedef void __stdcall gl_get_vertex_attribdv_t(GLuint index, GLenum pname, GLdouble *params);
typedef void __stdcall gl_get_vertex_attribdv_arb_t(GLuint index, GLenum pname, GLdouble *params);
typedef void __stdcall gl_get_vertex_attribdv_nv_t(GLuint index, GLenum pname, GLdouble *params);
typedef void __stdcall gl_get_vertex_attribfv_t(GLuint index, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_vertex_attribfv_arb_t(GLuint index, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_vertex_attribfv_nv_t(GLuint index, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_vertex_attribiv_t(GLuint index, GLenum pname, GLint *params);
typedef void __stdcall gl_get_vertex_attribiv_arb_t(GLuint index, GLenum pname, GLint *params);
typedef void __stdcall gl_get_vertex_attribiv_nv_t(GLuint index, GLenum pname, GLint *params);
typedef void __stdcall gl_get_video_capture_streamdv_nv_t(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
typedef void __stdcall gl_get_video_capture_streamfv_nv_t(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
typedef void __stdcall gl_get_video_capture_streamiv_nv_t(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
typedef void __stdcall gl_get_video_captureiv_nv_t(GLuint video_capture_slot, GLenum pname, GLint *params);
typedef void __stdcall gl_get_videoi64v_nv_t(GLuint video_slot, GLenum pname, GLint64EXT *params);
typedef void __stdcall gl_get_videoiv_nv_t(GLuint video_slot, GLenum pname, GLint *params);
typedef void __stdcall gl_get_videoui64v_nv_t(GLuint video_slot, GLenum pname, GLuint64EXT *params);
typedef void __stdcall gl_get_videouiv_nv_t(GLuint video_slot, GLenum pname, GLuint *params);
typedef GLVULKANPROCNV __stdcall gl_get_vk_proc_addr_nv_t(const GLchar *name);
typedef void __stdcall gl_getn_color_table_arb_t(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
typedef void __stdcall gl_getn_compressed_tex_image_t(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
typedef void __stdcall gl_getn_compressed_tex_image_arb_t(GLenum target, GLint lod, GLsizei bufSize, void *img);
typedef void __stdcall gl_getn_convolution_filter_arb_t(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
typedef void __stdcall gl_getn_histogram_arb_t(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
typedef void __stdcall gl_getn_mapdv_arb_t(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
typedef void __stdcall gl_getn_mapfv_arb_t(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
typedef void __stdcall gl_getn_mapiv_arb_t(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
typedef void __stdcall gl_getn_minmax_arb_t(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
typedef void __stdcall gl_getn_pixel_mapfv_arb_t(GLenum map, GLsizei bufSize, GLfloat *values);
typedef void __stdcall gl_getn_pixel_mapuiv_arb_t(GLenum map, GLsizei bufSize, GLuint *values);
typedef void __stdcall gl_getn_pixel_mapusv_arb_t(GLenum map, GLsizei bufSize, GLushort *values);
typedef void __stdcall gl_getn_polygon_stipple_arb_t(GLsizei bufSize, GLubyte *pattern);
typedef void __stdcall gl_getn_separable_filter_arb_t(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
typedef void __stdcall gl_getn_tex_image_t(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void __stdcall gl_getn_tex_image_arb_t(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
typedef void __stdcall gl_getn_uniformdv_t(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
typedef void __stdcall gl_getn_uniformdv_arb_t(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
typedef void __stdcall gl_getn_uniformfv_t(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void __stdcall gl_getn_uniformfv_arb_t(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void __stdcall gl_getn_uniformi64v_arb_t(GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
typedef void __stdcall gl_getn_uniformiv_t(GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void __stdcall gl_getn_uniformiv_arb_t(GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void __stdcall gl_getn_uniformui64v_arb_t(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
typedef void __stdcall gl_getn_uniformuiv_t(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void __stdcall gl_getn_uniformuiv_arb_t(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void __stdcall gl_global_alpha_factorb_sun_t(GLbyte factor);
typedef void __stdcall gl_global_alpha_factord_sun_t(GLdouble factor);
typedef void __stdcall gl_global_alpha_factorf_sun_t(GLfloat factor);
typedef void __stdcall gl_global_alpha_factori_sun_t(GLint factor);
typedef void __stdcall gl_global_alpha_factors_sun_t(GLshort factor);
typedef void __stdcall gl_global_alpha_factorub_sun_t(GLubyte factor);
typedef void __stdcall gl_global_alpha_factorui_sun_t(GLuint factor);
typedef void __stdcall gl_global_alpha_factorus_sun_t(GLushort factor);
typedef void __stdcall gl_histogram_t(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void __stdcall gl_histogram_ext_t(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void __stdcall gl_igloo_interface_sgix_t(GLenum pname, const void *params);
typedef void __stdcall gl_image_transform_parameterf_hp_t(GLenum target, GLenum pname, GLfloat param);
typedef void __stdcall gl_image_transform_parameterfv_hp_t(GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_image_transform_parameteri_hp_t(GLenum target, GLenum pname, GLint param);
typedef void __stdcall gl_image_transform_parameteriv_hp_t(GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_import_memory_fd_ext_t(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
typedef void __stdcall gl_import_memory_win32handle_ext_t(GLuint memory, GLuint64 size, GLenum handleType, void *handle);
typedef void __stdcall gl_import_memory_win32name_ext_t(GLuint memory, GLuint64 size, GLenum handleType, const void *name);
typedef void __stdcall gl_import_semaphore_fd_ext_t(GLuint semaphore, GLenum handleType, GLint fd);
typedef void __stdcall gl_import_semaphore_win32handle_ext_t(GLuint semaphore, GLenum handleType, void *handle);
typedef void __stdcall gl_import_semaphore_win32name_ext_t(GLuint semaphore, GLenum handleType, const void *name);
typedef GLsync __stdcall gl_import_sync_ext_t(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
typedef void __stdcall gl_index_format_nv_t(GLenum type, GLsizei stride);
typedef void __stdcall gl_index_func_ext_t(GLenum func, GLclampf ref);
typedef void __stdcall gl_index_material_ext_t(GLenum face, GLenum mode);
typedef void __stdcall gl_index_pointer_ext_t(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void __stdcall gl_index_pointer_list_ibm_t(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void __stdcall gl_insert_component_ext_t(GLuint res, GLuint src, GLuint num);
typedef void __stdcall gl_insert_event_marker_ext_t(GLsizei length, const GLchar *marker);
typedef void __stdcall gl_interpolate_paths_nv_t(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef void __stdcall gl_invalidate_buffer_data_t(GLuint buffer);
typedef void __stdcall gl_invalidate_buffer_sub_data_t(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void __stdcall gl_invalidate_framebuffer_t(GLenum target, GLsizei numAttachments, const GLenum *attachments);
typedef void __stdcall gl_invalidate_named_framebuffer_data_t(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
typedef void __stdcall gl_invalidate_named_framebuffer_sub_data_t(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_invalidate_sub_framebuffer_t(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void __stdcall gl_invalidate_tex_image_t(GLuint texture, GLint level);
typedef void __stdcall gl_invalidate_tex_sub_image_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef GLboolean __stdcall gl_is_async_marker_sgix_t(GLuint marker);
typedef GLboolean __stdcall gl_is_buffer_t(GLuint buffer);
typedef GLboolean __stdcall gl_is_buffer_arb_t(GLuint buffer);
typedef GLboolean __stdcall gl_is_buffer_resident_nv_t(GLenum target);
typedef GLboolean __stdcall gl_is_command_list_nv_t(GLuint list);
typedef GLboolean __stdcall gl_is_enabled_indexed_ext_t(GLenum target, GLuint index);
typedef GLboolean __stdcall gl_is_enabledi_t(GLenum target, GLuint index);
typedef GLboolean __stdcall gl_is_fence_apple_t(GLuint fence);
typedef GLboolean __stdcall gl_is_fence_nv_t(GLuint fence);
typedef GLboolean __stdcall gl_is_framebuffer_t(GLuint framebuffer);
typedef GLboolean __stdcall gl_is_framebuffer_ext_t(GLuint framebuffer);
typedef GLboolean __stdcall gl_is_image_handle_resident_arb_t(GLuint64 handle);
typedef GLboolean __stdcall gl_is_image_handle_resident_nv_t(GLuint64 handle);
typedef GLboolean __stdcall gl_is_memory_object_ext_t(GLuint memoryObject);
typedef GLboolean __stdcall gl_is_name_amd_t(GLenum identifier, GLuint name);
typedef GLboolean __stdcall gl_is_named_buffer_resident_nv_t(GLuint buffer);
typedef GLboolean __stdcall gl_is_named_string_arb_t(GLint namelen, const GLchar *name);
typedef GLboolean __stdcall gl_is_object_buffer_ati_t(GLuint buffer);
typedef GLboolean __stdcall gl_is_occlusion_query_nv_t(GLuint id);
typedef GLboolean __stdcall gl_is_path_nv_t(GLuint path);
typedef GLboolean __stdcall gl_is_point_in_fill_path_nv_t(GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean __stdcall gl_is_point_in_stroke_path_nv_t(GLuint path, GLfloat x, GLfloat y);
typedef GLboolean __stdcall gl_is_program_t(GLuint program);
typedef GLboolean __stdcall gl_is_program_arb_t(GLuint program);
typedef GLboolean __stdcall gl_is_program_nv_t(GLuint id);
typedef GLboolean __stdcall gl_is_program_pipeline_t(GLuint pipeline);
typedef GLboolean __stdcall gl_is_query_t(GLuint id);
typedef GLboolean __stdcall gl_is_query_arb_t(GLuint id);
typedef GLboolean __stdcall gl_is_renderbuffer_t(GLuint renderbuffer);
typedef GLboolean __stdcall gl_is_renderbuffer_ext_t(GLuint renderbuffer);
typedef GLboolean __stdcall gl_is_sampler_t(GLuint sampler);
typedef GLboolean __stdcall gl_is_semaphore_ext_t(GLuint semaphore);
typedef GLboolean __stdcall gl_is_shader_t(GLuint shader);
typedef GLboolean __stdcall gl_is_state_nv_t(GLuint state);
typedef GLboolean __stdcall gl_is_sync_t(GLsync sync);
typedef GLboolean __stdcall gl_is_texture_ext_t(GLuint texture);
typedef GLboolean __stdcall gl_is_texture_handle_resident_arb_t(GLuint64 handle);
typedef GLboolean __stdcall gl_is_texture_handle_resident_nv_t(GLuint64 handle);
typedef GLboolean __stdcall gl_is_transform_feedback_t(GLuint id);
typedef GLboolean __stdcall gl_is_transform_feedback_nv_t(GLuint id);
typedef GLboolean __stdcall gl_is_variant_enabled_ext_t(GLuint id, GLenum cap);
typedef GLboolean __stdcall gl_is_vertex_array_t(GLuint array);
typedef GLboolean __stdcall gl_is_vertex_array_apple_t(GLuint array);
typedef GLboolean __stdcall gl_is_vertex_attrib_enabled_apple_t(GLuint index, GLenum pname);
typedef void __stdcall gl_lgpucopy_image_sub_data_nvx_t(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void __stdcall gl_lgpuinterlock_nvx_t(void);
typedef void __stdcall gl_lgpunamed_buffer_sub_data_nvx_t(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void __stdcall gl_label_object_ext_t(GLenum type, GLuint object, GLsizei length, const GLchar *label);
typedef void __stdcall gl_link_program_t(GLuint program);
typedef void __stdcall gl_link_program_arb_t(GLhandleARB programObj);
typedef void __stdcall gl_list_draw_commands_states_client_nv_t(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void __stdcall gl_load_identity_deformation_map_sgix_t(GLbitfield mask);
typedef void __stdcall gl_load_program_nv_t(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
typedef void __stdcall gl_load_transpose_matrixd_t(const GLdouble *m);
typedef void __stdcall gl_load_transpose_matrixd_arb_t(const GLdouble *m);
typedef void __stdcall gl_load_transpose_matrixf_t(const GLfloat *m);
typedef void __stdcall gl_load_transpose_matrixf_arb_t(const GLfloat *m);
typedef void __stdcall gl_lock_arrays_ext_t(GLint first, GLsizei count);
typedef void __stdcall gl_make_buffer_non_resident_nv_t(GLenum target);
typedef void __stdcall gl_make_buffer_resident_nv_t(GLenum target, GLenum access);
typedef void __stdcall gl_make_image_handle_non_resident_arb_t(GLuint64 handle);
typedef void __stdcall gl_make_image_handle_non_resident_nv_t(GLuint64 handle);
typedef void __stdcall gl_make_image_handle_resident_arb_t(GLuint64 handle, GLenum access);
typedef void __stdcall gl_make_image_handle_resident_nv_t(GLuint64 handle, GLenum access);
typedef void __stdcall gl_make_named_buffer_non_resident_nv_t(GLuint buffer);
typedef void __stdcall gl_make_named_buffer_resident_nv_t(GLuint buffer, GLenum access);
typedef void __stdcall gl_make_texture_handle_non_resident_arb_t(GLuint64 handle);
typedef void __stdcall gl_make_texture_handle_non_resident_nv_t(GLuint64 handle);
typedef void __stdcall gl_make_texture_handle_resident_arb_t(GLuint64 handle);
typedef void __stdcall gl_make_texture_handle_resident_nv_t(GLuint64 handle);
typedef void __stdcall gl_map_control_points_nv_t(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
typedef void __stdcall gl_map_parameterfv_nv_t(GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_map_parameteriv_nv_t(GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_map_vertex_attrib1d_apple_t(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
typedef void __stdcall gl_map_vertex_attrib1f_apple_t(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
typedef void __stdcall gl_map_vertex_attrib2d_apple_t(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
typedef void __stdcall gl_map_vertex_attrib2f_apple_t(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
typedef void __stdcall gl_matrix_frustum_ext_t(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void __stdcall gl_matrix_index_pointer_arb_t(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_matrix_indexubv_arb_t(GLint size, const GLubyte *indices);
typedef void __stdcall gl_matrix_indexuiv_arb_t(GLint size, const GLuint *indices);
typedef void __stdcall gl_matrix_indexusv_arb_t(GLint size, const GLushort *indices);
typedef void __stdcall gl_matrix_load3x2f_nv_t(GLenum matrixMode, const GLfloat *m);
typedef void __stdcall gl_matrix_load3x3f_nv_t(GLenum matrixMode, const GLfloat *m);
typedef void __stdcall gl_matrix_load_identity_ext_t(GLenum mode);
typedef void __stdcall gl_matrix_load_transpose3x3f_nv_t(GLenum matrixMode, const GLfloat *m);
typedef void __stdcall gl_matrix_load_transposed_ext_t(GLenum mode, const GLdouble *m);
typedef void __stdcall gl_matrix_load_transposef_ext_t(GLenum mode, const GLfloat *m);
typedef void __stdcall gl_matrix_loadd_ext_t(GLenum mode, const GLdouble *m);
typedef void __stdcall gl_matrix_loadf_ext_t(GLenum mode, const GLfloat *m);
typedef void __stdcall gl_matrix_mult3x2f_nv_t(GLenum matrixMode, const GLfloat *m);
typedef void __stdcall gl_matrix_mult3x3f_nv_t(GLenum matrixMode, const GLfloat *m);
typedef void __stdcall gl_matrix_mult_transpose3x3f_nv_t(GLenum matrixMode, const GLfloat *m);
typedef void __stdcall gl_matrix_mult_transposed_ext_t(GLenum mode, const GLdouble *m);
typedef void __stdcall gl_matrix_mult_transposef_ext_t(GLenum mode, const GLfloat *m);
typedef void __stdcall gl_matrix_multd_ext_t(GLenum mode, const GLdouble *m);
typedef void __stdcall gl_matrix_multf_ext_t(GLenum mode, const GLfloat *m);
typedef void __stdcall gl_matrix_ortho_ext_t(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void __stdcall gl_matrix_pop_ext_t(GLenum mode);
typedef void __stdcall gl_matrix_push_ext_t(GLenum mode);
typedef void __stdcall gl_matrix_rotated_ext_t(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_matrix_rotatef_ext_t(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_matrix_scaled_ext_t(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_matrix_scalef_ext_t(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_matrix_translated_ext_t(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_matrix_translatef_ext_t(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_max_shader_compiler_threads_arb_t(GLuint count);
typedef void __stdcall gl_max_shader_compiler_threads_khr_t(GLuint count);
typedef void __stdcall gl_memory_barrier_t(GLbitfield barriers);
typedef void __stdcall gl_memory_barrier_by_region_t(GLbitfield barriers);
typedef void __stdcall gl_memory_barrier_ext_t(GLbitfield barriers);
typedef void __stdcall gl_memory_object_parameteriv_ext_t(GLuint memoryObject, GLenum pname, const GLint *params);
typedef void __stdcall gl_min_sample_shading_t(GLfloat value);
typedef void __stdcall gl_min_sample_shading_arb_t(GLfloat value);
typedef void __stdcall gl_minmax_t(GLenum target, GLenum internalformat, GLboolean sink);
typedef void __stdcall gl_minmax_ext_t(GLenum target, GLenum internalformat, GLboolean sink);
typedef void __stdcall gl_mult_transpose_matrixd_t(const GLdouble *m);
typedef void __stdcall gl_mult_transpose_matrixd_arb_t(const GLdouble *m);
typedef void __stdcall gl_mult_transpose_matrixf_t(const GLfloat *m);
typedef void __stdcall gl_mult_transpose_matrixf_arb_t(const GLfloat *m);
typedef void __stdcall gl_multi_draw_arrays_t(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void __stdcall gl_multi_draw_arrays_ext_t(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
typedef void __stdcall gl_multi_draw_arrays_indirect_t(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void __stdcall gl_multi_draw_arrays_indirect_amd_t(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
typedef void __stdcall gl_multi_draw_arrays_indirect_bindless_count_nv_t(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void __stdcall gl_multi_draw_arrays_indirect_bindless_nv_t(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void __stdcall gl_multi_draw_arrays_indirect_count_t(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void __stdcall gl_multi_draw_arrays_indirect_count_arb_t(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void __stdcall gl_multi_draw_element_array_apple_t(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
typedef void __stdcall gl_multi_draw_elements_t(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
typedef void __stdcall gl_multi_draw_elements_base_vertex_t(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
typedef void __stdcall gl_multi_draw_elements_ext_t(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount);
typedef void __stdcall gl_multi_draw_elements_indirect_t(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void __stdcall gl_multi_draw_elements_indirect_amd_t(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
typedef void __stdcall gl_multi_draw_elements_indirect_bindless_count_nv_t(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void __stdcall gl_multi_draw_elements_indirect_bindless_nv_t(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void __stdcall gl_multi_draw_elements_indirect_count_t(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void __stdcall gl_multi_draw_elements_indirect_count_arb_t(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void __stdcall gl_multi_draw_range_element_array_apple_t(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
typedef void __stdcall gl_multi_mode_draw_arrays_ibm_t(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
typedef void __stdcall gl_multi_mode_draw_elements_ibm_t(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride);
typedef void __stdcall gl_multi_tex_buffer_ext_t(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void __stdcall gl_multi_tex_coord1d_t(GLenum target, GLdouble s);
typedef void __stdcall gl_multi_tex_coord1d_arb_t(GLenum target, GLdouble s);
typedef void __stdcall gl_multi_tex_coord1dv_t(GLenum target, const GLdouble *v);
typedef void __stdcall gl_multi_tex_coord1dv_arb_t(GLenum target, const GLdouble *v);
typedef void __stdcall gl_multi_tex_coord1f_t(GLenum target, GLfloat s);
typedef void __stdcall gl_multi_tex_coord1f_arb_t(GLenum target, GLfloat s);
typedef void __stdcall gl_multi_tex_coord1fv_t(GLenum target, const GLfloat *v);
typedef void __stdcall gl_multi_tex_coord1fv_arb_t(GLenum target, const GLfloat *v);
typedef void __stdcall gl_multi_tex_coord1h_nv_t(GLenum target, GLhalfNV s);
typedef void __stdcall gl_multi_tex_coord1hv_nv_t(GLenum target, const GLhalfNV *v);
typedef void __stdcall gl_multi_tex_coord1i_t(GLenum target, GLint s);
typedef void __stdcall gl_multi_tex_coord1i_arb_t(GLenum target, GLint s);
typedef void __stdcall gl_multi_tex_coord1iv_t(GLenum target, const GLint *v);
typedef void __stdcall gl_multi_tex_coord1iv_arb_t(GLenum target, const GLint *v);
typedef void __stdcall gl_multi_tex_coord1s_t(GLenum target, GLshort s);
typedef void __stdcall gl_multi_tex_coord1s_arb_t(GLenum target, GLshort s);
typedef void __stdcall gl_multi_tex_coord1sv_t(GLenum target, const GLshort *v);
typedef void __stdcall gl_multi_tex_coord1sv_arb_t(GLenum target, const GLshort *v);
typedef void __stdcall gl_multi_tex_coord2d_t(GLenum target, GLdouble s, GLdouble t);
typedef void __stdcall gl_multi_tex_coord2d_arb_t(GLenum target, GLdouble s, GLdouble t);
typedef void __stdcall gl_multi_tex_coord2dv_t(GLenum target, const GLdouble *v);
typedef void __stdcall gl_multi_tex_coord2dv_arb_t(GLenum target, const GLdouble *v);
typedef void __stdcall gl_multi_tex_coord2f_t(GLenum target, GLfloat s, GLfloat t);
typedef void __stdcall gl_multi_tex_coord2f_arb_t(GLenum target, GLfloat s, GLfloat t);
typedef void __stdcall gl_multi_tex_coord2fv_t(GLenum target, const GLfloat *v);
typedef void __stdcall gl_multi_tex_coord2fv_arb_t(GLenum target, const GLfloat *v);
typedef void __stdcall gl_multi_tex_coord2h_nv_t(GLenum target, GLhalfNV s, GLhalfNV t);
typedef void __stdcall gl_multi_tex_coord2hv_nv_t(GLenum target, const GLhalfNV *v);
typedef void __stdcall gl_multi_tex_coord2i_t(GLenum target, GLint s, GLint t);
typedef void __stdcall gl_multi_tex_coord2i_arb_t(GLenum target, GLint s, GLint t);
typedef void __stdcall gl_multi_tex_coord2iv_t(GLenum target, const GLint *v);
typedef void __stdcall gl_multi_tex_coord2iv_arb_t(GLenum target, const GLint *v);
typedef void __stdcall gl_multi_tex_coord2s_t(GLenum target, GLshort s, GLshort t);
typedef void __stdcall gl_multi_tex_coord2s_arb_t(GLenum target, GLshort s, GLshort t);
typedef void __stdcall gl_multi_tex_coord2sv_t(GLenum target, const GLshort *v);
typedef void __stdcall gl_multi_tex_coord2sv_arb_t(GLenum target, const GLshort *v);
typedef void __stdcall gl_multi_tex_coord3d_t(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void __stdcall gl_multi_tex_coord3d_arb_t(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void __stdcall gl_multi_tex_coord3dv_t(GLenum target, const GLdouble *v);
typedef void __stdcall gl_multi_tex_coord3dv_arb_t(GLenum target, const GLdouble *v);
typedef void __stdcall gl_multi_tex_coord3f_t(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void __stdcall gl_multi_tex_coord3f_arb_t(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void __stdcall gl_multi_tex_coord3fv_t(GLenum target, const GLfloat *v);
typedef void __stdcall gl_multi_tex_coord3fv_arb_t(GLenum target, const GLfloat *v);
typedef void __stdcall gl_multi_tex_coord3h_nv_t(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void __stdcall gl_multi_tex_coord3hv_nv_t(GLenum target, const GLhalfNV *v);
typedef void __stdcall gl_multi_tex_coord3i_t(GLenum target, GLint s, GLint t, GLint r);
typedef void __stdcall gl_multi_tex_coord3i_arb_t(GLenum target, GLint s, GLint t, GLint r);
typedef void __stdcall gl_multi_tex_coord3iv_t(GLenum target, const GLint *v);
typedef void __stdcall gl_multi_tex_coord3iv_arb_t(GLenum target, const GLint *v);
typedef void __stdcall gl_multi_tex_coord3s_t(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void __stdcall gl_multi_tex_coord3s_arb_t(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void __stdcall gl_multi_tex_coord3sv_t(GLenum target, const GLshort *v);
typedef void __stdcall gl_multi_tex_coord3sv_arb_t(GLenum target, const GLshort *v);
typedef void __stdcall gl_multi_tex_coord4d_t(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void __stdcall gl_multi_tex_coord4d_arb_t(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void __stdcall gl_multi_tex_coord4dv_t(GLenum target, const GLdouble *v);
typedef void __stdcall gl_multi_tex_coord4dv_arb_t(GLenum target, const GLdouble *v);
typedef void __stdcall gl_multi_tex_coord4f_t(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void __stdcall gl_multi_tex_coord4f_arb_t(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void __stdcall gl_multi_tex_coord4fv_t(GLenum target, const GLfloat *v);
typedef void __stdcall gl_multi_tex_coord4fv_arb_t(GLenum target, const GLfloat *v);
typedef void __stdcall gl_multi_tex_coord4h_nv_t(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void __stdcall gl_multi_tex_coord4hv_nv_t(GLenum target, const GLhalfNV *v);
typedef void __stdcall gl_multi_tex_coord4i_t(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void __stdcall gl_multi_tex_coord4i_arb_t(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void __stdcall gl_multi_tex_coord4iv_t(GLenum target, const GLint *v);
typedef void __stdcall gl_multi_tex_coord4iv_arb_t(GLenum target, const GLint *v);
typedef void __stdcall gl_multi_tex_coord4s_t(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void __stdcall gl_multi_tex_coord4s_arb_t(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void __stdcall gl_multi_tex_coord4sv_t(GLenum target, const GLshort *v);
typedef void __stdcall gl_multi_tex_coord4sv_arb_t(GLenum target, const GLshort *v);
typedef void __stdcall gl_multi_tex_coord_p1ui_t(GLenum texture, GLenum type, GLuint coords);
typedef void __stdcall gl_multi_tex_coord_p1uiv_t(GLenum texture, GLenum type, const GLuint *coords);
typedef void __stdcall gl_multi_tex_coord_p2ui_t(GLenum texture, GLenum type, GLuint coords);
typedef void __stdcall gl_multi_tex_coord_p2uiv_t(GLenum texture, GLenum type, const GLuint *coords);
typedef void __stdcall gl_multi_tex_coord_p3ui_t(GLenum texture, GLenum type, GLuint coords);
typedef void __stdcall gl_multi_tex_coord_p3uiv_t(GLenum texture, GLenum type, const GLuint *coords);
typedef void __stdcall gl_multi_tex_coord_p4ui_t(GLenum texture, GLenum type, GLuint coords);
typedef void __stdcall gl_multi_tex_coord_p4uiv_t(GLenum texture, GLenum type, const GLuint *coords);
typedef void __stdcall gl_multi_tex_coord_pointer_ext_t(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_multi_tex_envf_ext_t(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void __stdcall gl_multi_tex_envfv_ext_t(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_multi_tex_envi_ext_t(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void __stdcall gl_multi_tex_enviv_ext_t(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_multi_tex_gend_ext_t(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void __stdcall gl_multi_tex_gendv_ext_t(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
typedef void __stdcall gl_multi_tex_genf_ext_t(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void __stdcall gl_multi_tex_genfv_ext_t(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_multi_tex_geni_ext_t(GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void __stdcall gl_multi_tex_geniv_ext_t(GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
typedef void __stdcall gl_multi_tex_image1dext_t(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_multi_tex_image2dext_t(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_multi_tex_image3dext_t(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_multi_tex_parameter_iiv_ext_t(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_multi_tex_parameter_iuiv_ext_t(GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
typedef void __stdcall gl_multi_tex_parameterf_ext_t(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void __stdcall gl_multi_tex_parameterfv_ext_t(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_multi_tex_parameteri_ext_t(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void __stdcall gl_multi_tex_parameteriv_ext_t(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_multi_tex_renderbuffer_ext_t(GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void __stdcall gl_multi_tex_sub_image1dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_multi_tex_sub_image2dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_multi_tex_sub_image3dext_t(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_multicast_barrier_nv_t(void);
typedef void __stdcall gl_multicast_blit_framebuffer_nv_t(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void __stdcall gl_multicast_buffer_sub_data_nv_t(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void __stdcall gl_multicast_copy_buffer_sub_data_nv_t(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void __stdcall gl_multicast_copy_image_sub_data_nv_t(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void __stdcall gl_multicast_framebuffer_sample_locationsfv_nv_t(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_multicast_get_query_objecti64v_nv_t(GLuint gpu, GLuint id, GLenum pname, GLint64 *params);
typedef void __stdcall gl_multicast_get_query_objectiv_nv_t(GLuint gpu, GLuint id, GLenum pname, GLint *params);
typedef void __stdcall gl_multicast_get_query_objectui64v_nv_t(GLuint gpu, GLuint id, GLenum pname, GLuint64 *params);
typedef void __stdcall gl_multicast_get_query_objectuiv_nv_t(GLuint gpu, GLuint id, GLenum pname, GLuint *params);
typedef void __stdcall gl_multicast_wait_sync_nv_t(GLuint signalGpu, GLbitfield waitGpuMask);
typedef void __stdcall gl_named_buffer_data_t(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void __stdcall gl_named_buffer_data_ext_t(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void __stdcall gl_named_buffer_storage_t(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void __stdcall gl_named_buffer_storage_ext_t(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void __stdcall gl_named_buffer_storage_external_ext_t(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
typedef void __stdcall gl_named_buffer_storage_mem_ext_t(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_named_buffer_sub_data_t(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void __stdcall gl_named_buffer_sub_data_ext_t(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void __stdcall gl_named_copy_buffer_sub_data_ext_t(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void __stdcall gl_named_framebuffer_draw_buffer_t(GLuint framebuffer, GLenum buf);
typedef void __stdcall gl_named_framebuffer_draw_buffers_t(GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void __stdcall gl_named_framebuffer_parameteri_t(GLuint framebuffer, GLenum pname, GLint param);
typedef void __stdcall gl_named_framebuffer_parameteri_ext_t(GLuint framebuffer, GLenum pname, GLint param);
typedef void __stdcall gl_named_framebuffer_read_buffer_t(GLuint framebuffer, GLenum src);
typedef void __stdcall gl_named_framebuffer_renderbuffer_t(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void __stdcall gl_named_framebuffer_renderbuffer_ext_t(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void __stdcall gl_named_framebuffer_sample_locationsfv_arb_t(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_named_framebuffer_sample_locationsfv_nv_t(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_named_framebuffer_sample_positionsfv_amd_t(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
typedef void __stdcall gl_named_framebuffer_texture_t(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void __stdcall gl_named_framebuffer_texture1dext_t(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void __stdcall gl_named_framebuffer_texture2dext_t(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void __stdcall gl_named_framebuffer_texture3dext_t(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void __stdcall gl_named_framebuffer_texture_ext_t(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void __stdcall gl_named_framebuffer_texture_face_ext_t(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void __stdcall gl_named_framebuffer_texture_layer_t(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void __stdcall gl_named_framebuffer_texture_layer_ext_t(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void __stdcall gl_named_program_local_parameter4d_ext_t(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_named_program_local_parameter4dv_ext_t(GLuint program, GLenum target, GLuint index, const GLdouble *params);
typedef void __stdcall gl_named_program_local_parameter4f_ext_t(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_named_program_local_parameter4fv_ext_t(GLuint program, GLenum target, GLuint index, const GLfloat *params);
typedef void __stdcall gl_named_program_local_parameter_i4i_ext_t(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void __stdcall gl_named_program_local_parameter_i4iv_ext_t(GLuint program, GLenum target, GLuint index, const GLint *params);
typedef void __stdcall gl_named_program_local_parameter_i4ui_ext_t(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void __stdcall gl_named_program_local_parameter_i4uiv_ext_t(GLuint program, GLenum target, GLuint index, const GLuint *params);
typedef void __stdcall gl_named_program_local_parameters4fv_ext_t(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void __stdcall gl_named_program_local_parameters_i4iv_ext_t(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void __stdcall gl_named_program_local_parameters_i4uiv_ext_t(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void __stdcall gl_named_program_string_ext_t(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
typedef void __stdcall gl_named_renderbuffer_storage_t(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_named_renderbuffer_storage_ext_t(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_named_renderbuffer_storage_multisample_t(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_named_renderbuffer_storage_multisample_coverage_ext_t(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_named_renderbuffer_storage_multisample_ext_t(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_named_string_arb_t(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
typedef GLuint __stdcall gl_new_object_buffer_ati_t(GLsizei size, const void *pointer, GLenum usage);
typedef void __stdcall gl_normal3f_vertex3f_sun_t(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_normal3f_vertex3fv_sun_t(const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_normal3h_nv_t(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
typedef void __stdcall gl_normal3hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_normal_format_nv_t(GLenum type, GLsizei stride);
typedef void __stdcall gl_normal_p3ui_t(GLenum type, GLuint coords);
typedef void __stdcall gl_normal_p3uiv_t(GLenum type, const GLuint *coords);
typedef void __stdcall gl_normal_pointer_ext_t(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void __stdcall gl_normal_pointer_list_ibm_t(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void __stdcall gl_normal_pointerv_intel_t(GLenum type, const void **pointer);
typedef void __stdcall gl_normal_stream3b_ati_t(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
typedef void __stdcall gl_normal_stream3bv_ati_t(GLenum stream, const GLbyte *coords);
typedef void __stdcall gl_normal_stream3d_ati_t(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
typedef void __stdcall gl_normal_stream3dv_ati_t(GLenum stream, const GLdouble *coords);
typedef void __stdcall gl_normal_stream3f_ati_t(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
typedef void __stdcall gl_normal_stream3fv_ati_t(GLenum stream, const GLfloat *coords);
typedef void __stdcall gl_normal_stream3i_ati_t(GLenum stream, GLint nx, GLint ny, GLint nz);
typedef void __stdcall gl_normal_stream3iv_ati_t(GLenum stream, const GLint *coords);
typedef void __stdcall gl_normal_stream3s_ati_t(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
typedef void __stdcall gl_normal_stream3sv_ati_t(GLenum stream, const GLshort *coords);
typedef void __stdcall gl_object_label_t(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
typedef void __stdcall gl_object_ptr_label_t(const void *ptr, GLsizei length, const GLchar *label);
typedef GLenum __stdcall gl_object_purgeable_apple_t(GLenum objectType, GLuint name, GLenum option);
typedef GLenum __stdcall gl_object_unpurgeable_apple_t(GLenum objectType, GLuint name, GLenum option);
typedef void __stdcall gl_pntrianglesf_ati_t(GLenum pname, GLfloat param);
typedef void __stdcall gl_pntrianglesi_ati_t(GLenum pname, GLint param);
typedef void __stdcall gl_pass_tex_coord_ati_t(GLuint dst, GLuint coord, GLenum swizzle);
typedef void __stdcall gl_patch_parameterfv_t(GLenum pname, const GLfloat *values);
typedef void __stdcall gl_patch_parameteri_t(GLenum pname, GLint value);
typedef void __stdcall gl_path_color_gen_nv_t(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
typedef void __stdcall gl_path_commands_nv_t(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void __stdcall gl_path_coords_nv_t(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void __stdcall gl_path_cover_depth_func_nv_t(GLenum func);
typedef void __stdcall gl_path_dash_array_nv_t(GLuint path, GLsizei dashCount, const GLfloat *dashArray);
typedef void __stdcall gl_path_fog_gen_nv_t(GLenum genMode);
typedef GLenum __stdcall gl_path_glyph_index_array_nv_t(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum __stdcall gl_path_glyph_index_range_nv_t(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
typedef void __stdcall gl_path_glyph_range_nv_t(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void __stdcall gl_path_glyphs_nv_t(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum __stdcall gl_path_memory_glyph_index_array_nv_t(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void __stdcall gl_path_parameterf_nv_t(GLuint path, GLenum pname, GLfloat value);
typedef void __stdcall gl_path_parameterfv_nv_t(GLuint path, GLenum pname, const GLfloat *value);
typedef void __stdcall gl_path_parameteri_nv_t(GLuint path, GLenum pname, GLint value);
typedef void __stdcall gl_path_parameteriv_nv_t(GLuint path, GLenum pname, const GLint *value);
typedef void __stdcall gl_path_stencil_depth_offset_nv_t(GLfloat factor, GLfloat units);
typedef void __stdcall gl_path_stencil_func_nv_t(GLenum func, GLint ref, GLuint mask);
typedef void __stdcall gl_path_string_nv_t(GLuint path, GLenum format, GLsizei length, const void *pathString);
typedef void __stdcall gl_path_sub_commands_nv_t(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void __stdcall gl_path_sub_coords_nv_t(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void __stdcall gl_path_tex_gen_nv_t(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
typedef void __stdcall gl_pause_transform_feedback_t(void);
typedef void __stdcall gl_pause_transform_feedback_nv_t(void);
typedef void __stdcall gl_pixel_data_range_nv_t(GLenum target, GLsizei length, const void *pointer);
typedef void __stdcall gl_pixel_tex_gen_sgix_t(GLenum mode);
typedef void __stdcall gl_pixel_transform_parameterf_ext_t(GLenum target, GLenum pname, GLfloat param);
typedef void __stdcall gl_pixel_transform_parameterfv_ext_t(GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_pixel_transform_parameteri_ext_t(GLenum target, GLenum pname, GLint param);
typedef void __stdcall gl_pixel_transform_parameteriv_ext_t(GLenum target, GLenum pname, const GLint *params);
typedef GLboolean __stdcall gl_point_along_path_nv_t(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
typedef void __stdcall gl_point_parameterf_t(GLenum pname, GLfloat param);
typedef void __stdcall gl_point_parameterf_arb_t(GLenum pname, GLfloat param);
typedef void __stdcall gl_point_parameterf_ext_t(GLenum pname, GLfloat param);
typedef void __stdcall gl_point_parameterfv_t(GLenum pname, const GLfloat *params);
typedef void __stdcall gl_point_parameterfv_arb_t(GLenum pname, const GLfloat *params);
typedef void __stdcall gl_point_parameterfv_ext_t(GLenum pname, const GLfloat *params);
typedef void __stdcall gl_point_parameteri_t(GLenum pname, GLint param);
typedef void __stdcall gl_point_parameteri_nv_t(GLenum pname, GLint param);
typedef void __stdcall gl_point_parameteriv_t(GLenum pname, const GLint *params);
typedef void __stdcall gl_point_parameteriv_nv_t(GLenum pname, const GLint *params);
typedef GLint __stdcall gl_poll_async_sgix_t(GLuint *markerp);
typedef void __stdcall gl_polygon_offset_clamp_t(GLfloat factor, GLfloat units, GLfloat clamp);
typedef void __stdcall gl_polygon_offset_clamp_ext_t(GLfloat factor, GLfloat units, GLfloat clamp);
typedef void __stdcall gl_polygon_offset_ext_t(GLfloat factor, GLfloat bias);
typedef void __stdcall gl_pop_debug_group_t(void);
typedef void __stdcall gl_pop_group_marker_ext_t(void);
typedef void __stdcall gl_present_frame_dual_fill_nv_t(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
typedef void __stdcall gl_present_frame_keyed_nv_t(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
typedef void __stdcall gl_primitive_bounding_box_arb_t(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
typedef void __stdcall gl_primitive_restart_index_t(GLuint index);
typedef void __stdcall gl_primitive_restart_index_nv_t(GLuint index);
typedef void __stdcall gl_primitive_restart_nv_t(void);
typedef void __stdcall gl_prioritize_textures_ext_t(GLsizei n, const GLuint *textures, const GLclampf *priorities);
typedef void __stdcall gl_program_binary_t(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void __stdcall gl_program_buffer_parameters_iiv_nv_t(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
typedef void __stdcall gl_program_buffer_parameters_iuiv_nv_t(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);
typedef void __stdcall gl_program_buffer_parametersfv_nv_t(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
typedef void __stdcall gl_program_env_parameter4d_arb_t(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_program_env_parameter4dv_arb_t(GLenum target, GLuint index, const GLdouble *params);
typedef void __stdcall gl_program_env_parameter4f_arb_t(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_program_env_parameter4fv_arb_t(GLenum target, GLuint index, const GLfloat *params);
typedef void __stdcall gl_program_env_parameter_i4i_nv_t(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void __stdcall gl_program_env_parameter_i4iv_nv_t(GLenum target, GLuint index, const GLint *params);
typedef void __stdcall gl_program_env_parameter_i4ui_nv_t(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void __stdcall gl_program_env_parameter_i4uiv_nv_t(GLenum target, GLuint index, const GLuint *params);
typedef void __stdcall gl_program_env_parameters4fv_ext_t(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void __stdcall gl_program_env_parameters_i4iv_nv_t(GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void __stdcall gl_program_env_parameters_i4uiv_nv_t(GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void __stdcall gl_program_local_parameter4d_arb_t(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_program_local_parameter4dv_arb_t(GLenum target, GLuint index, const GLdouble *params);
typedef void __stdcall gl_program_local_parameter4f_arb_t(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_program_local_parameter4fv_arb_t(GLenum target, GLuint index, const GLfloat *params);
typedef void __stdcall gl_program_local_parameter_i4i_nv_t(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void __stdcall gl_program_local_parameter_i4iv_nv_t(GLenum target, GLuint index, const GLint *params);
typedef void __stdcall gl_program_local_parameter_i4ui_nv_t(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void __stdcall gl_program_local_parameter_i4uiv_nv_t(GLenum target, GLuint index, const GLuint *params);
typedef void __stdcall gl_program_local_parameters4fv_ext_t(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void __stdcall gl_program_local_parameters_i4iv_nv_t(GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void __stdcall gl_program_local_parameters_i4uiv_nv_t(GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void __stdcall gl_program_named_parameter4d_nv_t(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_program_named_parameter4dv_nv_t(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
typedef void __stdcall gl_program_named_parameter4f_nv_t(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_program_named_parameter4fv_nv_t(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
typedef void __stdcall gl_program_parameter4d_nv_t(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_program_parameter4dv_nv_t(GLenum target, GLuint index, const GLdouble *v);
typedef void __stdcall gl_program_parameter4f_nv_t(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_program_parameter4fv_nv_t(GLenum target, GLuint index, const GLfloat *v);
typedef void __stdcall gl_program_parameteri_t(GLuint program, GLenum pname, GLint value);
typedef void __stdcall gl_program_parameteri_arb_t(GLuint program, GLenum pname, GLint value);
typedef void __stdcall gl_program_parameteri_ext_t(GLuint program, GLenum pname, GLint value);
typedef void __stdcall gl_program_parameters4dv_nv_t(GLenum target, GLuint index, GLsizei count, const GLdouble *v);
typedef void __stdcall gl_program_parameters4fv_nv_t(GLenum target, GLuint index, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_program_path_fragment_input_gen_nv_t(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
typedef void __stdcall gl_program_string_arb_t(GLenum target, GLenum format, GLsizei len, const void *string);
typedef void __stdcall gl_program_uniform1d_t(GLuint program, GLint location, GLdouble v0);
typedef void __stdcall gl_program_uniform1dv_t(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void __stdcall gl_program_uniform1f_t(GLuint program, GLint location, GLfloat v0);
typedef void __stdcall gl_program_uniform1f_ext_t(GLuint program, GLint location, GLfloat v0);
typedef void __stdcall gl_program_uniform1fv_t(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_program_uniform1fv_ext_t(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_program_uniform1i_t(GLuint program, GLint location, GLint v0);
typedef void __stdcall gl_program_uniform1i64arb_t(GLuint program, GLint location, GLint64 x);
typedef void __stdcall gl_program_uniform1i64nv_t(GLuint program, GLint location, GLint64EXT x);
typedef void __stdcall gl_program_uniform1i64v_arb_t(GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void __stdcall gl_program_uniform1i64v_nv_t(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void __stdcall gl_program_uniform1i_ext_t(GLuint program, GLint location, GLint v0);
typedef void __stdcall gl_program_uniform1iv_t(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_program_uniform1iv_ext_t(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_program_uniform1ui_t(GLuint program, GLint location, GLuint v0);
typedef void __stdcall gl_program_uniform1ui64arb_t(GLuint program, GLint location, GLuint64 x);
typedef void __stdcall gl_program_uniform1ui64nv_t(GLuint program, GLint location, GLuint64EXT x);
typedef void __stdcall gl_program_uniform1ui64v_arb_t(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_program_uniform1ui64v_nv_t(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_program_uniform1ui_ext_t(GLuint program, GLint location, GLuint v0);
typedef void __stdcall gl_program_uniform1uiv_t(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_program_uniform1uiv_ext_t(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_program_uniform2d_t(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void __stdcall gl_program_uniform2dv_t(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void __stdcall gl_program_uniform2f_t(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void __stdcall gl_program_uniform2f_ext_t(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void __stdcall gl_program_uniform2fv_t(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_program_uniform2fv_ext_t(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_program_uniform2i_t(GLuint program, GLint location, GLint v0, GLint v1);
typedef void __stdcall gl_program_uniform2i64arb_t(GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void __stdcall gl_program_uniform2i64nv_t(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void __stdcall gl_program_uniform2i64v_arb_t(GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void __stdcall gl_program_uniform2i64v_nv_t(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void __stdcall gl_program_uniform2i_ext_t(GLuint program, GLint location, GLint v0, GLint v1);
typedef void __stdcall gl_program_uniform2iv_t(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_program_uniform2iv_ext_t(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_program_uniform2ui_t(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void __stdcall gl_program_uniform2ui64arb_t(GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void __stdcall gl_program_uniform2ui64nv_t(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void __stdcall gl_program_uniform2ui64v_arb_t(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_program_uniform2ui64v_nv_t(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_program_uniform2ui_ext_t(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void __stdcall gl_program_uniform2uiv_t(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_program_uniform2uiv_ext_t(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_program_uniform3d_t(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void __stdcall gl_program_uniform3dv_t(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void __stdcall gl_program_uniform3f_t(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void __stdcall gl_program_uniform3f_ext_t(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void __stdcall gl_program_uniform3fv_t(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_program_uniform3fv_ext_t(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_program_uniform3i_t(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void __stdcall gl_program_uniform3i64arb_t(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void __stdcall gl_program_uniform3i64nv_t(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void __stdcall gl_program_uniform3i64v_arb_t(GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void __stdcall gl_program_uniform3i64v_nv_t(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void __stdcall gl_program_uniform3i_ext_t(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void __stdcall gl_program_uniform3iv_t(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_program_uniform3iv_ext_t(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_program_uniform3ui_t(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void __stdcall gl_program_uniform3ui64arb_t(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void __stdcall gl_program_uniform3ui64nv_t(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void __stdcall gl_program_uniform3ui64v_arb_t(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_program_uniform3ui64v_nv_t(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_program_uniform3ui_ext_t(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void __stdcall gl_program_uniform3uiv_t(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_program_uniform3uiv_ext_t(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_program_uniform4d_t(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void __stdcall gl_program_uniform4dv_t(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void __stdcall gl_program_uniform4f_t(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void __stdcall gl_program_uniform4f_ext_t(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void __stdcall gl_program_uniform4fv_t(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_program_uniform4fv_ext_t(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_program_uniform4i_t(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void __stdcall gl_program_uniform4i64arb_t(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void __stdcall gl_program_uniform4i64nv_t(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void __stdcall gl_program_uniform4i64v_arb_t(GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void __stdcall gl_program_uniform4i64v_nv_t(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void __stdcall gl_program_uniform4i_ext_t(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void __stdcall gl_program_uniform4iv_t(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_program_uniform4iv_ext_t(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_program_uniform4ui_t(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void __stdcall gl_program_uniform4ui64arb_t(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void __stdcall gl_program_uniform4ui64nv_t(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void __stdcall gl_program_uniform4ui64v_arb_t(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_program_uniform4ui64v_nv_t(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_program_uniform4ui_ext_t(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void __stdcall gl_program_uniform4uiv_t(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_program_uniform4uiv_ext_t(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_program_uniform_handleui64arb_t(GLuint program, GLint location, GLuint64 value);
typedef void __stdcall gl_program_uniform_handleui64nv_t(GLuint program, GLint location, GLuint64 value);
typedef void __stdcall gl_program_uniform_handleui64v_arb_t(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef void __stdcall gl_program_uniform_handleui64v_nv_t(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef void __stdcall gl_program_uniform_matrix2dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix2fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix2fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix2x3dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix2x3fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix2x3fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix2x4dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix2x4fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix2x4fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix3dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix3fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix3fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix3x2dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix3x2fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix3x2fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix3x4dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix3x4fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix3x4fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix4dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix4fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix4fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix4x2dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix4x2fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix4x2fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix4x3dv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_program_uniform_matrix4x3fv_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniform_matrix4x3fv_ext_t(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_program_uniformui64nv_t(GLuint program, GLint location, GLuint64EXT value);
typedef void __stdcall gl_program_uniformui64v_nv_t(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_program_vertex_limit_nv_t(GLenum target, GLint limit);
typedef void __stdcall gl_provoking_vertex_t(GLenum mode);
typedef void __stdcall gl_provoking_vertex_ext_t(GLenum mode);
typedef void __stdcall gl_push_client_attrib_default_ext_t(GLbitfield mask);
typedef void __stdcall gl_push_debug_group_t(GLenum source, GLuint id, GLsizei length, const GLchar *message);
typedef void __stdcall gl_push_group_marker_ext_t(GLsizei length, const GLchar *marker);
typedef void __stdcall gl_query_counter_t(GLuint id, GLenum target);
typedef void __stdcall gl_query_object_parameterui_amd_t(GLenum target, GLuint id, GLenum pname, GLuint param);
typedef void __stdcall gl_raster_samples_ext_t(GLuint samples, GLboolean fixedsamplelocations);
typedef void __stdcall gl_readn_pixels_t(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void __stdcall gl_readn_pixels_arb_t(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void __stdcall gl_reference_plane_sgix_t(const GLdouble *equation);
typedef GLboolean __stdcall gl_release_keyed_mutex_win32ext_t(GLuint memory, GLuint64 key);
typedef void __stdcall gl_release_shader_compiler_t(void);
typedef void __stdcall gl_render_gpu_mask_nv_t(GLbitfield mask);
typedef void __stdcall gl_renderbuffer_storage_t(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_renderbuffer_storage_ext_t(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_renderbuffer_storage_multisample_t(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_renderbuffer_storage_multisample_coverage_nv_t(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_renderbuffer_storage_multisample_ext_t(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_replacement_code_pointer_sun_t(GLenum type, GLsizei stride, const void **pointer);
typedef void __stdcall gl_replacement_codeub_sun_t(GLubyte code);
typedef void __stdcall gl_replacement_codeubv_sun_t(const GLubyte *code);
typedef void __stdcall gl_replacement_codeui_color3f_vertex3f_sun_t(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_replacement_codeui_color3f_vertex3fv_sun_t(const GLuint *rc, const GLfloat *c, const GLfloat *v);
typedef void __stdcall gl_replacement_codeui_color4f_normal3f_vertex3f_sun_t(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_replacement_codeui_color4f_normal3f_vertex3fv_sun_t(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_replacement_codeui_color4ub_vertex3f_sun_t(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_replacement_codeui_color4ub_vertex3fv_sun_t(const GLuint *rc, const GLubyte *c, const GLfloat *v);
typedef void __stdcall gl_replacement_codeui_normal3f_vertex3f_sun_t(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_replacement_codeui_normal3f_vertex3fv_sun_t(const GLuint *rc, const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_replacement_codeui_sun_t(GLuint code);
typedef void __stdcall gl_replacement_codeui_tex_coord2f_color4f_normal3f_vertex3f_sun_t(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_replacement_codeui_tex_coord2f_color4f_normal3f_vertex3fv_sun_t(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_replacement_codeui_tex_coord2f_normal3f_vertex3f_sun_t(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_replacement_codeui_tex_coord2f_normal3f_vertex3fv_sun_t(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_replacement_codeui_tex_coord2f_vertex3f_sun_t(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_replacement_codeui_tex_coord2f_vertex3fv_sun_t(const GLuint *rc, const GLfloat *tc, const GLfloat *v);
typedef void __stdcall gl_replacement_codeui_vertex3f_sun_t(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_replacement_codeui_vertex3fv_sun_t(const GLuint *rc, const GLfloat *v);
typedef void __stdcall gl_replacement_codeuiv_sun_t(const GLuint *code);
typedef void __stdcall gl_replacement_codeus_sun_t(GLushort code);
typedef void __stdcall gl_replacement_codeusv_sun_t(const GLushort *code);
typedef void __stdcall gl_request_resident_programs_nv_t(GLsizei n, const GLuint *programs);
typedef void __stdcall gl_reset_histogram_t(GLenum target);
typedef void __stdcall gl_reset_histogram_ext_t(GLenum target);
typedef void __stdcall gl_reset_minmax_t(GLenum target);
typedef void __stdcall gl_reset_minmax_ext_t(GLenum target);
typedef void __stdcall gl_resize_buffers_mesa_t(void);
typedef void __stdcall gl_resume_transform_feedback_t(void);
typedef void __stdcall gl_resume_transform_feedback_nv_t(void);
typedef void __stdcall gl_sample_coverage_t(GLfloat value, GLboolean invert);
typedef void __stdcall gl_sample_coverage_arb_t(GLfloat value, GLboolean invert);
typedef void __stdcall gl_sample_map_ati_t(GLuint dst, GLuint interp, GLenum swizzle);
typedef void __stdcall gl_sample_mask_ext_t(GLclampf value, GLboolean invert);
typedef void __stdcall gl_sample_mask_indexed_nv_t(GLuint index, GLbitfield mask);
typedef void __stdcall gl_sample_mask_sgis_t(GLclampf value, GLboolean invert);
typedef void __stdcall gl_sample_maski_t(GLuint maskNumber, GLbitfield mask);
typedef void __stdcall gl_sample_pattern_ext_t(GLenum pattern);
typedef void __stdcall gl_sample_pattern_sgis_t(GLenum pattern);
typedef void __stdcall gl_sampler_parameter_iiv_t(GLuint sampler, GLenum pname, const GLint *param);
typedef void __stdcall gl_sampler_parameter_iuiv_t(GLuint sampler, GLenum pname, const GLuint *param);
typedef void __stdcall gl_sampler_parameterf_t(GLuint sampler, GLenum pname, GLfloat param);
typedef void __stdcall gl_sampler_parameterfv_t(GLuint sampler, GLenum pname, const GLfloat *param);
typedef void __stdcall gl_sampler_parameteri_t(GLuint sampler, GLenum pname, GLint param);
typedef void __stdcall gl_sampler_parameteriv_t(GLuint sampler, GLenum pname, const GLint *param);
typedef void __stdcall gl_scissor_arrayv_t(GLuint first, GLsizei count, const GLint *v);
typedef void __stdcall gl_scissor_indexed_t(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void __stdcall gl_scissor_indexedv_t(GLuint index, const GLint *v);
typedef void __stdcall gl_secondary_color3b_t(GLbyte red, GLbyte green, GLbyte blue);
typedef void __stdcall gl_secondary_color3b_ext_t(GLbyte red, GLbyte green, GLbyte blue);
typedef void __stdcall gl_secondary_color3bv_t(const GLbyte *v);
typedef void __stdcall gl_secondary_color3bv_ext_t(const GLbyte *v);
typedef void __stdcall gl_secondary_color3d_t(GLdouble red, GLdouble green, GLdouble blue);
typedef void __stdcall gl_secondary_color3d_ext_t(GLdouble red, GLdouble green, GLdouble blue);
typedef void __stdcall gl_secondary_color3dv_t(const GLdouble *v);
typedef void __stdcall gl_secondary_color3dv_ext_t(const GLdouble *v);
typedef void __stdcall gl_secondary_color3f_t(GLfloat red, GLfloat green, GLfloat blue);
typedef void __stdcall gl_secondary_color3f_ext_t(GLfloat red, GLfloat green, GLfloat blue);
typedef void __stdcall gl_secondary_color3fv_t(const GLfloat *v);
typedef void __stdcall gl_secondary_color3fv_ext_t(const GLfloat *v);
typedef void __stdcall gl_secondary_color3h_nv_t(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void __stdcall gl_secondary_color3hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_secondary_color3i_t(GLint red, GLint green, GLint blue);
typedef void __stdcall gl_secondary_color3i_ext_t(GLint red, GLint green, GLint blue);
typedef void __stdcall gl_secondary_color3iv_t(const GLint *v);
typedef void __stdcall gl_secondary_color3iv_ext_t(const GLint *v);
typedef void __stdcall gl_secondary_color3s_t(GLshort red, GLshort green, GLshort blue);
typedef void __stdcall gl_secondary_color3s_ext_t(GLshort red, GLshort green, GLshort blue);
typedef void __stdcall gl_secondary_color3sv_t(const GLshort *v);
typedef void __stdcall gl_secondary_color3sv_ext_t(const GLshort *v);
typedef void __stdcall gl_secondary_color3ub_t(GLubyte red, GLubyte green, GLubyte blue);
typedef void __stdcall gl_secondary_color3ub_ext_t(GLubyte red, GLubyte green, GLubyte blue);
typedef void __stdcall gl_secondary_color3ubv_t(const GLubyte *v);
typedef void __stdcall gl_secondary_color3ubv_ext_t(const GLubyte *v);
typedef void __stdcall gl_secondary_color3ui_t(GLuint red, GLuint green, GLuint blue);
typedef void __stdcall gl_secondary_color3ui_ext_t(GLuint red, GLuint green, GLuint blue);
typedef void __stdcall gl_secondary_color3uiv_t(const GLuint *v);
typedef void __stdcall gl_secondary_color3uiv_ext_t(const GLuint *v);
typedef void __stdcall gl_secondary_color3us_t(GLushort red, GLushort green, GLushort blue);
typedef void __stdcall gl_secondary_color3us_ext_t(GLushort red, GLushort green, GLushort blue);
typedef void __stdcall gl_secondary_color3usv_t(const GLushort *v);
typedef void __stdcall gl_secondary_color3usv_ext_t(const GLushort *v);
typedef void __stdcall gl_secondary_color_format_nv_t(GLint size, GLenum type, GLsizei stride);
typedef void __stdcall gl_secondary_color_p3ui_t(GLenum type, GLuint color);
typedef void __stdcall gl_secondary_color_p3uiv_t(GLenum type, const GLuint *color);
typedef void __stdcall gl_secondary_color_pointer_t(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_secondary_color_pointer_ext_t(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_secondary_color_pointer_list_ibm_t(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void __stdcall gl_select_perf_monitor_counters_amd_t(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
typedef void __stdcall gl_semaphore_parameterui64v_ext_t(GLuint semaphore, GLenum pname, const GLuint64 *params);
typedef void __stdcall gl_separable_filter2d_t(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
typedef void __stdcall gl_separable_filter2dext_t(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
typedef void __stdcall gl_set_fence_apple_t(GLuint fence);
typedef void __stdcall gl_set_fence_nv_t(GLuint fence, GLenum condition);
typedef void __stdcall gl_set_fragment_shader_constant_ati_t(GLuint dst, const GLfloat *value);
typedef void __stdcall gl_set_invariant_ext_t(GLuint id, GLenum type, const void *addr);
typedef void __stdcall gl_set_local_constant_ext_t(GLuint id, GLenum type, const void *addr);
typedef void __stdcall gl_set_multisamplefv_amd_t(GLenum pname, GLuint index, const GLfloat *val);
typedef void __stdcall gl_shader_binary_t(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
typedef void __stdcall gl_shader_op1ext_t(GLenum op, GLuint res, GLuint arg1);
typedef void __stdcall gl_shader_op2ext_t(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void __stdcall gl_shader_op3ext_t(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void __stdcall gl_shader_source_t(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
typedef void __stdcall gl_shader_source_arb_t(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length);
typedef void __stdcall gl_shader_storage_block_binding_t(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void __stdcall gl_sharpen_tex_func_sgis_t(GLenum target, GLsizei n, const GLfloat *points);
typedef void __stdcall gl_signal_semaphore_ext_t(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts);
typedef void __stdcall gl_signal_vk_fence_nv_t(GLuint64 vkFence);
typedef void __stdcall gl_signal_vk_semaphore_nv_t(GLuint64 vkSemaphore);
typedef void __stdcall gl_specialize_shader_t(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
typedef void __stdcall gl_specialize_shader_arb_t(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
typedef void __stdcall gl_sprite_parameterf_sgix_t(GLenum pname, GLfloat param);
typedef void __stdcall gl_sprite_parameterfv_sgix_t(GLenum pname, const GLfloat *params);
typedef void __stdcall gl_sprite_parameteri_sgix_t(GLenum pname, GLint param);
typedef void __stdcall gl_sprite_parameteriv_sgix_t(GLenum pname, const GLint *params);
typedef void __stdcall gl_state_capture_nv_t(GLuint state, GLenum mode);
typedef void __stdcall gl_stencil_fill_path_instanced_nv_t(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void __stdcall gl_stencil_fill_path_nv_t(GLuint path, GLenum fillMode, GLuint mask);
typedef void __stdcall gl_stencil_func_separate_t(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void __stdcall gl_stencil_func_separate_ati_t(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void __stdcall gl_stencil_mask_separate_t(GLenum face, GLuint mask);
typedef void __stdcall gl_stencil_op_separate_t(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void __stdcall gl_stencil_op_separate_ati_t(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void __stdcall gl_stencil_op_value_amd_t(GLenum face, GLuint value);
typedef void __stdcall gl_stencil_stroke_path_instanced_nv_t(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void __stdcall gl_stencil_stroke_path_nv_t(GLuint path, GLint reference, GLuint mask);
typedef void __stdcall gl_stencil_then_cover_fill_path_instanced_nv_t(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void __stdcall gl_stencil_then_cover_fill_path_nv_t(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
typedef void __stdcall gl_stencil_then_cover_stroke_path_instanced_nv_t(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void __stdcall gl_stencil_then_cover_stroke_path_nv_t(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
typedef void __stdcall gl_string_marker_gremedy_t(GLsizei len, const void *string);
typedef void __stdcall gl_subpixel_precision_bias_nv_t(GLuint xbits, GLuint ybits);
typedef void __stdcall gl_swizzle_ext_t(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void __stdcall gl_sync_texture_intel_t(GLuint texture);
typedef void __stdcall gl_tag_sample_buffer_sgix_t(void);
typedef void __stdcall gl_tangent_pointer_ext_t(GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_tbuffer_mask3dfx_t(GLuint mask);
typedef void __stdcall gl_tessellation_factor_amd_t(GLfloat factor);
typedef void __stdcall gl_tessellation_mode_amd_t(GLenum mode);
typedef GLboolean __stdcall gl_test_fence_apple_t(GLuint fence);
typedef GLboolean __stdcall gl_test_fence_nv_t(GLuint fence);
typedef GLboolean __stdcall gl_test_object_apple_t(GLenum object, GLuint name);
typedef void __stdcall gl_tex_buffer_t(GLenum target, GLenum internalformat, GLuint buffer);
typedef void __stdcall gl_tex_buffer_arb_t(GLenum target, GLenum internalformat, GLuint buffer);
typedef void __stdcall gl_tex_buffer_ext_t(GLenum target, GLenum internalformat, GLuint buffer);
typedef void __stdcall gl_tex_buffer_range_t(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void __stdcall gl_tex_bump_parameterfv_ati_t(GLenum pname, const GLfloat *param);
typedef void __stdcall gl_tex_bump_parameteriv_ati_t(GLenum pname, const GLint *param);
typedef void __stdcall gl_tex_coord1h_nv_t(GLhalfNV s);
typedef void __stdcall gl_tex_coord1hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_tex_coord2f_color3f_vertex3f_sun_t(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_tex_coord2f_color3f_vertex3fv_sun_t(const GLfloat *tc, const GLfloat *c, const GLfloat *v);
typedef void __stdcall gl_tex_coord2f_color4f_normal3f_vertex3f_sun_t(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_tex_coord2f_color4f_normal3f_vertex3fv_sun_t(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_tex_coord2f_color4ub_vertex3f_sun_t(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_tex_coord2f_color4ub_vertex3fv_sun_t(const GLfloat *tc, const GLubyte *c, const GLfloat *v);
typedef void __stdcall gl_tex_coord2f_normal3f_vertex3f_sun_t(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_tex_coord2f_normal3f_vertex3fv_sun_t(const GLfloat *tc, const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_tex_coord2f_vertex3f_sun_t(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_tex_coord2f_vertex3fv_sun_t(const GLfloat *tc, const GLfloat *v);
typedef void __stdcall gl_tex_coord2h_nv_t(GLhalfNV s, GLhalfNV t);
typedef void __stdcall gl_tex_coord2hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_tex_coord3h_nv_t(GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void __stdcall gl_tex_coord3hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_tex_coord4f_color4f_normal3f_vertex4f_sun_t(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_tex_coord4f_color4f_normal3f_vertex4fv_sun_t(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void __stdcall gl_tex_coord4f_vertex4f_sun_t(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_tex_coord4f_vertex4fv_sun_t(const GLfloat *tc, const GLfloat *v);
typedef void __stdcall gl_tex_coord4h_nv_t(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void __stdcall gl_tex_coord4hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_tex_coord_format_nv_t(GLint size, GLenum type, GLsizei stride);
typedef void __stdcall gl_tex_coord_p1ui_t(GLenum type, GLuint coords);
typedef void __stdcall gl_tex_coord_p1uiv_t(GLenum type, const GLuint *coords);
typedef void __stdcall gl_tex_coord_p2ui_t(GLenum type, GLuint coords);
typedef void __stdcall gl_tex_coord_p2uiv_t(GLenum type, const GLuint *coords);
typedef void __stdcall gl_tex_coord_p3ui_t(GLenum type, GLuint coords);
typedef void __stdcall gl_tex_coord_p3uiv_t(GLenum type, const GLuint *coords);
typedef void __stdcall gl_tex_coord_p4ui_t(GLenum type, GLuint coords);
typedef void __stdcall gl_tex_coord_p4uiv_t(GLenum type, const GLuint *coords);
typedef void __stdcall gl_tex_coord_pointer_ext_t(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void __stdcall gl_tex_coord_pointer_list_ibm_t(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void __stdcall gl_tex_coord_pointerv_intel_t(GLint size, GLenum type, const void **pointer);
typedef void __stdcall gl_tex_filter_func_sgis_t(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
typedef void __stdcall gl_tex_image2dmultisample_t(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void __stdcall gl_tex_image2dmultisample_coverage_nv_t(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void __stdcall gl_tex_image3d_t(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_tex_image3dext_t(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_tex_image3dmultisample_t(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void __stdcall gl_tex_image3dmultisample_coverage_nv_t(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void __stdcall gl_tex_image4dsgis_t(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_tex_page_commitment_arb_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void __stdcall gl_tex_parameter_iiv_t(GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_tex_parameter_iiv_ext_t(GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_tex_parameter_iuiv_t(GLenum target, GLenum pname, const GLuint *params);
typedef void __stdcall gl_tex_parameter_iuiv_ext_t(GLenum target, GLenum pname, const GLuint *params);
typedef void __stdcall gl_tex_renderbuffer_nv_t(GLenum target, GLuint renderbuffer);
typedef void __stdcall gl_tex_storage1d_t(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void __stdcall gl_tex_storage2d_t(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_tex_storage2dmultisample_t(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void __stdcall gl_tex_storage3d_t(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void __stdcall gl_tex_storage3dmultisample_t(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void __stdcall gl_tex_storage_mem1dext_t(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_tex_storage_mem2dext_t(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_tex_storage_mem2dmultisample_ext_t(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_tex_storage_mem3dext_t(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_tex_storage_mem3dmultisample_ext_t(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_tex_storage_sparse_amd_t(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void __stdcall gl_tex_sub_image1dext_t(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_tex_sub_image2dext_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_tex_sub_image3d_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_tex_sub_image3dext_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_tex_sub_image4dsgis_t(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_barrier_t(void);
typedef void __stdcall gl_texture_barrier_nv_t(void);
typedef void __stdcall gl_texture_buffer_t(GLuint texture, GLenum internalformat, GLuint buffer);
typedef void __stdcall gl_texture_buffer_ext_t(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void __stdcall gl_texture_buffer_range_t(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void __stdcall gl_texture_buffer_range_ext_t(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void __stdcall gl_texture_image1dext_t(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_image2dext_t(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_image2dmultisample_coverage_nv_t(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void __stdcall gl_texture_image2dmultisample_nv_t(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void __stdcall gl_texture_image3dext_t(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_image3dmultisample_coverage_nv_t(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void __stdcall gl_texture_image3dmultisample_nv_t(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void __stdcall gl_texture_light_ext_t(GLenum pname);
typedef void __stdcall gl_texture_material_ext_t(GLenum face, GLenum mode);
typedef void __stdcall gl_texture_normal_ext_t(GLenum mode);
typedef void __stdcall gl_texture_page_commitment_ext_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void __stdcall gl_texture_parameter_iiv_t(GLuint texture, GLenum pname, const GLint *params);
typedef void __stdcall gl_texture_parameter_iiv_ext_t(GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_texture_parameter_iuiv_t(GLuint texture, GLenum pname, const GLuint *params);
typedef void __stdcall gl_texture_parameter_iuiv_ext_t(GLuint texture, GLenum target, GLenum pname, const GLuint *params);
typedef void __stdcall gl_texture_parameterf_t(GLuint texture, GLenum pname, GLfloat param);
typedef void __stdcall gl_texture_parameterf_ext_t(GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void __stdcall gl_texture_parameterfv_t(GLuint texture, GLenum pname, const GLfloat *param);
typedef void __stdcall gl_texture_parameterfv_ext_t(GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_texture_parameteri_t(GLuint texture, GLenum pname, GLint param);
typedef void __stdcall gl_texture_parameteri_ext_t(GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void __stdcall gl_texture_parameteriv_t(GLuint texture, GLenum pname, const GLint *param);
typedef void __stdcall gl_texture_parameteriv_ext_t(GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void __stdcall gl_texture_range_apple_t(GLenum target, GLsizei length, const void *pointer);
typedef void __stdcall gl_texture_renderbuffer_ext_t(GLuint texture, GLenum target, GLuint renderbuffer);
typedef void __stdcall gl_texture_storage1d_t(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void __stdcall gl_texture_storage1dext_t(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void __stdcall gl_texture_storage2d_t(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_texture_storage2dext_t(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void __stdcall gl_texture_storage2dmultisample_t(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void __stdcall gl_texture_storage2dmultisample_ext_t(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void __stdcall gl_texture_storage3d_t(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void __stdcall gl_texture_storage3dext_t(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void __stdcall gl_texture_storage3dmultisample_t(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void __stdcall gl_texture_storage3dmultisample_ext_t(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void __stdcall gl_texture_storage_mem1dext_t(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_texture_storage_mem2dext_t(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_texture_storage_mem2dmultisample_ext_t(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_texture_storage_mem3dext_t(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_texture_storage_mem3dmultisample_ext_t(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void __stdcall gl_texture_storage_sparse_amd_t(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void __stdcall gl_texture_sub_image1d_t(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_sub_image1dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_sub_image2d_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_sub_image2dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_sub_image3d_t(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_sub_image3dext_t(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void __stdcall gl_texture_view_t(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void __stdcall gl_track_matrix_nv_t(GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void __stdcall gl_transform_feedback_attribs_nv_t(GLsizei count, const GLint *attribs, GLenum bufferMode);
typedef void __stdcall gl_transform_feedback_buffer_base_t(GLuint xfb, GLuint index, GLuint buffer);
typedef void __stdcall gl_transform_feedback_buffer_range_t(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void __stdcall gl_transform_feedback_varyings_t(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
typedef void __stdcall gl_transform_feedback_varyings_ext_t(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
typedef void __stdcall gl_transform_feedback_varyings_nv_t(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
typedef void __stdcall gl_transform_path_nv_t(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
typedef void __stdcall gl_uniform1d_t(GLint location, GLdouble x);
typedef void __stdcall gl_uniform1dv_t(GLint location, GLsizei count, const GLdouble *value);
typedef void __stdcall gl_uniform1f_t(GLint location, GLfloat v0);
typedef void __stdcall gl_uniform1f_arb_t(GLint location, GLfloat v0);
typedef void __stdcall gl_uniform1fv_t(GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_uniform1fv_arb_t(GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_uniform1i_t(GLint location, GLint v0);
typedef void __stdcall gl_uniform1i64arb_t(GLint location, GLint64 x);
typedef void __stdcall gl_uniform1i64nv_t(GLint location, GLint64EXT x);
typedef void __stdcall gl_uniform1i64v_arb_t(GLint location, GLsizei count, const GLint64 *value);
typedef void __stdcall gl_uniform1i64v_nv_t(GLint location, GLsizei count, const GLint64EXT *value);
typedef void __stdcall gl_uniform1i_arb_t(GLint location, GLint v0);
typedef void __stdcall gl_uniform1iv_t(GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_uniform1iv_arb_t(GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_uniform1ui_t(GLint location, GLuint v0);
typedef void __stdcall gl_uniform1ui64arb_t(GLint location, GLuint64 x);
typedef void __stdcall gl_uniform1ui64nv_t(GLint location, GLuint64EXT x);
typedef void __stdcall gl_uniform1ui64v_arb_t(GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_uniform1ui64v_nv_t(GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_uniform1ui_ext_t(GLint location, GLuint v0);
typedef void __stdcall gl_uniform1uiv_t(GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_uniform1uiv_ext_t(GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_uniform2d_t(GLint location, GLdouble x, GLdouble y);
typedef void __stdcall gl_uniform2dv_t(GLint location, GLsizei count, const GLdouble *value);
typedef void __stdcall gl_uniform2f_t(GLint location, GLfloat v0, GLfloat v1);
typedef void __stdcall gl_uniform2f_arb_t(GLint location, GLfloat v0, GLfloat v1);
typedef void __stdcall gl_uniform2fv_t(GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_uniform2fv_arb_t(GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_uniform2i_t(GLint location, GLint v0, GLint v1);
typedef void __stdcall gl_uniform2i64arb_t(GLint location, GLint64 x, GLint64 y);
typedef void __stdcall gl_uniform2i64nv_t(GLint location, GLint64EXT x, GLint64EXT y);
typedef void __stdcall gl_uniform2i64v_arb_t(GLint location, GLsizei count, const GLint64 *value);
typedef void __stdcall gl_uniform2i64v_nv_t(GLint location, GLsizei count, const GLint64EXT *value);
typedef void __stdcall gl_uniform2i_arb_t(GLint location, GLint v0, GLint v1);
typedef void __stdcall gl_uniform2iv_t(GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_uniform2iv_arb_t(GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_uniform2ui_t(GLint location, GLuint v0, GLuint v1);
typedef void __stdcall gl_uniform2ui64arb_t(GLint location, GLuint64 x, GLuint64 y);
typedef void __stdcall gl_uniform2ui64nv_t(GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void __stdcall gl_uniform2ui64v_arb_t(GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_uniform2ui64v_nv_t(GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_uniform2ui_ext_t(GLint location, GLuint v0, GLuint v1);
typedef void __stdcall gl_uniform2uiv_t(GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_uniform2uiv_ext_t(GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_uniform3d_t(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_uniform3dv_t(GLint location, GLsizei count, const GLdouble *value);
typedef void __stdcall gl_uniform3f_t(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void __stdcall gl_uniform3f_arb_t(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void __stdcall gl_uniform3fv_t(GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_uniform3fv_arb_t(GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_uniform3i_t(GLint location, GLint v0, GLint v1, GLint v2);
typedef void __stdcall gl_uniform3i64arb_t(GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void __stdcall gl_uniform3i64nv_t(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void __stdcall gl_uniform3i64v_arb_t(GLint location, GLsizei count, const GLint64 *value);
typedef void __stdcall gl_uniform3i64v_nv_t(GLint location, GLsizei count, const GLint64EXT *value);
typedef void __stdcall gl_uniform3i_arb_t(GLint location, GLint v0, GLint v1, GLint v2);
typedef void __stdcall gl_uniform3iv_t(GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_uniform3iv_arb_t(GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_uniform3ui_t(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void __stdcall gl_uniform3ui64arb_t(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void __stdcall gl_uniform3ui64nv_t(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void __stdcall gl_uniform3ui64v_arb_t(GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_uniform3ui64v_nv_t(GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_uniform3ui_ext_t(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void __stdcall gl_uniform3uiv_t(GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_uniform3uiv_ext_t(GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_uniform4d_t(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_uniform4dv_t(GLint location, GLsizei count, const GLdouble *value);
typedef void __stdcall gl_uniform4f_t(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void __stdcall gl_uniform4f_arb_t(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void __stdcall gl_uniform4fv_t(GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_uniform4fv_arb_t(GLint location, GLsizei count, const GLfloat *value);
typedef void __stdcall gl_uniform4i_t(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void __stdcall gl_uniform4i64arb_t(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void __stdcall gl_uniform4i64nv_t(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void __stdcall gl_uniform4i64v_arb_t(GLint location, GLsizei count, const GLint64 *value);
typedef void __stdcall gl_uniform4i64v_nv_t(GLint location, GLsizei count, const GLint64EXT *value);
typedef void __stdcall gl_uniform4i_arb_t(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void __stdcall gl_uniform4iv_t(GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_uniform4iv_arb_t(GLint location, GLsizei count, const GLint *value);
typedef void __stdcall gl_uniform4ui_t(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void __stdcall gl_uniform4ui64arb_t(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void __stdcall gl_uniform4ui64nv_t(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void __stdcall gl_uniform4ui64v_arb_t(GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_uniform4ui64v_nv_t(GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_uniform4ui_ext_t(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void __stdcall gl_uniform4uiv_t(GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_uniform4uiv_ext_t(GLint location, GLsizei count, const GLuint *value);
typedef void __stdcall gl_uniform_block_binding_t(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void __stdcall gl_uniform_buffer_ext_t(GLuint program, GLint location, GLuint buffer);
typedef void __stdcall gl_uniform_handleui64arb_t(GLint location, GLuint64 value);
typedef void __stdcall gl_uniform_handleui64nv_t(GLint location, GLuint64 value);
typedef void __stdcall gl_uniform_handleui64v_arb_t(GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_uniform_handleui64v_nv_t(GLint location, GLsizei count, const GLuint64 *value);
typedef void __stdcall gl_uniform_matrix2dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix2fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix2fv_arb_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix2x3dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix2x3fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix2x4dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix2x4fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix3dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix3fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix3fv_arb_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix3x2dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix3x2fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix3x4dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix3x4fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix4dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix4fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix4fv_arb_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix4x2dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix4x2fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_matrix4x3dv_t(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void __stdcall gl_uniform_matrix4x3fv_t(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void __stdcall gl_uniform_subroutinesuiv_t(GLenum shadertype, GLsizei count, const GLuint *indices);
typedef void __stdcall gl_uniformui64nv_t(GLint location, GLuint64EXT value);
typedef void __stdcall gl_uniformui64v_nv_t(GLint location, GLsizei count, const GLuint64EXT *value);
typedef void __stdcall gl_unlock_arrays_ext_t(void);
typedef GLboolean __stdcall gl_unmap_buffer_t(GLenum target);
typedef GLboolean __stdcall gl_unmap_buffer_arb_t(GLenum target);
typedef GLboolean __stdcall gl_unmap_named_buffer_t(GLuint buffer);
typedef GLboolean __stdcall gl_unmap_named_buffer_ext_t(GLuint buffer);
typedef void __stdcall gl_unmap_object_buffer_ati_t(GLuint buffer);
typedef void __stdcall gl_unmap_texture2dintel_t(GLuint texture, GLint level);
typedef void __stdcall gl_update_object_buffer_ati_t(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
typedef void __stdcall gl_use_program_t(GLuint program);
typedef void __stdcall gl_use_program_object_arb_t(GLhandleARB programObj);
typedef void __stdcall gl_use_program_stages_t(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void __stdcall gl_use_shader_program_ext_t(GLenum type, GLuint program);
typedef void __stdcall gl_vdpaufini_nv_t(void);
typedef void __stdcall gl_vdpauget_surfaceiv_nv_t(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
typedef void __stdcall gl_vdpauinit_nv_t(const void *vdpDevice, const void *getProcAddress);
typedef GLboolean __stdcall gl_vdpauis_surface_nv_t(GLvdpauSurfaceNV surface);
typedef void __stdcall gl_vdpaumap_surfaces_nv_t(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
typedef GLvdpauSurfaceNV __stdcall gl_vdpauregister_output_surface_nv_t(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef GLvdpauSurfaceNV __stdcall gl_vdpauregister_video_surface_nv_t(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef void __stdcall gl_vdpausurface_access_nv_t(GLvdpauSurfaceNV surface, GLenum access);
typedef void __stdcall gl_vdpauunmap_surfaces_nv_t(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
typedef void __stdcall gl_vdpauunregister_surface_nv_t(GLvdpauSurfaceNV surface);
typedef void __stdcall gl_validate_program_t(GLuint program);
typedef void __stdcall gl_validate_program_arb_t(GLhandleARB programObj);
typedef void __stdcall gl_validate_program_pipeline_t(GLuint pipeline);
typedef void __stdcall gl_variant_array_object_ati_t(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void __stdcall gl_variant_pointer_ext_t(GLuint id, GLenum type, GLuint stride, const void *addr);
typedef void __stdcall gl_variantbv_ext_t(GLuint id, const GLbyte *addr);
typedef void __stdcall gl_variantdv_ext_t(GLuint id, const GLdouble *addr);
typedef void __stdcall gl_variantfv_ext_t(GLuint id, const GLfloat *addr);
typedef void __stdcall gl_variantiv_ext_t(GLuint id, const GLint *addr);
typedef void __stdcall gl_variantsv_ext_t(GLuint id, const GLshort *addr);
typedef void __stdcall gl_variantubv_ext_t(GLuint id, const GLubyte *addr);
typedef void __stdcall gl_variantuiv_ext_t(GLuint id, const GLuint *addr);
typedef void __stdcall gl_variantusv_ext_t(GLuint id, const GLushort *addr);
typedef void __stdcall gl_vertex2h_nv_t(GLhalfNV x, GLhalfNV y);
typedef void __stdcall gl_vertex2hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_vertex3h_nv_t(GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void __stdcall gl_vertex3hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_vertex4h_nv_t(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void __stdcall gl_vertex4hv_nv_t(const GLhalfNV *v);
typedef void __stdcall gl_vertex_array_attrib_binding_t(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void __stdcall gl_vertex_array_attrib_format_t(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void __stdcall gl_vertex_array_attrib_iformat_t(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void __stdcall gl_vertex_array_attrib_lformat_t(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void __stdcall gl_vertex_array_bind_vertex_buffer_ext_t(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void __stdcall gl_vertex_array_binding_divisor_t(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void __stdcall gl_vertex_array_color_offset_ext_t(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_edge_flag_offset_ext_t(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_element_buffer_t(GLuint vaobj, GLuint buffer);
typedef void __stdcall gl_vertex_array_fog_coord_offset_ext_t(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_index_offset_ext_t(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_multi_tex_coord_offset_ext_t(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_normal_offset_ext_t(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_parameteri_apple_t(GLenum pname, GLint param);
typedef void __stdcall gl_vertex_array_range_apple_t(GLsizei length, void *pointer);
typedef void __stdcall gl_vertex_array_range_nv_t(GLsizei length, const void *pointer);
typedef void __stdcall gl_vertex_array_secondary_color_offset_ext_t(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_tex_coord_offset_ext_t(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_vertex_attrib_binding_ext_t(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void __stdcall gl_vertex_array_vertex_attrib_divisor_ext_t(GLuint vaobj, GLuint index, GLuint divisor);
typedef void __stdcall gl_vertex_array_vertex_attrib_format_ext_t(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void __stdcall gl_vertex_array_vertex_attrib_iformat_ext_t(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void __stdcall gl_vertex_array_vertex_attrib_ioffset_ext_t(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_vertex_attrib_lformat_ext_t(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void __stdcall gl_vertex_array_vertex_attrib_loffset_ext_t(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_vertex_attrib_offset_ext_t(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_array_vertex_binding_divisor_ext_t(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void __stdcall gl_vertex_array_vertex_buffer_t(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void __stdcall gl_vertex_array_vertex_buffers_t(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
typedef void __stdcall gl_vertex_array_vertex_offset_ext_t(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void __stdcall gl_vertex_attrib1d_t(GLuint index, GLdouble x);
typedef void __stdcall gl_vertex_attrib1d_arb_t(GLuint index, GLdouble x);
typedef void __stdcall gl_vertex_attrib1d_nv_t(GLuint index, GLdouble x);
typedef void __stdcall gl_vertex_attrib1dv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib1dv_arb_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib1dv_nv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib1f_t(GLuint index, GLfloat x);
typedef void __stdcall gl_vertex_attrib1f_arb_t(GLuint index, GLfloat x);
typedef void __stdcall gl_vertex_attrib1f_nv_t(GLuint index, GLfloat x);
typedef void __stdcall gl_vertex_attrib1fv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib1fv_arb_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib1fv_nv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib1h_nv_t(GLuint index, GLhalfNV x);
typedef void __stdcall gl_vertex_attrib1hv_nv_t(GLuint index, const GLhalfNV *v);
typedef void __stdcall gl_vertex_attrib1s_t(GLuint index, GLshort x);
typedef void __stdcall gl_vertex_attrib1s_arb_t(GLuint index, GLshort x);
typedef void __stdcall gl_vertex_attrib1s_nv_t(GLuint index, GLshort x);
typedef void __stdcall gl_vertex_attrib1sv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib1sv_arb_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib1sv_nv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib2d_t(GLuint index, GLdouble x, GLdouble y);
typedef void __stdcall gl_vertex_attrib2d_arb_t(GLuint index, GLdouble x, GLdouble y);
typedef void __stdcall gl_vertex_attrib2d_nv_t(GLuint index, GLdouble x, GLdouble y);
typedef void __stdcall gl_vertex_attrib2dv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib2dv_arb_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib2dv_nv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib2f_t(GLuint index, GLfloat x, GLfloat y);
typedef void __stdcall gl_vertex_attrib2f_arb_t(GLuint index, GLfloat x, GLfloat y);
typedef void __stdcall gl_vertex_attrib2f_nv_t(GLuint index, GLfloat x, GLfloat y);
typedef void __stdcall gl_vertex_attrib2fv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib2fv_arb_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib2fv_nv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib2h_nv_t(GLuint index, GLhalfNV x, GLhalfNV y);
typedef void __stdcall gl_vertex_attrib2hv_nv_t(GLuint index, const GLhalfNV *v);
typedef void __stdcall gl_vertex_attrib2s_t(GLuint index, GLshort x, GLshort y);
typedef void __stdcall gl_vertex_attrib2s_arb_t(GLuint index, GLshort x, GLshort y);
typedef void __stdcall gl_vertex_attrib2s_nv_t(GLuint index, GLshort x, GLshort y);
typedef void __stdcall gl_vertex_attrib2sv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib2sv_arb_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib2sv_nv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib3d_t(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_vertex_attrib3d_arb_t(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_vertex_attrib3d_nv_t(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_vertex_attrib3dv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib3dv_arb_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib3dv_nv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib3f_t(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_vertex_attrib3f_arb_t(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_vertex_attrib3f_nv_t(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_vertex_attrib3fv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib3fv_arb_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib3fv_nv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib3h_nv_t(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void __stdcall gl_vertex_attrib3hv_nv_t(GLuint index, const GLhalfNV *v);
typedef void __stdcall gl_vertex_attrib3s_t(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void __stdcall gl_vertex_attrib3s_arb_t(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void __stdcall gl_vertex_attrib3s_nv_t(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void __stdcall gl_vertex_attrib3sv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib3sv_arb_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib3sv_nv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib4nbv_t(GLuint index, const GLbyte *v);
typedef void __stdcall gl_vertex_attrib4nbv_arb_t(GLuint index, const GLbyte *v);
typedef void __stdcall gl_vertex_attrib4niv_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib4niv_arb_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib4nsv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib4nsv_arb_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib4nub_t(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void __stdcall gl_vertex_attrib4nub_arb_t(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void __stdcall gl_vertex_attrib4nubv_t(GLuint index, const GLubyte *v);
typedef void __stdcall gl_vertex_attrib4nubv_arb_t(GLuint index, const GLubyte *v);
typedef void __stdcall gl_vertex_attrib4nuiv_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib4nuiv_arb_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib4nusv_t(GLuint index, const GLushort *v);
typedef void __stdcall gl_vertex_attrib4nusv_arb_t(GLuint index, const GLushort *v);
typedef void __stdcall gl_vertex_attrib4bv_t(GLuint index, const GLbyte *v);
typedef void __stdcall gl_vertex_attrib4bv_arb_t(GLuint index, const GLbyte *v);
typedef void __stdcall gl_vertex_attrib4d_t(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_vertex_attrib4d_arb_t(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_vertex_attrib4d_nv_t(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_vertex_attrib4dv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib4dv_arb_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib4dv_nv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib4f_t(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_vertex_attrib4f_arb_t(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_vertex_attrib4f_nv_t(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_vertex_attrib4fv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib4fv_arb_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib4fv_nv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_vertex_attrib4h_nv_t(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void __stdcall gl_vertex_attrib4hv_nv_t(GLuint index, const GLhalfNV *v);
typedef void __stdcall gl_vertex_attrib4iv_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib4iv_arb_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib4s_t(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void __stdcall gl_vertex_attrib4s_arb_t(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void __stdcall gl_vertex_attrib4s_nv_t(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void __stdcall gl_vertex_attrib4sv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib4sv_arb_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib4sv_nv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib4ub_nv_t(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void __stdcall gl_vertex_attrib4ubv_t(GLuint index, const GLubyte *v);
typedef void __stdcall gl_vertex_attrib4ubv_arb_t(GLuint index, const GLubyte *v);
typedef void __stdcall gl_vertex_attrib4ubv_nv_t(GLuint index, const GLubyte *v);
typedef void __stdcall gl_vertex_attrib4uiv_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib4uiv_arb_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib4usv_t(GLuint index, const GLushort *v);
typedef void __stdcall gl_vertex_attrib4usv_arb_t(GLuint index, const GLushort *v);
typedef void __stdcall gl_vertex_attrib_array_object_ati_t(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
typedef void __stdcall gl_vertex_attrib_binding_t(GLuint attribindex, GLuint bindingindex);
typedef void __stdcall gl_vertex_attrib_divisor_t(GLuint index, GLuint divisor);
typedef void __stdcall gl_vertex_attrib_divisor_arb_t(GLuint index, GLuint divisor);
typedef void __stdcall gl_vertex_attrib_format_t(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void __stdcall gl_vertex_attrib_format_nv_t(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void __stdcall gl_vertex_attrib_i1i_t(GLuint index, GLint x);
typedef void __stdcall gl_vertex_attrib_i1i_ext_t(GLuint index, GLint x);
typedef void __stdcall gl_vertex_attrib_i1iv_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib_i1iv_ext_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib_i1ui_t(GLuint index, GLuint x);
typedef void __stdcall gl_vertex_attrib_i1ui_ext_t(GLuint index, GLuint x);
typedef void __stdcall gl_vertex_attrib_i1uiv_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib_i1uiv_ext_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib_i2i_t(GLuint index, GLint x, GLint y);
typedef void __stdcall gl_vertex_attrib_i2i_ext_t(GLuint index, GLint x, GLint y);
typedef void __stdcall gl_vertex_attrib_i2iv_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib_i2iv_ext_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib_i2ui_t(GLuint index, GLuint x, GLuint y);
typedef void __stdcall gl_vertex_attrib_i2ui_ext_t(GLuint index, GLuint x, GLuint y);
typedef void __stdcall gl_vertex_attrib_i2uiv_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib_i2uiv_ext_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib_i3i_t(GLuint index, GLint x, GLint y, GLint z);
typedef void __stdcall gl_vertex_attrib_i3i_ext_t(GLuint index, GLint x, GLint y, GLint z);
typedef void __stdcall gl_vertex_attrib_i3iv_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib_i3iv_ext_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib_i3ui_t(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void __stdcall gl_vertex_attrib_i3ui_ext_t(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void __stdcall gl_vertex_attrib_i3uiv_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib_i3uiv_ext_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib_i4bv_t(GLuint index, const GLbyte *v);
typedef void __stdcall gl_vertex_attrib_i4bv_ext_t(GLuint index, const GLbyte *v);
typedef void __stdcall gl_vertex_attrib_i4i_t(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void __stdcall gl_vertex_attrib_i4i_ext_t(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void __stdcall gl_vertex_attrib_i4iv_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib_i4iv_ext_t(GLuint index, const GLint *v);
typedef void __stdcall gl_vertex_attrib_i4sv_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib_i4sv_ext_t(GLuint index, const GLshort *v);
typedef void __stdcall gl_vertex_attrib_i4ubv_t(GLuint index, const GLubyte *v);
typedef void __stdcall gl_vertex_attrib_i4ubv_ext_t(GLuint index, const GLubyte *v);
typedef void __stdcall gl_vertex_attrib_i4ui_t(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void __stdcall gl_vertex_attrib_i4ui_ext_t(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void __stdcall gl_vertex_attrib_i4uiv_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib_i4uiv_ext_t(GLuint index, const GLuint *v);
typedef void __stdcall gl_vertex_attrib_i4usv_t(GLuint index, const GLushort *v);
typedef void __stdcall gl_vertex_attrib_i4usv_ext_t(GLuint index, const GLushort *v);
typedef void __stdcall gl_vertex_attrib_iformat_t(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void __stdcall gl_vertex_attrib_iformat_nv_t(GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void __stdcall gl_vertex_attrib_ipointer_t(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_vertex_attrib_ipointer_ext_t(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_vertex_attrib_l1d_t(GLuint index, GLdouble x);
typedef void __stdcall gl_vertex_attrib_l1d_ext_t(GLuint index, GLdouble x);
typedef void __stdcall gl_vertex_attrib_l1dv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib_l1dv_ext_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib_l1i64nv_t(GLuint index, GLint64EXT x);
typedef void __stdcall gl_vertex_attrib_l1i64v_nv_t(GLuint index, const GLint64EXT *v);
typedef void __stdcall gl_vertex_attrib_l1ui64arb_t(GLuint index, GLuint64EXT x);
typedef void __stdcall gl_vertex_attrib_l1ui64nv_t(GLuint index, GLuint64EXT x);
typedef void __stdcall gl_vertex_attrib_l1ui64v_arb_t(GLuint index, const GLuint64EXT *v);
typedef void __stdcall gl_vertex_attrib_l1ui64v_nv_t(GLuint index, const GLuint64EXT *v);
typedef void __stdcall gl_vertex_attrib_l2d_t(GLuint index, GLdouble x, GLdouble y);
typedef void __stdcall gl_vertex_attrib_l2d_ext_t(GLuint index, GLdouble x, GLdouble y);
typedef void __stdcall gl_vertex_attrib_l2dv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib_l2dv_ext_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib_l2i64nv_t(GLuint index, GLint64EXT x, GLint64EXT y);
typedef void __stdcall gl_vertex_attrib_l2i64v_nv_t(GLuint index, const GLint64EXT *v);
typedef void __stdcall gl_vertex_attrib_l2ui64nv_t(GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void __stdcall gl_vertex_attrib_l2ui64v_nv_t(GLuint index, const GLuint64EXT *v);
typedef void __stdcall gl_vertex_attrib_l3d_t(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_vertex_attrib_l3d_ext_t(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_vertex_attrib_l3dv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib_l3dv_ext_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib_l3i64nv_t(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void __stdcall gl_vertex_attrib_l3i64v_nv_t(GLuint index, const GLint64EXT *v);
typedef void __stdcall gl_vertex_attrib_l3ui64nv_t(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void __stdcall gl_vertex_attrib_l3ui64v_nv_t(GLuint index, const GLuint64EXT *v);
typedef void __stdcall gl_vertex_attrib_l4d_t(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_vertex_attrib_l4d_ext_t(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_vertex_attrib_l4dv_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib_l4dv_ext_t(GLuint index, const GLdouble *v);
typedef void __stdcall gl_vertex_attrib_l4i64nv_t(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void __stdcall gl_vertex_attrib_l4i64v_nv_t(GLuint index, const GLint64EXT *v);
typedef void __stdcall gl_vertex_attrib_l4ui64nv_t(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void __stdcall gl_vertex_attrib_l4ui64v_nv_t(GLuint index, const GLuint64EXT *v);
typedef void __stdcall gl_vertex_attrib_lformat_t(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void __stdcall gl_vertex_attrib_lformat_nv_t(GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void __stdcall gl_vertex_attrib_lpointer_t(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_vertex_attrib_lpointer_ext_t(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_vertex_attrib_p1ui_t(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void __stdcall gl_vertex_attrib_p1uiv_t(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void __stdcall gl_vertex_attrib_p2ui_t(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void __stdcall gl_vertex_attrib_p2uiv_t(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void __stdcall gl_vertex_attrib_p3ui_t(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void __stdcall gl_vertex_attrib_p3uiv_t(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void __stdcall gl_vertex_attrib_p4ui_t(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void __stdcall gl_vertex_attrib_p4uiv_t(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void __stdcall gl_vertex_attrib_parameteri_amd_t(GLuint index, GLenum pname, GLint param);
typedef void __stdcall gl_vertex_attrib_pointer_t(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
typedef void __stdcall gl_vertex_attrib_pointer_arb_t(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
typedef void __stdcall gl_vertex_attrib_pointer_nv_t(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_vertex_attribs1dv_nv_t(GLuint index, GLsizei count, const GLdouble *v);
typedef void __stdcall gl_vertex_attribs1fv_nv_t(GLuint index, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_vertex_attribs1hv_nv_t(GLuint index, GLsizei n, const GLhalfNV *v);
typedef void __stdcall gl_vertex_attribs1sv_nv_t(GLuint index, GLsizei count, const GLshort *v);
typedef void __stdcall gl_vertex_attribs2dv_nv_t(GLuint index, GLsizei count, const GLdouble *v);
typedef void __stdcall gl_vertex_attribs2fv_nv_t(GLuint index, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_vertex_attribs2hv_nv_t(GLuint index, GLsizei n, const GLhalfNV *v);
typedef void __stdcall gl_vertex_attribs2sv_nv_t(GLuint index, GLsizei count, const GLshort *v);
typedef void __stdcall gl_vertex_attribs3dv_nv_t(GLuint index, GLsizei count, const GLdouble *v);
typedef void __stdcall gl_vertex_attribs3fv_nv_t(GLuint index, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_vertex_attribs3hv_nv_t(GLuint index, GLsizei n, const GLhalfNV *v);
typedef void __stdcall gl_vertex_attribs3sv_nv_t(GLuint index, GLsizei count, const GLshort *v);
typedef void __stdcall gl_vertex_attribs4dv_nv_t(GLuint index, GLsizei count, const GLdouble *v);
typedef void __stdcall gl_vertex_attribs4fv_nv_t(GLuint index, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_vertex_attribs4hv_nv_t(GLuint index, GLsizei n, const GLhalfNV *v);
typedef void __stdcall gl_vertex_attribs4sv_nv_t(GLuint index, GLsizei count, const GLshort *v);
typedef void __stdcall gl_vertex_attribs4ubv_nv_t(GLuint index, GLsizei count, const GLubyte *v);
typedef void __stdcall gl_vertex_binding_divisor_t(GLuint bindingindex, GLuint divisor);
typedef void __stdcall gl_vertex_blend_arb_t(GLint count);
typedef void __stdcall gl_vertex_blend_envf_ati_t(GLenum pname, GLfloat param);
typedef void __stdcall gl_vertex_blend_envi_ati_t(GLenum pname, GLint param);
typedef void __stdcall gl_vertex_format_nv_t(GLint size, GLenum type, GLsizei stride);
typedef void __stdcall gl_vertex_p2ui_t(GLenum type, GLuint value);
typedef void __stdcall gl_vertex_p2uiv_t(GLenum type, const GLuint *value);
typedef void __stdcall gl_vertex_p3ui_t(GLenum type, GLuint value);
typedef void __stdcall gl_vertex_p3uiv_t(GLenum type, const GLuint *value);
typedef void __stdcall gl_vertex_p4ui_t(GLenum type, GLuint value);
typedef void __stdcall gl_vertex_p4uiv_t(GLenum type, const GLuint *value);
typedef void __stdcall gl_vertex_pointer_ext_t(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
typedef void __stdcall gl_vertex_pointer_list_ibm_t(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
typedef void __stdcall gl_vertex_pointerv_intel_t(GLint size, GLenum type, const void **pointer);
typedef void __stdcall gl_vertex_stream1d_ati_t(GLenum stream, GLdouble x);
typedef void __stdcall gl_vertex_stream1dv_ati_t(GLenum stream, const GLdouble *coords);
typedef void __stdcall gl_vertex_stream1f_ati_t(GLenum stream, GLfloat x);
typedef void __stdcall gl_vertex_stream1fv_ati_t(GLenum stream, const GLfloat *coords);
typedef void __stdcall gl_vertex_stream1i_ati_t(GLenum stream, GLint x);
typedef void __stdcall gl_vertex_stream1iv_ati_t(GLenum stream, const GLint *coords);
typedef void __stdcall gl_vertex_stream1s_ati_t(GLenum stream, GLshort x);
typedef void __stdcall gl_vertex_stream1sv_ati_t(GLenum stream, const GLshort *coords);
typedef void __stdcall gl_vertex_stream2d_ati_t(GLenum stream, GLdouble x, GLdouble y);
typedef void __stdcall gl_vertex_stream2dv_ati_t(GLenum stream, const GLdouble *coords);
typedef void __stdcall gl_vertex_stream2f_ati_t(GLenum stream, GLfloat x, GLfloat y);
typedef void __stdcall gl_vertex_stream2fv_ati_t(GLenum stream, const GLfloat *coords);
typedef void __stdcall gl_vertex_stream2i_ati_t(GLenum stream, GLint x, GLint y);
typedef void __stdcall gl_vertex_stream2iv_ati_t(GLenum stream, const GLint *coords);
typedef void __stdcall gl_vertex_stream2s_ati_t(GLenum stream, GLshort x, GLshort y);
typedef void __stdcall gl_vertex_stream2sv_ati_t(GLenum stream, const GLshort *coords);
typedef void __stdcall gl_vertex_stream3d_ati_t(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_vertex_stream3dv_ati_t(GLenum stream, const GLdouble *coords);
typedef void __stdcall gl_vertex_stream3f_ati_t(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_vertex_stream3fv_ati_t(GLenum stream, const GLfloat *coords);
typedef void __stdcall gl_vertex_stream3i_ati_t(GLenum stream, GLint x, GLint y, GLint z);
typedef void __stdcall gl_vertex_stream3iv_ati_t(GLenum stream, const GLint *coords);
typedef void __stdcall gl_vertex_stream3s_ati_t(GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void __stdcall gl_vertex_stream3sv_ati_t(GLenum stream, const GLshort *coords);
typedef void __stdcall gl_vertex_stream4d_ati_t(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_vertex_stream4dv_ati_t(GLenum stream, const GLdouble *coords);
typedef void __stdcall gl_vertex_stream4f_ati_t(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_vertex_stream4fv_ati_t(GLenum stream, const GLfloat *coords);
typedef void __stdcall gl_vertex_stream4i_ati_t(GLenum stream, GLint x, GLint y, GLint z, GLint w);
typedef void __stdcall gl_vertex_stream4iv_ati_t(GLenum stream, const GLint *coords);
typedef void __stdcall gl_vertex_stream4s_ati_t(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void __stdcall gl_vertex_stream4sv_ati_t(GLenum stream, const GLshort *coords);
typedef void __stdcall gl_vertex_weight_pointer_ext_t(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_vertex_weightf_ext_t(GLfloat weight);
typedef void __stdcall gl_vertex_weightfv_ext_t(const GLfloat *weight);
typedef void __stdcall gl_vertex_weighth_nv_t(GLhalfNV weight);
typedef void __stdcall gl_vertex_weighthv_nv_t(const GLhalfNV *weight);
typedef GLenum __stdcall gl_video_capture_nv_t(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
typedef void __stdcall gl_video_capture_stream_parameterdv_nv_t(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
typedef void __stdcall gl_video_capture_stream_parameterfv_nv_t(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
typedef void __stdcall gl_video_capture_stream_parameteriv_nv_t(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
typedef void __stdcall gl_viewport_arrayv_t(GLuint first, GLsizei count, const GLfloat *v);
typedef void __stdcall gl_viewport_indexedf_t(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void __stdcall gl_viewport_indexedfv_t(GLuint index, const GLfloat *v);
typedef void __stdcall gl_viewport_position_wscale_nv_t(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
typedef void __stdcall gl_viewport_swizzle_nv_t(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
typedef void __stdcall gl_wait_semaphore_ext_t(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts);
typedef void __stdcall gl_wait_sync_t(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void __stdcall gl_wait_vk_semaphore_nv_t(GLuint64 vkSemaphore);
typedef void __stdcall gl_weight_paths_nv_t(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
typedef void __stdcall gl_weight_pointer_arb_t(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void __stdcall gl_weightbv_arb_t(GLint size, const GLbyte *weights);
typedef void __stdcall gl_weightdv_arb_t(GLint size, const GLdouble *weights);
typedef void __stdcall gl_weightfv_arb_t(GLint size, const GLfloat *weights);
typedef void __stdcall gl_weightiv_arb_t(GLint size, const GLint *weights);
typedef void __stdcall gl_weightsv_arb_t(GLint size, const GLshort *weights);
typedef void __stdcall gl_weightubv_arb_t(GLint size, const GLubyte *weights);
typedef void __stdcall gl_weightuiv_arb_t(GLint size, const GLuint *weights);
typedef void __stdcall gl_weightusv_arb_t(GLint size, const GLushort *weights);
typedef void __stdcall gl_window_pos2d_t(GLdouble x, GLdouble y);
typedef void __stdcall gl_window_pos2d_arb_t(GLdouble x, GLdouble y);
typedef void __stdcall gl_window_pos2d_mesa_t(GLdouble x, GLdouble y);
typedef void __stdcall gl_window_pos2dv_t(const GLdouble *v);
typedef void __stdcall gl_window_pos2dv_arb_t(const GLdouble *v);
typedef void __stdcall gl_window_pos2dv_mesa_t(const GLdouble *v);
typedef void __stdcall gl_window_pos2f_t(GLfloat x, GLfloat y);
typedef void __stdcall gl_window_pos2f_arb_t(GLfloat x, GLfloat y);
typedef void __stdcall gl_window_pos2f_mesa_t(GLfloat x, GLfloat y);
typedef void __stdcall gl_window_pos2fv_t(const GLfloat *v);
typedef void __stdcall gl_window_pos2fv_arb_t(const GLfloat *v);
typedef void __stdcall gl_window_pos2fv_mesa_t(const GLfloat *v);
typedef void __stdcall gl_window_pos2i_t(GLint x, GLint y);
typedef void __stdcall gl_window_pos2i_arb_t(GLint x, GLint y);
typedef void __stdcall gl_window_pos2i_mesa_t(GLint x, GLint y);
typedef void __stdcall gl_window_pos2iv_t(const GLint *v);
typedef void __stdcall gl_window_pos2iv_arb_t(const GLint *v);
typedef void __stdcall gl_window_pos2iv_mesa_t(const GLint *v);
typedef void __stdcall gl_window_pos2s_t(GLshort x, GLshort y);
typedef void __stdcall gl_window_pos2s_arb_t(GLshort x, GLshort y);
typedef void __stdcall gl_window_pos2s_mesa_t(GLshort x, GLshort y);
typedef void __stdcall gl_window_pos2sv_t(const GLshort *v);
typedef void __stdcall gl_window_pos2sv_arb_t(const GLshort *v);
typedef void __stdcall gl_window_pos2sv_mesa_t(const GLshort *v);
typedef void __stdcall gl_window_pos3d_t(GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_window_pos3d_arb_t(GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_window_pos3d_mesa_t(GLdouble x, GLdouble y, GLdouble z);
typedef void __stdcall gl_window_pos3dv_t(const GLdouble *v);
typedef void __stdcall gl_window_pos3dv_arb_t(const GLdouble *v);
typedef void __stdcall gl_window_pos3dv_mesa_t(const GLdouble *v);
typedef void __stdcall gl_window_pos3f_t(GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_window_pos3f_arb_t(GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_window_pos3f_mesa_t(GLfloat x, GLfloat y, GLfloat z);
typedef void __stdcall gl_window_pos3fv_t(const GLfloat *v);
typedef void __stdcall gl_window_pos3fv_arb_t(const GLfloat *v);
typedef void __stdcall gl_window_pos3fv_mesa_t(const GLfloat *v);
typedef void __stdcall gl_window_pos3i_t(GLint x, GLint y, GLint z);
typedef void __stdcall gl_window_pos3i_arb_t(GLint x, GLint y, GLint z);
typedef void __stdcall gl_window_pos3i_mesa_t(GLint x, GLint y, GLint z);
typedef void __stdcall gl_window_pos3iv_t(const GLint *v);
typedef void __stdcall gl_window_pos3iv_arb_t(const GLint *v);
typedef void __stdcall gl_window_pos3iv_mesa_t(const GLint *v);
typedef void __stdcall gl_window_pos3s_t(GLshort x, GLshort y, GLshort z);
typedef void __stdcall gl_window_pos3s_arb_t(GLshort x, GLshort y, GLshort z);
typedef void __stdcall gl_window_pos3s_mesa_t(GLshort x, GLshort y, GLshort z);
typedef void __stdcall gl_window_pos3sv_t(const GLshort *v);
typedef void __stdcall gl_window_pos3sv_arb_t(const GLshort *v);
typedef void __stdcall gl_window_pos3sv_mesa_t(const GLshort *v);
typedef void __stdcall gl_window_pos4d_mesa_t(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void __stdcall gl_window_pos4dv_mesa_t(const GLdouble *v);
typedef void __stdcall gl_window_pos4f_mesa_t(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void __stdcall gl_window_pos4fv_mesa_t(const GLfloat *v);
typedef void __stdcall gl_window_pos4i_mesa_t(GLint x, GLint y, GLint z, GLint w);
typedef void __stdcall gl_window_pos4iv_mesa_t(const GLint *v);
typedef void __stdcall gl_window_pos4s_mesa_t(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void __stdcall gl_window_pos4sv_mesa_t(const GLshort *v);
typedef void __stdcall gl_window_rectangles_ext_t(GLenum mode, GLsizei count, const GLint *box);
typedef void __stdcall gl_write_mask_ext_t(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
#if defined(SOGL_WINDOWS)
typedef BOOL __stdcall wgl_associate_image_buffer_events_i3d_t(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count);
typedef BOOL __stdcall wgl_begin_frame_tracking_i3d_t(void);
typedef GLboolean __stdcall wgl_bind_display_color_table_ext_t(GLushort id);
typedef BOOL __stdcall wgl_bind_swap_barrier_nv_t(GLuint group, GLuint barrier);
typedef BOOL __stdcall wgl_bind_tex_image_arb_t(HPBUFFERARB hPbuffer, int iBuffer);
typedef BOOL __stdcall wgl_bind_video_capture_device_nv_t(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
typedef BOOL __stdcall wgl_bind_video_device_nv_t(HDC hDc, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
typedef BOOL __stdcall wgl_bind_video_image_nv_t(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
typedef VOID __stdcall wgl_blit_context_framebuffer_amd_t(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef BOOL __stdcall wgl_choose_pixel_format_arb_t(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
typedef BOOL __stdcall wgl_choose_pixel_format_ext_t(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
typedef BOOL __stdcall wgl_copy_image_sub_data_nv_t(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef HDC __stdcall wgl_create_affinity_dcnv_t(const HGPUNV *phGpuList);
typedef HGLRC __stdcall wgl_create_associated_context_amd_t(UINT id);
typedef HGLRC __stdcall wgl_create_associated_context_attribs_amd_t(UINT id, HGLRC hShareContext, const int *attribList);
typedef HANDLE __stdcall wgl_create_buffer_region_arb_t(HDC hDC, int iLayerPlane, UINT uType);
typedef HGLRC __stdcall wgl_create_context_attribs_arb_t(HDC hDC, HGLRC hShareContext, const int *attribList);
typedef GLboolean __stdcall wgl_create_display_color_table_ext_t(GLushort id);
typedef LPVOID __stdcall wgl_create_image_buffer_i3d_t(HDC hDC, DWORD dwSize, UINT uFlags);
typedef HPBUFFERARB __stdcall wgl_create_pbuffer_arb_t(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
typedef HPBUFFEREXT __stdcall wgl_create_pbuffer_ext_t(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
typedef BOOL __stdcall wgl_dxclose_device_nv_t(HANDLE hDevice);
typedef BOOL __stdcall wgl_dxlock_objects_nv_t(HANDLE hDevice, GLint count, HANDLE *hObjects);
typedef BOOL __stdcall wgl_dxobject_access_nv_t(HANDLE hObject, GLenum access);
typedef HANDLE __stdcall wgl_dxopen_device_nv_t(void *dxDevice);
typedef HANDLE __stdcall wgl_dxregister_object_nv_t(HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access);
typedef BOOL __stdcall wgl_dxset_resource_share_handle_nv_t(void *dxObject, HANDLE shareHandle);
typedef BOOL __stdcall wgl_dxunlock_objects_nv_t(HANDLE hDevice, GLint count, HANDLE *hObjects);
typedef BOOL __stdcall wgl_dxunregister_object_nv_t(HANDLE hDevice, HANDLE hObject);
typedef BOOL __stdcall wgl_delay_before_swap_nv_t(HDC hDC, GLfloat seconds);
typedef BOOL __stdcall wgl_delete_associated_context_amd_t(HGLRC hglrc);
typedef VOID __stdcall wgl_delete_buffer_region_arb_t(HANDLE hRegion);
typedef BOOL __stdcall wgl_delete_dcnv_t(HDC hdc);
typedef VOID __stdcall wgl_destroy_display_color_table_ext_t(GLushort id);
typedef BOOL __stdcall wgl_destroy_image_buffer_i3d_t(HDC hDC, LPVOID pAddress);
typedef BOOL __stdcall wgl_destroy_pbuffer_arb_t(HPBUFFERARB hPbuffer);
typedef BOOL __stdcall wgl_destroy_pbuffer_ext_t(HPBUFFEREXT hPbuffer);
typedef BOOL __stdcall wgl_disable_frame_lock_i3d_t(void);
typedef BOOL __stdcall wgl_disable_genlock_i3d_t(HDC hDC);
typedef BOOL __stdcall wgl_enable_frame_lock_i3d_t(void);
typedef BOOL __stdcall wgl_enable_genlock_i3d_t(HDC hDC);
typedef BOOL __stdcall wgl_end_frame_tracking_i3d_t(void);
typedef BOOL __stdcall wgl_enum_gpu_devices_nv_t(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
typedef BOOL __stdcall wgl_enum_gpus_from_affinity_dcnv_t(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
typedef BOOL __stdcall wgl_enum_gpus_nv_t(UINT iGpuIndex, HGPUNV *phGpu);
typedef UINT __stdcall wgl_enumerate_video_capture_devices_nv_t(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList);
typedef int __stdcall wgl_enumerate_video_devices_nv_t(HDC hDc, HVIDEOOUTPUTDEVICENV *phDeviceList);
typedef void __stdcall wgl_free_memory_nv_t(void *pointer);
typedef BOOL __stdcall wgl_genlock_sample_rate_i3d_t(HDC hDC, UINT uRate);
typedef BOOL __stdcall wgl_genlock_source_delay_i3d_t(HDC hDC, UINT uDelay);
typedef BOOL __stdcall wgl_genlock_source_edge_i3d_t(HDC hDC, UINT uEdge);
typedef BOOL __stdcall wgl_genlock_source_i3d_t(HDC hDC, UINT uSource);
typedef UINT __stdcall wgl_get_context_gpuidamd_t(HGLRC hglrc);
typedef HGLRC __stdcall wgl_get_current_associated_context_amd_t(void);
typedef HDC __stdcall wgl_get_current_read_dcarb_t(void);
typedef HDC __stdcall wgl_get_current_read_dcext_t(void);
typedef BOOL __stdcall wgl_get_digital_video_parameters_i3d_t(HDC hDC, int iAttribute, int *piValue);
typedef BOOL __stdcall wgl_get_frame_usage_i3d_t(float *pUsage);
typedef UINT __stdcall wgl_get_gpuids_amd_t(UINT maxCount, UINT *ids);
typedef INT __stdcall wgl_get_gpuinfo_amd_t(UINT id, INT property, GLenum dataType, UINT size, void *data);
typedef BOOL __stdcall wgl_get_gamma_table_i3d_t(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue);
typedef BOOL __stdcall wgl_get_gamma_table_parameters_i3d_t(HDC hDC, int iAttribute, int *piValue);
typedef BOOL __stdcall wgl_get_genlock_sample_rate_i3d_t(HDC hDC, UINT *uRate);
typedef BOOL __stdcall wgl_get_genlock_source_delay_i3d_t(HDC hDC, UINT *uDelay);
typedef BOOL __stdcall wgl_get_genlock_source_edge_i3d_t(HDC hDC, UINT *uEdge);
typedef BOOL __stdcall wgl_get_genlock_source_i3d_t(HDC hDC, UINT *uSource);
typedef BOOL __stdcall wgl_get_msc_rate_oml_t(HDC hdc, INT32 *numerator, INT32 *denominator);
typedef HDC __stdcall wgl_get_pbuffer_dcarb_t(HPBUFFERARB hPbuffer);
typedef HDC __stdcall wgl_get_pbuffer_dcext_t(HPBUFFEREXT hPbuffer);
typedef BOOL __stdcall wgl_get_pixel_format_attribfv_arb_t(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);
typedef BOOL __stdcall wgl_get_pixel_format_attribfv_ext_t(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues);
typedef BOOL __stdcall wgl_get_pixel_format_attribiv_arb_t(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);
typedef BOOL __stdcall wgl_get_pixel_format_attribiv_ext_t(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues);
typedef int __stdcall wgl_get_swap_interval_ext_t(void);
typedef BOOL __stdcall wgl_get_sync_values_oml_t(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc);
typedef BOOL __stdcall wgl_get_video_device_nv_t(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
typedef BOOL __stdcall wgl_get_video_info_nv_t(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
typedef BOOL __stdcall wgl_is_enabled_frame_lock_i3d_t(BOOL *pFlag);
typedef BOOL __stdcall wgl_is_enabled_genlock_i3d_t(HDC hDC, BOOL *pFlag);
typedef BOOL __stdcall wgl_join_swap_group_nv_t(HDC hDC, GLuint group);
typedef GLboolean __stdcall wgl_load_display_color_table_ext_t(const GLushort *table, GLuint length);
typedef BOOL __stdcall wgl_lock_video_capture_device_nv_t(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
typedef BOOL __stdcall wgl_make_associated_context_current_amd_t(HGLRC hglrc);
typedef BOOL __stdcall wgl_make_context_current_arb_t(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
typedef BOOL __stdcall wgl_make_context_current_ext_t(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
typedef BOOL __stdcall wgl_query_current_context_nv_t(int iAttribute, int *piValue);
typedef BOOL __stdcall wgl_query_frame_count_nv_t(HDC hDC, GLuint *count);
typedef BOOL __stdcall wgl_query_frame_lock_master_i3d_t(BOOL *pFlag);
typedef BOOL __stdcall wgl_query_frame_tracking_i3d_t(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
typedef BOOL __stdcall wgl_query_genlock_max_source_delay_i3d_t(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay);
typedef BOOL __stdcall wgl_query_max_swap_groups_nv_t(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
typedef BOOL __stdcall wgl_query_pbuffer_arb_t(HPBUFFERARB hPbuffer, int iAttribute, int *piValue);
typedef BOOL __stdcall wgl_query_pbuffer_ext_t(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue);
typedef BOOL __stdcall wgl_query_swap_group_nv_t(HDC hDC, GLuint *group, GLuint *barrier);
typedef BOOL __stdcall wgl_query_video_capture_device_nv_t(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
typedef BOOL __stdcall wgl_release_image_buffer_events_i3d_t(HDC hDC, const LPVOID *pAddress, UINT count);
typedef int __stdcall wgl_release_pbuffer_dcarb_t(HPBUFFERARB hPbuffer, HDC hDC);
typedef int __stdcall wgl_release_pbuffer_dcext_t(HPBUFFEREXT hPbuffer, HDC hDC);
typedef BOOL __stdcall wgl_release_tex_image_arb_t(HPBUFFERARB hPbuffer, int iBuffer);
typedef BOOL __stdcall wgl_release_video_capture_device_nv_t(HDC hDc, HVIDEOINPUTDEVICENV hDevice);
typedef BOOL __stdcall wgl_release_video_device_nv_t(HPVIDEODEV hVideoDevice);
typedef BOOL __stdcall wgl_release_video_image_nv_t(HPBUFFERARB hPbuffer, int iVideoBuffer);
typedef BOOL __stdcall wgl_reset_frame_count_nv_t(HDC hDC);
typedef BOOL __stdcall wgl_restore_buffer_region_arb_t(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
typedef BOOL __stdcall wgl_save_buffer_region_arb_t(HANDLE hRegion, int x, int y, int width, int height);
typedef BOOL __stdcall wgl_send_pbuffer_to_video_nv_t(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);
typedef BOOL __stdcall wgl_set_digital_video_parameters_i3d_t(HDC hDC, int iAttribute, const int *piValue);
typedef BOOL __stdcall wgl_set_gamma_table_i3d_t(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue);
typedef BOOL __stdcall wgl_set_gamma_table_parameters_i3d_t(HDC hDC, int iAttribute, const int *piValue);
typedef BOOL __stdcall wgl_set_pbuffer_attrib_arb_t(HPBUFFERARB hPbuffer, const int *piAttribList);
typedef BOOL __stdcall wgl_set_stereo_emitter_state3dl_t(HDC hDC, UINT uState);
typedef INT64 __stdcall wgl_swap_buffers_msc_oml_t(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
typedef BOOL __stdcall wgl_swap_interval_ext_t(int interval);
typedef INT64 __stdcall wgl_swap_layer_buffers_msc_oml_t(HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
typedef BOOL __stdcall wgl_wait_for_msc_oml_t(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc);
typedef BOOL __stdcall wgl_wait_for_sbc_oml_t(HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc);
#endif


#if defined(SOGL_LINUX)
typedef int __stdcall glx_bind_channel_to_window_sgix_t(Display *display, int screen, int channel, Window window);
typedef int __stdcall glx_bind_hyperpipe_sgix_t(Display *dpy, int hpId);
typedef Bool __stdcall glx_bind_swap_barrier_nv_t(Display *dpy, GLuint group, GLuint barrier);
typedef void __stdcall glx_bind_swap_barrier_sgix_t(Display *dpy, GLXDrawable drawable, int barrier);
typedef void __stdcall glx_bind_tex_image_ext_t(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list);
typedef int __stdcall glx_bind_video_capture_device_nv_t(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
typedef int __stdcall glx_bind_video_device_nv_t(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list);
typedef int __stdcall glx_bind_video_image_nv_t(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
typedef void __stdcall glx_blit_context_framebuffer_amd_t(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef int __stdcall glx_channel_rect_sgix_t(Display *display, int screen, int channel, int x, int y, int w, int h);
typedef int __stdcall glx_channel_rect_sync_sgix_t(Display *display, int screen, int channel, GLenum synctype);
typedef void __stdcall glx_copy_buffer_sub_data_nv_t(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void __stdcall glx_copy_image_sub_data_nv_t(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void __stdcall glx_copy_sub_buffer_mesa_t(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height);
typedef GLXContext __stdcall glx_create_associated_context_amd_t(unsigned int id, GLXContext share_list);
typedef GLXContext __stdcall glx_create_associated_context_attribs_amd_t(unsigned int id, GLXContext share_context, const int *attribList);
typedef GLXContext __stdcall glx_create_context_attribs_arb_t(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list);
typedef GLXContext __stdcall glx_create_context_with_config_sgix_t(Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
typedef GLXPbufferSGIX __stdcall glx_create_glxpbuffer_sgix_t(Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list);
typedef GLXPixmap __stdcall glx_create_glxpixmap_mesa_t(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);
typedef GLXPixmap __stdcall glx_create_glxpixmap_with_config_sgix_t(Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap);
typedef GLXContext __stdcall glx_create_new_context_t(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef GLXPbuffer __stdcall glx_create_pbuffer_t(Display *dpy, GLXFBConfig config, const int *attrib_list);
typedef GLXPixmap __stdcall glx_create_pixmap_t(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
typedef GLXWindow __stdcall glx_create_window_t(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
typedef void __stdcall glx_cushion_sgi_t(Display *dpy, Window window, float cushion);
typedef Bool __stdcall glx_delay_before_swap_nv_t(Display *dpy, GLXDrawable drawable, GLfloat seconds);
typedef Bool __stdcall glx_delete_associated_context_amd_t(GLXContext ctx);
typedef void __stdcall glx_destroy_glxpbuffer_sgix_t(Display *dpy, GLXPbufferSGIX pbuf);
typedef int __stdcall glx_destroy_hyperpipe_config_sgix_t(Display *dpy, int hpId);
typedef void __stdcall glx_destroy_pbuffer_t(Display *dpy, GLXPbuffer pbuf);
typedef void __stdcall glx_destroy_pixmap_t(Display *dpy, GLXPixmap pixmap);
typedef void __stdcall glx_destroy_window_t(Display *dpy, GLXWindow win);
typedef void __stdcall glx_free_context_ext_t(Display *dpy, GLXContext context);
typedef GLXContextID __stdcall glx_get_context_idext_t(const GLXContext context);
typedef GLXContext __stdcall glx_get_current_associated_context_amd_t(void);
typedef GLXDrawable __stdcall glx_get_current_read_drawable_t(void);
typedef GLXDrawable __stdcall glx_get_current_read_drawable_sgi_t(void);
typedef int __stdcall glx_get_fbconfig_attrib_t(Display *dpy, GLXFBConfig config, int attribute, int *value);
typedef int __stdcall glx_get_fbconfig_attrib_sgix_t(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value);
typedef GLXFBConfigSGIX __stdcall glx_get_fbconfig_from_visual_sgix_t(Display *dpy, XVisualInfo *vis);
typedef int __stdcall glx_get_gpuinfo_amd_t(unsigned int id, int property, GLenum dataType, unsigned int size, void *data);
typedef Bool __stdcall glx_get_msc_rate_oml_t(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator);
typedef __GLXextFuncPtr __stdcall glx_get_proc_address_arb_t(const GLubyte *procName);
typedef void __stdcall glx_get_selected_event_t(Display *dpy, GLXDrawable draw, unsigned long *event_mask);
typedef void __stdcall glx_get_selected_event_sgix_t(Display *dpy, GLXDrawable drawable, unsigned long *mask);
typedef int __stdcall glx_get_swap_interval_mesa_t(void);
typedef Bool __stdcall glx_get_sync_values_oml_t(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef Status __stdcall glx_get_transparent_index_sun_t(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex);
typedef int __stdcall glx_get_video_device_nv_t(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
typedef int __stdcall glx_get_video_info_nv_t(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
typedef int __stdcall glx_get_video_sync_sgi_t(unsigned int *count);
typedef int __stdcall glx_hyperpipe_attrib_sgix_t(Display *dpy, int timeSlice, int attrib, int size, void *attribList);
typedef int __stdcall glx_hyperpipe_config_sgix_t(Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);
typedef GLXContext __stdcall glx_import_context_ext_t(Display *dpy, GLXContextID contextID);
typedef Bool __stdcall glx_join_swap_group_nv_t(Display *dpy, GLXDrawable drawable, GLuint group);
typedef void __stdcall glx_join_swap_group_sgix_t(Display *dpy, GLXDrawable drawable, GLXDrawable member);
typedef void __stdcall glx_lock_video_capture_device_nv_t(Display *dpy, GLXVideoCaptureDeviceNV device);
typedef Bool __stdcall glx_make_associated_context_current_amd_t(GLXContext ctx);
typedef Bool __stdcall glx_make_context_current_t(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef Bool __stdcall glx_make_current_read_sgi_t(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef void __stdcall glx_named_copy_buffer_sub_data_nv_t(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef int __stdcall glx_query_channel_deltas_sgix_t(Display *display, int screen, int channel, int *x, int *y, int *w, int *h);
typedef int __stdcall glx_query_channel_rect_sgix_t(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
typedef int __stdcall glx_query_context_t(Display *dpy, GLXContext ctx, int attribute, int *value);
typedef int __stdcall glx_query_context_info_ext_t(Display *dpy, GLXContext context, int attribute, int *value);
typedef Bool __stdcall glx_query_current_renderer_integer_mesa_t(int attribute, unsigned int *value);
typedef void __stdcall glx_query_drawable_t(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
typedef Bool __stdcall glx_query_frame_count_nv_t(Display *dpy, int screen, GLuint *count);
typedef void __stdcall glx_query_glxpbuffer_sgix_t(Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value);
typedef int __stdcall glx_query_hyperpipe_attrib_sgix_t(Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);
typedef int __stdcall glx_query_hyperpipe_best_attrib_sgix_t(Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);
typedef Bool __stdcall glx_query_max_swap_barriers_sgix_t(Display *dpy, int screen, int *max);
typedef Bool __stdcall glx_query_max_swap_groups_nv_t(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers);
typedef Bool __stdcall glx_query_renderer_integer_mesa_t(Display *dpy, int screen, int renderer, int attribute, unsigned int *value);
typedef Bool __stdcall glx_query_swap_group_nv_t(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier);
typedef int __stdcall glx_query_video_capture_device_nv_t(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value);
typedef Bool __stdcall glx_release_buffers_mesa_t(Display *dpy, GLXDrawable drawable);
typedef void __stdcall glx_release_tex_image_ext_t(Display *dpy, GLXDrawable drawable, int buffer);
typedef void __stdcall glx_release_video_capture_device_nv_t(Display *dpy, GLXVideoCaptureDeviceNV device);
typedef int __stdcall glx_release_video_device_nv_t(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice);
typedef int __stdcall glx_release_video_image_nv_t(Display *dpy, GLXPbuffer pbuf);
typedef Bool __stdcall glx_reset_frame_count_nv_t(Display *dpy, int screen);
typedef void __stdcall glx_select_event_t(Display *dpy, GLXDrawable draw, unsigned long event_mask);
typedef void __stdcall glx_select_event_sgix_t(Display *dpy, GLXDrawable drawable, unsigned long mask);
typedef int __stdcall glx_send_pbuffer_to_video_nv_t(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock);
typedef GLboolean __stdcall glx_set3dfx_mode_mesa_t(GLint mode);
typedef int64_t __stdcall glx_swap_buffers_msc_oml_t(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
typedef void __stdcall glx_swap_interval_ext_t(Display *dpy, GLXDrawable drawable, int interval);
typedef int __stdcall glx_swap_interval_mesa_t(unsigned int interval);
typedef int __stdcall glx_swap_interval_sgi_t(int interval);
typedef Bool __stdcall glx_wait_for_msc_oml_t(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef Bool __stdcall glx_wait_for_sbc_oml_t(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef int __stdcall glx_wait_video_sync_sgi_t(int divisor, int remainder, unsigned int *count);
#endif


//Function pointers
struct GL {
	gl_acquire_keyed_mutex_win32ext_t* AcquireKeyedMutexWin32EXT;
	gl_active_program_ext_t* ActiveProgramEXT;
	gl_active_shader_program_t* ActiveShaderProgram;
	gl_active_stencil_face_ext_t* ActiveStencilFaceEXT;
	gl_active_texture_t* ActiveTexture;
	gl_active_texture_arb_t* ActiveTextureARB;
	gl_active_varying_nv_t* ActiveVaryingNV;
	gl_alpha_fragment_op1ati_t* AlphaFragmentOp1ATI;
	gl_alpha_fragment_op2ati_t* AlphaFragmentOp2ATI;
	gl_alpha_fragment_op3ati_t* AlphaFragmentOp3ATI;
	gl_apply_texture_ext_t* ApplyTextureEXT;
	gl_are_programs_resident_nv_t* AreProgramsResidentNV;
	gl_are_textures_resident_ext_t* AreTexturesResidentEXT;
	gl_array_element_ext_t* ArrayElementEXT;
	gl_array_object_ati_t* ArrayObjectATI;
	gl_async_marker_sgix_t* AsyncMarkerSGIX;
	gl_attach_object_arb_t* AttachObjectARB;
	gl_attach_shader_t* AttachShader;
	gl_begin_conditional_render_t* BeginConditionalRender;
	gl_begin_conditional_render_nv_t* BeginConditionalRenderNV;
	gl_begin_conditional_render_nvx_t* BeginConditionalRenderNVX;
	gl_begin_fragment_shader_ati_t* BeginFragmentShaderATI;
	gl_begin_occlusion_query_nv_t* BeginOcclusionQueryNV;
	gl_begin_perf_monitor_amd_t* BeginPerfMonitorAMD;
	gl_begin_perf_query_intel_t* BeginPerfQueryINTEL;
	gl_begin_query_t* BeginQuery;
	gl_begin_query_arb_t* BeginQueryARB;
	gl_begin_query_indexed_t* BeginQueryIndexed;
	gl_begin_transform_feedback_t* BeginTransformFeedback;
	gl_begin_transform_feedback_ext_t* BeginTransformFeedbackEXT;
	gl_begin_transform_feedback_nv_t* BeginTransformFeedbackNV;
	gl_begin_vertex_shader_ext_t* BeginVertexShaderEXT;
	gl_begin_video_capture_nv_t* BeginVideoCaptureNV;
	gl_bind_attrib_location_t* BindAttribLocation;
	gl_bind_attrib_location_arb_t* BindAttribLocationARB;
	gl_bind_buffer_t* BindBuffer;
	gl_bind_buffer_arb_t* BindBufferARB;
	gl_bind_buffer_base_t* BindBufferBase;
	gl_bind_buffer_base_ext_t* BindBufferBaseEXT;
	gl_bind_buffer_base_nv_t* BindBufferBaseNV;
	gl_bind_buffer_offset_ext_t* BindBufferOffsetEXT;
	gl_bind_buffer_offset_nv_t* BindBufferOffsetNV;
	gl_bind_buffer_range_t* BindBufferRange;
	gl_bind_buffer_range_ext_t* BindBufferRangeEXT;
	gl_bind_buffer_range_nv_t* BindBufferRangeNV;
	gl_bind_buffers_base_t* BindBuffersBase;
	gl_bind_buffers_range_t* BindBuffersRange;
	gl_bind_frag_data_location_t* BindFragDataLocation;
	gl_bind_frag_data_location_ext_t* BindFragDataLocationEXT;
	gl_bind_frag_data_location_indexed_t* BindFragDataLocationIndexed;
	gl_bind_fragment_shader_ati_t* BindFragmentShaderATI;
	gl_bind_framebuffer_t* BindFramebuffer;
	gl_bind_framebuffer_ext_t* BindFramebufferEXT;
	gl_bind_image_texture_t* BindImageTexture;
	gl_bind_image_texture_ext_t* BindImageTextureEXT;
	gl_bind_image_textures_t* BindImageTextures;
	gl_bind_light_parameter_ext_t* BindLightParameterEXT;
	gl_bind_material_parameter_ext_t* BindMaterialParameterEXT;
	gl_bind_multi_texture_ext_t* BindMultiTextureEXT;
	gl_bind_parameter_ext_t* BindParameterEXT;
	gl_bind_program_arb_t* BindProgramARB;
	gl_bind_program_nv_t* BindProgramNV;
	gl_bind_program_pipeline_t* BindProgramPipeline;
	gl_bind_renderbuffer_t* BindRenderbuffer;
	gl_bind_renderbuffer_ext_t* BindRenderbufferEXT;
	gl_bind_sampler_t* BindSampler;
	gl_bind_samplers_t* BindSamplers;
	gl_bind_tex_gen_parameter_ext_t* BindTexGenParameterEXT;
	gl_bind_texture_ext_t* BindTextureEXT;
	gl_bind_texture_unit_t* BindTextureUnit;
	gl_bind_texture_unit_parameter_ext_t* BindTextureUnitParameterEXT;
	gl_bind_textures_t* BindTextures;
	gl_bind_transform_feedback_t* BindTransformFeedback;
	gl_bind_transform_feedback_nv_t* BindTransformFeedbackNV;
	gl_bind_vertex_array_t* BindVertexArray;
	gl_bind_vertex_array_apple_t* BindVertexArrayAPPLE;
	gl_bind_vertex_buffer_t* BindVertexBuffer;
	gl_bind_vertex_buffers_t* BindVertexBuffers;
	gl_bind_vertex_shader_ext_t* BindVertexShaderEXT;
	gl_bind_video_capture_stream_buffer_nv_t* BindVideoCaptureStreamBufferNV;
	gl_bind_video_capture_stream_texture_nv_t* BindVideoCaptureStreamTextureNV;
	gl_binormal_pointer_ext_t* BinormalPointerEXT;
	gl_blend_barrier_khr_t* BlendBarrierKHR;
	gl_blend_barrier_nv_t* BlendBarrierNV;
	gl_blend_color_t* BlendColor;
	gl_blend_color_ext_t* BlendColorEXT;
	gl_blend_equation_t* BlendEquation;
	gl_blend_equation_ext_t* BlendEquationEXT;
	gl_blend_equation_indexed_amd_t* BlendEquationIndexedAMD;
	gl_blend_equation_separate_t* BlendEquationSeparate;
	gl_blend_equation_separate_ext_t* BlendEquationSeparateEXT;
	gl_blend_equation_separate_indexed_amd_t* BlendEquationSeparateIndexedAMD;
	gl_blend_equation_separatei_t* BlendEquationSeparatei;
	gl_blend_equation_separatei_arb_t* BlendEquationSeparateiARB;
	gl_blend_equationi_t* BlendEquationi;
	gl_blend_equationi_arb_t* BlendEquationiARB;
	gl_blend_func_indexed_amd_t* BlendFuncIndexedAMD;
	gl_blend_func_separate_t* BlendFuncSeparate;
	gl_blend_func_separate_ext_t* BlendFuncSeparateEXT;
	gl_blend_func_separate_indexed_amd_t* BlendFuncSeparateIndexedAMD;
	gl_blend_func_separatei_t* BlendFuncSeparatei;
	gl_blend_func_separatei_arb_t* BlendFuncSeparateiARB;
	gl_blend_funci_t* BlendFunci;
	gl_blend_funci_arb_t* BlendFunciARB;
	gl_blend_parameteri_nv_t* BlendParameteriNV;
	gl_blit_framebuffer_t* BlitFramebuffer;
	gl_blit_framebuffer_ext_t* BlitFramebufferEXT;
	gl_blit_named_framebuffer_t* BlitNamedFramebuffer;
	gl_buffer_address_range_nv_t* BufferAddressRangeNV;
	gl_buffer_data_t* BufferData;
	gl_buffer_data_arb_t* BufferDataARB;
	gl_buffer_page_commitment_arb_t* BufferPageCommitmentARB;
	gl_buffer_parameteri_apple_t* BufferParameteriAPPLE;
	gl_buffer_storage_t* BufferStorage;
	gl_buffer_storage_external_ext_t* BufferStorageExternalEXT;
	gl_buffer_storage_mem_ext_t* BufferStorageMemEXT;
	gl_buffer_sub_data_t* BufferSubData;
	gl_buffer_sub_data_arb_t* BufferSubDataARB;
	gl_call_command_list_nv_t* CallCommandListNV;
	gl_check_framebuffer_status_t* CheckFramebufferStatus;
	gl_check_framebuffer_status_ext_t* CheckFramebufferStatusEXT;
	gl_check_named_framebuffer_status_t* CheckNamedFramebufferStatus;
	gl_check_named_framebuffer_status_ext_t* CheckNamedFramebufferStatusEXT;
	gl_clamp_color_t* ClampColor;
	gl_clamp_color_arb_t* ClampColorARB;
	gl_clear_buffer_data_t* ClearBufferData;
	gl_clear_buffer_sub_data_t* ClearBufferSubData;
	gl_clear_bufferfi_t* ClearBufferfi;
	gl_clear_bufferfv_t* ClearBufferfv;
	gl_clear_bufferiv_t* ClearBufferiv;
	gl_clear_bufferuiv_t* ClearBufferuiv;
	gl_clear_color_ii_ext_t* ClearColorIiEXT;
	gl_clear_color_iui_ext_t* ClearColorIuiEXT;
	gl_clear_depthd_nv_t* ClearDepthdNV;
	gl_clear_depthf_t* ClearDepthf;
	gl_clear_named_buffer_data_t* ClearNamedBufferData;
	gl_clear_named_buffer_data_ext_t* ClearNamedBufferDataEXT;
	gl_clear_named_buffer_sub_data_t* ClearNamedBufferSubData;
	gl_clear_named_buffer_sub_data_ext_t* ClearNamedBufferSubDataEXT;
	gl_clear_named_framebufferfi_t* ClearNamedFramebufferfi;
	gl_clear_named_framebufferfv_t* ClearNamedFramebufferfv;
	gl_clear_named_framebufferiv_t* ClearNamedFramebufferiv;
	gl_clear_named_framebufferuiv_t* ClearNamedFramebufferuiv;
	gl_clear_tex_image_t* ClearTexImage;
	gl_clear_tex_sub_image_t* ClearTexSubImage;
	gl_client_active_texture_t* ClientActiveTexture;
	gl_client_active_texture_arb_t* ClientActiveTextureARB;
	gl_client_active_vertex_stream_ati_t* ClientActiveVertexStreamATI;
	gl_client_attrib_default_ext_t* ClientAttribDefaultEXT;
	gl_client_wait_sync_t* ClientWaitSync;
	gl_clip_control_t* ClipControl;
	gl_color3f_vertex3f_sun_t* Color3fVertex3fSUN;
	gl_color3f_vertex3fv_sun_t* Color3fVertex3fvSUN;
	gl_color3h_nv_t* Color3hNV;
	gl_color3hv_nv_t* Color3hvNV;
	gl_color4f_normal3f_vertex3f_sun_t* Color4fNormal3fVertex3fSUN;
	gl_color4f_normal3f_vertex3fv_sun_t* Color4fNormal3fVertex3fvSUN;
	gl_color4h_nv_t* Color4hNV;
	gl_color4hv_nv_t* Color4hvNV;
	gl_color4ub_vertex2f_sun_t* Color4ubVertex2fSUN;
	gl_color4ub_vertex2fv_sun_t* Color4ubVertex2fvSUN;
	gl_color4ub_vertex3f_sun_t* Color4ubVertex3fSUN;
	gl_color4ub_vertex3fv_sun_t* Color4ubVertex3fvSUN;
	gl_color_format_nv_t* ColorFormatNV;
	gl_color_fragment_op1ati_t* ColorFragmentOp1ATI;
	gl_color_fragment_op2ati_t* ColorFragmentOp2ATI;
	gl_color_fragment_op3ati_t* ColorFragmentOp3ATI;
	gl_color_mask_indexed_ext_t* ColorMaskIndexedEXT;
	gl_color_maski_t* ColorMaski;
	gl_color_p3ui_t* ColorP3ui;
	gl_color_p3uiv_t* ColorP3uiv;
	gl_color_p4ui_t* ColorP4ui;
	gl_color_p4uiv_t* ColorP4uiv;
	gl_color_pointer_ext_t* ColorPointerEXT;
	gl_color_pointer_list_ibm_t* ColorPointerListIBM;
	gl_color_pointerv_intel_t* ColorPointervINTEL;
	gl_color_sub_table_t* ColorSubTable;
	gl_color_sub_table_ext_t* ColorSubTableEXT;
	gl_color_table_t* ColorTable;
	gl_color_table_ext_t* ColorTableEXT;
	gl_color_table_parameterfv_t* ColorTableParameterfv;
	gl_color_table_parameterfv_sgi_t* ColorTableParameterfvSGI;
	gl_color_table_parameteriv_t* ColorTableParameteriv;
	gl_color_table_parameteriv_sgi_t* ColorTableParameterivSGI;
	gl_color_table_sgi_t* ColorTableSGI;
	gl_combiner_input_nv_t* CombinerInputNV;
	gl_combiner_output_nv_t* CombinerOutputNV;
	gl_combiner_parameterf_nv_t* CombinerParameterfNV;
	gl_combiner_parameterfv_nv_t* CombinerParameterfvNV;
	gl_combiner_parameteri_nv_t* CombinerParameteriNV;
	gl_combiner_parameteriv_nv_t* CombinerParameterivNV;
	gl_combiner_stage_parameterfv_nv_t* CombinerStageParameterfvNV;
	gl_command_list_segments_nv_t* CommandListSegmentsNV;
	gl_compile_command_list_nv_t* CompileCommandListNV;
	gl_compile_shader_t* CompileShader;
	gl_compile_shader_arb_t* CompileShaderARB;
	gl_compile_shader_include_arb_t* CompileShaderIncludeARB;
	gl_compressed_multi_tex_image1dext_t* CompressedMultiTexImage1DEXT;
	gl_compressed_multi_tex_image2dext_t* CompressedMultiTexImage2DEXT;
	gl_compressed_multi_tex_image3dext_t* CompressedMultiTexImage3DEXT;
	gl_compressed_multi_tex_sub_image1dext_t* CompressedMultiTexSubImage1DEXT;
	gl_compressed_multi_tex_sub_image2dext_t* CompressedMultiTexSubImage2DEXT;
	gl_compressed_multi_tex_sub_image3dext_t* CompressedMultiTexSubImage3DEXT;
	gl_compressed_tex_image1d_t* CompressedTexImage1D;
	gl_compressed_tex_image1darb_t* CompressedTexImage1DARB;
	gl_compressed_tex_image2d_t* CompressedTexImage2D;
	gl_compressed_tex_image2darb_t* CompressedTexImage2DARB;
	gl_compressed_tex_image3d_t* CompressedTexImage3D;
	gl_compressed_tex_image3darb_t* CompressedTexImage3DARB;
	gl_compressed_tex_sub_image1d_t* CompressedTexSubImage1D;
	gl_compressed_tex_sub_image1darb_t* CompressedTexSubImage1DARB;
	gl_compressed_tex_sub_image2d_t* CompressedTexSubImage2D;
	gl_compressed_tex_sub_image2darb_t* CompressedTexSubImage2DARB;
	gl_compressed_tex_sub_image3d_t* CompressedTexSubImage3D;
	gl_compressed_tex_sub_image3darb_t* CompressedTexSubImage3DARB;
	gl_compressed_texture_image1dext_t* CompressedTextureImage1DEXT;
	gl_compressed_texture_image2dext_t* CompressedTextureImage2DEXT;
	gl_compressed_texture_image3dext_t* CompressedTextureImage3DEXT;
	gl_compressed_texture_sub_image1d_t* CompressedTextureSubImage1D;
	gl_compressed_texture_sub_image1dext_t* CompressedTextureSubImage1DEXT;
	gl_compressed_texture_sub_image2d_t* CompressedTextureSubImage2D;
	gl_compressed_texture_sub_image2dext_t* CompressedTextureSubImage2DEXT;
	gl_compressed_texture_sub_image3d_t* CompressedTextureSubImage3D;
	gl_compressed_texture_sub_image3dext_t* CompressedTextureSubImage3DEXT;
	gl_conservative_raster_parameterf_nv_t* ConservativeRasterParameterfNV;
	gl_conservative_raster_parameteri_nv_t* ConservativeRasterParameteriNV;
	gl_convolution_filter1d_t* ConvolutionFilter1D;
	gl_convolution_filter1dext_t* ConvolutionFilter1DEXT;
	gl_convolution_filter2d_t* ConvolutionFilter2D;
	gl_convolution_filter2dext_t* ConvolutionFilter2DEXT;
	gl_convolution_parameterf_t* ConvolutionParameterf;
	gl_convolution_parameterf_ext_t* ConvolutionParameterfEXT;
	gl_convolution_parameterfv_t* ConvolutionParameterfv;
	gl_convolution_parameterfv_ext_t* ConvolutionParameterfvEXT;
	gl_convolution_parameteri_t* ConvolutionParameteri;
	gl_convolution_parameteri_ext_t* ConvolutionParameteriEXT;
	gl_convolution_parameteriv_t* ConvolutionParameteriv;
	gl_convolution_parameteriv_ext_t* ConvolutionParameterivEXT;
	gl_copy_buffer_sub_data_t* CopyBufferSubData;
	gl_copy_color_sub_table_t* CopyColorSubTable;
	gl_copy_color_sub_table_ext_t* CopyColorSubTableEXT;
	gl_copy_color_table_t* CopyColorTable;
	gl_copy_color_table_sgi_t* CopyColorTableSGI;
	gl_copy_convolution_filter1d_t* CopyConvolutionFilter1D;
	gl_copy_convolution_filter1dext_t* CopyConvolutionFilter1DEXT;
	gl_copy_convolution_filter2d_t* CopyConvolutionFilter2D;
	gl_copy_convolution_filter2dext_t* CopyConvolutionFilter2DEXT;
	gl_copy_image_sub_data_t* CopyImageSubData;
	gl_copy_image_sub_data_nv_t* CopyImageSubDataNV;
	gl_copy_multi_tex_image1dext_t* CopyMultiTexImage1DEXT;
	gl_copy_multi_tex_image2dext_t* CopyMultiTexImage2DEXT;
	gl_copy_multi_tex_sub_image1dext_t* CopyMultiTexSubImage1DEXT;
	gl_copy_multi_tex_sub_image2dext_t* CopyMultiTexSubImage2DEXT;
	gl_copy_multi_tex_sub_image3dext_t* CopyMultiTexSubImage3DEXT;
	gl_copy_named_buffer_sub_data_t* CopyNamedBufferSubData;
	gl_copy_path_nv_t* CopyPathNV;
	gl_copy_tex_image1dext_t* CopyTexImage1DEXT;
	gl_copy_tex_image2dext_t* CopyTexImage2DEXT;
	gl_copy_tex_sub_image1dext_t* CopyTexSubImage1DEXT;
	gl_copy_tex_sub_image2dext_t* CopyTexSubImage2DEXT;
	gl_copy_tex_sub_image3d_t* CopyTexSubImage3D;
	gl_copy_tex_sub_image3dext_t* CopyTexSubImage3DEXT;
	gl_copy_texture_image1dext_t* CopyTextureImage1DEXT;
	gl_copy_texture_image2dext_t* CopyTextureImage2DEXT;
	gl_copy_texture_sub_image1d_t* CopyTextureSubImage1D;
	gl_copy_texture_sub_image1dext_t* CopyTextureSubImage1DEXT;
	gl_copy_texture_sub_image2d_t* CopyTextureSubImage2D;
	gl_copy_texture_sub_image2dext_t* CopyTextureSubImage2DEXT;
	gl_copy_texture_sub_image3d_t* CopyTextureSubImage3D;
	gl_copy_texture_sub_image3dext_t* CopyTextureSubImage3DEXT;
	gl_cover_fill_path_instanced_nv_t* CoverFillPathInstancedNV;
	gl_cover_fill_path_nv_t* CoverFillPathNV;
	gl_cover_stroke_path_instanced_nv_t* CoverStrokePathInstancedNV;
	gl_cover_stroke_path_nv_t* CoverStrokePathNV;
	gl_coverage_modulation_nv_t* CoverageModulationNV;
	gl_coverage_modulation_table_nv_t* CoverageModulationTableNV;
	gl_create_buffers_t* CreateBuffers;
	gl_create_command_lists_nv_t* CreateCommandListsNV;
	gl_create_framebuffers_t* CreateFramebuffers;
	gl_create_memory_objects_ext_t* CreateMemoryObjectsEXT;
	gl_create_perf_query_intel_t* CreatePerfQueryINTEL;
	gl_create_program_t* CreateProgram;
	gl_create_program_object_arb_t* CreateProgramObjectARB;
	gl_create_program_pipelines_t* CreateProgramPipelines;
	gl_create_queries_t* CreateQueries;
	gl_create_renderbuffers_t* CreateRenderbuffers;
	gl_create_samplers_t* CreateSamplers;
	gl_create_shader_t* CreateShader;
	gl_create_shader_object_arb_t* CreateShaderObjectARB;
	gl_create_shader_program_ext_t* CreateShaderProgramEXT;
	gl_create_shader_programv_t* CreateShaderProgramv;
	gl_create_states_nv_t* CreateStatesNV;
	gl_create_sync_from_clevent_arb_t* CreateSyncFromCLeventARB;
	gl_create_textures_t* CreateTextures;
	gl_create_transform_feedbacks_t* CreateTransformFeedbacks;
	gl_create_vertex_arrays_t* CreateVertexArrays;
	gl_cull_parameterdv_ext_t* CullParameterdvEXT;
	gl_cull_parameterfv_ext_t* CullParameterfvEXT;
	gl_current_palette_matrix_arb_t* CurrentPaletteMatrixARB;
	gl_debug_message_callback_t* DebugMessageCallback;
	gl_debug_message_callback_amd_t* DebugMessageCallbackAMD;
	gl_debug_message_callback_arb_t* DebugMessageCallbackARB;
	gl_debug_message_control_t* DebugMessageControl;
	gl_debug_message_control_arb_t* DebugMessageControlARB;
	gl_debug_message_enable_amd_t* DebugMessageEnableAMD;
	gl_debug_message_insert_t* DebugMessageInsert;
	gl_debug_message_insert_amd_t* DebugMessageInsertAMD;
	gl_debug_message_insert_arb_t* DebugMessageInsertARB;
	gl_deform_sgix_t* DeformSGIX;
	gl_delete_async_markers_sgix_t* DeleteAsyncMarkersSGIX;
	gl_delete_buffers_t* DeleteBuffers;
	gl_delete_buffers_arb_t* DeleteBuffersARB;
	gl_delete_command_lists_nv_t* DeleteCommandListsNV;
	gl_delete_fences_apple_t* DeleteFencesAPPLE;
	gl_delete_fences_nv_t* DeleteFencesNV;
	gl_delete_fragment_shader_ati_t* DeleteFragmentShaderATI;
	gl_delete_framebuffers_t* DeleteFramebuffers;
	gl_delete_framebuffers_ext_t* DeleteFramebuffersEXT;
	gl_delete_memory_objects_ext_t* DeleteMemoryObjectsEXT;
	gl_delete_named_string_arb_t* DeleteNamedStringARB;
	gl_delete_names_amd_t* DeleteNamesAMD;
	gl_delete_object_arb_t* DeleteObjectARB;
	gl_delete_occlusion_queries_nv_t* DeleteOcclusionQueriesNV;
	gl_delete_paths_nv_t* DeletePathsNV;
	gl_delete_perf_monitors_amd_t* DeletePerfMonitorsAMD;
	gl_delete_perf_query_intel_t* DeletePerfQueryINTEL;
	gl_delete_program_t* DeleteProgram;
	gl_delete_program_pipelines_t* DeleteProgramPipelines;
	gl_delete_programs_arb_t* DeleteProgramsARB;
	gl_delete_programs_nv_t* DeleteProgramsNV;
	gl_delete_queries_t* DeleteQueries;
	gl_delete_queries_arb_t* DeleteQueriesARB;
	gl_delete_renderbuffers_t* DeleteRenderbuffers;
	gl_delete_renderbuffers_ext_t* DeleteRenderbuffersEXT;
	gl_delete_samplers_t* DeleteSamplers;
	gl_delete_semaphores_ext_t* DeleteSemaphoresEXT;
	gl_delete_shader_t* DeleteShader;
	gl_delete_states_nv_t* DeleteStatesNV;
	gl_delete_sync_t* DeleteSync;
	gl_delete_textures_ext_t* DeleteTexturesEXT;
	gl_delete_transform_feedbacks_t* DeleteTransformFeedbacks;
	gl_delete_transform_feedbacks_nv_t* DeleteTransformFeedbacksNV;
	gl_delete_vertex_arrays_t* DeleteVertexArrays;
	gl_delete_vertex_arrays_apple_t* DeleteVertexArraysAPPLE;
	gl_delete_vertex_shader_ext_t* DeleteVertexShaderEXT;
	gl_depth_bounds_ext_t* DepthBoundsEXT;
	gl_depth_boundsd_nv_t* DepthBoundsdNV;
	gl_depth_range_arrayv_t* DepthRangeArrayv;
	gl_depth_range_indexed_t* DepthRangeIndexed;
	gl_depth_ranged_nv_t* DepthRangedNV;
	gl_depth_rangef_t* DepthRangef;
	gl_detach_object_arb_t* DetachObjectARB;
	gl_detach_shader_t* DetachShader;
	gl_detail_tex_func_sgis_t* DetailTexFuncSGIS;
	gl_disable_client_state_indexed_ext_t* DisableClientStateIndexedEXT;
	gl_disable_client_statei_ext_t* DisableClientStateiEXT;
	gl_disable_indexed_ext_t* DisableIndexedEXT;
	gl_disable_variant_client_state_ext_t* DisableVariantClientStateEXT;
	gl_disable_vertex_array_attrib_t* DisableVertexArrayAttrib;
	gl_disable_vertex_array_attrib_ext_t* DisableVertexArrayAttribEXT;
	gl_disable_vertex_array_ext_t* DisableVertexArrayEXT;
	gl_disable_vertex_attrib_apple_t* DisableVertexAttribAPPLE;
	gl_disable_vertex_attrib_array_t* DisableVertexAttribArray;
	gl_disable_vertex_attrib_array_arb_t* DisableVertexAttribArrayARB;
	gl_disablei_t* Disablei;
	gl_dispatch_compute_t* DispatchCompute;
	gl_dispatch_compute_group_size_arb_t* DispatchComputeGroupSizeARB;
	gl_dispatch_compute_indirect_t* DispatchComputeIndirect;
	gl_draw_arrays_ext_t* DrawArraysEXT;
	gl_draw_arrays_indirect_t* DrawArraysIndirect;
	gl_draw_arrays_instanced_t* DrawArraysInstanced;
	gl_draw_arrays_instanced_arb_t* DrawArraysInstancedARB;
	gl_draw_arrays_instanced_base_instance_t* DrawArraysInstancedBaseInstance;
	gl_draw_arrays_instanced_ext_t* DrawArraysInstancedEXT;
	gl_draw_buffers_t* DrawBuffers;
	gl_draw_buffers_arb_t* DrawBuffersARB;
	gl_draw_buffers_ati_t* DrawBuffersATI;
	gl_draw_commands_address_nv_t* DrawCommandsAddressNV;
	gl_draw_commands_nv_t* DrawCommandsNV;
	gl_draw_commands_states_address_nv_t* DrawCommandsStatesAddressNV;
	gl_draw_commands_states_nv_t* DrawCommandsStatesNV;
	gl_draw_element_array_apple_t* DrawElementArrayAPPLE;
	gl_draw_element_array_ati_t* DrawElementArrayATI;
	gl_draw_elements_base_vertex_t* DrawElementsBaseVertex;
	gl_draw_elements_indirect_t* DrawElementsIndirect;
	gl_draw_elements_instanced_t* DrawElementsInstanced;
	gl_draw_elements_instanced_arb_t* DrawElementsInstancedARB;
	gl_draw_elements_instanced_base_instance_t* DrawElementsInstancedBaseInstance;
	gl_draw_elements_instanced_base_vertex_t* DrawElementsInstancedBaseVertex;
	gl_draw_elements_instanced_base_vertex_base_instance_t* DrawElementsInstancedBaseVertexBaseInstance;
	gl_draw_elements_instanced_ext_t* DrawElementsInstancedEXT;
	gl_draw_range_element_array_apple_t* DrawRangeElementArrayAPPLE;
	gl_draw_range_element_array_ati_t* DrawRangeElementArrayATI;
	gl_draw_range_elements_t* DrawRangeElements;
	gl_draw_range_elements_base_vertex_t* DrawRangeElementsBaseVertex;
	gl_draw_range_elements_ext_t* DrawRangeElementsEXT;
	gl_draw_texture_nv_t* DrawTextureNV;
	gl_draw_transform_feedback_t* DrawTransformFeedback;
	gl_draw_transform_feedback_instanced_t* DrawTransformFeedbackInstanced;
	gl_draw_transform_feedback_nv_t* DrawTransformFeedbackNV;
	gl_draw_transform_feedback_stream_t* DrawTransformFeedbackStream;
	gl_draw_transform_feedback_stream_instanced_t* DrawTransformFeedbackStreamInstanced;
	gl_draw_vk_image_nv_t* DrawVkImageNV;
	gl_edge_flag_format_nv_t* EdgeFlagFormatNV;
	gl_edge_flag_pointer_ext_t* EdgeFlagPointerEXT;
	gl_edge_flag_pointer_list_ibm_t* EdgeFlagPointerListIBM;
	gl_element_pointer_apple_t* ElementPointerAPPLE;
	gl_element_pointer_ati_t* ElementPointerATI;
	gl_enable_client_state_indexed_ext_t* EnableClientStateIndexedEXT;
	gl_enable_client_statei_ext_t* EnableClientStateiEXT;
	gl_enable_indexed_ext_t* EnableIndexedEXT;
	gl_enable_variant_client_state_ext_t* EnableVariantClientStateEXT;
	gl_enable_vertex_array_attrib_t* EnableVertexArrayAttrib;
	gl_enable_vertex_array_attrib_ext_t* EnableVertexArrayAttribEXT;
	gl_enable_vertex_array_ext_t* EnableVertexArrayEXT;
	gl_enable_vertex_attrib_apple_t* EnableVertexAttribAPPLE;
	gl_enable_vertex_attrib_array_t* EnableVertexAttribArray;
	gl_enable_vertex_attrib_array_arb_t* EnableVertexAttribArrayARB;
	gl_enablei_t* Enablei;
	gl_end_conditional_render_t* EndConditionalRender;
	gl_end_conditional_render_nv_t* EndConditionalRenderNV;
	gl_end_conditional_render_nvx_t* EndConditionalRenderNVX;
	gl_end_fragment_shader_ati_t* EndFragmentShaderATI;
	gl_end_occlusion_query_nv_t* EndOcclusionQueryNV;
	gl_end_perf_monitor_amd_t* EndPerfMonitorAMD;
	gl_end_perf_query_intel_t* EndPerfQueryINTEL;
	gl_end_query_t* EndQuery;
	gl_end_query_arb_t* EndQueryARB;
	gl_end_query_indexed_t* EndQueryIndexed;
	gl_end_transform_feedback_t* EndTransformFeedback;
	gl_end_transform_feedback_ext_t* EndTransformFeedbackEXT;
	gl_end_transform_feedback_nv_t* EndTransformFeedbackNV;
	gl_end_vertex_shader_ext_t* EndVertexShaderEXT;
	gl_end_video_capture_nv_t* EndVideoCaptureNV;
	gl_eval_maps_nv_t* EvalMapsNV;
	gl_execute_program_nv_t* ExecuteProgramNV;
	gl_extract_component_ext_t* ExtractComponentEXT;
	gl_fence_sync_t* FenceSync;
	gl_final_combiner_input_nv_t* FinalCombinerInputNV;
	gl_finish_async_sgix_t* FinishAsyncSGIX;
	gl_finish_fence_apple_t* FinishFenceAPPLE;
	gl_finish_fence_nv_t* FinishFenceNV;
	gl_finish_object_apple_t* FinishObjectAPPLE;
	gl_finish_texture_sunx_t* FinishTextureSUNX;
	gl_flush_mapped_buffer_range_t* FlushMappedBufferRange;
	gl_flush_mapped_buffer_range_apple_t* FlushMappedBufferRangeAPPLE;
	gl_flush_mapped_named_buffer_range_t* FlushMappedNamedBufferRange;
	gl_flush_mapped_named_buffer_range_ext_t* FlushMappedNamedBufferRangeEXT;
	gl_flush_pixel_data_range_nv_t* FlushPixelDataRangeNV;
	gl_flush_raster_sgix_t* FlushRasterSGIX;
	gl_flush_vertex_array_range_apple_t* FlushVertexArrayRangeAPPLE;
	gl_flush_vertex_array_range_nv_t* FlushVertexArrayRangeNV;
	gl_fog_coord_format_nv_t* FogCoordFormatNV;
	gl_fog_coord_pointer_t* FogCoordPointer;
	gl_fog_coord_pointer_ext_t* FogCoordPointerEXT;
	gl_fog_coord_pointer_list_ibm_t* FogCoordPointerListIBM;
	gl_fog_coordd_t* FogCoordd;
	gl_fog_coordd_ext_t* FogCoorddEXT;
	gl_fog_coorddv_t* FogCoorddv;
	gl_fog_coorddv_ext_t* FogCoorddvEXT;
	gl_fog_coordf_t* FogCoordf;
	gl_fog_coordf_ext_t* FogCoordfEXT;
	gl_fog_coordfv_t* FogCoordfv;
	gl_fog_coordfv_ext_t* FogCoordfvEXT;
	gl_fog_coordh_nv_t* FogCoordhNV;
	gl_fog_coordhv_nv_t* FogCoordhvNV;
	gl_fog_func_sgis_t* FogFuncSGIS;
	gl_fragment_color_material_sgix_t* FragmentColorMaterialSGIX;
	gl_fragment_coverage_color_nv_t* FragmentCoverageColorNV;
	gl_fragment_light_modelf_sgix_t* FragmentLightModelfSGIX;
	gl_fragment_light_modelfv_sgix_t* FragmentLightModelfvSGIX;
	gl_fragment_light_modeli_sgix_t* FragmentLightModeliSGIX;
	gl_fragment_light_modeliv_sgix_t* FragmentLightModelivSGIX;
	gl_fragment_lightf_sgix_t* FragmentLightfSGIX;
	gl_fragment_lightfv_sgix_t* FragmentLightfvSGIX;
	gl_fragment_lighti_sgix_t* FragmentLightiSGIX;
	gl_fragment_lightiv_sgix_t* FragmentLightivSGIX;
	gl_fragment_materialf_sgix_t* FragmentMaterialfSGIX;
	gl_fragment_materialfv_sgix_t* FragmentMaterialfvSGIX;
	gl_fragment_materiali_sgix_t* FragmentMaterialiSGIX;
	gl_fragment_materialiv_sgix_t* FragmentMaterialivSGIX;
	gl_frame_terminator_gremedy_t* FrameTerminatorGREMEDY;
	gl_frame_zoom_sgix_t* FrameZoomSGIX;
	gl_framebuffer_draw_buffer_ext_t* FramebufferDrawBufferEXT;
	gl_framebuffer_draw_buffers_ext_t* FramebufferDrawBuffersEXT;
	gl_framebuffer_parameteri_t* FramebufferParameteri;
	gl_framebuffer_read_buffer_ext_t* FramebufferReadBufferEXT;
	gl_framebuffer_renderbuffer_t* FramebufferRenderbuffer;
	gl_framebuffer_renderbuffer_ext_t* FramebufferRenderbufferEXT;
	gl_framebuffer_sample_locationsfv_arb_t* FramebufferSampleLocationsfvARB;
	gl_framebuffer_sample_locationsfv_nv_t* FramebufferSampleLocationsfvNV;
	gl_framebuffer_sample_positionsfv_amd_t* FramebufferSamplePositionsfvAMD;
	gl_framebuffer_texture_t* FramebufferTexture;
	gl_framebuffer_texture1d_t* FramebufferTexture1D;
	gl_framebuffer_texture1dext_t* FramebufferTexture1DEXT;
	gl_framebuffer_texture2d_t* FramebufferTexture2D;
	gl_framebuffer_texture2dext_t* FramebufferTexture2DEXT;
	gl_framebuffer_texture3d_t* FramebufferTexture3D;
	gl_framebuffer_texture3dext_t* FramebufferTexture3DEXT;
	gl_framebuffer_texture_arb_t* FramebufferTextureARB;
	gl_framebuffer_texture_ext_t* FramebufferTextureEXT;
	gl_framebuffer_texture_face_arb_t* FramebufferTextureFaceARB;
	gl_framebuffer_texture_face_ext_t* FramebufferTextureFaceEXT;
	gl_framebuffer_texture_layer_t* FramebufferTextureLayer;
	gl_framebuffer_texture_layer_arb_t* FramebufferTextureLayerARB;
	gl_framebuffer_texture_layer_ext_t* FramebufferTextureLayerEXT;
	gl_framebuffer_texture_multiview_ovr_t* FramebufferTextureMultiviewOVR;
	gl_free_object_buffer_ati_t* FreeObjectBufferATI;
	gl_gen_async_markers_sgix_t* GenAsyncMarkersSGIX;
	gl_gen_buffers_t* GenBuffers;
	gl_gen_buffers_arb_t* GenBuffersARB;
	gl_gen_fences_apple_t* GenFencesAPPLE;
	gl_gen_fences_nv_t* GenFencesNV;
	gl_gen_fragment_shaders_ati_t* GenFragmentShadersATI;
	gl_gen_framebuffers_t* GenFramebuffers;
	gl_gen_framebuffers_ext_t* GenFramebuffersEXT;
	gl_gen_names_amd_t* GenNamesAMD;
	gl_gen_occlusion_queries_nv_t* GenOcclusionQueriesNV;
	gl_gen_paths_nv_t* GenPathsNV;
	gl_gen_perf_monitors_amd_t* GenPerfMonitorsAMD;
	gl_gen_program_pipelines_t* GenProgramPipelines;
	gl_gen_programs_arb_t* GenProgramsARB;
	gl_gen_programs_nv_t* GenProgramsNV;
	gl_gen_queries_t* GenQueries;
	gl_gen_queries_arb_t* GenQueriesARB;
	gl_gen_renderbuffers_t* GenRenderbuffers;
	gl_gen_renderbuffers_ext_t* GenRenderbuffersEXT;
	gl_gen_samplers_t* GenSamplers;
	gl_gen_semaphores_ext_t* GenSemaphoresEXT;
	gl_gen_symbols_ext_t* GenSymbolsEXT;
	gl_gen_textures_ext_t* GenTexturesEXT;
	gl_gen_transform_feedbacks_t* GenTransformFeedbacks;
	gl_gen_transform_feedbacks_nv_t* GenTransformFeedbacksNV;
	gl_gen_vertex_arrays_t* GenVertexArrays;
	gl_gen_vertex_arrays_apple_t* GenVertexArraysAPPLE;
	gl_gen_vertex_shaders_ext_t* GenVertexShadersEXT;
	gl_generate_mipmap_t* GenerateMipmap;
	gl_generate_mipmap_ext_t* GenerateMipmapEXT;
	gl_generate_multi_tex_mipmap_ext_t* GenerateMultiTexMipmapEXT;
	gl_generate_texture_mipmap_t* GenerateTextureMipmap;
	gl_generate_texture_mipmap_ext_t* GenerateTextureMipmapEXT;
	gl_get_active_atomic_counter_bufferiv_t* GetActiveAtomicCounterBufferiv;
	gl_get_active_attrib_t* GetActiveAttrib;
	gl_get_active_attrib_arb_t* GetActiveAttribARB;
	gl_get_active_subroutine_name_t* GetActiveSubroutineName;
	gl_get_active_subroutine_uniform_name_t* GetActiveSubroutineUniformName;
	gl_get_active_subroutine_uniformiv_t* GetActiveSubroutineUniformiv;
	gl_get_active_uniform_t* GetActiveUniform;
	gl_get_active_uniform_arb_t* GetActiveUniformARB;
	gl_get_active_uniform_block_name_t* GetActiveUniformBlockName;
	gl_get_active_uniform_blockiv_t* GetActiveUniformBlockiv;
	gl_get_active_uniform_name_t* GetActiveUniformName;
	gl_get_active_uniformsiv_t* GetActiveUniformsiv;
	gl_get_active_varying_nv_t* GetActiveVaryingNV;
	gl_get_array_objectfv_ati_t* GetArrayObjectfvATI;
	gl_get_array_objectiv_ati_t* GetArrayObjectivATI;
	gl_get_attached_objects_arb_t* GetAttachedObjectsARB;
	gl_get_attached_shaders_t* GetAttachedShaders;
	gl_get_attrib_location_t* GetAttribLocation;
	gl_get_attrib_location_arb_t* GetAttribLocationARB;
	gl_get_boolean_indexedv_ext_t* GetBooleanIndexedvEXT;
	gl_get_booleani_v_t* GetBooleani_v;
	gl_get_buffer_parameteri64v_t* GetBufferParameteri64v;
	gl_get_buffer_parameteriv_t* GetBufferParameteriv;
	gl_get_buffer_parameteriv_arb_t* GetBufferParameterivARB;
	gl_get_buffer_parameterui64v_nv_t* GetBufferParameterui64vNV;
	gl_get_buffer_pointerv_t* GetBufferPointerv;
	gl_get_buffer_pointerv_arb_t* GetBufferPointervARB;
	gl_get_buffer_sub_data_t* GetBufferSubData;
	gl_get_buffer_sub_data_arb_t* GetBufferSubDataARB;
	gl_get_color_table_t* GetColorTable;
	gl_get_color_table_ext_t* GetColorTableEXT;
	gl_get_color_table_parameterfv_t* GetColorTableParameterfv;
	gl_get_color_table_parameterfv_ext_t* GetColorTableParameterfvEXT;
	gl_get_color_table_parameterfv_sgi_t* GetColorTableParameterfvSGI;
	gl_get_color_table_parameteriv_t* GetColorTableParameteriv;
	gl_get_color_table_parameteriv_ext_t* GetColorTableParameterivEXT;
	gl_get_color_table_parameteriv_sgi_t* GetColorTableParameterivSGI;
	gl_get_color_table_sgi_t* GetColorTableSGI;
	gl_get_combiner_input_parameterfv_nv_t* GetCombinerInputParameterfvNV;
	gl_get_combiner_input_parameteriv_nv_t* GetCombinerInputParameterivNV;
	gl_get_combiner_output_parameterfv_nv_t* GetCombinerOutputParameterfvNV;
	gl_get_combiner_output_parameteriv_nv_t* GetCombinerOutputParameterivNV;
	gl_get_combiner_stage_parameterfv_nv_t* GetCombinerStageParameterfvNV;
	gl_get_command_header_nv_t* GetCommandHeaderNV;
	gl_get_compressed_multi_tex_image_ext_t* GetCompressedMultiTexImageEXT;
	gl_get_compressed_tex_image_t* GetCompressedTexImage;
	gl_get_compressed_tex_image_arb_t* GetCompressedTexImageARB;
	gl_get_compressed_texture_image_t* GetCompressedTextureImage;
	gl_get_compressed_texture_image_ext_t* GetCompressedTextureImageEXT;
	gl_get_compressed_texture_sub_image_t* GetCompressedTextureSubImage;
	gl_get_convolution_filter_t* GetConvolutionFilter;
	gl_get_convolution_filter_ext_t* GetConvolutionFilterEXT;
	gl_get_convolution_parameterfv_t* GetConvolutionParameterfv;
	gl_get_convolution_parameterfv_ext_t* GetConvolutionParameterfvEXT;
	gl_get_convolution_parameteriv_t* GetConvolutionParameteriv;
	gl_get_convolution_parameteriv_ext_t* GetConvolutionParameterivEXT;
	gl_get_coverage_modulation_table_nv_t* GetCoverageModulationTableNV;
	gl_get_debug_message_log_t* GetDebugMessageLog;
	gl_get_debug_message_log_amd_t* GetDebugMessageLogAMD;
	gl_get_debug_message_log_arb_t* GetDebugMessageLogARB;
	gl_get_detail_tex_func_sgis_t* GetDetailTexFuncSGIS;
	gl_get_double_indexedv_ext_t* GetDoubleIndexedvEXT;
	gl_get_doublei_v_t* GetDoublei_v;
	gl_get_doublei_v_ext_t* GetDoublei_vEXT;
	gl_get_fenceiv_nv_t* GetFenceivNV;
	gl_get_final_combiner_input_parameterfv_nv_t* GetFinalCombinerInputParameterfvNV;
	gl_get_final_combiner_input_parameteriv_nv_t* GetFinalCombinerInputParameterivNV;
	gl_get_first_perf_query_id_intel_t* GetFirstPerfQueryIdINTEL;
	gl_get_float_indexedv_ext_t* GetFloatIndexedvEXT;
	gl_get_floati_v_t* GetFloati_v;
	gl_get_floati_v_ext_t* GetFloati_vEXT;
	gl_get_fog_func_sgis_t* GetFogFuncSGIS;
	gl_get_frag_data_index_t* GetFragDataIndex;
	gl_get_frag_data_location_t* GetFragDataLocation;
	gl_get_frag_data_location_ext_t* GetFragDataLocationEXT;
	gl_get_fragment_lightfv_sgix_t* GetFragmentLightfvSGIX;
	gl_get_fragment_lightiv_sgix_t* GetFragmentLightivSGIX;
	gl_get_fragment_materialfv_sgix_t* GetFragmentMaterialfvSGIX;
	gl_get_fragment_materialiv_sgix_t* GetFragmentMaterialivSGIX;
	gl_get_framebuffer_attachment_parameteriv_t* GetFramebufferAttachmentParameteriv;
	gl_get_framebuffer_attachment_parameteriv_ext_t* GetFramebufferAttachmentParameterivEXT;
	gl_get_framebuffer_parameterfv_amd_t* GetFramebufferParameterfvAMD;
	gl_get_framebuffer_parameteriv_t* GetFramebufferParameteriv;
	gl_get_framebuffer_parameteriv_ext_t* GetFramebufferParameterivEXT;
	gl_get_graphics_reset_status_t* GetGraphicsResetStatus;
	gl_get_graphics_reset_status_arb_t* GetGraphicsResetStatusARB;
	gl_get_handle_arb_t* GetHandleARB;
	gl_get_histogram_t* GetHistogram;
	gl_get_histogram_ext_t* GetHistogramEXT;
	gl_get_histogram_parameterfv_t* GetHistogramParameterfv;
	gl_get_histogram_parameterfv_ext_t* GetHistogramParameterfvEXT;
	gl_get_histogram_parameteriv_t* GetHistogramParameteriv;
	gl_get_histogram_parameteriv_ext_t* GetHistogramParameterivEXT;
	gl_get_image_handle_arb_t* GetImageHandleARB;
	gl_get_image_handle_nv_t* GetImageHandleNV;
	gl_get_image_transform_parameterfv_hp_t* GetImageTransformParameterfvHP;
	gl_get_image_transform_parameteriv_hp_t* GetImageTransformParameterivHP;
	gl_get_info_log_arb_t* GetInfoLogARB;
	gl_get_integer64i_v_t* GetInteger64i_v;
	gl_get_integer64v_t* GetInteger64v;
	gl_get_integer_indexedv_ext_t* GetIntegerIndexedvEXT;
	gl_get_integeri_v_t* GetIntegeri_v;
	gl_get_integerui64i_v_nv_t* GetIntegerui64i_vNV;
	gl_get_integerui64v_nv_t* GetIntegerui64vNV;
	gl_get_internalformat_sampleiv_nv_t* GetInternalformatSampleivNV;
	gl_get_internalformati64v_t* GetInternalformati64v;
	gl_get_internalformativ_t* GetInternalformativ;
	gl_get_invariant_booleanv_ext_t* GetInvariantBooleanvEXT;
	gl_get_invariant_floatv_ext_t* GetInvariantFloatvEXT;
	gl_get_invariant_integerv_ext_t* GetInvariantIntegervEXT;
	gl_get_local_constant_booleanv_ext_t* GetLocalConstantBooleanvEXT;
	gl_get_local_constant_floatv_ext_t* GetLocalConstantFloatvEXT;
	gl_get_local_constant_integerv_ext_t* GetLocalConstantIntegervEXT;
	gl_get_map_attrib_parameterfv_nv_t* GetMapAttribParameterfvNV;
	gl_get_map_attrib_parameteriv_nv_t* GetMapAttribParameterivNV;
	gl_get_map_control_points_nv_t* GetMapControlPointsNV;
	gl_get_map_parameterfv_nv_t* GetMapParameterfvNV;
	gl_get_map_parameteriv_nv_t* GetMapParameterivNV;
	gl_get_memory_object_parameteriv_ext_t* GetMemoryObjectParameterivEXT;
	gl_get_minmax_t* GetMinmax;
	gl_get_minmax_ext_t* GetMinmaxEXT;
	gl_get_minmax_parameterfv_t* GetMinmaxParameterfv;
	gl_get_minmax_parameterfv_ext_t* GetMinmaxParameterfvEXT;
	gl_get_minmax_parameteriv_t* GetMinmaxParameteriv;
	gl_get_minmax_parameteriv_ext_t* GetMinmaxParameterivEXT;
	gl_get_multi_tex_envfv_ext_t* GetMultiTexEnvfvEXT;
	gl_get_multi_tex_enviv_ext_t* GetMultiTexEnvivEXT;
	gl_get_multi_tex_gendv_ext_t* GetMultiTexGendvEXT;
	gl_get_multi_tex_genfv_ext_t* GetMultiTexGenfvEXT;
	gl_get_multi_tex_geniv_ext_t* GetMultiTexGenivEXT;
	gl_get_multi_tex_image_ext_t* GetMultiTexImageEXT;
	gl_get_multi_tex_level_parameterfv_ext_t* GetMultiTexLevelParameterfvEXT;
	gl_get_multi_tex_level_parameteriv_ext_t* GetMultiTexLevelParameterivEXT;
	gl_get_multi_tex_parameter_iiv_ext_t* GetMultiTexParameterIivEXT;
	gl_get_multi_tex_parameter_iuiv_ext_t* GetMultiTexParameterIuivEXT;
	gl_get_multi_tex_parameterfv_ext_t* GetMultiTexParameterfvEXT;
	gl_get_multi_tex_parameteriv_ext_t* GetMultiTexParameterivEXT;
	gl_get_multisamplefv_t* GetMultisamplefv;
	gl_get_multisamplefv_nv_t* GetMultisamplefvNV;
	gl_get_named_buffer_parameteri64v_t* GetNamedBufferParameteri64v;
	gl_get_named_buffer_parameteriv_t* GetNamedBufferParameteriv;
	gl_get_named_buffer_parameteriv_ext_t* GetNamedBufferParameterivEXT;
	gl_get_named_buffer_parameterui64v_nv_t* GetNamedBufferParameterui64vNV;
	gl_get_named_buffer_pointerv_t* GetNamedBufferPointerv;
	gl_get_named_buffer_pointerv_ext_t* GetNamedBufferPointervEXT;
	gl_get_named_buffer_sub_data_t* GetNamedBufferSubData;
	gl_get_named_buffer_sub_data_ext_t* GetNamedBufferSubDataEXT;
	gl_get_named_framebuffer_attachment_parameteriv_t* GetNamedFramebufferAttachmentParameteriv;
	gl_get_named_framebuffer_attachment_parameteriv_ext_t* GetNamedFramebufferAttachmentParameterivEXT;
	gl_get_named_framebuffer_parameterfv_amd_t* GetNamedFramebufferParameterfvAMD;
	gl_get_named_framebuffer_parameteriv_t* GetNamedFramebufferParameteriv;
	gl_get_named_framebuffer_parameteriv_ext_t* GetNamedFramebufferParameterivEXT;
	gl_get_named_program_local_parameter_iiv_ext_t* GetNamedProgramLocalParameterIivEXT;
	gl_get_named_program_local_parameter_iuiv_ext_t* GetNamedProgramLocalParameterIuivEXT;
	gl_get_named_program_local_parameterdv_ext_t* GetNamedProgramLocalParameterdvEXT;
	gl_get_named_program_local_parameterfv_ext_t* GetNamedProgramLocalParameterfvEXT;
	gl_get_named_program_string_ext_t* GetNamedProgramStringEXT;
	gl_get_named_programiv_ext_t* GetNamedProgramivEXT;
	gl_get_named_renderbuffer_parameteriv_t* GetNamedRenderbufferParameteriv;
	gl_get_named_renderbuffer_parameteriv_ext_t* GetNamedRenderbufferParameterivEXT;
	gl_get_named_string_arb_t* GetNamedStringARB;
	gl_get_named_stringiv_arb_t* GetNamedStringivARB;
	gl_get_next_perf_query_id_intel_t* GetNextPerfQueryIdINTEL;
	gl_get_object_bufferfv_ati_t* GetObjectBufferfvATI;
	gl_get_object_bufferiv_ati_t* GetObjectBufferivATI;
	gl_get_object_label_t* GetObjectLabel;
	gl_get_object_label_ext_t* GetObjectLabelEXT;
	gl_get_object_parameterfv_arb_t* GetObjectParameterfvARB;
	gl_get_object_parameteriv_apple_t* GetObjectParameterivAPPLE;
	gl_get_object_parameteriv_arb_t* GetObjectParameterivARB;
	gl_get_object_ptr_label_t* GetObjectPtrLabel;
	gl_get_occlusion_queryiv_nv_t* GetOcclusionQueryivNV;
	gl_get_occlusion_queryuiv_nv_t* GetOcclusionQueryuivNV;
	gl_get_path_color_genfv_nv_t* GetPathColorGenfvNV;
	gl_get_path_color_geniv_nv_t* GetPathColorGenivNV;
	gl_get_path_commands_nv_t* GetPathCommandsNV;
	gl_get_path_coords_nv_t* GetPathCoordsNV;
	gl_get_path_dash_array_nv_t* GetPathDashArrayNV;
	gl_get_path_length_nv_t* GetPathLengthNV;
	gl_get_path_metric_range_nv_t* GetPathMetricRangeNV;
	gl_get_path_metrics_nv_t* GetPathMetricsNV;
	gl_get_path_parameterfv_nv_t* GetPathParameterfvNV;
	gl_get_path_parameteriv_nv_t* GetPathParameterivNV;
	gl_get_path_spacing_nv_t* GetPathSpacingNV;
	gl_get_path_tex_genfv_nv_t* GetPathTexGenfvNV;
	gl_get_path_tex_geniv_nv_t* GetPathTexGenivNV;
	gl_get_perf_counter_info_intel_t* GetPerfCounterInfoINTEL;
	gl_get_perf_monitor_counter_data_amd_t* GetPerfMonitorCounterDataAMD;
	gl_get_perf_monitor_counter_info_amd_t* GetPerfMonitorCounterInfoAMD;
	gl_get_perf_monitor_counter_string_amd_t* GetPerfMonitorCounterStringAMD;
	gl_get_perf_monitor_counters_amd_t* GetPerfMonitorCountersAMD;
	gl_get_perf_monitor_group_string_amd_t* GetPerfMonitorGroupStringAMD;
	gl_get_perf_monitor_groups_amd_t* GetPerfMonitorGroupsAMD;
	gl_get_perf_query_data_intel_t* GetPerfQueryDataINTEL;
	gl_get_perf_query_id_by_name_intel_t* GetPerfQueryIdByNameINTEL;
	gl_get_perf_query_info_intel_t* GetPerfQueryInfoINTEL;
	gl_get_pixel_transform_parameterfv_ext_t* GetPixelTransformParameterfvEXT;
	gl_get_pixel_transform_parameteriv_ext_t* GetPixelTransformParameterivEXT;
	gl_get_pointer_indexedv_ext_t* GetPointerIndexedvEXT;
	gl_get_pointeri_v_ext_t* GetPointeri_vEXT;
	gl_get_program_binary_t* GetProgramBinary;
	gl_get_program_env_parameterdv_arb_t* GetProgramEnvParameterdvARB;
	gl_get_program_env_parameterfv_arb_t* GetProgramEnvParameterfvARB;
	gl_get_program_info_log_t* GetProgramInfoLog;
	gl_get_program_interfaceiv_t* GetProgramInterfaceiv;
	gl_get_program_local_parameterdv_arb_t* GetProgramLocalParameterdvARB;
	gl_get_program_local_parameterfv_arb_t* GetProgramLocalParameterfvARB;
	gl_get_program_named_parameterdv_nv_t* GetProgramNamedParameterdvNV;
	gl_get_program_named_parameterfv_nv_t* GetProgramNamedParameterfvNV;
	gl_get_program_parameterdv_nv_t* GetProgramParameterdvNV;
	gl_get_program_parameterfv_nv_t* GetProgramParameterfvNV;
	gl_get_program_pipeline_info_log_t* GetProgramPipelineInfoLog;
	gl_get_program_pipelineiv_t* GetProgramPipelineiv;
	gl_get_program_resource_index_t* GetProgramResourceIndex;
	gl_get_program_resource_location_t* GetProgramResourceLocation;
	gl_get_program_resource_location_index_t* GetProgramResourceLocationIndex;
	gl_get_program_resource_name_t* GetProgramResourceName;
	gl_get_program_resourcefv_nv_t* GetProgramResourcefvNV;
	gl_get_program_resourceiv_t* GetProgramResourceiv;
	gl_get_program_stageiv_t* GetProgramStageiv;
	gl_get_program_string_arb_t* GetProgramStringARB;
	gl_get_program_string_nv_t* GetProgramStringNV;
	gl_get_programiv_t* GetProgramiv;
	gl_get_programiv_arb_t* GetProgramivARB;
	gl_get_programiv_nv_t* GetProgramivNV;
	gl_get_query_buffer_objecti64v_t* GetQueryBufferObjecti64v;
	gl_get_query_buffer_objectiv_t* GetQueryBufferObjectiv;
	gl_get_query_buffer_objectui64v_t* GetQueryBufferObjectui64v;
	gl_get_query_buffer_objectuiv_t* GetQueryBufferObjectuiv;
	gl_get_query_indexediv_t* GetQueryIndexediv;
	gl_get_query_objecti64v_t* GetQueryObjecti64v;
	gl_get_query_objecti64v_ext_t* GetQueryObjecti64vEXT;
	gl_get_query_objectiv_t* GetQueryObjectiv;
	gl_get_query_objectiv_arb_t* GetQueryObjectivARB;
	gl_get_query_objectui64v_t* GetQueryObjectui64v;
	gl_get_query_objectui64v_ext_t* GetQueryObjectui64vEXT;
	gl_get_query_objectuiv_t* GetQueryObjectuiv;
	gl_get_query_objectuiv_arb_t* GetQueryObjectuivARB;
	gl_get_queryiv_t* GetQueryiv;
	gl_get_queryiv_arb_t* GetQueryivARB;
	gl_get_renderbuffer_parameteriv_t* GetRenderbufferParameteriv;
	gl_get_renderbuffer_parameteriv_ext_t* GetRenderbufferParameterivEXT;
	gl_get_sampler_parameter_iiv_t* GetSamplerParameterIiv;
	gl_get_sampler_parameter_iuiv_t* GetSamplerParameterIuiv;
	gl_get_sampler_parameterfv_t* GetSamplerParameterfv;
	gl_get_sampler_parameteriv_t* GetSamplerParameteriv;
	gl_get_semaphore_parameterui64v_ext_t* GetSemaphoreParameterui64vEXT;
	gl_get_separable_filter_t* GetSeparableFilter;
	gl_get_separable_filter_ext_t* GetSeparableFilterEXT;
	gl_get_shader_info_log_t* GetShaderInfoLog;
	gl_get_shader_precision_format_t* GetShaderPrecisionFormat;
	gl_get_shader_source_t* GetShaderSource;
	gl_get_shader_source_arb_t* GetShaderSourceARB;
	gl_get_shaderiv_t* GetShaderiv;
	gl_get_sharpen_tex_func_sgis_t* GetSharpenTexFuncSGIS;
	gl_get_stage_index_nv_t* GetStageIndexNV;
	gl_get_subroutine_index_t* GetSubroutineIndex;
	gl_get_subroutine_uniform_location_t* GetSubroutineUniformLocation;
	gl_get_synciv_t* GetSynciv;
	gl_get_tex_bump_parameterfv_ati_t* GetTexBumpParameterfvATI;
	gl_get_tex_bump_parameteriv_ati_t* GetTexBumpParameterivATI;
	gl_get_tex_filter_func_sgis_t* GetTexFilterFuncSGIS;
	gl_get_tex_parameter_iiv_t* GetTexParameterIiv;
	gl_get_tex_parameter_iiv_ext_t* GetTexParameterIivEXT;
	gl_get_tex_parameter_iuiv_t* GetTexParameterIuiv;
	gl_get_tex_parameter_iuiv_ext_t* GetTexParameterIuivEXT;
	gl_get_tex_parameter_pointerv_apple_t* GetTexParameterPointervAPPLE;
	gl_get_texture_handle_arb_t* GetTextureHandleARB;
	gl_get_texture_handle_nv_t* GetTextureHandleNV;
	gl_get_texture_image_t* GetTextureImage;
	gl_get_texture_image_ext_t* GetTextureImageEXT;
	gl_get_texture_level_parameterfv_t* GetTextureLevelParameterfv;
	gl_get_texture_level_parameterfv_ext_t* GetTextureLevelParameterfvEXT;
	gl_get_texture_level_parameteriv_t* GetTextureLevelParameteriv;
	gl_get_texture_level_parameteriv_ext_t* GetTextureLevelParameterivEXT;
	gl_get_texture_parameter_iiv_t* GetTextureParameterIiv;
	gl_get_texture_parameter_iiv_ext_t* GetTextureParameterIivEXT;
	gl_get_texture_parameter_iuiv_t* GetTextureParameterIuiv;
	gl_get_texture_parameter_iuiv_ext_t* GetTextureParameterIuivEXT;
	gl_get_texture_parameterfv_t* GetTextureParameterfv;
	gl_get_texture_parameterfv_ext_t* GetTextureParameterfvEXT;
	gl_get_texture_parameteriv_t* GetTextureParameteriv;
	gl_get_texture_parameteriv_ext_t* GetTextureParameterivEXT;
	gl_get_texture_sampler_handle_arb_t* GetTextureSamplerHandleARB;
	gl_get_texture_sampler_handle_nv_t* GetTextureSamplerHandleNV;
	gl_get_texture_sub_image_t* GetTextureSubImage;
	gl_get_track_matrixiv_nv_t* GetTrackMatrixivNV;
	gl_get_transform_feedback_varying_t* GetTransformFeedbackVarying;
	gl_get_transform_feedback_varying_ext_t* GetTransformFeedbackVaryingEXT;
	gl_get_transform_feedback_varying_nv_t* GetTransformFeedbackVaryingNV;
	gl_get_transform_feedbacki64_v_t* GetTransformFeedbacki64_v;
	gl_get_transform_feedbacki_v_t* GetTransformFeedbacki_v;
	gl_get_transform_feedbackiv_t* GetTransformFeedbackiv;
	gl_get_uniform_block_index_t* GetUniformBlockIndex;
	gl_get_uniform_buffer_size_ext_t* GetUniformBufferSizeEXT;
	gl_get_uniform_indices_t* GetUniformIndices;
	gl_get_uniform_location_t* GetUniformLocation;
	gl_get_uniform_location_arb_t* GetUniformLocationARB;
	gl_get_uniform_offset_ext_t* GetUniformOffsetEXT;
	gl_get_uniform_subroutineuiv_t* GetUniformSubroutineuiv;
	gl_get_uniformdv_t* GetUniformdv;
	gl_get_uniformfv_t* GetUniformfv;
	gl_get_uniformfv_arb_t* GetUniformfvARB;
	gl_get_uniformi64v_arb_t* GetUniformi64vARB;
	gl_get_uniformi64v_nv_t* GetUniformi64vNV;
	gl_get_uniformiv_t* GetUniformiv;
	gl_get_uniformiv_arb_t* GetUniformivARB;
	gl_get_uniformui64v_arb_t* GetUniformui64vARB;
	gl_get_uniformui64v_nv_t* GetUniformui64vNV;
	gl_get_uniformuiv_t* GetUniformuiv;
	gl_get_uniformuiv_ext_t* GetUniformuivEXT;
	gl_get_unsigned_bytei_v_ext_t* GetUnsignedBytei_vEXT;
	gl_get_unsigned_bytev_ext_t* GetUnsignedBytevEXT;
	gl_get_variant_array_objectfv_ati_t* GetVariantArrayObjectfvATI;
	gl_get_variant_array_objectiv_ati_t* GetVariantArrayObjectivATI;
	gl_get_variant_booleanv_ext_t* GetVariantBooleanvEXT;
	gl_get_variant_floatv_ext_t* GetVariantFloatvEXT;
	gl_get_variant_integerv_ext_t* GetVariantIntegervEXT;
	gl_get_variant_pointerv_ext_t* GetVariantPointervEXT;
	gl_get_varying_location_nv_t* GetVaryingLocationNV;
	gl_get_vertex_array_indexed64iv_t* GetVertexArrayIndexed64iv;
	gl_get_vertex_array_indexediv_t* GetVertexArrayIndexediv;
	gl_get_vertex_array_integeri_v_ext_t* GetVertexArrayIntegeri_vEXT;
	gl_get_vertex_array_integerv_ext_t* GetVertexArrayIntegervEXT;
	gl_get_vertex_array_pointeri_v_ext_t* GetVertexArrayPointeri_vEXT;
	gl_get_vertex_array_pointerv_ext_t* GetVertexArrayPointervEXT;
	gl_get_vertex_arrayiv_t* GetVertexArrayiv;
	gl_get_vertex_attrib_array_objectfv_ati_t* GetVertexAttribArrayObjectfvATI;
	gl_get_vertex_attrib_array_objectiv_ati_t* GetVertexAttribArrayObjectivATI;
	gl_get_vertex_attrib_iiv_t* GetVertexAttribIiv;
	gl_get_vertex_attrib_iiv_ext_t* GetVertexAttribIivEXT;
	gl_get_vertex_attrib_iuiv_t* GetVertexAttribIuiv;
	gl_get_vertex_attrib_iuiv_ext_t* GetVertexAttribIuivEXT;
	gl_get_vertex_attrib_ldv_t* GetVertexAttribLdv;
	gl_get_vertex_attrib_ldv_ext_t* GetVertexAttribLdvEXT;
	gl_get_vertex_attrib_li64v_nv_t* GetVertexAttribLi64vNV;
	gl_get_vertex_attrib_lui64v_arb_t* GetVertexAttribLui64vARB;
	gl_get_vertex_attrib_lui64v_nv_t* GetVertexAttribLui64vNV;
	gl_get_vertex_attrib_pointerv_t* GetVertexAttribPointerv;
	gl_get_vertex_attrib_pointerv_arb_t* GetVertexAttribPointervARB;
	gl_get_vertex_attrib_pointerv_nv_t* GetVertexAttribPointervNV;
	gl_get_vertex_attribdv_t* GetVertexAttribdv;
	gl_get_vertex_attribdv_arb_t* GetVertexAttribdvARB;
	gl_get_vertex_attribdv_nv_t* GetVertexAttribdvNV;
	gl_get_vertex_attribfv_t* GetVertexAttribfv;
	gl_get_vertex_attribfv_arb_t* GetVertexAttribfvARB;
	gl_get_vertex_attribfv_nv_t* GetVertexAttribfvNV;
	gl_get_vertex_attribiv_t* GetVertexAttribiv;
	gl_get_vertex_attribiv_arb_t* GetVertexAttribivARB;
	gl_get_vertex_attribiv_nv_t* GetVertexAttribivNV;
	gl_get_video_capture_streamdv_nv_t* GetVideoCaptureStreamdvNV;
	gl_get_video_capture_streamfv_nv_t* GetVideoCaptureStreamfvNV;
	gl_get_video_capture_streamiv_nv_t* GetVideoCaptureStreamivNV;
	gl_get_video_captureiv_nv_t* GetVideoCaptureivNV;
	gl_get_videoi64v_nv_t* GetVideoi64vNV;
	gl_get_videoiv_nv_t* GetVideoivNV;
	gl_get_videoui64v_nv_t* GetVideoui64vNV;
	gl_get_videouiv_nv_t* GetVideouivNV;
	gl_get_vk_proc_addr_nv_t* GetVkProcAddrNV;
	gl_getn_color_table_arb_t* GetnColorTableARB;
	gl_getn_compressed_tex_image_t* GetnCompressedTexImage;
	gl_getn_compressed_tex_image_arb_t* GetnCompressedTexImageARB;
	gl_getn_convolution_filter_arb_t* GetnConvolutionFilterARB;
	gl_getn_histogram_arb_t* GetnHistogramARB;
	gl_getn_mapdv_arb_t* GetnMapdvARB;
	gl_getn_mapfv_arb_t* GetnMapfvARB;
	gl_getn_mapiv_arb_t* GetnMapivARB;
	gl_getn_minmax_arb_t* GetnMinmaxARB;
	gl_getn_pixel_mapfv_arb_t* GetnPixelMapfvARB;
	gl_getn_pixel_mapuiv_arb_t* GetnPixelMapuivARB;
	gl_getn_pixel_mapusv_arb_t* GetnPixelMapusvARB;
	gl_getn_polygon_stipple_arb_t* GetnPolygonStippleARB;
	gl_getn_separable_filter_arb_t* GetnSeparableFilterARB;
	gl_getn_tex_image_t* GetnTexImage;
	gl_getn_tex_image_arb_t* GetnTexImageARB;
	gl_getn_uniformdv_t* GetnUniformdv;
	gl_getn_uniformdv_arb_t* GetnUniformdvARB;
	gl_getn_uniformfv_t* GetnUniformfv;
	gl_getn_uniformfv_arb_t* GetnUniformfvARB;
	gl_getn_uniformi64v_arb_t* GetnUniformi64vARB;
	gl_getn_uniformiv_t* GetnUniformiv;
	gl_getn_uniformiv_arb_t* GetnUniformivARB;
	gl_getn_uniformui64v_arb_t* GetnUniformui64vARB;
	gl_getn_uniformuiv_t* GetnUniformuiv;
	gl_getn_uniformuiv_arb_t* GetnUniformuivARB;
	gl_global_alpha_factorb_sun_t* GlobalAlphaFactorbSUN;
	gl_global_alpha_factord_sun_t* GlobalAlphaFactordSUN;
	gl_global_alpha_factorf_sun_t* GlobalAlphaFactorfSUN;
	gl_global_alpha_factori_sun_t* GlobalAlphaFactoriSUN;
	gl_global_alpha_factors_sun_t* GlobalAlphaFactorsSUN;
	gl_global_alpha_factorub_sun_t* GlobalAlphaFactorubSUN;
	gl_global_alpha_factorui_sun_t* GlobalAlphaFactoruiSUN;
	gl_global_alpha_factorus_sun_t* GlobalAlphaFactorusSUN;
	gl_histogram_t* Histogram;
	gl_histogram_ext_t* HistogramEXT;
	gl_igloo_interface_sgix_t* IglooInterfaceSGIX;
	gl_image_transform_parameterf_hp_t* ImageTransformParameterfHP;
	gl_image_transform_parameterfv_hp_t* ImageTransformParameterfvHP;
	gl_image_transform_parameteri_hp_t* ImageTransformParameteriHP;
	gl_image_transform_parameteriv_hp_t* ImageTransformParameterivHP;
	gl_import_memory_fd_ext_t* ImportMemoryFdEXT;
	gl_import_memory_win32handle_ext_t* ImportMemoryWin32HandleEXT;
	gl_import_memory_win32name_ext_t* ImportMemoryWin32NameEXT;
	gl_import_semaphore_fd_ext_t* ImportSemaphoreFdEXT;
	gl_import_semaphore_win32handle_ext_t* ImportSemaphoreWin32HandleEXT;
	gl_import_semaphore_win32name_ext_t* ImportSemaphoreWin32NameEXT;
	gl_import_sync_ext_t* ImportSyncEXT;
	gl_index_format_nv_t* IndexFormatNV;
	gl_index_func_ext_t* IndexFuncEXT;
	gl_index_material_ext_t* IndexMaterialEXT;
	gl_index_pointer_ext_t* IndexPointerEXT;
	gl_index_pointer_list_ibm_t* IndexPointerListIBM;
	gl_insert_component_ext_t* InsertComponentEXT;
	gl_insert_event_marker_ext_t* InsertEventMarkerEXT;
	gl_interpolate_paths_nv_t* InterpolatePathsNV;
	gl_invalidate_buffer_data_t* InvalidateBufferData;
	gl_invalidate_buffer_sub_data_t* InvalidateBufferSubData;
	gl_invalidate_framebuffer_t* InvalidateFramebuffer;
	gl_invalidate_named_framebuffer_data_t* InvalidateNamedFramebufferData;
	gl_invalidate_named_framebuffer_sub_data_t* InvalidateNamedFramebufferSubData;
	gl_invalidate_sub_framebuffer_t* InvalidateSubFramebuffer;
	gl_invalidate_tex_image_t* InvalidateTexImage;
	gl_invalidate_tex_sub_image_t* InvalidateTexSubImage;
	gl_is_async_marker_sgix_t* IsAsyncMarkerSGIX;
	gl_is_buffer_t* IsBuffer;
	gl_is_buffer_arb_t* IsBufferARB;
	gl_is_buffer_resident_nv_t* IsBufferResidentNV;
	gl_is_command_list_nv_t* IsCommandListNV;
	gl_is_enabled_indexed_ext_t* IsEnabledIndexedEXT;
	gl_is_enabledi_t* IsEnabledi;
	gl_is_fence_apple_t* IsFenceAPPLE;
	gl_is_fence_nv_t* IsFenceNV;
	gl_is_framebuffer_t* IsFramebuffer;
	gl_is_framebuffer_ext_t* IsFramebufferEXT;
	gl_is_image_handle_resident_arb_t* IsImageHandleResidentARB;
	gl_is_image_handle_resident_nv_t* IsImageHandleResidentNV;
	gl_is_memory_object_ext_t* IsMemoryObjectEXT;
	gl_is_name_amd_t* IsNameAMD;
	gl_is_named_buffer_resident_nv_t* IsNamedBufferResidentNV;
	gl_is_named_string_arb_t* IsNamedStringARB;
	gl_is_object_buffer_ati_t* IsObjectBufferATI;
	gl_is_occlusion_query_nv_t* IsOcclusionQueryNV;
	gl_is_path_nv_t* IsPathNV;
	gl_is_point_in_fill_path_nv_t* IsPointInFillPathNV;
	gl_is_point_in_stroke_path_nv_t* IsPointInStrokePathNV;
	gl_is_program_t* IsProgram;
	gl_is_program_arb_t* IsProgramARB;
	gl_is_program_nv_t* IsProgramNV;
	gl_is_program_pipeline_t* IsProgramPipeline;
	gl_is_query_t* IsQuery;
	gl_is_query_arb_t* IsQueryARB;
	gl_is_renderbuffer_t* IsRenderbuffer;
	gl_is_renderbuffer_ext_t* IsRenderbufferEXT;
	gl_is_sampler_t* IsSampler;
	gl_is_semaphore_ext_t* IsSemaphoreEXT;
	gl_is_shader_t* IsShader;
	gl_is_state_nv_t* IsStateNV;
	gl_is_sync_t* IsSync;
	gl_is_texture_ext_t* IsTextureEXT;
	gl_is_texture_handle_resident_arb_t* IsTextureHandleResidentARB;
	gl_is_texture_handle_resident_nv_t* IsTextureHandleResidentNV;
	gl_is_transform_feedback_t* IsTransformFeedback;
	gl_is_transform_feedback_nv_t* IsTransformFeedbackNV;
	gl_is_variant_enabled_ext_t* IsVariantEnabledEXT;
	gl_is_vertex_array_t* IsVertexArray;
	gl_is_vertex_array_apple_t* IsVertexArrayAPPLE;
	gl_is_vertex_attrib_enabled_apple_t* IsVertexAttribEnabledAPPLE;
	gl_lgpucopy_image_sub_data_nvx_t* LGPUCopyImageSubDataNVX;
	gl_lgpuinterlock_nvx_t* LGPUInterlockNVX;
	gl_lgpunamed_buffer_sub_data_nvx_t* LGPUNamedBufferSubDataNVX;
	gl_label_object_ext_t* LabelObjectEXT;
	gl_link_program_t* LinkProgram;
	gl_link_program_arb_t* LinkProgramARB;
	gl_list_draw_commands_states_client_nv_t* ListDrawCommandsStatesClientNV;
	gl_load_identity_deformation_map_sgix_t* LoadIdentityDeformationMapSGIX;
	gl_load_program_nv_t* LoadProgramNV;
	gl_load_transpose_matrixd_t* LoadTransposeMatrixd;
	gl_load_transpose_matrixd_arb_t* LoadTransposeMatrixdARB;
	gl_load_transpose_matrixf_t* LoadTransposeMatrixf;
	gl_load_transpose_matrixf_arb_t* LoadTransposeMatrixfARB;
	gl_lock_arrays_ext_t* LockArraysEXT;
	gl_make_buffer_non_resident_nv_t* MakeBufferNonResidentNV;
	gl_make_buffer_resident_nv_t* MakeBufferResidentNV;
	gl_make_image_handle_non_resident_arb_t* MakeImageHandleNonResidentARB;
	gl_make_image_handle_non_resident_nv_t* MakeImageHandleNonResidentNV;
	gl_make_image_handle_resident_arb_t* MakeImageHandleResidentARB;
	gl_make_image_handle_resident_nv_t* MakeImageHandleResidentNV;
	gl_make_named_buffer_non_resident_nv_t* MakeNamedBufferNonResidentNV;
	gl_make_named_buffer_resident_nv_t* MakeNamedBufferResidentNV;
	gl_make_texture_handle_non_resident_arb_t* MakeTextureHandleNonResidentARB;
	gl_make_texture_handle_non_resident_nv_t* MakeTextureHandleNonResidentNV;
	gl_make_texture_handle_resident_arb_t* MakeTextureHandleResidentARB;
	gl_make_texture_handle_resident_nv_t* MakeTextureHandleResidentNV;
	gl_map_control_points_nv_t* MapControlPointsNV;
	gl_map_parameterfv_nv_t* MapParameterfvNV;
	gl_map_parameteriv_nv_t* MapParameterivNV;
	gl_map_vertex_attrib1d_apple_t* MapVertexAttrib1dAPPLE;
	gl_map_vertex_attrib1f_apple_t* MapVertexAttrib1fAPPLE;
	gl_map_vertex_attrib2d_apple_t* MapVertexAttrib2dAPPLE;
	gl_map_vertex_attrib2f_apple_t* MapVertexAttrib2fAPPLE;
	gl_matrix_frustum_ext_t* MatrixFrustumEXT;
	gl_matrix_index_pointer_arb_t* MatrixIndexPointerARB;
	gl_matrix_indexubv_arb_t* MatrixIndexubvARB;
	gl_matrix_indexuiv_arb_t* MatrixIndexuivARB;
	gl_matrix_indexusv_arb_t* MatrixIndexusvARB;
	gl_matrix_load3x2f_nv_t* MatrixLoad3x2fNV;
	gl_matrix_load3x3f_nv_t* MatrixLoad3x3fNV;
	gl_matrix_load_identity_ext_t* MatrixLoadIdentityEXT;
	gl_matrix_load_transpose3x3f_nv_t* MatrixLoadTranspose3x3fNV;
	gl_matrix_load_transposed_ext_t* MatrixLoadTransposedEXT;
	gl_matrix_load_transposef_ext_t* MatrixLoadTransposefEXT;
	gl_matrix_loadd_ext_t* MatrixLoaddEXT;
	gl_matrix_loadf_ext_t* MatrixLoadfEXT;
	gl_matrix_mult3x2f_nv_t* MatrixMult3x2fNV;
	gl_matrix_mult3x3f_nv_t* MatrixMult3x3fNV;
	gl_matrix_mult_transpose3x3f_nv_t* MatrixMultTranspose3x3fNV;
	gl_matrix_mult_transposed_ext_t* MatrixMultTransposedEXT;
	gl_matrix_mult_transposef_ext_t* MatrixMultTransposefEXT;
	gl_matrix_multd_ext_t* MatrixMultdEXT;
	gl_matrix_multf_ext_t* MatrixMultfEXT;
	gl_matrix_ortho_ext_t* MatrixOrthoEXT;
	gl_matrix_pop_ext_t* MatrixPopEXT;
	gl_matrix_push_ext_t* MatrixPushEXT;
	gl_matrix_rotated_ext_t* MatrixRotatedEXT;
	gl_matrix_rotatef_ext_t* MatrixRotatefEXT;
	gl_matrix_scaled_ext_t* MatrixScaledEXT;
	gl_matrix_scalef_ext_t* MatrixScalefEXT;
	gl_matrix_translated_ext_t* MatrixTranslatedEXT;
	gl_matrix_translatef_ext_t* MatrixTranslatefEXT;
	gl_max_shader_compiler_threads_arb_t* MaxShaderCompilerThreadsARB;
	gl_max_shader_compiler_threads_khr_t* MaxShaderCompilerThreadsKHR;
	gl_memory_barrier_t* MemoryBarrier;
	gl_memory_barrier_by_region_t* MemoryBarrierByRegion;
	gl_memory_barrier_ext_t* MemoryBarrierEXT;
	gl_memory_object_parameteriv_ext_t* MemoryObjectParameterivEXT;
	gl_min_sample_shading_t* MinSampleShading;
	gl_min_sample_shading_arb_t* MinSampleShadingARB;
	gl_minmax_t* Minmax;
	gl_minmax_ext_t* MinmaxEXT;
	gl_mult_transpose_matrixd_t* MultTransposeMatrixd;
	gl_mult_transpose_matrixd_arb_t* MultTransposeMatrixdARB;
	gl_mult_transpose_matrixf_t* MultTransposeMatrixf;
	gl_mult_transpose_matrixf_arb_t* MultTransposeMatrixfARB;
	gl_multi_draw_arrays_t* MultiDrawArrays;
	gl_multi_draw_arrays_ext_t* MultiDrawArraysEXT;
	gl_multi_draw_arrays_indirect_t* MultiDrawArraysIndirect;
	gl_multi_draw_arrays_indirect_amd_t* MultiDrawArraysIndirectAMD;
	gl_multi_draw_arrays_indirect_bindless_count_nv_t* MultiDrawArraysIndirectBindlessCountNV;
	gl_multi_draw_arrays_indirect_bindless_nv_t* MultiDrawArraysIndirectBindlessNV;
	gl_multi_draw_arrays_indirect_count_t* MultiDrawArraysIndirectCount;
	gl_multi_draw_arrays_indirect_count_arb_t* MultiDrawArraysIndirectCountARB;
	gl_multi_draw_element_array_apple_t* MultiDrawElementArrayAPPLE;
	gl_multi_draw_elements_t* MultiDrawElements;
	gl_multi_draw_elements_base_vertex_t* MultiDrawElementsBaseVertex;
	gl_multi_draw_elements_ext_t* MultiDrawElementsEXT;
	gl_multi_draw_elements_indirect_t* MultiDrawElementsIndirect;
	gl_multi_draw_elements_indirect_amd_t* MultiDrawElementsIndirectAMD;
	gl_multi_draw_elements_indirect_bindless_count_nv_t* MultiDrawElementsIndirectBindlessCountNV;
	gl_multi_draw_elements_indirect_bindless_nv_t* MultiDrawElementsIndirectBindlessNV;
	gl_multi_draw_elements_indirect_count_t* MultiDrawElementsIndirectCount;
	gl_multi_draw_elements_indirect_count_arb_t* MultiDrawElementsIndirectCountARB;
	gl_multi_draw_range_element_array_apple_t* MultiDrawRangeElementArrayAPPLE;
	gl_multi_mode_draw_arrays_ibm_t* MultiModeDrawArraysIBM;
	gl_multi_mode_draw_elements_ibm_t* MultiModeDrawElementsIBM;
	gl_multi_tex_buffer_ext_t* MultiTexBufferEXT;
	gl_multi_tex_coord1d_t* MultiTexCoord1d;
	gl_multi_tex_coord1d_arb_t* MultiTexCoord1dARB;
	gl_multi_tex_coord1dv_t* MultiTexCoord1dv;
	gl_multi_tex_coord1dv_arb_t* MultiTexCoord1dvARB;
	gl_multi_tex_coord1f_t* MultiTexCoord1f;
	gl_multi_tex_coord1f_arb_t* MultiTexCoord1fARB;
	gl_multi_tex_coord1fv_t* MultiTexCoord1fv;
	gl_multi_tex_coord1fv_arb_t* MultiTexCoord1fvARB;
	gl_multi_tex_coord1h_nv_t* MultiTexCoord1hNV;
	gl_multi_tex_coord1hv_nv_t* MultiTexCoord1hvNV;
	gl_multi_tex_coord1i_t* MultiTexCoord1i;
	gl_multi_tex_coord1i_arb_t* MultiTexCoord1iARB;
	gl_multi_tex_coord1iv_t* MultiTexCoord1iv;
	gl_multi_tex_coord1iv_arb_t* MultiTexCoord1ivARB;
	gl_multi_tex_coord1s_t* MultiTexCoord1s;
	gl_multi_tex_coord1s_arb_t* MultiTexCoord1sARB;
	gl_multi_tex_coord1sv_t* MultiTexCoord1sv;
	gl_multi_tex_coord1sv_arb_t* MultiTexCoord1svARB;
	gl_multi_tex_coord2d_t* MultiTexCoord2d;
	gl_multi_tex_coord2d_arb_t* MultiTexCoord2dARB;
	gl_multi_tex_coord2dv_t* MultiTexCoord2dv;
	gl_multi_tex_coord2dv_arb_t* MultiTexCoord2dvARB;
	gl_multi_tex_coord2f_t* MultiTexCoord2f;
	gl_multi_tex_coord2f_arb_t* MultiTexCoord2fARB;
	gl_multi_tex_coord2fv_t* MultiTexCoord2fv;
	gl_multi_tex_coord2fv_arb_t* MultiTexCoord2fvARB;
	gl_multi_tex_coord2h_nv_t* MultiTexCoord2hNV;
	gl_multi_tex_coord2hv_nv_t* MultiTexCoord2hvNV;
	gl_multi_tex_coord2i_t* MultiTexCoord2i;
	gl_multi_tex_coord2i_arb_t* MultiTexCoord2iARB;
	gl_multi_tex_coord2iv_t* MultiTexCoord2iv;
	gl_multi_tex_coord2iv_arb_t* MultiTexCoord2ivARB;
	gl_multi_tex_coord2s_t* MultiTexCoord2s;
	gl_multi_tex_coord2s_arb_t* MultiTexCoord2sARB;
	gl_multi_tex_coord2sv_t* MultiTexCoord2sv;
	gl_multi_tex_coord2sv_arb_t* MultiTexCoord2svARB;
	gl_multi_tex_coord3d_t* MultiTexCoord3d;
	gl_multi_tex_coord3d_arb_t* MultiTexCoord3dARB;
	gl_multi_tex_coord3dv_t* MultiTexCoord3dv;
	gl_multi_tex_coord3dv_arb_t* MultiTexCoord3dvARB;
	gl_multi_tex_coord3f_t* MultiTexCoord3f;
	gl_multi_tex_coord3f_arb_t* MultiTexCoord3fARB;
	gl_multi_tex_coord3fv_t* MultiTexCoord3fv;
	gl_multi_tex_coord3fv_arb_t* MultiTexCoord3fvARB;
	gl_multi_tex_coord3h_nv_t* MultiTexCoord3hNV;
	gl_multi_tex_coord3hv_nv_t* MultiTexCoord3hvNV;
	gl_multi_tex_coord3i_t* MultiTexCoord3i;
	gl_multi_tex_coord3i_arb_t* MultiTexCoord3iARB;
	gl_multi_tex_coord3iv_t* MultiTexCoord3iv;
	gl_multi_tex_coord3iv_arb_t* MultiTexCoord3ivARB;
	gl_multi_tex_coord3s_t* MultiTexCoord3s;
	gl_multi_tex_coord3s_arb_t* MultiTexCoord3sARB;
	gl_multi_tex_coord3sv_t* MultiTexCoord3sv;
	gl_multi_tex_coord3sv_arb_t* MultiTexCoord3svARB;
	gl_multi_tex_coord4d_t* MultiTexCoord4d;
	gl_multi_tex_coord4d_arb_t* MultiTexCoord4dARB;
	gl_multi_tex_coord4dv_t* MultiTexCoord4dv;
	gl_multi_tex_coord4dv_arb_t* MultiTexCoord4dvARB;
	gl_multi_tex_coord4f_t* MultiTexCoord4f;
	gl_multi_tex_coord4f_arb_t* MultiTexCoord4fARB;
	gl_multi_tex_coord4fv_t* MultiTexCoord4fv;
	gl_multi_tex_coord4fv_arb_t* MultiTexCoord4fvARB;
	gl_multi_tex_coord4h_nv_t* MultiTexCoord4hNV;
	gl_multi_tex_coord4hv_nv_t* MultiTexCoord4hvNV;
	gl_multi_tex_coord4i_t* MultiTexCoord4i;
	gl_multi_tex_coord4i_arb_t* MultiTexCoord4iARB;
	gl_multi_tex_coord4iv_t* MultiTexCoord4iv;
	gl_multi_tex_coord4iv_arb_t* MultiTexCoord4ivARB;
	gl_multi_tex_coord4s_t* MultiTexCoord4s;
	gl_multi_tex_coord4s_arb_t* MultiTexCoord4sARB;
	gl_multi_tex_coord4sv_t* MultiTexCoord4sv;
	gl_multi_tex_coord4sv_arb_t* MultiTexCoord4svARB;
	gl_multi_tex_coord_p1ui_t* MultiTexCoordP1ui;
	gl_multi_tex_coord_p1uiv_t* MultiTexCoordP1uiv;
	gl_multi_tex_coord_p2ui_t* MultiTexCoordP2ui;
	gl_multi_tex_coord_p2uiv_t* MultiTexCoordP2uiv;
	gl_multi_tex_coord_p3ui_t* MultiTexCoordP3ui;
	gl_multi_tex_coord_p3uiv_t* MultiTexCoordP3uiv;
	gl_multi_tex_coord_p4ui_t* MultiTexCoordP4ui;
	gl_multi_tex_coord_p4uiv_t* MultiTexCoordP4uiv;
	gl_multi_tex_coord_pointer_ext_t* MultiTexCoordPointerEXT;
	gl_multi_tex_envf_ext_t* MultiTexEnvfEXT;
	gl_multi_tex_envfv_ext_t* MultiTexEnvfvEXT;
	gl_multi_tex_envi_ext_t* MultiTexEnviEXT;
	gl_multi_tex_enviv_ext_t* MultiTexEnvivEXT;
	gl_multi_tex_gend_ext_t* MultiTexGendEXT;
	gl_multi_tex_gendv_ext_t* MultiTexGendvEXT;
	gl_multi_tex_genf_ext_t* MultiTexGenfEXT;
	gl_multi_tex_genfv_ext_t* MultiTexGenfvEXT;
	gl_multi_tex_geni_ext_t* MultiTexGeniEXT;
	gl_multi_tex_geniv_ext_t* MultiTexGenivEXT;
	gl_multi_tex_image1dext_t* MultiTexImage1DEXT;
	gl_multi_tex_image2dext_t* MultiTexImage2DEXT;
	gl_multi_tex_image3dext_t* MultiTexImage3DEXT;
	gl_multi_tex_parameter_iiv_ext_t* MultiTexParameterIivEXT;
	gl_multi_tex_parameter_iuiv_ext_t* MultiTexParameterIuivEXT;
	gl_multi_tex_parameterf_ext_t* MultiTexParameterfEXT;
	gl_multi_tex_parameterfv_ext_t* MultiTexParameterfvEXT;
	gl_multi_tex_parameteri_ext_t* MultiTexParameteriEXT;
	gl_multi_tex_parameteriv_ext_t* MultiTexParameterivEXT;
	gl_multi_tex_renderbuffer_ext_t* MultiTexRenderbufferEXT;
	gl_multi_tex_sub_image1dext_t* MultiTexSubImage1DEXT;
	gl_multi_tex_sub_image2dext_t* MultiTexSubImage2DEXT;
	gl_multi_tex_sub_image3dext_t* MultiTexSubImage3DEXT;
	gl_multicast_barrier_nv_t* MulticastBarrierNV;
	gl_multicast_blit_framebuffer_nv_t* MulticastBlitFramebufferNV;
	gl_multicast_buffer_sub_data_nv_t* MulticastBufferSubDataNV;
	gl_multicast_copy_buffer_sub_data_nv_t* MulticastCopyBufferSubDataNV;
	gl_multicast_copy_image_sub_data_nv_t* MulticastCopyImageSubDataNV;
	gl_multicast_framebuffer_sample_locationsfv_nv_t* MulticastFramebufferSampleLocationsfvNV;
	gl_multicast_get_query_objecti64v_nv_t* MulticastGetQueryObjecti64vNV;
	gl_multicast_get_query_objectiv_nv_t* MulticastGetQueryObjectivNV;
	gl_multicast_get_query_objectui64v_nv_t* MulticastGetQueryObjectui64vNV;
	gl_multicast_get_query_objectuiv_nv_t* MulticastGetQueryObjectuivNV;
	gl_multicast_wait_sync_nv_t* MulticastWaitSyncNV;
	gl_named_buffer_data_t* NamedBufferData;
	gl_named_buffer_data_ext_t* NamedBufferDataEXT;
	gl_named_buffer_storage_t* NamedBufferStorage;
	gl_named_buffer_storage_ext_t* NamedBufferStorageEXT;
	gl_named_buffer_storage_external_ext_t* NamedBufferStorageExternalEXT;
	gl_named_buffer_storage_mem_ext_t* NamedBufferStorageMemEXT;
	gl_named_buffer_sub_data_t* NamedBufferSubData;
	gl_named_buffer_sub_data_ext_t* NamedBufferSubDataEXT;
	gl_named_copy_buffer_sub_data_ext_t* NamedCopyBufferSubDataEXT;
	gl_named_framebuffer_draw_buffer_t* NamedFramebufferDrawBuffer;
	gl_named_framebuffer_draw_buffers_t* NamedFramebufferDrawBuffers;
	gl_named_framebuffer_parameteri_t* NamedFramebufferParameteri;
	gl_named_framebuffer_parameteri_ext_t* NamedFramebufferParameteriEXT;
	gl_named_framebuffer_read_buffer_t* NamedFramebufferReadBuffer;
	gl_named_framebuffer_renderbuffer_t* NamedFramebufferRenderbuffer;
	gl_named_framebuffer_renderbuffer_ext_t* NamedFramebufferRenderbufferEXT;
	gl_named_framebuffer_sample_locationsfv_arb_t* NamedFramebufferSampleLocationsfvARB;
	gl_named_framebuffer_sample_locationsfv_nv_t* NamedFramebufferSampleLocationsfvNV;
	gl_named_framebuffer_sample_positionsfv_amd_t* NamedFramebufferSamplePositionsfvAMD;
	gl_named_framebuffer_texture_t* NamedFramebufferTexture;
	gl_named_framebuffer_texture1dext_t* NamedFramebufferTexture1DEXT;
	gl_named_framebuffer_texture2dext_t* NamedFramebufferTexture2DEXT;
	gl_named_framebuffer_texture3dext_t* NamedFramebufferTexture3DEXT;
	gl_named_framebuffer_texture_ext_t* NamedFramebufferTextureEXT;
	gl_named_framebuffer_texture_face_ext_t* NamedFramebufferTextureFaceEXT;
	gl_named_framebuffer_texture_layer_t* NamedFramebufferTextureLayer;
	gl_named_framebuffer_texture_layer_ext_t* NamedFramebufferTextureLayerEXT;
	gl_named_program_local_parameter4d_ext_t* NamedProgramLocalParameter4dEXT;
	gl_named_program_local_parameter4dv_ext_t* NamedProgramLocalParameter4dvEXT;
	gl_named_program_local_parameter4f_ext_t* NamedProgramLocalParameter4fEXT;
	gl_named_program_local_parameter4fv_ext_t* NamedProgramLocalParameter4fvEXT;
	gl_named_program_local_parameter_i4i_ext_t* NamedProgramLocalParameterI4iEXT;
	gl_named_program_local_parameter_i4iv_ext_t* NamedProgramLocalParameterI4ivEXT;
	gl_named_program_local_parameter_i4ui_ext_t* NamedProgramLocalParameterI4uiEXT;
	gl_named_program_local_parameter_i4uiv_ext_t* NamedProgramLocalParameterI4uivEXT;
	gl_named_program_local_parameters4fv_ext_t* NamedProgramLocalParameters4fvEXT;
	gl_named_program_local_parameters_i4iv_ext_t* NamedProgramLocalParametersI4ivEXT;
	gl_named_program_local_parameters_i4uiv_ext_t* NamedProgramLocalParametersI4uivEXT;
	gl_named_program_string_ext_t* NamedProgramStringEXT;
	gl_named_renderbuffer_storage_t* NamedRenderbufferStorage;
	gl_named_renderbuffer_storage_ext_t* NamedRenderbufferStorageEXT;
	gl_named_renderbuffer_storage_multisample_t* NamedRenderbufferStorageMultisample;
	gl_named_renderbuffer_storage_multisample_coverage_ext_t* NamedRenderbufferStorageMultisampleCoverageEXT;
	gl_named_renderbuffer_storage_multisample_ext_t* NamedRenderbufferStorageMultisampleEXT;
	gl_named_string_arb_t* NamedStringARB;
	gl_new_object_buffer_ati_t* NewObjectBufferATI;
	gl_normal3f_vertex3f_sun_t* Normal3fVertex3fSUN;
	gl_normal3f_vertex3fv_sun_t* Normal3fVertex3fvSUN;
	gl_normal3h_nv_t* Normal3hNV;
	gl_normal3hv_nv_t* Normal3hvNV;
	gl_normal_format_nv_t* NormalFormatNV;
	gl_normal_p3ui_t* NormalP3ui;
	gl_normal_p3uiv_t* NormalP3uiv;
	gl_normal_pointer_ext_t* NormalPointerEXT;
	gl_normal_pointer_list_ibm_t* NormalPointerListIBM;
	gl_normal_pointerv_intel_t* NormalPointervINTEL;
	gl_normal_stream3b_ati_t* NormalStream3bATI;
	gl_normal_stream3bv_ati_t* NormalStream3bvATI;
	gl_normal_stream3d_ati_t* NormalStream3dATI;
	gl_normal_stream3dv_ati_t* NormalStream3dvATI;
	gl_normal_stream3f_ati_t* NormalStream3fATI;
	gl_normal_stream3fv_ati_t* NormalStream3fvATI;
	gl_normal_stream3i_ati_t* NormalStream3iATI;
	gl_normal_stream3iv_ati_t* NormalStream3ivATI;
	gl_normal_stream3s_ati_t* NormalStream3sATI;
	gl_normal_stream3sv_ati_t* NormalStream3svATI;
	gl_object_label_t* ObjectLabel;
	gl_object_ptr_label_t* ObjectPtrLabel;
	gl_object_purgeable_apple_t* ObjectPurgeableAPPLE;
	gl_object_unpurgeable_apple_t* ObjectUnpurgeableAPPLE;
	gl_pntrianglesf_ati_t* PNTrianglesfATI;
	gl_pntrianglesi_ati_t* PNTrianglesiATI;
	gl_pass_tex_coord_ati_t* PassTexCoordATI;
	gl_patch_parameterfv_t* PatchParameterfv;
	gl_patch_parameteri_t* PatchParameteri;
	gl_path_color_gen_nv_t* PathColorGenNV;
	gl_path_commands_nv_t* PathCommandsNV;
	gl_path_coords_nv_t* PathCoordsNV;
	gl_path_cover_depth_func_nv_t* PathCoverDepthFuncNV;
	gl_path_dash_array_nv_t* PathDashArrayNV;
	gl_path_fog_gen_nv_t* PathFogGenNV;
	gl_path_glyph_index_array_nv_t* PathGlyphIndexArrayNV;
	gl_path_glyph_index_range_nv_t* PathGlyphIndexRangeNV;
	gl_path_glyph_range_nv_t* PathGlyphRangeNV;
	gl_path_glyphs_nv_t* PathGlyphsNV;
	gl_path_memory_glyph_index_array_nv_t* PathMemoryGlyphIndexArrayNV;
	gl_path_parameterf_nv_t* PathParameterfNV;
	gl_path_parameterfv_nv_t* PathParameterfvNV;
	gl_path_parameteri_nv_t* PathParameteriNV;
	gl_path_parameteriv_nv_t* PathParameterivNV;
	gl_path_stencil_depth_offset_nv_t* PathStencilDepthOffsetNV;
	gl_path_stencil_func_nv_t* PathStencilFuncNV;
	gl_path_string_nv_t* PathStringNV;
	gl_path_sub_commands_nv_t* PathSubCommandsNV;
	gl_path_sub_coords_nv_t* PathSubCoordsNV;
	gl_path_tex_gen_nv_t* PathTexGenNV;
	gl_pause_transform_feedback_t* PauseTransformFeedback;
	gl_pause_transform_feedback_nv_t* PauseTransformFeedbackNV;
	gl_pixel_data_range_nv_t* PixelDataRangeNV;
	gl_pixel_tex_gen_sgix_t* PixelTexGenSGIX;
	gl_pixel_transform_parameterf_ext_t* PixelTransformParameterfEXT;
	gl_pixel_transform_parameterfv_ext_t* PixelTransformParameterfvEXT;
	gl_pixel_transform_parameteri_ext_t* PixelTransformParameteriEXT;
	gl_pixel_transform_parameteriv_ext_t* PixelTransformParameterivEXT;
	gl_point_along_path_nv_t* PointAlongPathNV;
	gl_point_parameterf_t* PointParameterf;
	gl_point_parameterf_arb_t* PointParameterfARB;
	gl_point_parameterf_ext_t* PointParameterfEXT;
	gl_point_parameterfv_t* PointParameterfv;
	gl_point_parameterfv_arb_t* PointParameterfvARB;
	gl_point_parameterfv_ext_t* PointParameterfvEXT;
	gl_point_parameteri_t* PointParameteri;
	gl_point_parameteri_nv_t* PointParameteriNV;
	gl_point_parameteriv_t* PointParameteriv;
	gl_point_parameteriv_nv_t* PointParameterivNV;
	gl_poll_async_sgix_t* PollAsyncSGIX;
	gl_polygon_offset_clamp_t* PolygonOffsetClamp;
	gl_polygon_offset_clamp_ext_t* PolygonOffsetClampEXT;
	gl_polygon_offset_ext_t* PolygonOffsetEXT;
	gl_pop_debug_group_t* PopDebugGroup;
	gl_pop_group_marker_ext_t* PopGroupMarkerEXT;
	gl_present_frame_dual_fill_nv_t* PresentFrameDualFillNV;
	gl_present_frame_keyed_nv_t* PresentFrameKeyedNV;
	gl_primitive_bounding_box_arb_t* PrimitiveBoundingBoxARB;
	gl_primitive_restart_index_t* PrimitiveRestartIndex;
	gl_primitive_restart_index_nv_t* PrimitiveRestartIndexNV;
	gl_primitive_restart_nv_t* PrimitiveRestartNV;
	gl_prioritize_textures_ext_t* PrioritizeTexturesEXT;
	gl_program_binary_t* ProgramBinary;
	gl_program_buffer_parameters_iiv_nv_t* ProgramBufferParametersIivNV;
	gl_program_buffer_parameters_iuiv_nv_t* ProgramBufferParametersIuivNV;
	gl_program_buffer_parametersfv_nv_t* ProgramBufferParametersfvNV;
	gl_program_env_parameter4d_arb_t* ProgramEnvParameter4dARB;
	gl_program_env_parameter4dv_arb_t* ProgramEnvParameter4dvARB;
	gl_program_env_parameter4f_arb_t* ProgramEnvParameter4fARB;
	gl_program_env_parameter4fv_arb_t* ProgramEnvParameter4fvARB;
	gl_program_env_parameter_i4i_nv_t* ProgramEnvParameterI4iNV;
	gl_program_env_parameter_i4iv_nv_t* ProgramEnvParameterI4ivNV;
	gl_program_env_parameter_i4ui_nv_t* ProgramEnvParameterI4uiNV;
	gl_program_env_parameter_i4uiv_nv_t* ProgramEnvParameterI4uivNV;
	gl_program_env_parameters4fv_ext_t* ProgramEnvParameters4fvEXT;
	gl_program_env_parameters_i4iv_nv_t* ProgramEnvParametersI4ivNV;
	gl_program_env_parameters_i4uiv_nv_t* ProgramEnvParametersI4uivNV;
	gl_program_local_parameter4d_arb_t* ProgramLocalParameter4dARB;
	gl_program_local_parameter4dv_arb_t* ProgramLocalParameter4dvARB;
	gl_program_local_parameter4f_arb_t* ProgramLocalParameter4fARB;
	gl_program_local_parameter4fv_arb_t* ProgramLocalParameter4fvARB;
	gl_program_local_parameter_i4i_nv_t* ProgramLocalParameterI4iNV;
	gl_program_local_parameter_i4iv_nv_t* ProgramLocalParameterI4ivNV;
	gl_program_local_parameter_i4ui_nv_t* ProgramLocalParameterI4uiNV;
	gl_program_local_parameter_i4uiv_nv_t* ProgramLocalParameterI4uivNV;
	gl_program_local_parameters4fv_ext_t* ProgramLocalParameters4fvEXT;
	gl_program_local_parameters_i4iv_nv_t* ProgramLocalParametersI4ivNV;
	gl_program_local_parameters_i4uiv_nv_t* ProgramLocalParametersI4uivNV;
	gl_program_named_parameter4d_nv_t* ProgramNamedParameter4dNV;
	gl_program_named_parameter4dv_nv_t* ProgramNamedParameter4dvNV;
	gl_program_named_parameter4f_nv_t* ProgramNamedParameter4fNV;
	gl_program_named_parameter4fv_nv_t* ProgramNamedParameter4fvNV;
	gl_program_parameter4d_nv_t* ProgramParameter4dNV;
	gl_program_parameter4dv_nv_t* ProgramParameter4dvNV;
	gl_program_parameter4f_nv_t* ProgramParameter4fNV;
	gl_program_parameter4fv_nv_t* ProgramParameter4fvNV;
	gl_program_parameteri_t* ProgramParameteri;
	gl_program_parameteri_arb_t* ProgramParameteriARB;
	gl_program_parameteri_ext_t* ProgramParameteriEXT;
	gl_program_parameters4dv_nv_t* ProgramParameters4dvNV;
	gl_program_parameters4fv_nv_t* ProgramParameters4fvNV;
	gl_program_path_fragment_input_gen_nv_t* ProgramPathFragmentInputGenNV;
	gl_program_string_arb_t* ProgramStringARB;
	gl_program_uniform1d_t* ProgramUniform1d;
	gl_program_uniform1dv_t* ProgramUniform1dv;
	gl_program_uniform1f_t* ProgramUniform1f;
	gl_program_uniform1f_ext_t* ProgramUniform1fEXT;
	gl_program_uniform1fv_t* ProgramUniform1fv;
	gl_program_uniform1fv_ext_t* ProgramUniform1fvEXT;
	gl_program_uniform1i_t* ProgramUniform1i;
	gl_program_uniform1i64arb_t* ProgramUniform1i64ARB;
	gl_program_uniform1i64nv_t* ProgramUniform1i64NV;
	gl_program_uniform1i64v_arb_t* ProgramUniform1i64vARB;
	gl_program_uniform1i64v_nv_t* ProgramUniform1i64vNV;
	gl_program_uniform1i_ext_t* ProgramUniform1iEXT;
	gl_program_uniform1iv_t* ProgramUniform1iv;
	gl_program_uniform1iv_ext_t* ProgramUniform1ivEXT;
	gl_program_uniform1ui_t* ProgramUniform1ui;
	gl_program_uniform1ui64arb_t* ProgramUniform1ui64ARB;
	gl_program_uniform1ui64nv_t* ProgramUniform1ui64NV;
	gl_program_uniform1ui64v_arb_t* ProgramUniform1ui64vARB;
	gl_program_uniform1ui64v_nv_t* ProgramUniform1ui64vNV;
	gl_program_uniform1ui_ext_t* ProgramUniform1uiEXT;
	gl_program_uniform1uiv_t* ProgramUniform1uiv;
	gl_program_uniform1uiv_ext_t* ProgramUniform1uivEXT;
	gl_program_uniform2d_t* ProgramUniform2d;
	gl_program_uniform2dv_t* ProgramUniform2dv;
	gl_program_uniform2f_t* ProgramUniform2f;
	gl_program_uniform2f_ext_t* ProgramUniform2fEXT;
	gl_program_uniform2fv_t* ProgramUniform2fv;
	gl_program_uniform2fv_ext_t* ProgramUniform2fvEXT;
	gl_program_uniform2i_t* ProgramUniform2i;
	gl_program_uniform2i64arb_t* ProgramUniform2i64ARB;
	gl_program_uniform2i64nv_t* ProgramUniform2i64NV;
	gl_program_uniform2i64v_arb_t* ProgramUniform2i64vARB;
	gl_program_uniform2i64v_nv_t* ProgramUniform2i64vNV;
	gl_program_uniform2i_ext_t* ProgramUniform2iEXT;
	gl_program_uniform2iv_t* ProgramUniform2iv;
	gl_program_uniform2iv_ext_t* ProgramUniform2ivEXT;
	gl_program_uniform2ui_t* ProgramUniform2ui;
	gl_program_uniform2ui64arb_t* ProgramUniform2ui64ARB;
	gl_program_uniform2ui64nv_t* ProgramUniform2ui64NV;
	gl_program_uniform2ui64v_arb_t* ProgramUniform2ui64vARB;
	gl_program_uniform2ui64v_nv_t* ProgramUniform2ui64vNV;
	gl_program_uniform2ui_ext_t* ProgramUniform2uiEXT;
	gl_program_uniform2uiv_t* ProgramUniform2uiv;
	gl_program_uniform2uiv_ext_t* ProgramUniform2uivEXT;
	gl_program_uniform3d_t* ProgramUniform3d;
	gl_program_uniform3dv_t* ProgramUniform3dv;
	gl_program_uniform3f_t* ProgramUniform3f;
	gl_program_uniform3f_ext_t* ProgramUniform3fEXT;
	gl_program_uniform3fv_t* ProgramUniform3fv;
	gl_program_uniform3fv_ext_t* ProgramUniform3fvEXT;
	gl_program_uniform3i_t* ProgramUniform3i;
	gl_program_uniform3i64arb_t* ProgramUniform3i64ARB;
	gl_program_uniform3i64nv_t* ProgramUniform3i64NV;
	gl_program_uniform3i64v_arb_t* ProgramUniform3i64vARB;
	gl_program_uniform3i64v_nv_t* ProgramUniform3i64vNV;
	gl_program_uniform3i_ext_t* ProgramUniform3iEXT;
	gl_program_uniform3iv_t* ProgramUniform3iv;
	gl_program_uniform3iv_ext_t* ProgramUniform3ivEXT;
	gl_program_uniform3ui_t* ProgramUniform3ui;
	gl_program_uniform3ui64arb_t* ProgramUniform3ui64ARB;
	gl_program_uniform3ui64nv_t* ProgramUniform3ui64NV;
	gl_program_uniform3ui64v_arb_t* ProgramUniform3ui64vARB;
	gl_program_uniform3ui64v_nv_t* ProgramUniform3ui64vNV;
	gl_program_uniform3ui_ext_t* ProgramUniform3uiEXT;
	gl_program_uniform3uiv_t* ProgramUniform3uiv;
	gl_program_uniform3uiv_ext_t* ProgramUniform3uivEXT;
	gl_program_uniform4d_t* ProgramUniform4d;
	gl_program_uniform4dv_t* ProgramUniform4dv;
	gl_program_uniform4f_t* ProgramUniform4f;
	gl_program_uniform4f_ext_t* ProgramUniform4fEXT;
	gl_program_uniform4fv_t* ProgramUniform4fv;
	gl_program_uniform4fv_ext_t* ProgramUniform4fvEXT;
	gl_program_uniform4i_t* ProgramUniform4i;
	gl_program_uniform4i64arb_t* ProgramUniform4i64ARB;
	gl_program_uniform4i64nv_t* ProgramUniform4i64NV;
	gl_program_uniform4i64v_arb_t* ProgramUniform4i64vARB;
	gl_program_uniform4i64v_nv_t* ProgramUniform4i64vNV;
	gl_program_uniform4i_ext_t* ProgramUniform4iEXT;
	gl_program_uniform4iv_t* ProgramUniform4iv;
	gl_program_uniform4iv_ext_t* ProgramUniform4ivEXT;
	gl_program_uniform4ui_t* ProgramUniform4ui;
	gl_program_uniform4ui64arb_t* ProgramUniform4ui64ARB;
	gl_program_uniform4ui64nv_t* ProgramUniform4ui64NV;
	gl_program_uniform4ui64v_arb_t* ProgramUniform4ui64vARB;
	gl_program_uniform4ui64v_nv_t* ProgramUniform4ui64vNV;
	gl_program_uniform4ui_ext_t* ProgramUniform4uiEXT;
	gl_program_uniform4uiv_t* ProgramUniform4uiv;
	gl_program_uniform4uiv_ext_t* ProgramUniform4uivEXT;
	gl_program_uniform_handleui64arb_t* ProgramUniformHandleui64ARB;
	gl_program_uniform_handleui64nv_t* ProgramUniformHandleui64NV;
	gl_program_uniform_handleui64v_arb_t* ProgramUniformHandleui64vARB;
	gl_program_uniform_handleui64v_nv_t* ProgramUniformHandleui64vNV;
	gl_program_uniform_matrix2dv_t* ProgramUniformMatrix2dv;
	gl_program_uniform_matrix2fv_t* ProgramUniformMatrix2fv;
	gl_program_uniform_matrix2fv_ext_t* ProgramUniformMatrix2fvEXT;
	gl_program_uniform_matrix2x3dv_t* ProgramUniformMatrix2x3dv;
	gl_program_uniform_matrix2x3fv_t* ProgramUniformMatrix2x3fv;
	gl_program_uniform_matrix2x3fv_ext_t* ProgramUniformMatrix2x3fvEXT;
	gl_program_uniform_matrix2x4dv_t* ProgramUniformMatrix2x4dv;
	gl_program_uniform_matrix2x4fv_t* ProgramUniformMatrix2x4fv;
	gl_program_uniform_matrix2x4fv_ext_t* ProgramUniformMatrix2x4fvEXT;
	gl_program_uniform_matrix3dv_t* ProgramUniformMatrix3dv;
	gl_program_uniform_matrix3fv_t* ProgramUniformMatrix3fv;
	gl_program_uniform_matrix3fv_ext_t* ProgramUniformMatrix3fvEXT;
	gl_program_uniform_matrix3x2dv_t* ProgramUniformMatrix3x2dv;
	gl_program_uniform_matrix3x2fv_t* ProgramUniformMatrix3x2fv;
	gl_program_uniform_matrix3x2fv_ext_t* ProgramUniformMatrix3x2fvEXT;
	gl_program_uniform_matrix3x4dv_t* ProgramUniformMatrix3x4dv;
	gl_program_uniform_matrix3x4fv_t* ProgramUniformMatrix3x4fv;
	gl_program_uniform_matrix3x4fv_ext_t* ProgramUniformMatrix3x4fvEXT;
	gl_program_uniform_matrix4dv_t* ProgramUniformMatrix4dv;
	gl_program_uniform_matrix4fv_t* ProgramUniformMatrix4fv;
	gl_program_uniform_matrix4fv_ext_t* ProgramUniformMatrix4fvEXT;
	gl_program_uniform_matrix4x2dv_t* ProgramUniformMatrix4x2dv;
	gl_program_uniform_matrix4x2fv_t* ProgramUniformMatrix4x2fv;
	gl_program_uniform_matrix4x2fv_ext_t* ProgramUniformMatrix4x2fvEXT;
	gl_program_uniform_matrix4x3dv_t* ProgramUniformMatrix4x3dv;
	gl_program_uniform_matrix4x3fv_t* ProgramUniformMatrix4x3fv;
	gl_program_uniform_matrix4x3fv_ext_t* ProgramUniformMatrix4x3fvEXT;
	gl_program_uniformui64nv_t* ProgramUniformui64NV;
	gl_program_uniformui64v_nv_t* ProgramUniformui64vNV;
	gl_program_vertex_limit_nv_t* ProgramVertexLimitNV;
	gl_provoking_vertex_t* ProvokingVertex;
	gl_provoking_vertex_ext_t* ProvokingVertexEXT;
	gl_push_client_attrib_default_ext_t* PushClientAttribDefaultEXT;
	gl_push_debug_group_t* PushDebugGroup;
	gl_push_group_marker_ext_t* PushGroupMarkerEXT;
	gl_query_counter_t* QueryCounter;
	gl_query_object_parameterui_amd_t* QueryObjectParameteruiAMD;
	gl_raster_samples_ext_t* RasterSamplesEXT;
	gl_readn_pixels_t* ReadnPixels;
	gl_readn_pixels_arb_t* ReadnPixelsARB;
	gl_reference_plane_sgix_t* ReferencePlaneSGIX;
	gl_release_keyed_mutex_win32ext_t* ReleaseKeyedMutexWin32EXT;
	gl_release_shader_compiler_t* ReleaseShaderCompiler;
	gl_render_gpu_mask_nv_t* RenderGpuMaskNV;
	gl_renderbuffer_storage_t* RenderbufferStorage;
	gl_renderbuffer_storage_ext_t* RenderbufferStorageEXT;
	gl_renderbuffer_storage_multisample_t* RenderbufferStorageMultisample;
	gl_renderbuffer_storage_multisample_coverage_nv_t* RenderbufferStorageMultisampleCoverageNV;
	gl_renderbuffer_storage_multisample_ext_t* RenderbufferStorageMultisampleEXT;
	gl_replacement_code_pointer_sun_t* ReplacementCodePointerSUN;
	gl_replacement_codeub_sun_t* ReplacementCodeubSUN;
	gl_replacement_codeubv_sun_t* ReplacementCodeubvSUN;
	gl_replacement_codeui_color3f_vertex3f_sun_t* ReplacementCodeuiColor3fVertex3fSUN;
	gl_replacement_codeui_color3f_vertex3fv_sun_t* ReplacementCodeuiColor3fVertex3fvSUN;
	gl_replacement_codeui_color4f_normal3f_vertex3f_sun_t* ReplacementCodeuiColor4fNormal3fVertex3fSUN;
	gl_replacement_codeui_color4f_normal3f_vertex3fv_sun_t* ReplacementCodeuiColor4fNormal3fVertex3fvSUN;
	gl_replacement_codeui_color4ub_vertex3f_sun_t* ReplacementCodeuiColor4ubVertex3fSUN;
	gl_replacement_codeui_color4ub_vertex3fv_sun_t* ReplacementCodeuiColor4ubVertex3fvSUN;
	gl_replacement_codeui_normal3f_vertex3f_sun_t* ReplacementCodeuiNormal3fVertex3fSUN;
	gl_replacement_codeui_normal3f_vertex3fv_sun_t* ReplacementCodeuiNormal3fVertex3fvSUN;
	gl_replacement_codeui_sun_t* ReplacementCodeuiSUN;
	gl_replacement_codeui_tex_coord2f_color4f_normal3f_vertex3f_sun_t* ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
	gl_replacement_codeui_tex_coord2f_color4f_normal3f_vertex3fv_sun_t* ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
	gl_replacement_codeui_tex_coord2f_normal3f_vertex3f_sun_t* ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
	gl_replacement_codeui_tex_coord2f_normal3f_vertex3fv_sun_t* ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
	gl_replacement_codeui_tex_coord2f_vertex3f_sun_t* ReplacementCodeuiTexCoord2fVertex3fSUN;
	gl_replacement_codeui_tex_coord2f_vertex3fv_sun_t* ReplacementCodeuiTexCoord2fVertex3fvSUN;
	gl_replacement_codeui_vertex3f_sun_t* ReplacementCodeuiVertex3fSUN;
	gl_replacement_codeui_vertex3fv_sun_t* ReplacementCodeuiVertex3fvSUN;
	gl_replacement_codeuiv_sun_t* ReplacementCodeuivSUN;
	gl_replacement_codeus_sun_t* ReplacementCodeusSUN;
	gl_replacement_codeusv_sun_t* ReplacementCodeusvSUN;
	gl_request_resident_programs_nv_t* RequestResidentProgramsNV;
	gl_reset_histogram_t* ResetHistogram;
	gl_reset_histogram_ext_t* ResetHistogramEXT;
	gl_reset_minmax_t* ResetMinmax;
	gl_reset_minmax_ext_t* ResetMinmaxEXT;
	gl_resize_buffers_mesa_t* ResizeBuffersMESA;
	gl_resume_transform_feedback_t* ResumeTransformFeedback;
	gl_resume_transform_feedback_nv_t* ResumeTransformFeedbackNV;
	gl_sample_coverage_t* SampleCoverage;
	gl_sample_coverage_arb_t* SampleCoverageARB;
	gl_sample_map_ati_t* SampleMapATI;
	gl_sample_mask_ext_t* SampleMaskEXT;
	gl_sample_mask_indexed_nv_t* SampleMaskIndexedNV;
	gl_sample_mask_sgis_t* SampleMaskSGIS;
	gl_sample_maski_t* SampleMaski;
	gl_sample_pattern_ext_t* SamplePatternEXT;
	gl_sample_pattern_sgis_t* SamplePatternSGIS;
	gl_sampler_parameter_iiv_t* SamplerParameterIiv;
	gl_sampler_parameter_iuiv_t* SamplerParameterIuiv;
	gl_sampler_parameterf_t* SamplerParameterf;
	gl_sampler_parameterfv_t* SamplerParameterfv;
	gl_sampler_parameteri_t* SamplerParameteri;
	gl_sampler_parameteriv_t* SamplerParameteriv;
	gl_scissor_arrayv_t* ScissorArrayv;
	gl_scissor_indexed_t* ScissorIndexed;
	gl_scissor_indexedv_t* ScissorIndexedv;
	gl_secondary_color3b_t* SecondaryColor3b;
	gl_secondary_color3b_ext_t* SecondaryColor3bEXT;
	gl_secondary_color3bv_t* SecondaryColor3bv;
	gl_secondary_color3bv_ext_t* SecondaryColor3bvEXT;
	gl_secondary_color3d_t* SecondaryColor3d;
	gl_secondary_color3d_ext_t* SecondaryColor3dEXT;
	gl_secondary_color3dv_t* SecondaryColor3dv;
	gl_secondary_color3dv_ext_t* SecondaryColor3dvEXT;
	gl_secondary_color3f_t* SecondaryColor3f;
	gl_secondary_color3f_ext_t* SecondaryColor3fEXT;
	gl_secondary_color3fv_t* SecondaryColor3fv;
	gl_secondary_color3fv_ext_t* SecondaryColor3fvEXT;
	gl_secondary_color3h_nv_t* SecondaryColor3hNV;
	gl_secondary_color3hv_nv_t* SecondaryColor3hvNV;
	gl_secondary_color3i_t* SecondaryColor3i;
	gl_secondary_color3i_ext_t* SecondaryColor3iEXT;
	gl_secondary_color3iv_t* SecondaryColor3iv;
	gl_secondary_color3iv_ext_t* SecondaryColor3ivEXT;
	gl_secondary_color3s_t* SecondaryColor3s;
	gl_secondary_color3s_ext_t* SecondaryColor3sEXT;
	gl_secondary_color3sv_t* SecondaryColor3sv;
	gl_secondary_color3sv_ext_t* SecondaryColor3svEXT;
	gl_secondary_color3ub_t* SecondaryColor3ub;
	gl_secondary_color3ub_ext_t* SecondaryColor3ubEXT;
	gl_secondary_color3ubv_t* SecondaryColor3ubv;
	gl_secondary_color3ubv_ext_t* SecondaryColor3ubvEXT;
	gl_secondary_color3ui_t* SecondaryColor3ui;
	gl_secondary_color3ui_ext_t* SecondaryColor3uiEXT;
	gl_secondary_color3uiv_t* SecondaryColor3uiv;
	gl_secondary_color3uiv_ext_t* SecondaryColor3uivEXT;
	gl_secondary_color3us_t* SecondaryColor3us;
	gl_secondary_color3us_ext_t* SecondaryColor3usEXT;
	gl_secondary_color3usv_t* SecondaryColor3usv;
	gl_secondary_color3usv_ext_t* SecondaryColor3usvEXT;
	gl_secondary_color_format_nv_t* SecondaryColorFormatNV;
	gl_secondary_color_p3ui_t* SecondaryColorP3ui;
	gl_secondary_color_p3uiv_t* SecondaryColorP3uiv;
	gl_secondary_color_pointer_t* SecondaryColorPointer;
	gl_secondary_color_pointer_ext_t* SecondaryColorPointerEXT;
	gl_secondary_color_pointer_list_ibm_t* SecondaryColorPointerListIBM;
	gl_select_perf_monitor_counters_amd_t* SelectPerfMonitorCountersAMD;
	gl_semaphore_parameterui64v_ext_t* SemaphoreParameterui64vEXT;
	gl_separable_filter2d_t* SeparableFilter2D;
	gl_separable_filter2dext_t* SeparableFilter2DEXT;
	gl_set_fence_apple_t* SetFenceAPPLE;
	gl_set_fence_nv_t* SetFenceNV;
	gl_set_fragment_shader_constant_ati_t* SetFragmentShaderConstantATI;
	gl_set_invariant_ext_t* SetInvariantEXT;
	gl_set_local_constant_ext_t* SetLocalConstantEXT;
	gl_set_multisamplefv_amd_t* SetMultisamplefvAMD;
	gl_shader_binary_t* ShaderBinary;
	gl_shader_op1ext_t* ShaderOp1EXT;
	gl_shader_op2ext_t* ShaderOp2EXT;
	gl_shader_op3ext_t* ShaderOp3EXT;
	gl_shader_source_t* ShaderSource;
	gl_shader_source_arb_t* ShaderSourceARB;
	gl_shader_storage_block_binding_t* ShaderStorageBlockBinding;
	gl_sharpen_tex_func_sgis_t* SharpenTexFuncSGIS;
	gl_signal_semaphore_ext_t* SignalSemaphoreEXT;
	gl_signal_vk_fence_nv_t* SignalVkFenceNV;
	gl_signal_vk_semaphore_nv_t* SignalVkSemaphoreNV;
	gl_specialize_shader_t* SpecializeShader;
	gl_specialize_shader_arb_t* SpecializeShaderARB;
	gl_sprite_parameterf_sgix_t* SpriteParameterfSGIX;
	gl_sprite_parameterfv_sgix_t* SpriteParameterfvSGIX;
	gl_sprite_parameteri_sgix_t* SpriteParameteriSGIX;
	gl_sprite_parameteriv_sgix_t* SpriteParameterivSGIX;
	gl_state_capture_nv_t* StateCaptureNV;
	gl_stencil_fill_path_instanced_nv_t* StencilFillPathInstancedNV;
	gl_stencil_fill_path_nv_t* StencilFillPathNV;
	gl_stencil_func_separate_t* StencilFuncSeparate;
	gl_stencil_func_separate_ati_t* StencilFuncSeparateATI;
	gl_stencil_mask_separate_t* StencilMaskSeparate;
	gl_stencil_op_separate_t* StencilOpSeparate;
	gl_stencil_op_separate_ati_t* StencilOpSeparateATI;
	gl_stencil_op_value_amd_t* StencilOpValueAMD;
	gl_stencil_stroke_path_instanced_nv_t* StencilStrokePathInstancedNV;
	gl_stencil_stroke_path_nv_t* StencilStrokePathNV;
	gl_stencil_then_cover_fill_path_instanced_nv_t* StencilThenCoverFillPathInstancedNV;
	gl_stencil_then_cover_fill_path_nv_t* StencilThenCoverFillPathNV;
	gl_stencil_then_cover_stroke_path_instanced_nv_t* StencilThenCoverStrokePathInstancedNV;
	gl_stencil_then_cover_stroke_path_nv_t* StencilThenCoverStrokePathNV;
	gl_string_marker_gremedy_t* StringMarkerGREMEDY;
	gl_subpixel_precision_bias_nv_t* SubpixelPrecisionBiasNV;
	gl_swizzle_ext_t* SwizzleEXT;
	gl_sync_texture_intel_t* SyncTextureINTEL;
	gl_tag_sample_buffer_sgix_t* TagSampleBufferSGIX;
	gl_tangent_pointer_ext_t* TangentPointerEXT;
	gl_tbuffer_mask3dfx_t* TbufferMask3DFX;
	gl_tessellation_factor_amd_t* TessellationFactorAMD;
	gl_tessellation_mode_amd_t* TessellationModeAMD;
	gl_test_fence_apple_t* TestFenceAPPLE;
	gl_test_fence_nv_t* TestFenceNV;
	gl_test_object_apple_t* TestObjectAPPLE;
	gl_tex_buffer_t* TexBuffer;
	gl_tex_buffer_arb_t* TexBufferARB;
	gl_tex_buffer_ext_t* TexBufferEXT;
	gl_tex_buffer_range_t* TexBufferRange;
	gl_tex_bump_parameterfv_ati_t* TexBumpParameterfvATI;
	gl_tex_bump_parameteriv_ati_t* TexBumpParameterivATI;
	gl_tex_coord1h_nv_t* TexCoord1hNV;
	gl_tex_coord1hv_nv_t* TexCoord1hvNV;
	gl_tex_coord2f_color3f_vertex3f_sun_t* TexCoord2fColor3fVertex3fSUN;
	gl_tex_coord2f_color3f_vertex3fv_sun_t* TexCoord2fColor3fVertex3fvSUN;
	gl_tex_coord2f_color4f_normal3f_vertex3f_sun_t* TexCoord2fColor4fNormal3fVertex3fSUN;
	gl_tex_coord2f_color4f_normal3f_vertex3fv_sun_t* TexCoord2fColor4fNormal3fVertex3fvSUN;
	gl_tex_coord2f_color4ub_vertex3f_sun_t* TexCoord2fColor4ubVertex3fSUN;
	gl_tex_coord2f_color4ub_vertex3fv_sun_t* TexCoord2fColor4ubVertex3fvSUN;
	gl_tex_coord2f_normal3f_vertex3f_sun_t* TexCoord2fNormal3fVertex3fSUN;
	gl_tex_coord2f_normal3f_vertex3fv_sun_t* TexCoord2fNormal3fVertex3fvSUN;
	gl_tex_coord2f_vertex3f_sun_t* TexCoord2fVertex3fSUN;
	gl_tex_coord2f_vertex3fv_sun_t* TexCoord2fVertex3fvSUN;
	gl_tex_coord2h_nv_t* TexCoord2hNV;
	gl_tex_coord2hv_nv_t* TexCoord2hvNV;
	gl_tex_coord3h_nv_t* TexCoord3hNV;
	gl_tex_coord3hv_nv_t* TexCoord3hvNV;
	gl_tex_coord4f_color4f_normal3f_vertex4f_sun_t* TexCoord4fColor4fNormal3fVertex4fSUN;
	gl_tex_coord4f_color4f_normal3f_vertex4fv_sun_t* TexCoord4fColor4fNormal3fVertex4fvSUN;
	gl_tex_coord4f_vertex4f_sun_t* TexCoord4fVertex4fSUN;
	gl_tex_coord4f_vertex4fv_sun_t* TexCoord4fVertex4fvSUN;
	gl_tex_coord4h_nv_t* TexCoord4hNV;
	gl_tex_coord4hv_nv_t* TexCoord4hvNV;
	gl_tex_coord_format_nv_t* TexCoordFormatNV;
	gl_tex_coord_p1ui_t* TexCoordP1ui;
	gl_tex_coord_p1uiv_t* TexCoordP1uiv;
	gl_tex_coord_p2ui_t* TexCoordP2ui;
	gl_tex_coord_p2uiv_t* TexCoordP2uiv;
	gl_tex_coord_p3ui_t* TexCoordP3ui;
	gl_tex_coord_p3uiv_t* TexCoordP3uiv;
	gl_tex_coord_p4ui_t* TexCoordP4ui;
	gl_tex_coord_p4uiv_t* TexCoordP4uiv;
	gl_tex_coord_pointer_ext_t* TexCoordPointerEXT;
	gl_tex_coord_pointer_list_ibm_t* TexCoordPointerListIBM;
	gl_tex_coord_pointerv_intel_t* TexCoordPointervINTEL;
	gl_tex_filter_func_sgis_t* TexFilterFuncSGIS;
	gl_tex_image2dmultisample_t* TexImage2DMultisample;
	gl_tex_image2dmultisample_coverage_nv_t* TexImage2DMultisampleCoverageNV;
	gl_tex_image3d_t* TexImage3D;
	gl_tex_image3dext_t* TexImage3DEXT;
	gl_tex_image3dmultisample_t* TexImage3DMultisample;
	gl_tex_image3dmultisample_coverage_nv_t* TexImage3DMultisampleCoverageNV;
	gl_tex_image4dsgis_t* TexImage4DSGIS;
	gl_tex_page_commitment_arb_t* TexPageCommitmentARB;
	gl_tex_parameter_iiv_t* TexParameterIiv;
	gl_tex_parameter_iiv_ext_t* TexParameterIivEXT;
	gl_tex_parameter_iuiv_t* TexParameterIuiv;
	gl_tex_parameter_iuiv_ext_t* TexParameterIuivEXT;
	gl_tex_renderbuffer_nv_t* TexRenderbufferNV;
	gl_tex_storage1d_t* TexStorage1D;
	gl_tex_storage2d_t* TexStorage2D;
	gl_tex_storage2dmultisample_t* TexStorage2DMultisample;
	gl_tex_storage3d_t* TexStorage3D;
	gl_tex_storage3dmultisample_t* TexStorage3DMultisample;
	gl_tex_storage_mem1dext_t* TexStorageMem1DEXT;
	gl_tex_storage_mem2dext_t* TexStorageMem2DEXT;
	gl_tex_storage_mem2dmultisample_ext_t* TexStorageMem2DMultisampleEXT;
	gl_tex_storage_mem3dext_t* TexStorageMem3DEXT;
	gl_tex_storage_mem3dmultisample_ext_t* TexStorageMem3DMultisampleEXT;
	gl_tex_storage_sparse_amd_t* TexStorageSparseAMD;
	gl_tex_sub_image1dext_t* TexSubImage1DEXT;
	gl_tex_sub_image2dext_t* TexSubImage2DEXT;
	gl_tex_sub_image3d_t* TexSubImage3D;
	gl_tex_sub_image3dext_t* TexSubImage3DEXT;
	gl_tex_sub_image4dsgis_t* TexSubImage4DSGIS;
	gl_texture_barrier_t* TextureBarrier;
	gl_texture_barrier_nv_t* TextureBarrierNV;
	gl_texture_buffer_t* TextureBuffer;
	gl_texture_buffer_ext_t* TextureBufferEXT;
	gl_texture_buffer_range_t* TextureBufferRange;
	gl_texture_buffer_range_ext_t* TextureBufferRangeEXT;
	gl_texture_image1dext_t* TextureImage1DEXT;
	gl_texture_image2dext_t* TextureImage2DEXT;
	gl_texture_image2dmultisample_coverage_nv_t* TextureImage2DMultisampleCoverageNV;
	gl_texture_image2dmultisample_nv_t* TextureImage2DMultisampleNV;
	gl_texture_image3dext_t* TextureImage3DEXT;
	gl_texture_image3dmultisample_coverage_nv_t* TextureImage3DMultisampleCoverageNV;
	gl_texture_image3dmultisample_nv_t* TextureImage3DMultisampleNV;
	gl_texture_light_ext_t* TextureLightEXT;
	gl_texture_material_ext_t* TextureMaterialEXT;
	gl_texture_normal_ext_t* TextureNormalEXT;
	gl_texture_page_commitment_ext_t* TexturePageCommitmentEXT;
	gl_texture_parameter_iiv_t* TextureParameterIiv;
	gl_texture_parameter_iiv_ext_t* TextureParameterIivEXT;
	gl_texture_parameter_iuiv_t* TextureParameterIuiv;
	gl_texture_parameter_iuiv_ext_t* TextureParameterIuivEXT;
	gl_texture_parameterf_t* TextureParameterf;
	gl_texture_parameterf_ext_t* TextureParameterfEXT;
	gl_texture_parameterfv_t* TextureParameterfv;
	gl_texture_parameterfv_ext_t* TextureParameterfvEXT;
	gl_texture_parameteri_t* TextureParameteri;
	gl_texture_parameteri_ext_t* TextureParameteriEXT;
	gl_texture_parameteriv_t* TextureParameteriv;
	gl_texture_parameteriv_ext_t* TextureParameterivEXT;
	gl_texture_range_apple_t* TextureRangeAPPLE;
	gl_texture_renderbuffer_ext_t* TextureRenderbufferEXT;
	gl_texture_storage1d_t* TextureStorage1D;
	gl_texture_storage1dext_t* TextureStorage1DEXT;
	gl_texture_storage2d_t* TextureStorage2D;
	gl_texture_storage2dext_t* TextureStorage2DEXT;
	gl_texture_storage2dmultisample_t* TextureStorage2DMultisample;
	gl_texture_storage2dmultisample_ext_t* TextureStorage2DMultisampleEXT;
	gl_texture_storage3d_t* TextureStorage3D;
	gl_texture_storage3dext_t* TextureStorage3DEXT;
	gl_texture_storage3dmultisample_t* TextureStorage3DMultisample;
	gl_texture_storage3dmultisample_ext_t* TextureStorage3DMultisampleEXT;
	gl_texture_storage_mem1dext_t* TextureStorageMem1DEXT;
	gl_texture_storage_mem2dext_t* TextureStorageMem2DEXT;
	gl_texture_storage_mem2dmultisample_ext_t* TextureStorageMem2DMultisampleEXT;
	gl_texture_storage_mem3dext_t* TextureStorageMem3DEXT;
	gl_texture_storage_mem3dmultisample_ext_t* TextureStorageMem3DMultisampleEXT;
	gl_texture_storage_sparse_amd_t* TextureStorageSparseAMD;
	gl_texture_sub_image1d_t* TextureSubImage1D;
	gl_texture_sub_image1dext_t* TextureSubImage1DEXT;
	gl_texture_sub_image2d_t* TextureSubImage2D;
	gl_texture_sub_image2dext_t* TextureSubImage2DEXT;
	gl_texture_sub_image3d_t* TextureSubImage3D;
	gl_texture_sub_image3dext_t* TextureSubImage3DEXT;
	gl_texture_view_t* TextureView;
	gl_track_matrix_nv_t* TrackMatrixNV;
	gl_transform_feedback_attribs_nv_t* TransformFeedbackAttribsNV;
	gl_transform_feedback_buffer_base_t* TransformFeedbackBufferBase;
	gl_transform_feedback_buffer_range_t* TransformFeedbackBufferRange;
	gl_transform_feedback_varyings_t* TransformFeedbackVaryings;
	gl_transform_feedback_varyings_ext_t* TransformFeedbackVaryingsEXT;
	gl_transform_feedback_varyings_nv_t* TransformFeedbackVaryingsNV;
	gl_transform_path_nv_t* TransformPathNV;
	gl_uniform1d_t* Uniform1d;
	gl_uniform1dv_t* Uniform1dv;
	gl_uniform1f_t* Uniform1f;
	gl_uniform1f_arb_t* Uniform1fARB;
	gl_uniform1fv_t* Uniform1fv;
	gl_uniform1fv_arb_t* Uniform1fvARB;
	gl_uniform1i_t* Uniform1i;
	gl_uniform1i64arb_t* Uniform1i64ARB;
	gl_uniform1i64nv_t* Uniform1i64NV;
	gl_uniform1i64v_arb_t* Uniform1i64vARB;
	gl_uniform1i64v_nv_t* Uniform1i64vNV;
	gl_uniform1i_arb_t* Uniform1iARB;
	gl_uniform1iv_t* Uniform1iv;
	gl_uniform1iv_arb_t* Uniform1ivARB;
	gl_uniform1ui_t* Uniform1ui;
	gl_uniform1ui64arb_t* Uniform1ui64ARB;
	gl_uniform1ui64nv_t* Uniform1ui64NV;
	gl_uniform1ui64v_arb_t* Uniform1ui64vARB;
	gl_uniform1ui64v_nv_t* Uniform1ui64vNV;
	gl_uniform1ui_ext_t* Uniform1uiEXT;
	gl_uniform1uiv_t* Uniform1uiv;
	gl_uniform1uiv_ext_t* Uniform1uivEXT;
	gl_uniform2d_t* Uniform2d;
	gl_uniform2dv_t* Uniform2dv;
	gl_uniform2f_t* Uniform2f;
	gl_uniform2f_arb_t* Uniform2fARB;
	gl_uniform2fv_t* Uniform2fv;
	gl_uniform2fv_arb_t* Uniform2fvARB;
	gl_uniform2i_t* Uniform2i;
	gl_uniform2i64arb_t* Uniform2i64ARB;
	gl_uniform2i64nv_t* Uniform2i64NV;
	gl_uniform2i64v_arb_t* Uniform2i64vARB;
	gl_uniform2i64v_nv_t* Uniform2i64vNV;
	gl_uniform2i_arb_t* Uniform2iARB;
	gl_uniform2iv_t* Uniform2iv;
	gl_uniform2iv_arb_t* Uniform2ivARB;
	gl_uniform2ui_t* Uniform2ui;
	gl_uniform2ui64arb_t* Uniform2ui64ARB;
	gl_uniform2ui64nv_t* Uniform2ui64NV;
	gl_uniform2ui64v_arb_t* Uniform2ui64vARB;
	gl_uniform2ui64v_nv_t* Uniform2ui64vNV;
	gl_uniform2ui_ext_t* Uniform2uiEXT;
	gl_uniform2uiv_t* Uniform2uiv;
	gl_uniform2uiv_ext_t* Uniform2uivEXT;
	gl_uniform3d_t* Uniform3d;
	gl_uniform3dv_t* Uniform3dv;
	gl_uniform3f_t* Uniform3f;
	gl_uniform3f_arb_t* Uniform3fARB;
	gl_uniform3fv_t* Uniform3fv;
	gl_uniform3fv_arb_t* Uniform3fvARB;
	gl_uniform3i_t* Uniform3i;
	gl_uniform3i64arb_t* Uniform3i64ARB;
	gl_uniform3i64nv_t* Uniform3i64NV;
	gl_uniform3i64v_arb_t* Uniform3i64vARB;
	gl_uniform3i64v_nv_t* Uniform3i64vNV;
	gl_uniform3i_arb_t* Uniform3iARB;
	gl_uniform3iv_t* Uniform3iv;
	gl_uniform3iv_arb_t* Uniform3ivARB;
	gl_uniform3ui_t* Uniform3ui;
	gl_uniform3ui64arb_t* Uniform3ui64ARB;
	gl_uniform3ui64nv_t* Uniform3ui64NV;
	gl_uniform3ui64v_arb_t* Uniform3ui64vARB;
	gl_uniform3ui64v_nv_t* Uniform3ui64vNV;
	gl_uniform3ui_ext_t* Uniform3uiEXT;
	gl_uniform3uiv_t* Uniform3uiv;
	gl_uniform3uiv_ext_t* Uniform3uivEXT;
	gl_uniform4d_t* Uniform4d;
	gl_uniform4dv_t* Uniform4dv;
	gl_uniform4f_t* Uniform4f;
	gl_uniform4f_arb_t* Uniform4fARB;
	gl_uniform4fv_t* Uniform4fv;
	gl_uniform4fv_arb_t* Uniform4fvARB;
	gl_uniform4i_t* Uniform4i;
	gl_uniform4i64arb_t* Uniform4i64ARB;
	gl_uniform4i64nv_t* Uniform4i64NV;
	gl_uniform4i64v_arb_t* Uniform4i64vARB;
	gl_uniform4i64v_nv_t* Uniform4i64vNV;
	gl_uniform4i_arb_t* Uniform4iARB;
	gl_uniform4iv_t* Uniform4iv;
	gl_uniform4iv_arb_t* Uniform4ivARB;
	gl_uniform4ui_t* Uniform4ui;
	gl_uniform4ui64arb_t* Uniform4ui64ARB;
	gl_uniform4ui64nv_t* Uniform4ui64NV;
	gl_uniform4ui64v_arb_t* Uniform4ui64vARB;
	gl_uniform4ui64v_nv_t* Uniform4ui64vNV;
	gl_uniform4ui_ext_t* Uniform4uiEXT;
	gl_uniform4uiv_t* Uniform4uiv;
	gl_uniform4uiv_ext_t* Uniform4uivEXT;
	gl_uniform_block_binding_t* UniformBlockBinding;
	gl_uniform_buffer_ext_t* UniformBufferEXT;
	gl_uniform_handleui64arb_t* UniformHandleui64ARB;
	gl_uniform_handleui64nv_t* UniformHandleui64NV;
	gl_uniform_handleui64v_arb_t* UniformHandleui64vARB;
	gl_uniform_handleui64v_nv_t* UniformHandleui64vNV;
	gl_uniform_matrix2dv_t* UniformMatrix2dv;
	gl_uniform_matrix2fv_t* UniformMatrix2fv;
	gl_uniform_matrix2fv_arb_t* UniformMatrix2fvARB;
	gl_uniform_matrix2x3dv_t* UniformMatrix2x3dv;
	gl_uniform_matrix2x3fv_t* UniformMatrix2x3fv;
	gl_uniform_matrix2x4dv_t* UniformMatrix2x4dv;
	gl_uniform_matrix2x4fv_t* UniformMatrix2x4fv;
	gl_uniform_matrix3dv_t* UniformMatrix3dv;
	gl_uniform_matrix3fv_t* UniformMatrix3fv;
	gl_uniform_matrix3fv_arb_t* UniformMatrix3fvARB;
	gl_uniform_matrix3x2dv_t* UniformMatrix3x2dv;
	gl_uniform_matrix3x2fv_t* UniformMatrix3x2fv;
	gl_uniform_matrix3x4dv_t* UniformMatrix3x4dv;
	gl_uniform_matrix3x4fv_t* UniformMatrix3x4fv;
	gl_uniform_matrix4dv_t* UniformMatrix4dv;
	gl_uniform_matrix4fv_t* UniformMatrix4fv;
	gl_uniform_matrix4fv_arb_t* UniformMatrix4fvARB;
	gl_uniform_matrix4x2dv_t* UniformMatrix4x2dv;
	gl_uniform_matrix4x2fv_t* UniformMatrix4x2fv;
	gl_uniform_matrix4x3dv_t* UniformMatrix4x3dv;
	gl_uniform_matrix4x3fv_t* UniformMatrix4x3fv;
	gl_uniform_subroutinesuiv_t* UniformSubroutinesuiv;
	gl_uniformui64nv_t* Uniformui64NV;
	gl_uniformui64v_nv_t* Uniformui64vNV;
	gl_unlock_arrays_ext_t* UnlockArraysEXT;
	gl_unmap_buffer_t* UnmapBuffer;
	gl_unmap_buffer_arb_t* UnmapBufferARB;
	gl_unmap_named_buffer_t* UnmapNamedBuffer;
	gl_unmap_named_buffer_ext_t* UnmapNamedBufferEXT;
	gl_unmap_object_buffer_ati_t* UnmapObjectBufferATI;
	gl_unmap_texture2dintel_t* UnmapTexture2DINTEL;
	gl_update_object_buffer_ati_t* UpdateObjectBufferATI;
	gl_use_program_t* UseProgram;
	gl_use_program_object_arb_t* UseProgramObjectARB;
	gl_use_program_stages_t* UseProgramStages;
	gl_use_shader_program_ext_t* UseShaderProgramEXT;
	gl_vdpaufini_nv_t* VDPAUFiniNV;
	gl_vdpauget_surfaceiv_nv_t* VDPAUGetSurfaceivNV;
	gl_vdpauinit_nv_t* VDPAUInitNV;
	gl_vdpauis_surface_nv_t* VDPAUIsSurfaceNV;
	gl_vdpaumap_surfaces_nv_t* VDPAUMapSurfacesNV;
	gl_vdpauregister_output_surface_nv_t* VDPAURegisterOutputSurfaceNV;
	gl_vdpauregister_video_surface_nv_t* VDPAURegisterVideoSurfaceNV;
	gl_vdpausurface_access_nv_t* VDPAUSurfaceAccessNV;
	gl_vdpauunmap_surfaces_nv_t* VDPAUUnmapSurfacesNV;
	gl_vdpauunregister_surface_nv_t* VDPAUUnregisterSurfaceNV;
	gl_validate_program_t* ValidateProgram;
	gl_validate_program_arb_t* ValidateProgramARB;
	gl_validate_program_pipeline_t* ValidateProgramPipeline;
	gl_variant_array_object_ati_t* VariantArrayObjectATI;
	gl_variant_pointer_ext_t* VariantPointerEXT;
	gl_variantbv_ext_t* VariantbvEXT;
	gl_variantdv_ext_t* VariantdvEXT;
	gl_variantfv_ext_t* VariantfvEXT;
	gl_variantiv_ext_t* VariantivEXT;
	gl_variantsv_ext_t* VariantsvEXT;
	gl_variantubv_ext_t* VariantubvEXT;
	gl_variantuiv_ext_t* VariantuivEXT;
	gl_variantusv_ext_t* VariantusvEXT;
	gl_vertex2h_nv_t* Vertex2hNV;
	gl_vertex2hv_nv_t* Vertex2hvNV;
	gl_vertex3h_nv_t* Vertex3hNV;
	gl_vertex3hv_nv_t* Vertex3hvNV;
	gl_vertex4h_nv_t* Vertex4hNV;
	gl_vertex4hv_nv_t* Vertex4hvNV;
	gl_vertex_array_attrib_binding_t* VertexArrayAttribBinding;
	gl_vertex_array_attrib_format_t* VertexArrayAttribFormat;
	gl_vertex_array_attrib_iformat_t* VertexArrayAttribIFormat;
	gl_vertex_array_attrib_lformat_t* VertexArrayAttribLFormat;
	gl_vertex_array_bind_vertex_buffer_ext_t* VertexArrayBindVertexBufferEXT;
	gl_vertex_array_binding_divisor_t* VertexArrayBindingDivisor;
	gl_vertex_array_color_offset_ext_t* VertexArrayColorOffsetEXT;
	gl_vertex_array_edge_flag_offset_ext_t* VertexArrayEdgeFlagOffsetEXT;
	gl_vertex_array_element_buffer_t* VertexArrayElementBuffer;
	gl_vertex_array_fog_coord_offset_ext_t* VertexArrayFogCoordOffsetEXT;
	gl_vertex_array_index_offset_ext_t* VertexArrayIndexOffsetEXT;
	gl_vertex_array_multi_tex_coord_offset_ext_t* VertexArrayMultiTexCoordOffsetEXT;
	gl_vertex_array_normal_offset_ext_t* VertexArrayNormalOffsetEXT;
	gl_vertex_array_parameteri_apple_t* VertexArrayParameteriAPPLE;
	gl_vertex_array_range_apple_t* VertexArrayRangeAPPLE;
	gl_vertex_array_range_nv_t* VertexArrayRangeNV;
	gl_vertex_array_secondary_color_offset_ext_t* VertexArraySecondaryColorOffsetEXT;
	gl_vertex_array_tex_coord_offset_ext_t* VertexArrayTexCoordOffsetEXT;
	gl_vertex_array_vertex_attrib_binding_ext_t* VertexArrayVertexAttribBindingEXT;
	gl_vertex_array_vertex_attrib_divisor_ext_t* VertexArrayVertexAttribDivisorEXT;
	gl_vertex_array_vertex_attrib_format_ext_t* VertexArrayVertexAttribFormatEXT;
	gl_vertex_array_vertex_attrib_iformat_ext_t* VertexArrayVertexAttribIFormatEXT;
	gl_vertex_array_vertex_attrib_ioffset_ext_t* VertexArrayVertexAttribIOffsetEXT;
	gl_vertex_array_vertex_attrib_lformat_ext_t* VertexArrayVertexAttribLFormatEXT;
	gl_vertex_array_vertex_attrib_loffset_ext_t* VertexArrayVertexAttribLOffsetEXT;
	gl_vertex_array_vertex_attrib_offset_ext_t* VertexArrayVertexAttribOffsetEXT;
	gl_vertex_array_vertex_binding_divisor_ext_t* VertexArrayVertexBindingDivisorEXT;
	gl_vertex_array_vertex_buffer_t* VertexArrayVertexBuffer;
	gl_vertex_array_vertex_buffers_t* VertexArrayVertexBuffers;
	gl_vertex_array_vertex_offset_ext_t* VertexArrayVertexOffsetEXT;
	gl_vertex_attrib1d_t* VertexAttrib1d;
	gl_vertex_attrib1d_arb_t* VertexAttrib1dARB;
	gl_vertex_attrib1d_nv_t* VertexAttrib1dNV;
	gl_vertex_attrib1dv_t* VertexAttrib1dv;
	gl_vertex_attrib1dv_arb_t* VertexAttrib1dvARB;
	gl_vertex_attrib1dv_nv_t* VertexAttrib1dvNV;
	gl_vertex_attrib1f_t* VertexAttrib1f;
	gl_vertex_attrib1f_arb_t* VertexAttrib1fARB;
	gl_vertex_attrib1f_nv_t* VertexAttrib1fNV;
	gl_vertex_attrib1fv_t* VertexAttrib1fv;
	gl_vertex_attrib1fv_arb_t* VertexAttrib1fvARB;
	gl_vertex_attrib1fv_nv_t* VertexAttrib1fvNV;
	gl_vertex_attrib1h_nv_t* VertexAttrib1hNV;
	gl_vertex_attrib1hv_nv_t* VertexAttrib1hvNV;
	gl_vertex_attrib1s_t* VertexAttrib1s;
	gl_vertex_attrib1s_arb_t* VertexAttrib1sARB;
	gl_vertex_attrib1s_nv_t* VertexAttrib1sNV;
	gl_vertex_attrib1sv_t* VertexAttrib1sv;
	gl_vertex_attrib1sv_arb_t* VertexAttrib1svARB;
	gl_vertex_attrib1sv_nv_t* VertexAttrib1svNV;
	gl_vertex_attrib2d_t* VertexAttrib2d;
	gl_vertex_attrib2d_arb_t* VertexAttrib2dARB;
	gl_vertex_attrib2d_nv_t* VertexAttrib2dNV;
	gl_vertex_attrib2dv_t* VertexAttrib2dv;
	gl_vertex_attrib2dv_arb_t* VertexAttrib2dvARB;
	gl_vertex_attrib2dv_nv_t* VertexAttrib2dvNV;
	gl_vertex_attrib2f_t* VertexAttrib2f;
	gl_vertex_attrib2f_arb_t* VertexAttrib2fARB;
	gl_vertex_attrib2f_nv_t* VertexAttrib2fNV;
	gl_vertex_attrib2fv_t* VertexAttrib2fv;
	gl_vertex_attrib2fv_arb_t* VertexAttrib2fvARB;
	gl_vertex_attrib2fv_nv_t* VertexAttrib2fvNV;
	gl_vertex_attrib2h_nv_t* VertexAttrib2hNV;
	gl_vertex_attrib2hv_nv_t* VertexAttrib2hvNV;
	gl_vertex_attrib2s_t* VertexAttrib2s;
	gl_vertex_attrib2s_arb_t* VertexAttrib2sARB;
	gl_vertex_attrib2s_nv_t* VertexAttrib2sNV;
	gl_vertex_attrib2sv_t* VertexAttrib2sv;
	gl_vertex_attrib2sv_arb_t* VertexAttrib2svARB;
	gl_vertex_attrib2sv_nv_t* VertexAttrib2svNV;
	gl_vertex_attrib3d_t* VertexAttrib3d;
	gl_vertex_attrib3d_arb_t* VertexAttrib3dARB;
	gl_vertex_attrib3d_nv_t* VertexAttrib3dNV;
	gl_vertex_attrib3dv_t* VertexAttrib3dv;
	gl_vertex_attrib3dv_arb_t* VertexAttrib3dvARB;
	gl_vertex_attrib3dv_nv_t* VertexAttrib3dvNV;
	gl_vertex_attrib3f_t* VertexAttrib3f;
	gl_vertex_attrib3f_arb_t* VertexAttrib3fARB;
	gl_vertex_attrib3f_nv_t* VertexAttrib3fNV;
	gl_vertex_attrib3fv_t* VertexAttrib3fv;
	gl_vertex_attrib3fv_arb_t* VertexAttrib3fvARB;
	gl_vertex_attrib3fv_nv_t* VertexAttrib3fvNV;
	gl_vertex_attrib3h_nv_t* VertexAttrib3hNV;
	gl_vertex_attrib3hv_nv_t* VertexAttrib3hvNV;
	gl_vertex_attrib3s_t* VertexAttrib3s;
	gl_vertex_attrib3s_arb_t* VertexAttrib3sARB;
	gl_vertex_attrib3s_nv_t* VertexAttrib3sNV;
	gl_vertex_attrib3sv_t* VertexAttrib3sv;
	gl_vertex_attrib3sv_arb_t* VertexAttrib3svARB;
	gl_vertex_attrib3sv_nv_t* VertexAttrib3svNV;
	gl_vertex_attrib4nbv_t* VertexAttrib4Nbv;
	gl_vertex_attrib4nbv_arb_t* VertexAttrib4NbvARB;
	gl_vertex_attrib4niv_t* VertexAttrib4Niv;
	gl_vertex_attrib4niv_arb_t* VertexAttrib4NivARB;
	gl_vertex_attrib4nsv_t* VertexAttrib4Nsv;
	gl_vertex_attrib4nsv_arb_t* VertexAttrib4NsvARB;
	gl_vertex_attrib4nub_t* VertexAttrib4Nub;
	gl_vertex_attrib4nub_arb_t* VertexAttrib4NubARB;
	gl_vertex_attrib4nubv_t* VertexAttrib4Nubv;
	gl_vertex_attrib4nubv_arb_t* VertexAttrib4NubvARB;
	gl_vertex_attrib4nuiv_t* VertexAttrib4Nuiv;
	gl_vertex_attrib4nuiv_arb_t* VertexAttrib4NuivARB;
	gl_vertex_attrib4nusv_t* VertexAttrib4Nusv;
	gl_vertex_attrib4nusv_arb_t* VertexAttrib4NusvARB;
	gl_vertex_attrib4bv_t* VertexAttrib4bv;
	gl_vertex_attrib4bv_arb_t* VertexAttrib4bvARB;
	gl_vertex_attrib4d_t* VertexAttrib4d;
	gl_vertex_attrib4d_arb_t* VertexAttrib4dARB;
	gl_vertex_attrib4d_nv_t* VertexAttrib4dNV;
	gl_vertex_attrib4dv_t* VertexAttrib4dv;
	gl_vertex_attrib4dv_arb_t* VertexAttrib4dvARB;
	gl_vertex_attrib4dv_nv_t* VertexAttrib4dvNV;
	gl_vertex_attrib4f_t* VertexAttrib4f;
	gl_vertex_attrib4f_arb_t* VertexAttrib4fARB;
	gl_vertex_attrib4f_nv_t* VertexAttrib4fNV;
	gl_vertex_attrib4fv_t* VertexAttrib4fv;
	gl_vertex_attrib4fv_arb_t* VertexAttrib4fvARB;
	gl_vertex_attrib4fv_nv_t* VertexAttrib4fvNV;
	gl_vertex_attrib4h_nv_t* VertexAttrib4hNV;
	gl_vertex_attrib4hv_nv_t* VertexAttrib4hvNV;
	gl_vertex_attrib4iv_t* VertexAttrib4iv;
	gl_vertex_attrib4iv_arb_t* VertexAttrib4ivARB;
	gl_vertex_attrib4s_t* VertexAttrib4s;
	gl_vertex_attrib4s_arb_t* VertexAttrib4sARB;
	gl_vertex_attrib4s_nv_t* VertexAttrib4sNV;
	gl_vertex_attrib4sv_t* VertexAttrib4sv;
	gl_vertex_attrib4sv_arb_t* VertexAttrib4svARB;
	gl_vertex_attrib4sv_nv_t* VertexAttrib4svNV;
	gl_vertex_attrib4ub_nv_t* VertexAttrib4ubNV;
	gl_vertex_attrib4ubv_t* VertexAttrib4ubv;
	gl_vertex_attrib4ubv_arb_t* VertexAttrib4ubvARB;
	gl_vertex_attrib4ubv_nv_t* VertexAttrib4ubvNV;
	gl_vertex_attrib4uiv_t* VertexAttrib4uiv;
	gl_vertex_attrib4uiv_arb_t* VertexAttrib4uivARB;
	gl_vertex_attrib4usv_t* VertexAttrib4usv;
	gl_vertex_attrib4usv_arb_t* VertexAttrib4usvARB;
	gl_vertex_attrib_array_object_ati_t* VertexAttribArrayObjectATI;
	gl_vertex_attrib_binding_t* VertexAttribBinding;
	gl_vertex_attrib_divisor_t* VertexAttribDivisor;
	gl_vertex_attrib_divisor_arb_t* VertexAttribDivisorARB;
	gl_vertex_attrib_format_t* VertexAttribFormat;
	gl_vertex_attrib_format_nv_t* VertexAttribFormatNV;
	gl_vertex_attrib_i1i_t* VertexAttribI1i;
	gl_vertex_attrib_i1i_ext_t* VertexAttribI1iEXT;
	gl_vertex_attrib_i1iv_t* VertexAttribI1iv;
	gl_vertex_attrib_i1iv_ext_t* VertexAttribI1ivEXT;
	gl_vertex_attrib_i1ui_t* VertexAttribI1ui;
	gl_vertex_attrib_i1ui_ext_t* VertexAttribI1uiEXT;
	gl_vertex_attrib_i1uiv_t* VertexAttribI1uiv;
	gl_vertex_attrib_i1uiv_ext_t* VertexAttribI1uivEXT;
	gl_vertex_attrib_i2i_t* VertexAttribI2i;
	gl_vertex_attrib_i2i_ext_t* VertexAttribI2iEXT;
	gl_vertex_attrib_i2iv_t* VertexAttribI2iv;
	gl_vertex_attrib_i2iv_ext_t* VertexAttribI2ivEXT;
	gl_vertex_attrib_i2ui_t* VertexAttribI2ui;
	gl_vertex_attrib_i2ui_ext_t* VertexAttribI2uiEXT;
	gl_vertex_attrib_i2uiv_t* VertexAttribI2uiv;
	gl_vertex_attrib_i2uiv_ext_t* VertexAttribI2uivEXT;
	gl_vertex_attrib_i3i_t* VertexAttribI3i;
	gl_vertex_attrib_i3i_ext_t* VertexAttribI3iEXT;
	gl_vertex_attrib_i3iv_t* VertexAttribI3iv;
	gl_vertex_attrib_i3iv_ext_t* VertexAttribI3ivEXT;
	gl_vertex_attrib_i3ui_t* VertexAttribI3ui;
	gl_vertex_attrib_i3ui_ext_t* VertexAttribI3uiEXT;
	gl_vertex_attrib_i3uiv_t* VertexAttribI3uiv;
	gl_vertex_attrib_i3uiv_ext_t* VertexAttribI3uivEXT;
	gl_vertex_attrib_i4bv_t* VertexAttribI4bv;
	gl_vertex_attrib_i4bv_ext_t* VertexAttribI4bvEXT;
	gl_vertex_attrib_i4i_t* VertexAttribI4i;
	gl_vertex_attrib_i4i_ext_t* VertexAttribI4iEXT;
	gl_vertex_attrib_i4iv_t* VertexAttribI4iv;
	gl_vertex_attrib_i4iv_ext_t* VertexAttribI4ivEXT;
	gl_vertex_attrib_i4sv_t* VertexAttribI4sv;
	gl_vertex_attrib_i4sv_ext_t* VertexAttribI4svEXT;
	gl_vertex_attrib_i4ubv_t* VertexAttribI4ubv;
	gl_vertex_attrib_i4ubv_ext_t* VertexAttribI4ubvEXT;
	gl_vertex_attrib_i4ui_t* VertexAttribI4ui;
	gl_vertex_attrib_i4ui_ext_t* VertexAttribI4uiEXT;
	gl_vertex_attrib_i4uiv_t* VertexAttribI4uiv;
	gl_vertex_attrib_i4uiv_ext_t* VertexAttribI4uivEXT;
	gl_vertex_attrib_i4usv_t* VertexAttribI4usv;
	gl_vertex_attrib_i4usv_ext_t* VertexAttribI4usvEXT;
	gl_vertex_attrib_iformat_t* VertexAttribIFormat;
	gl_vertex_attrib_iformat_nv_t* VertexAttribIFormatNV;
	gl_vertex_attrib_ipointer_t* VertexAttribIPointer;
	gl_vertex_attrib_ipointer_ext_t* VertexAttribIPointerEXT;
	gl_vertex_attrib_l1d_t* VertexAttribL1d;
	gl_vertex_attrib_l1d_ext_t* VertexAttribL1dEXT;
	gl_vertex_attrib_l1dv_t* VertexAttribL1dv;
	gl_vertex_attrib_l1dv_ext_t* VertexAttribL1dvEXT;
	gl_vertex_attrib_l1i64nv_t* VertexAttribL1i64NV;
	gl_vertex_attrib_l1i64v_nv_t* VertexAttribL1i64vNV;
	gl_vertex_attrib_l1ui64arb_t* VertexAttribL1ui64ARB;
	gl_vertex_attrib_l1ui64nv_t* VertexAttribL1ui64NV;
	gl_vertex_attrib_l1ui64v_arb_t* VertexAttribL1ui64vARB;
	gl_vertex_attrib_l1ui64v_nv_t* VertexAttribL1ui64vNV;
	gl_vertex_attrib_l2d_t* VertexAttribL2d;
	gl_vertex_attrib_l2d_ext_t* VertexAttribL2dEXT;
	gl_vertex_attrib_l2dv_t* VertexAttribL2dv;
	gl_vertex_attrib_l2dv_ext_t* VertexAttribL2dvEXT;
	gl_vertex_attrib_l2i64nv_t* VertexAttribL2i64NV;
	gl_vertex_attrib_l2i64v_nv_t* VertexAttribL2i64vNV;
	gl_vertex_attrib_l2ui64nv_t* VertexAttribL2ui64NV;
	gl_vertex_attrib_l2ui64v_nv_t* VertexAttribL2ui64vNV;
	gl_vertex_attrib_l3d_t* VertexAttribL3d;
	gl_vertex_attrib_l3d_ext_t* VertexAttribL3dEXT;
	gl_vertex_attrib_l3dv_t* VertexAttribL3dv;
	gl_vertex_attrib_l3dv_ext_t* VertexAttribL3dvEXT;
	gl_vertex_attrib_l3i64nv_t* VertexAttribL3i64NV;
	gl_vertex_attrib_l3i64v_nv_t* VertexAttribL3i64vNV;
	gl_vertex_attrib_l3ui64nv_t* VertexAttribL3ui64NV;
	gl_vertex_attrib_l3ui64v_nv_t* VertexAttribL3ui64vNV;
	gl_vertex_attrib_l4d_t* VertexAttribL4d;
	gl_vertex_attrib_l4d_ext_t* VertexAttribL4dEXT;
	gl_vertex_attrib_l4dv_t* VertexAttribL4dv;
	gl_vertex_attrib_l4dv_ext_t* VertexAttribL4dvEXT;
	gl_vertex_attrib_l4i64nv_t* VertexAttribL4i64NV;
	gl_vertex_attrib_l4i64v_nv_t* VertexAttribL4i64vNV;
	gl_vertex_attrib_l4ui64nv_t* VertexAttribL4ui64NV;
	gl_vertex_attrib_l4ui64v_nv_t* VertexAttribL4ui64vNV;
	gl_vertex_attrib_lformat_t* VertexAttribLFormat;
	gl_vertex_attrib_lformat_nv_t* VertexAttribLFormatNV;
	gl_vertex_attrib_lpointer_t* VertexAttribLPointer;
	gl_vertex_attrib_lpointer_ext_t* VertexAttribLPointerEXT;
	gl_vertex_attrib_p1ui_t* VertexAttribP1ui;
	gl_vertex_attrib_p1uiv_t* VertexAttribP1uiv;
	gl_vertex_attrib_p2ui_t* VertexAttribP2ui;
	gl_vertex_attrib_p2uiv_t* VertexAttribP2uiv;
	gl_vertex_attrib_p3ui_t* VertexAttribP3ui;
	gl_vertex_attrib_p3uiv_t* VertexAttribP3uiv;
	gl_vertex_attrib_p4ui_t* VertexAttribP4ui;
	gl_vertex_attrib_p4uiv_t* VertexAttribP4uiv;
	gl_vertex_attrib_parameteri_amd_t* VertexAttribParameteriAMD;
	gl_vertex_attrib_pointer_t* VertexAttribPointer;
	gl_vertex_attrib_pointer_arb_t* VertexAttribPointerARB;
	gl_vertex_attrib_pointer_nv_t* VertexAttribPointerNV;
	gl_vertex_attribs1dv_nv_t* VertexAttribs1dvNV;
	gl_vertex_attribs1fv_nv_t* VertexAttribs1fvNV;
	gl_vertex_attribs1hv_nv_t* VertexAttribs1hvNV;
	gl_vertex_attribs1sv_nv_t* VertexAttribs1svNV;
	gl_vertex_attribs2dv_nv_t* VertexAttribs2dvNV;
	gl_vertex_attribs2fv_nv_t* VertexAttribs2fvNV;
	gl_vertex_attribs2hv_nv_t* VertexAttribs2hvNV;
	gl_vertex_attribs2sv_nv_t* VertexAttribs2svNV;
	gl_vertex_attribs3dv_nv_t* VertexAttribs3dvNV;
	gl_vertex_attribs3fv_nv_t* VertexAttribs3fvNV;
	gl_vertex_attribs3hv_nv_t* VertexAttribs3hvNV;
	gl_vertex_attribs3sv_nv_t* VertexAttribs3svNV;
	gl_vertex_attribs4dv_nv_t* VertexAttribs4dvNV;
	gl_vertex_attribs4fv_nv_t* VertexAttribs4fvNV;
	gl_vertex_attribs4hv_nv_t* VertexAttribs4hvNV;
	gl_vertex_attribs4sv_nv_t* VertexAttribs4svNV;
	gl_vertex_attribs4ubv_nv_t* VertexAttribs4ubvNV;
	gl_vertex_binding_divisor_t* VertexBindingDivisor;
	gl_vertex_blend_arb_t* VertexBlendARB;
	gl_vertex_blend_envf_ati_t* VertexBlendEnvfATI;
	gl_vertex_blend_envi_ati_t* VertexBlendEnviATI;
	gl_vertex_format_nv_t* VertexFormatNV;
	gl_vertex_p2ui_t* VertexP2ui;
	gl_vertex_p2uiv_t* VertexP2uiv;
	gl_vertex_p3ui_t* VertexP3ui;
	gl_vertex_p3uiv_t* VertexP3uiv;
	gl_vertex_p4ui_t* VertexP4ui;
	gl_vertex_p4uiv_t* VertexP4uiv;
	gl_vertex_pointer_ext_t* VertexPointerEXT;
	gl_vertex_pointer_list_ibm_t* VertexPointerListIBM;
	gl_vertex_pointerv_intel_t* VertexPointervINTEL;
	gl_vertex_stream1d_ati_t* VertexStream1dATI;
	gl_vertex_stream1dv_ati_t* VertexStream1dvATI;
	gl_vertex_stream1f_ati_t* VertexStream1fATI;
	gl_vertex_stream1fv_ati_t* VertexStream1fvATI;
	gl_vertex_stream1i_ati_t* VertexStream1iATI;
	gl_vertex_stream1iv_ati_t* VertexStream1ivATI;
	gl_vertex_stream1s_ati_t* VertexStream1sATI;
	gl_vertex_stream1sv_ati_t* VertexStream1svATI;
	gl_vertex_stream2d_ati_t* VertexStream2dATI;
	gl_vertex_stream2dv_ati_t* VertexStream2dvATI;
	gl_vertex_stream2f_ati_t* VertexStream2fATI;
	gl_vertex_stream2fv_ati_t* VertexStream2fvATI;
	gl_vertex_stream2i_ati_t* VertexStream2iATI;
	gl_vertex_stream2iv_ati_t* VertexStream2ivATI;
	gl_vertex_stream2s_ati_t* VertexStream2sATI;
	gl_vertex_stream2sv_ati_t* VertexStream2svATI;
	gl_vertex_stream3d_ati_t* VertexStream3dATI;
	gl_vertex_stream3dv_ati_t* VertexStream3dvATI;
	gl_vertex_stream3f_ati_t* VertexStream3fATI;
	gl_vertex_stream3fv_ati_t* VertexStream3fvATI;
	gl_vertex_stream3i_ati_t* VertexStream3iATI;
	gl_vertex_stream3iv_ati_t* VertexStream3ivATI;
	gl_vertex_stream3s_ati_t* VertexStream3sATI;
	gl_vertex_stream3sv_ati_t* VertexStream3svATI;
	gl_vertex_stream4d_ati_t* VertexStream4dATI;
	gl_vertex_stream4dv_ati_t* VertexStream4dvATI;
	gl_vertex_stream4f_ati_t* VertexStream4fATI;
	gl_vertex_stream4fv_ati_t* VertexStream4fvATI;
	gl_vertex_stream4i_ati_t* VertexStream4iATI;
	gl_vertex_stream4iv_ati_t* VertexStream4ivATI;
	gl_vertex_stream4s_ati_t* VertexStream4sATI;
	gl_vertex_stream4sv_ati_t* VertexStream4svATI;
	gl_vertex_weight_pointer_ext_t* VertexWeightPointerEXT;
	gl_vertex_weightf_ext_t* VertexWeightfEXT;
	gl_vertex_weightfv_ext_t* VertexWeightfvEXT;
	gl_vertex_weighth_nv_t* VertexWeighthNV;
	gl_vertex_weighthv_nv_t* VertexWeighthvNV;
	gl_video_capture_nv_t* VideoCaptureNV;
	gl_video_capture_stream_parameterdv_nv_t* VideoCaptureStreamParameterdvNV;
	gl_video_capture_stream_parameterfv_nv_t* VideoCaptureStreamParameterfvNV;
	gl_video_capture_stream_parameteriv_nv_t* VideoCaptureStreamParameterivNV;
	gl_viewport_arrayv_t* ViewportArrayv;
	gl_viewport_indexedf_t* ViewportIndexedf;
	gl_viewport_indexedfv_t* ViewportIndexedfv;
	gl_viewport_position_wscale_nv_t* ViewportPositionWScaleNV;
	gl_viewport_swizzle_nv_t* ViewportSwizzleNV;
	gl_wait_semaphore_ext_t* WaitSemaphoreEXT;
	gl_wait_sync_t* WaitSync;
	gl_wait_vk_semaphore_nv_t* WaitVkSemaphoreNV;
	gl_weight_paths_nv_t* WeightPathsNV;
	gl_weight_pointer_arb_t* WeightPointerARB;
	gl_weightbv_arb_t* WeightbvARB;
	gl_weightdv_arb_t* WeightdvARB;
	gl_weightfv_arb_t* WeightfvARB;
	gl_weightiv_arb_t* WeightivARB;
	gl_weightsv_arb_t* WeightsvARB;
	gl_weightubv_arb_t* WeightubvARB;
	gl_weightuiv_arb_t* WeightuivARB;
	gl_weightusv_arb_t* WeightusvARB;
	gl_window_pos2d_t* WindowPos2d;
	gl_window_pos2d_arb_t* WindowPos2dARB;
	gl_window_pos2d_mesa_t* WindowPos2dMESA;
	gl_window_pos2dv_t* WindowPos2dv;
	gl_window_pos2dv_arb_t* WindowPos2dvARB;
	gl_window_pos2dv_mesa_t* WindowPos2dvMESA;
	gl_window_pos2f_t* WindowPos2f;
	gl_window_pos2f_arb_t* WindowPos2fARB;
	gl_window_pos2f_mesa_t* WindowPos2fMESA;
	gl_window_pos2fv_t* WindowPos2fv;
	gl_window_pos2fv_arb_t* WindowPos2fvARB;
	gl_window_pos2fv_mesa_t* WindowPos2fvMESA;
	gl_window_pos2i_t* WindowPos2i;
	gl_window_pos2i_arb_t* WindowPos2iARB;
	gl_window_pos2i_mesa_t* WindowPos2iMESA;
	gl_window_pos2iv_t* WindowPos2iv;
	gl_window_pos2iv_arb_t* WindowPos2ivARB;
	gl_window_pos2iv_mesa_t* WindowPos2ivMESA;
	gl_window_pos2s_t* WindowPos2s;
	gl_window_pos2s_arb_t* WindowPos2sARB;
	gl_window_pos2s_mesa_t* WindowPos2sMESA;
	gl_window_pos2sv_t* WindowPos2sv;
	gl_window_pos2sv_arb_t* WindowPos2svARB;
	gl_window_pos2sv_mesa_t* WindowPos2svMESA;
	gl_window_pos3d_t* WindowPos3d;
	gl_window_pos3d_arb_t* WindowPos3dARB;
	gl_window_pos3d_mesa_t* WindowPos3dMESA;
	gl_window_pos3dv_t* WindowPos3dv;
	gl_window_pos3dv_arb_t* WindowPos3dvARB;
	gl_window_pos3dv_mesa_t* WindowPos3dvMESA;
	gl_window_pos3f_t* WindowPos3f;
	gl_window_pos3f_arb_t* WindowPos3fARB;
	gl_window_pos3f_mesa_t* WindowPos3fMESA;
	gl_window_pos3fv_t* WindowPos3fv;
	gl_window_pos3fv_arb_t* WindowPos3fvARB;
	gl_window_pos3fv_mesa_t* WindowPos3fvMESA;
	gl_window_pos3i_t* WindowPos3i;
	gl_window_pos3i_arb_t* WindowPos3iARB;
	gl_window_pos3i_mesa_t* WindowPos3iMESA;
	gl_window_pos3iv_t* WindowPos3iv;
	gl_window_pos3iv_arb_t* WindowPos3ivARB;
	gl_window_pos3iv_mesa_t* WindowPos3ivMESA;
	gl_window_pos3s_t* WindowPos3s;
	gl_window_pos3s_arb_t* WindowPos3sARB;
	gl_window_pos3s_mesa_t* WindowPos3sMESA;
	gl_window_pos3sv_t* WindowPos3sv;
	gl_window_pos3sv_arb_t* WindowPos3svARB;
	gl_window_pos3sv_mesa_t* WindowPos3svMESA;
	gl_window_pos4d_mesa_t* WindowPos4dMESA;
	gl_window_pos4dv_mesa_t* WindowPos4dvMESA;
	gl_window_pos4f_mesa_t* WindowPos4fMESA;
	gl_window_pos4fv_mesa_t* WindowPos4fvMESA;
	gl_window_pos4i_mesa_t* WindowPos4iMESA;
	gl_window_pos4iv_mesa_t* WindowPos4ivMESA;
	gl_window_pos4s_mesa_t* WindowPos4sMESA;
	gl_window_pos4sv_mesa_t* WindowPos4svMESA;
	gl_window_rectangles_ext_t* WindowRectanglesEXT;
	gl_write_mask_ext_t* WriteMaskEXT;
};

inline GL* GLFunctions() {
	static GL glFunctions = {};
	return &glFunctions;
}

#if defined(SOGL_WINDOWS)
struct WGL {
	wgl_associate_image_buffer_events_i3d_t* AssociateImageBufferEventsI3D;
	wgl_begin_frame_tracking_i3d_t* BeginFrameTrackingI3D;
	wgl_bind_display_color_table_ext_t* BindDisplayColorTableEXT;
	wgl_bind_swap_barrier_nv_t* BindSwapBarrierNV;
	wgl_bind_tex_image_arb_t* BindTexImageARB;
	wgl_bind_video_capture_device_nv_t* BindVideoCaptureDeviceNV;
	wgl_bind_video_device_nv_t* BindVideoDeviceNV;
	wgl_bind_video_image_nv_t* BindVideoImageNV;
	wgl_blit_context_framebuffer_amd_t* BlitContextFramebufferAMD;
	wgl_choose_pixel_format_arb_t* ChoosePixelFormatARB;
	wgl_choose_pixel_format_ext_t* ChoosePixelFormatEXT;
	wgl_copy_image_sub_data_nv_t* CopyImageSubDataNV;
	wgl_create_affinity_dcnv_t* CreateAffinityDCNV;
	wgl_create_associated_context_amd_t* CreateAssociatedContextAMD;
	wgl_create_associated_context_attribs_amd_t* CreateAssociatedContextAttribsAMD;
	wgl_create_buffer_region_arb_t* CreateBufferRegionARB;
	wgl_create_context_attribs_arb_t* CreateContextAttribsARB;
	wgl_create_display_color_table_ext_t* CreateDisplayColorTableEXT;
	wgl_create_image_buffer_i3d_t* CreateImageBufferI3D;
	wgl_create_pbuffer_arb_t* CreatePbufferARB;
	wgl_create_pbuffer_ext_t* CreatePbufferEXT;
	wgl_dxclose_device_nv_t* DXCloseDeviceNV;
	wgl_dxlock_objects_nv_t* DXLockObjectsNV;
	wgl_dxobject_access_nv_t* DXObjectAccessNV;
	wgl_dxopen_device_nv_t* DXOpenDeviceNV;
	wgl_dxregister_object_nv_t* DXRegisterObjectNV;
	wgl_dxset_resource_share_handle_nv_t* DXSetResourceShareHandleNV;
	wgl_dxunlock_objects_nv_t* DXUnlockObjectsNV;
	wgl_dxunregister_object_nv_t* DXUnregisterObjectNV;
	wgl_delay_before_swap_nv_t* DelayBeforeSwapNV;
	wgl_delete_associated_context_amd_t* DeleteAssociatedContextAMD;
	wgl_delete_buffer_region_arb_t* DeleteBufferRegionARB;
	wgl_delete_dcnv_t* DeleteDCNV;
	wgl_destroy_display_color_table_ext_t* DestroyDisplayColorTableEXT;
	wgl_destroy_image_buffer_i3d_t* DestroyImageBufferI3D;
	wgl_destroy_pbuffer_arb_t* DestroyPbufferARB;
	wgl_destroy_pbuffer_ext_t* DestroyPbufferEXT;
	wgl_disable_frame_lock_i3d_t* DisableFrameLockI3D;
	wgl_disable_genlock_i3d_t* DisableGenlockI3D;
	wgl_enable_frame_lock_i3d_t* EnableFrameLockI3D;
	wgl_enable_genlock_i3d_t* EnableGenlockI3D;
	wgl_end_frame_tracking_i3d_t* EndFrameTrackingI3D;
	wgl_enum_gpu_devices_nv_t* EnumGpuDevicesNV;
	wgl_enum_gpus_from_affinity_dcnv_t* EnumGpusFromAffinityDCNV;
	wgl_enum_gpus_nv_t* EnumGpusNV;
	wgl_enumerate_video_capture_devices_nv_t* EnumerateVideoCaptureDevicesNV;
	wgl_enumerate_video_devices_nv_t* EnumerateVideoDevicesNV;
	wgl_free_memory_nv_t* FreeMemoryNV;
	wgl_genlock_sample_rate_i3d_t* GenlockSampleRateI3D;
	wgl_genlock_source_delay_i3d_t* GenlockSourceDelayI3D;
	wgl_genlock_source_edge_i3d_t* GenlockSourceEdgeI3D;
	wgl_genlock_source_i3d_t* GenlockSourceI3D;
	wgl_get_context_gpuidamd_t* GetContextGPUIDAMD;
	wgl_get_current_associated_context_amd_t* GetCurrentAssociatedContextAMD;
	wgl_get_current_read_dcarb_t* GetCurrentReadDCARB;
	wgl_get_current_read_dcext_t* GetCurrentReadDCEXT;
	wgl_get_digital_video_parameters_i3d_t* GetDigitalVideoParametersI3D;
	wgl_get_frame_usage_i3d_t* GetFrameUsageI3D;
	wgl_get_gpuids_amd_t* GetGPUIDsAMD;
	wgl_get_gpuinfo_amd_t* GetGPUInfoAMD;
	wgl_get_gamma_table_i3d_t* GetGammaTableI3D;
	wgl_get_gamma_table_parameters_i3d_t* GetGammaTableParametersI3D;
	wgl_get_genlock_sample_rate_i3d_t* GetGenlockSampleRateI3D;
	wgl_get_genlock_source_delay_i3d_t* GetGenlockSourceDelayI3D;
	wgl_get_genlock_source_edge_i3d_t* GetGenlockSourceEdgeI3D;
	wgl_get_genlock_source_i3d_t* GetGenlockSourceI3D;
	wgl_get_msc_rate_oml_t* GetMscRateOML;
	wgl_get_pbuffer_dcarb_t* GetPbufferDCARB;
	wgl_get_pbuffer_dcext_t* GetPbufferDCEXT;
	wgl_get_pixel_format_attribfv_arb_t* GetPixelFormatAttribfvARB;
	wgl_get_pixel_format_attribfv_ext_t* GetPixelFormatAttribfvEXT;
	wgl_get_pixel_format_attribiv_arb_t* GetPixelFormatAttribivARB;
	wgl_get_pixel_format_attribiv_ext_t* GetPixelFormatAttribivEXT;
	wgl_get_swap_interval_ext_t* GetSwapIntervalEXT;
	wgl_get_sync_values_oml_t* GetSyncValuesOML;
	wgl_get_video_device_nv_t* GetVideoDeviceNV;
	wgl_get_video_info_nv_t* GetVideoInfoNV;
	wgl_is_enabled_frame_lock_i3d_t* IsEnabledFrameLockI3D;
	wgl_is_enabled_genlock_i3d_t* IsEnabledGenlockI3D;
	wgl_join_swap_group_nv_t* JoinSwapGroupNV;
	wgl_load_display_color_table_ext_t* LoadDisplayColorTableEXT;
	wgl_lock_video_capture_device_nv_t* LockVideoCaptureDeviceNV;
	wgl_make_associated_context_current_amd_t* MakeAssociatedContextCurrentAMD;
	wgl_make_context_current_arb_t* MakeContextCurrentARB;
	wgl_make_context_current_ext_t* MakeContextCurrentEXT;
	wgl_query_current_context_nv_t* QueryCurrentContextNV;
	wgl_query_frame_count_nv_t* QueryFrameCountNV;
	wgl_query_frame_lock_master_i3d_t* QueryFrameLockMasterI3D;
	wgl_query_frame_tracking_i3d_t* QueryFrameTrackingI3D;
	wgl_query_genlock_max_source_delay_i3d_t* QueryGenlockMaxSourceDelayI3D;
	wgl_query_max_swap_groups_nv_t* QueryMaxSwapGroupsNV;
	wgl_query_pbuffer_arb_t* QueryPbufferARB;
	wgl_query_pbuffer_ext_t* QueryPbufferEXT;
	wgl_query_swap_group_nv_t* QuerySwapGroupNV;
	wgl_query_video_capture_device_nv_t* QueryVideoCaptureDeviceNV;
	wgl_release_image_buffer_events_i3d_t* ReleaseImageBufferEventsI3D;
	wgl_release_pbuffer_dcarb_t* ReleasePbufferDCARB;
	wgl_release_pbuffer_dcext_t* ReleasePbufferDCEXT;
	wgl_release_tex_image_arb_t* ReleaseTexImageARB;
	wgl_release_video_capture_device_nv_t* ReleaseVideoCaptureDeviceNV;
	wgl_release_video_device_nv_t* ReleaseVideoDeviceNV;
	wgl_release_video_image_nv_t* ReleaseVideoImageNV;
	wgl_reset_frame_count_nv_t* ResetFrameCountNV;
	wgl_restore_buffer_region_arb_t* RestoreBufferRegionARB;
	wgl_save_buffer_region_arb_t* SaveBufferRegionARB;
	wgl_send_pbuffer_to_video_nv_t* SendPbufferToVideoNV;
	wgl_set_digital_video_parameters_i3d_t* SetDigitalVideoParametersI3D;
	wgl_set_gamma_table_i3d_t* SetGammaTableI3D;
	wgl_set_gamma_table_parameters_i3d_t* SetGammaTableParametersI3D;
	wgl_set_pbuffer_attrib_arb_t* SetPbufferAttribARB;
	wgl_set_stereo_emitter_state3dl_t* SetStereoEmitterState3DL;
	wgl_swap_buffers_msc_oml_t* SwapBuffersMscOML;
	wgl_swap_interval_ext_t* SwapIntervalEXT;
	wgl_swap_layer_buffers_msc_oml_t* SwapLayerBuffersMscOML;
	wgl_wait_for_msc_oml_t* WaitForMscOML;
	wgl_wait_for_sbc_oml_t* WaitForSbcOML;
};

inline WGL* WGLFunctions() {
	static WGL wglFunctions = {};
	return &wglFunctions;
}

#endif

#if defined(SOGL_LINUX)
struct GLX {
	glx_bind_channel_to_window_sgix_t* BindChannelToWindowSGIX;
	glx_bind_hyperpipe_sgix_t* BindHyperpipeSGIX;
	glx_bind_swap_barrier_nv_t* BindSwapBarrierNV;
	glx_bind_swap_barrier_sgix_t* BindSwapBarrierSGIX;
	glx_bind_tex_image_ext_t* BindTexImageEXT;
	glx_bind_video_capture_device_nv_t* BindVideoCaptureDeviceNV;
	glx_bind_video_device_nv_t* BindVideoDeviceNV;
	glx_bind_video_image_nv_t* BindVideoImageNV;
	glx_blit_context_framebuffer_amd_t* BlitContextFramebufferAMD;
	glx_channel_rect_sgix_t* ChannelRectSGIX;
	glx_channel_rect_sync_sgix_t* ChannelRectSyncSGIX;
	glx_copy_buffer_sub_data_nv_t* CopyBufferSubDataNV;
	glx_copy_image_sub_data_nv_t* CopyImageSubDataNV;
	glx_copy_sub_buffer_mesa_t* CopySubBufferMESA;
	glx_create_associated_context_amd_t* CreateAssociatedContextAMD;
	glx_create_associated_context_attribs_amd_t* CreateAssociatedContextAttribsAMD;
	glx_create_context_attribs_arb_t* CreateContextAttribsARB;
	glx_create_context_with_config_sgix_t* CreateContextWithConfigSGIX;
	glx_create_glxpbuffer_sgix_t* CreateGLXPbufferSGIX;
	glx_create_glxpixmap_mesa_t* CreateGLXPixmapMESA;
	glx_create_glxpixmap_with_config_sgix_t* CreateGLXPixmapWithConfigSGIX;
	glx_create_new_context_t* CreateNewContext;
	glx_create_pbuffer_t* CreatePbuffer;
	glx_create_pixmap_t* CreatePixmap;
	glx_create_window_t* CreateWindow;
	glx_cushion_sgi_t* CushionSGI;
	glx_delay_before_swap_nv_t* DelayBeforeSwapNV;
	glx_delete_associated_context_amd_t* DeleteAssociatedContextAMD;
	glx_destroy_glxpbuffer_sgix_t* DestroyGLXPbufferSGIX;
	glx_destroy_hyperpipe_config_sgix_t* DestroyHyperpipeConfigSGIX;
	glx_destroy_pbuffer_t* DestroyPbuffer;
	glx_destroy_pixmap_t* DestroyPixmap;
	glx_destroy_window_t* DestroyWindow;
	glx_free_context_ext_t* FreeContextEXT;
	glx_get_context_idext_t* GetContextIDEXT;
	glx_get_current_associated_context_amd_t* GetCurrentAssociatedContextAMD;
	glx_get_current_read_drawable_t* GetCurrentReadDrawable;
	glx_get_current_read_drawable_sgi_t* GetCurrentReadDrawableSGI;
	glx_get_fbconfig_attrib_t* GetFBConfigAttrib;
	glx_get_fbconfig_attrib_sgix_t* GetFBConfigAttribSGIX;
	glx_get_fbconfig_from_visual_sgix_t* GetFBConfigFromVisualSGIX;
	glx_get_gpuinfo_amd_t* GetGPUInfoAMD;
	glx_get_msc_rate_oml_t* GetMscRateOML;
	glx_get_proc_address_arb_t* GetProcAddressARB;
	glx_get_selected_event_t* GetSelectedEvent;
	glx_get_selected_event_sgix_t* GetSelectedEventSGIX;
	glx_get_swap_interval_mesa_t* GetSwapIntervalMESA;
	glx_get_sync_values_oml_t* GetSyncValuesOML;
	glx_get_transparent_index_sun_t* GetTransparentIndexSUN;
	glx_get_video_device_nv_t* GetVideoDeviceNV;
	glx_get_video_info_nv_t* GetVideoInfoNV;
	glx_get_video_sync_sgi_t* GetVideoSyncSGI;
	glx_hyperpipe_attrib_sgix_t* HyperpipeAttribSGIX;
	glx_hyperpipe_config_sgix_t* HyperpipeConfigSGIX;
	glx_import_context_ext_t* ImportContextEXT;
	glx_join_swap_group_nv_t* JoinSwapGroupNV;
	glx_join_swap_group_sgix_t* JoinSwapGroupSGIX;
	glx_lock_video_capture_device_nv_t* LockVideoCaptureDeviceNV;
	glx_make_associated_context_current_amd_t* MakeAssociatedContextCurrentAMD;
	glx_make_context_current_t* MakeContextCurrent;
	glx_make_current_read_sgi_t* MakeCurrentReadSGI;
	glx_named_copy_buffer_sub_data_nv_t* NamedCopyBufferSubDataNV;
	glx_query_channel_deltas_sgix_t* QueryChannelDeltasSGIX;
	glx_query_channel_rect_sgix_t* QueryChannelRectSGIX;
	glx_query_context_t* QueryContext;
	glx_query_context_info_ext_t* QueryContextInfoEXT;
	glx_query_current_renderer_integer_mesa_t* QueryCurrentRendererIntegerMESA;
	glx_query_drawable_t* QueryDrawable;
	glx_query_frame_count_nv_t* QueryFrameCountNV;
	glx_query_glxpbuffer_sgix_t* QueryGLXPbufferSGIX;
	glx_query_hyperpipe_attrib_sgix_t* QueryHyperpipeAttribSGIX;
	glx_query_hyperpipe_best_attrib_sgix_t* QueryHyperpipeBestAttribSGIX;
	glx_query_max_swap_barriers_sgix_t* QueryMaxSwapBarriersSGIX;
	glx_query_max_swap_groups_nv_t* QueryMaxSwapGroupsNV;
	glx_query_renderer_integer_mesa_t* QueryRendererIntegerMESA;
	glx_query_swap_group_nv_t* QuerySwapGroupNV;
	glx_query_video_capture_device_nv_t* QueryVideoCaptureDeviceNV;
	glx_release_buffers_mesa_t* ReleaseBuffersMESA;
	glx_release_tex_image_ext_t* ReleaseTexImageEXT;
	glx_release_video_capture_device_nv_t* ReleaseVideoCaptureDeviceNV;
	glx_release_video_device_nv_t* ReleaseVideoDeviceNV;
	glx_release_video_image_nv_t* ReleaseVideoImageNV;
	glx_reset_frame_count_nv_t* ResetFrameCountNV;
	glx_select_event_t* SelectEvent;
	glx_select_event_sgix_t* SelectEventSGIX;
	glx_send_pbuffer_to_video_nv_t* SendPbufferToVideoNV;
	glx_set3dfx_mode_mesa_t* Set3DfxModeMESA;
	glx_swap_buffers_msc_oml_t* SwapBuffersMscOML;
	glx_swap_interval_ext_t* SwapIntervalEXT;
	glx_swap_interval_mesa_t* SwapIntervalMESA;
	glx_swap_interval_sgi_t* SwapIntervalSGI;
	glx_wait_for_msc_oml_t* WaitForMscOML;
	glx_wait_for_sbc_oml_t* WaitForSbcOML;
	glx_wait_video_sync_sgi_t* WaitVideoSyncSGI;
};

inline GLX* GLXFunctions() {
	static GLX glxFunctions = {};
	return &glxextensions;
}

#endif

//General purpose function loader
inline void* soglLoadSymbol(const char* ptr) {
#ifdef SOGL_WINDOWS
	return wglGetProcAddress(ptr);
#elif defined(SOGL_LINUX)
	return reinterpret_cast<void*>(glXGetProcAddress(reinterpret_cast<const GLubyte*>(ptr)));
#elif defined(__APPLE__)
	NSSymbol symbol = nullptr
	std::string symbolName = str;
	symbolname = "_" + symbolName;
	if(NSIsSymbolDefined(symbolName.c_str()))
		ssymbol = NSLookupAndBindSymbol(symbolName.c_str());
	return symbol? NSAddressOfSymbol(symbol) : nullptr
#endif
}

//Load the functions: 
#ifdef _MSC_VER
static void* soglLoad(int majorv, int minorv, bool debugging, bool backwardCompatible) {
#else
static void* soglLoad(int majorv = 0, int minorv = 0, bool debugging = true, bool backwardCompatible = true) {
#endif

	static bool initialized = false;
	if(initialized) return nullptr;
	initialized = true;

	if(majorv <= 0 || minorv < 0) {
		const GLubyte* vstr = glGetString(GL_VERSION);
		majorv = vstr[0] - '0';
		minorv = vstr[2] - '0';
	}

#if defined(SOGL_WINDOWS)

	WGL* wgl = WGLFunctions();
	wgl->AssociateImageBufferEventsI3D = reinterpret_cast<wgl_associate_image_buffer_events_i3d_t*>(soglLoadSymbol("wglAssociateImageBufferEventsI3D"));
	wgl->BeginFrameTrackingI3D = reinterpret_cast<wgl_begin_frame_tracking_i3d_t*>(soglLoadSymbol("wglBeginFrameTrackingI3D"));
	wgl->BindDisplayColorTableEXT = reinterpret_cast<wgl_bind_display_color_table_ext_t*>(soglLoadSymbol("wglBindDisplayColorTableEXT"));
	wgl->BindSwapBarrierNV = reinterpret_cast<wgl_bind_swap_barrier_nv_t*>(soglLoadSymbol("wglBindSwapBarrierNV"));
	wgl->BindTexImageARB = reinterpret_cast<wgl_bind_tex_image_arb_t*>(soglLoadSymbol("wglBindTexImageARB"));
	wgl->BindVideoCaptureDeviceNV = reinterpret_cast<wgl_bind_video_capture_device_nv_t*>(soglLoadSymbol("wglBindVideoCaptureDeviceNV"));
	wgl->BindVideoDeviceNV = reinterpret_cast<wgl_bind_video_device_nv_t*>(soglLoadSymbol("wglBindVideoDeviceNV"));
	wgl->BindVideoImageNV = reinterpret_cast<wgl_bind_video_image_nv_t*>(soglLoadSymbol("wglBindVideoImageNV"));
	wgl->BlitContextFramebufferAMD = reinterpret_cast<wgl_blit_context_framebuffer_amd_t*>(soglLoadSymbol("wglBlitContextFramebufferAMD"));
	wgl->ChoosePixelFormatARB = reinterpret_cast<wgl_choose_pixel_format_arb_t*>(soglLoadSymbol("wglChoosePixelFormatARB"));
	wgl->ChoosePixelFormatEXT = reinterpret_cast<wgl_choose_pixel_format_ext_t*>(soglLoadSymbol("wglChoosePixelFormatEXT"));
	wgl->CopyImageSubDataNV = reinterpret_cast<wgl_copy_image_sub_data_nv_t*>(soglLoadSymbol("wglCopyImageSubDataNV"));
	wgl->CreateAffinityDCNV = reinterpret_cast<wgl_create_affinity_dcnv_t*>(soglLoadSymbol("wglCreateAffinityDCNV"));
	wgl->CreateAssociatedContextAMD = reinterpret_cast<wgl_create_associated_context_amd_t*>(soglLoadSymbol("wglCreateAssociatedContextAMD"));
	wgl->CreateAssociatedContextAttribsAMD = reinterpret_cast<wgl_create_associated_context_attribs_amd_t*>(soglLoadSymbol("wglCreateAssociatedContextAttribsAMD"));
	wgl->CreateBufferRegionARB = reinterpret_cast<wgl_create_buffer_region_arb_t*>(soglLoadSymbol("wglCreateBufferRegionARB"));
	wgl->CreateContextAttribsARB = reinterpret_cast<wgl_create_context_attribs_arb_t*>(soglLoadSymbol("wglCreateContextAttribsARB"));
	wgl->CreateDisplayColorTableEXT = reinterpret_cast<wgl_create_display_color_table_ext_t*>(soglLoadSymbol("wglCreateDisplayColorTableEXT"));
	wgl->CreateImageBufferI3D = reinterpret_cast<wgl_create_image_buffer_i3d_t*>(soglLoadSymbol("wglCreateImageBufferI3D"));
	wgl->CreatePbufferARB = reinterpret_cast<wgl_create_pbuffer_arb_t*>(soglLoadSymbol("wglCreatePbufferARB"));
	wgl->CreatePbufferEXT = reinterpret_cast<wgl_create_pbuffer_ext_t*>(soglLoadSymbol("wglCreatePbufferEXT"));
	wgl->DXCloseDeviceNV = reinterpret_cast<wgl_dxclose_device_nv_t*>(soglLoadSymbol("wglDXCloseDeviceNV"));
	wgl->DXLockObjectsNV = reinterpret_cast<wgl_dxlock_objects_nv_t*>(soglLoadSymbol("wglDXLockObjectsNV"));
	wgl->DXObjectAccessNV = reinterpret_cast<wgl_dxobject_access_nv_t*>(soglLoadSymbol("wglDXObjectAccessNV"));
	wgl->DXOpenDeviceNV = reinterpret_cast<wgl_dxopen_device_nv_t*>(soglLoadSymbol("wglDXOpenDeviceNV"));
	wgl->DXRegisterObjectNV = reinterpret_cast<wgl_dxregister_object_nv_t*>(soglLoadSymbol("wglDXRegisterObjectNV"));
	wgl->DXSetResourceShareHandleNV = reinterpret_cast<wgl_dxset_resource_share_handle_nv_t*>(soglLoadSymbol("wglDXSetResourceShareHandleNV"));
	wgl->DXUnlockObjectsNV = reinterpret_cast<wgl_dxunlock_objects_nv_t*>(soglLoadSymbol("wglDXUnlockObjectsNV"));
	wgl->DXUnregisterObjectNV = reinterpret_cast<wgl_dxunregister_object_nv_t*>(soglLoadSymbol("wglDXUnregisterObjectNV"));
	wgl->DelayBeforeSwapNV = reinterpret_cast<wgl_delay_before_swap_nv_t*>(soglLoadSymbol("wglDelayBeforeSwapNV"));
	wgl->DeleteAssociatedContextAMD = reinterpret_cast<wgl_delete_associated_context_amd_t*>(soglLoadSymbol("wglDeleteAssociatedContextAMD"));
	wgl->DeleteBufferRegionARB = reinterpret_cast<wgl_delete_buffer_region_arb_t*>(soglLoadSymbol("wglDeleteBufferRegionARB"));
	wgl->DeleteDCNV = reinterpret_cast<wgl_delete_dcnv_t*>(soglLoadSymbol("wglDeleteDCNV"));
	wgl->DestroyDisplayColorTableEXT = reinterpret_cast<wgl_destroy_display_color_table_ext_t*>(soglLoadSymbol("wglDestroyDisplayColorTableEXT"));
	wgl->DestroyImageBufferI3D = reinterpret_cast<wgl_destroy_image_buffer_i3d_t*>(soglLoadSymbol("wglDestroyImageBufferI3D"));
	wgl->DestroyPbufferARB = reinterpret_cast<wgl_destroy_pbuffer_arb_t*>(soglLoadSymbol("wglDestroyPbufferARB"));
	wgl->DestroyPbufferEXT = reinterpret_cast<wgl_destroy_pbuffer_ext_t*>(soglLoadSymbol("wglDestroyPbufferEXT"));
	wgl->DisableFrameLockI3D = reinterpret_cast<wgl_disable_frame_lock_i3d_t*>(soglLoadSymbol("wglDisableFrameLockI3D"));
	wgl->DisableGenlockI3D = reinterpret_cast<wgl_disable_genlock_i3d_t*>(soglLoadSymbol("wglDisableGenlockI3D"));
	wgl->EnableFrameLockI3D = reinterpret_cast<wgl_enable_frame_lock_i3d_t*>(soglLoadSymbol("wglEnableFrameLockI3D"));
	wgl->EnableGenlockI3D = reinterpret_cast<wgl_enable_genlock_i3d_t*>(soglLoadSymbol("wglEnableGenlockI3D"));
	wgl->EndFrameTrackingI3D = reinterpret_cast<wgl_end_frame_tracking_i3d_t*>(soglLoadSymbol("wglEndFrameTrackingI3D"));
	wgl->EnumGpuDevicesNV = reinterpret_cast<wgl_enum_gpu_devices_nv_t*>(soglLoadSymbol("wglEnumGpuDevicesNV"));
	wgl->EnumGpusFromAffinityDCNV = reinterpret_cast<wgl_enum_gpus_from_affinity_dcnv_t*>(soglLoadSymbol("wglEnumGpusFromAffinityDCNV"));
	wgl->EnumGpusNV = reinterpret_cast<wgl_enum_gpus_nv_t*>(soglLoadSymbol("wglEnumGpusNV"));
	wgl->EnumerateVideoCaptureDevicesNV = reinterpret_cast<wgl_enumerate_video_capture_devices_nv_t*>(soglLoadSymbol("wglEnumerateVideoCaptureDevicesNV"));
	wgl->EnumerateVideoDevicesNV = reinterpret_cast<wgl_enumerate_video_devices_nv_t*>(soglLoadSymbol("wglEnumerateVideoDevicesNV"));
	wgl->FreeMemoryNV = reinterpret_cast<wgl_free_memory_nv_t*>(soglLoadSymbol("wglFreeMemoryNV"));
	wgl->GenlockSampleRateI3D = reinterpret_cast<wgl_genlock_sample_rate_i3d_t*>(soglLoadSymbol("wglGenlockSampleRateI3D"));
	wgl->GenlockSourceDelayI3D = reinterpret_cast<wgl_genlock_source_delay_i3d_t*>(soglLoadSymbol("wglGenlockSourceDelayI3D"));
	wgl->GenlockSourceEdgeI3D = reinterpret_cast<wgl_genlock_source_edge_i3d_t*>(soglLoadSymbol("wglGenlockSourceEdgeI3D"));
	wgl->GenlockSourceI3D = reinterpret_cast<wgl_genlock_source_i3d_t*>(soglLoadSymbol("wglGenlockSourceI3D"));
	wgl->GetContextGPUIDAMD = reinterpret_cast<wgl_get_context_gpuidamd_t*>(soglLoadSymbol("wglGetContextGPUIDAMD"));
	wgl->GetCurrentAssociatedContextAMD = reinterpret_cast<wgl_get_current_associated_context_amd_t*>(soglLoadSymbol("wglGetCurrentAssociatedContextAMD"));
	wgl->GetCurrentReadDCARB = reinterpret_cast<wgl_get_current_read_dcarb_t*>(soglLoadSymbol("wglGetCurrentReadDCARB"));
	wgl->GetCurrentReadDCEXT = reinterpret_cast<wgl_get_current_read_dcext_t*>(soglLoadSymbol("wglGetCurrentReadDCEXT"));
	wgl->GetDigitalVideoParametersI3D = reinterpret_cast<wgl_get_digital_video_parameters_i3d_t*>(soglLoadSymbol("wglGetDigitalVideoParametersI3D"));
	wgl->GetFrameUsageI3D = reinterpret_cast<wgl_get_frame_usage_i3d_t*>(soglLoadSymbol("wglGetFrameUsageI3D"));
	wgl->GetGPUIDsAMD = reinterpret_cast<wgl_get_gpuids_amd_t*>(soglLoadSymbol("wglGetGPUIDsAMD"));
	wgl->GetGPUInfoAMD = reinterpret_cast<wgl_get_gpuinfo_amd_t*>(soglLoadSymbol("wglGetGPUInfoAMD"));
	wgl->GetGammaTableI3D = reinterpret_cast<wgl_get_gamma_table_i3d_t*>(soglLoadSymbol("wglGetGammaTableI3D"));
	wgl->GetGammaTableParametersI3D = reinterpret_cast<wgl_get_gamma_table_parameters_i3d_t*>(soglLoadSymbol("wglGetGammaTableParametersI3D"));
	wgl->GetGenlockSampleRateI3D = reinterpret_cast<wgl_get_genlock_sample_rate_i3d_t*>(soglLoadSymbol("wglGetGenlockSampleRateI3D"));
	wgl->GetGenlockSourceDelayI3D = reinterpret_cast<wgl_get_genlock_source_delay_i3d_t*>(soglLoadSymbol("wglGetGenlockSourceDelayI3D"));
	wgl->GetGenlockSourceEdgeI3D = reinterpret_cast<wgl_get_genlock_source_edge_i3d_t*>(soglLoadSymbol("wglGetGenlockSourceEdgeI3D"));
	wgl->GetGenlockSourceI3D = reinterpret_cast<wgl_get_genlock_source_i3d_t*>(soglLoadSymbol("wglGetGenlockSourceI3D"));
	wgl->GetMscRateOML = reinterpret_cast<wgl_get_msc_rate_oml_t*>(soglLoadSymbol("wglGetMscRateOML"));
	wgl->GetPbufferDCARB = reinterpret_cast<wgl_get_pbuffer_dcarb_t*>(soglLoadSymbol("wglGetPbufferDCARB"));
	wgl->GetPbufferDCEXT = reinterpret_cast<wgl_get_pbuffer_dcext_t*>(soglLoadSymbol("wglGetPbufferDCEXT"));
	wgl->GetPixelFormatAttribfvARB = reinterpret_cast<wgl_get_pixel_format_attribfv_arb_t*>(soglLoadSymbol("wglGetPixelFormatAttribfvARB"));
	wgl->GetPixelFormatAttribfvEXT = reinterpret_cast<wgl_get_pixel_format_attribfv_ext_t*>(soglLoadSymbol("wglGetPixelFormatAttribfvEXT"));
	wgl->GetPixelFormatAttribivARB = reinterpret_cast<wgl_get_pixel_format_attribiv_arb_t*>(soglLoadSymbol("wglGetPixelFormatAttribivARB"));
	wgl->GetPixelFormatAttribivEXT = reinterpret_cast<wgl_get_pixel_format_attribiv_ext_t*>(soglLoadSymbol("wglGetPixelFormatAttribivEXT"));
	wgl->GetSwapIntervalEXT = reinterpret_cast<wgl_get_swap_interval_ext_t*>(soglLoadSymbol("wglGetSwapIntervalEXT"));
	wgl->GetSyncValuesOML = reinterpret_cast<wgl_get_sync_values_oml_t*>(soglLoadSymbol("wglGetSyncValuesOML"));
	wgl->GetVideoDeviceNV = reinterpret_cast<wgl_get_video_device_nv_t*>(soglLoadSymbol("wglGetVideoDeviceNV"));
	wgl->GetVideoInfoNV = reinterpret_cast<wgl_get_video_info_nv_t*>(soglLoadSymbol("wglGetVideoInfoNV"));
	wgl->IsEnabledFrameLockI3D = reinterpret_cast<wgl_is_enabled_frame_lock_i3d_t*>(soglLoadSymbol("wglIsEnabledFrameLockI3D"));
	wgl->IsEnabledGenlockI3D = reinterpret_cast<wgl_is_enabled_genlock_i3d_t*>(soglLoadSymbol("wglIsEnabledGenlockI3D"));
	wgl->JoinSwapGroupNV = reinterpret_cast<wgl_join_swap_group_nv_t*>(soglLoadSymbol("wglJoinSwapGroupNV"));
	wgl->LoadDisplayColorTableEXT = reinterpret_cast<wgl_load_display_color_table_ext_t*>(soglLoadSymbol("wglLoadDisplayColorTableEXT"));
	wgl->LockVideoCaptureDeviceNV = reinterpret_cast<wgl_lock_video_capture_device_nv_t*>(soglLoadSymbol("wglLockVideoCaptureDeviceNV"));
	wgl->MakeAssociatedContextCurrentAMD = reinterpret_cast<wgl_make_associated_context_current_amd_t*>(soglLoadSymbol("wglMakeAssociatedContextCurrentAMD"));
	wgl->MakeContextCurrentARB = reinterpret_cast<wgl_make_context_current_arb_t*>(soglLoadSymbol("wglMakeContextCurrentARB"));
	wgl->MakeContextCurrentEXT = reinterpret_cast<wgl_make_context_current_ext_t*>(soglLoadSymbol("wglMakeContextCurrentEXT"));
	wgl->QueryCurrentContextNV = reinterpret_cast<wgl_query_current_context_nv_t*>(soglLoadSymbol("wglQueryCurrentContextNV"));
	wgl->QueryFrameCountNV = reinterpret_cast<wgl_query_frame_count_nv_t*>(soglLoadSymbol("wglQueryFrameCountNV"));
	wgl->QueryFrameLockMasterI3D = reinterpret_cast<wgl_query_frame_lock_master_i3d_t*>(soglLoadSymbol("wglQueryFrameLockMasterI3D"));
	wgl->QueryFrameTrackingI3D = reinterpret_cast<wgl_query_frame_tracking_i3d_t*>(soglLoadSymbol("wglQueryFrameTrackingI3D"));
	wgl->QueryGenlockMaxSourceDelayI3D = reinterpret_cast<wgl_query_genlock_max_source_delay_i3d_t*>(soglLoadSymbol("wglQueryGenlockMaxSourceDelayI3D"));
	wgl->QueryMaxSwapGroupsNV = reinterpret_cast<wgl_query_max_swap_groups_nv_t*>(soglLoadSymbol("wglQueryMaxSwapGroupsNV"));
	wgl->QueryPbufferARB = reinterpret_cast<wgl_query_pbuffer_arb_t*>(soglLoadSymbol("wglQueryPbufferARB"));
	wgl->QueryPbufferEXT = reinterpret_cast<wgl_query_pbuffer_ext_t*>(soglLoadSymbol("wglQueryPbufferEXT"));
	wgl->QuerySwapGroupNV = reinterpret_cast<wgl_query_swap_group_nv_t*>(soglLoadSymbol("wglQuerySwapGroupNV"));
	wgl->QueryVideoCaptureDeviceNV = reinterpret_cast<wgl_query_video_capture_device_nv_t*>(soglLoadSymbol("wglQueryVideoCaptureDeviceNV"));
	wgl->ReleaseImageBufferEventsI3D = reinterpret_cast<wgl_release_image_buffer_events_i3d_t*>(soglLoadSymbol("wglReleaseImageBufferEventsI3D"));
	wgl->ReleasePbufferDCARB = reinterpret_cast<wgl_release_pbuffer_dcarb_t*>(soglLoadSymbol("wglReleasePbufferDCARB"));
	wgl->ReleasePbufferDCEXT = reinterpret_cast<wgl_release_pbuffer_dcext_t*>(soglLoadSymbol("wglReleasePbufferDCEXT"));
	wgl->ReleaseTexImageARB = reinterpret_cast<wgl_release_tex_image_arb_t*>(soglLoadSymbol("wglReleaseTexImageARB"));
	wgl->ReleaseVideoCaptureDeviceNV = reinterpret_cast<wgl_release_video_capture_device_nv_t*>(soglLoadSymbol("wglReleaseVideoCaptureDeviceNV"));
	wgl->ReleaseVideoDeviceNV = reinterpret_cast<wgl_release_video_device_nv_t*>(soglLoadSymbol("wglReleaseVideoDeviceNV"));
	wgl->ReleaseVideoImageNV = reinterpret_cast<wgl_release_video_image_nv_t*>(soglLoadSymbol("wglReleaseVideoImageNV"));
	wgl->ResetFrameCountNV = reinterpret_cast<wgl_reset_frame_count_nv_t*>(soglLoadSymbol("wglResetFrameCountNV"));
	wgl->RestoreBufferRegionARB = reinterpret_cast<wgl_restore_buffer_region_arb_t*>(soglLoadSymbol("wglRestoreBufferRegionARB"));
	wgl->SaveBufferRegionARB = reinterpret_cast<wgl_save_buffer_region_arb_t*>(soglLoadSymbol("wglSaveBufferRegionARB"));
	wgl->SendPbufferToVideoNV = reinterpret_cast<wgl_send_pbuffer_to_video_nv_t*>(soglLoadSymbol("wglSendPbufferToVideoNV"));
	wgl->SetDigitalVideoParametersI3D = reinterpret_cast<wgl_set_digital_video_parameters_i3d_t*>(soglLoadSymbol("wglSetDigitalVideoParametersI3D"));
	wgl->SetGammaTableI3D = reinterpret_cast<wgl_set_gamma_table_i3d_t*>(soglLoadSymbol("wglSetGammaTableI3D"));
	wgl->SetGammaTableParametersI3D = reinterpret_cast<wgl_set_gamma_table_parameters_i3d_t*>(soglLoadSymbol("wglSetGammaTableParametersI3D"));
	wgl->SetPbufferAttribARB = reinterpret_cast<wgl_set_pbuffer_attrib_arb_t*>(soglLoadSymbol("wglSetPbufferAttribARB"));
	wgl->SetStereoEmitterState3DL = reinterpret_cast<wgl_set_stereo_emitter_state3dl_t*>(soglLoadSymbol("wglSetStereoEmitterState3DL"));
	wgl->SwapBuffersMscOML = reinterpret_cast<wgl_swap_buffers_msc_oml_t*>(soglLoadSymbol("wglSwapBuffersMscOML"));
	wgl->SwapIntervalEXT = reinterpret_cast<wgl_swap_interval_ext_t*>(soglLoadSymbol("wglSwapIntervalEXT"));
	wgl->SwapLayerBuffersMscOML = reinterpret_cast<wgl_swap_layer_buffers_msc_oml_t*>(soglLoadSymbol("wglSwapLayerBuffersMscOML"));
	wgl->WaitForMscOML = reinterpret_cast<wgl_wait_for_msc_oml_t*>(soglLoadSymbol("wglWaitForMscOML"));
	wgl->WaitForSbcOML = reinterpret_cast<wgl_wait_for_sbc_oml_t*>(soglLoadSymbol("wglWaitForSbcOML"));

	GLenum attribs[] = {
		WGL_CONTEXT_MAJOR_VERSION_ARB, majorv,
		WGL_CONTEXT_MINOR_VERSION_ARB, minorv,
		WGL_CONTEXT_FLAGS_ARB, debugging ? WGL_CONTEXT_DEBUG_BIT_ARB : 0x0u,
		WGL_CONTEXT_PROFILE_MASK_ARB, backwardCompatible ? WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB : WGL_CONTEXT_CORE_PROFILE_BIT_ARB,
		0u, 0u
	};

	HGLRC hglrc = wglGetCurrentContext();
	HDC dc = wglGetCurrentDC();

	if(wglMakeCurrent(dc, nullptr) == FALSE) {
		std::cout << "Coudln't deactivate temporary context!\n";
	}

	HGLRC context = wglCreateContextAttribsARB(dc, hglrc, reinterpret_cast<int*>(&attribs[0]));
	wglShareLists(hglrc, context);
	wglDeleteContext(hglrc);

	if(wglMakeCurrent(dc, context) == TRUE) {
		std::cout << "New context activated!\n";
	}

#endif



//GLX loading...
#if defined(SOGL_LINUX)

	GLX* glx = GLXFunctions();
	glx->BindChannelToWindowSGIX = reinterpret_cast<glx_bind_channel_to_window_sgix_t*>(soglLoadSymbol("glXBindChannelToWindowSGIX"));
	glx->BindHyperpipeSGIX = reinterpret_cast<glx_bind_hyperpipe_sgix_t*>(soglLoadSymbol("glXBindHyperpipeSGIX"));
	glx->BindSwapBarrierNV = reinterpret_cast<glx_bind_swap_barrier_nv_t*>(soglLoadSymbol("glXBindSwapBarrierNV"));
	glx->BindSwapBarrierSGIX = reinterpret_cast<glx_bind_swap_barrier_sgix_t*>(soglLoadSymbol("glXBindSwapBarrierSGIX"));
	glx->BindTexImageEXT = reinterpret_cast<glx_bind_tex_image_ext_t*>(soglLoadSymbol("glXBindTexImageEXT"));
	glx->BindVideoCaptureDeviceNV = reinterpret_cast<glx_bind_video_capture_device_nv_t*>(soglLoadSymbol("glXBindVideoCaptureDeviceNV"));
	glx->BindVideoDeviceNV = reinterpret_cast<glx_bind_video_device_nv_t*>(soglLoadSymbol("glXBindVideoDeviceNV"));
	glx->BindVideoImageNV = reinterpret_cast<glx_bind_video_image_nv_t*>(soglLoadSymbol("glXBindVideoImageNV"));
	glx->BlitContextFramebufferAMD = reinterpret_cast<glx_blit_context_framebuffer_amd_t*>(soglLoadSymbol("glXBlitContextFramebufferAMD"));
	glx->ChannelRectSGIX = reinterpret_cast<glx_channel_rect_sgix_t*>(soglLoadSymbol("glXChannelRectSGIX"));
	glx->ChannelRectSyncSGIX = reinterpret_cast<glx_channel_rect_sync_sgix_t*>(soglLoadSymbol("glXChannelRectSyncSGIX"));
	glx->CopyBufferSubDataNV = reinterpret_cast<glx_copy_buffer_sub_data_nv_t*>(soglLoadSymbol("glXCopyBufferSubDataNV"));
	glx->CopyImageSubDataNV = reinterpret_cast<glx_copy_image_sub_data_nv_t*>(soglLoadSymbol("glXCopyImageSubDataNV"));
	glx->CopySubBufferMESA = reinterpret_cast<glx_copy_sub_buffer_mesa_t*>(soglLoadSymbol("glXCopySubBufferMESA"));
	glx->CreateAssociatedContextAMD = reinterpret_cast<glx_create_associated_context_amd_t*>(soglLoadSymbol("glXCreateAssociatedContextAMD"));
	glx->CreateAssociatedContextAttribsAMD = reinterpret_cast<glx_create_associated_context_attribs_amd_t*>(soglLoadSymbol("glXCreateAssociatedContextAttribsAMD"));
	glx->CreateContextAttribsARB = reinterpret_cast<glx_create_context_attribs_arb_t*>(soglLoadSymbol("glXCreateContextAttribsARB"));
	glx->CreateContextWithConfigSGIX = reinterpret_cast<glx_create_context_with_config_sgix_t*>(soglLoadSymbol("glXCreateContextWithConfigSGIX"));
	glx->CreateGLXPbufferSGIX = reinterpret_cast<glx_create_glxpbuffer_sgix_t*>(soglLoadSymbol("glXCreateGLXPbufferSGIX"));
	glx->CreateGLXPixmapMESA = reinterpret_cast<glx_create_glxpixmap_mesa_t*>(soglLoadSymbol("glXCreateGLXPixmapMESA"));
	glx->CreateGLXPixmapWithConfigSGIX = reinterpret_cast<glx_create_glxpixmap_with_config_sgix_t*>(soglLoadSymbol("glXCreateGLXPixmapWithConfigSGIX"));
	glx->CreateNewContext = reinterpret_cast<glx_create_new_context_t*>(soglLoadSymbol("glXCreateNewContext"));
	glx->CreatePbuffer = reinterpret_cast<glx_create_pbuffer_t*>(soglLoadSymbol("glXCreatePbuffer"));
	glx->CreatePixmap = reinterpret_cast<glx_create_pixmap_t*>(soglLoadSymbol("glXCreatePixmap"));
	glx->CreateWindow = reinterpret_cast<glx_create_window_t*>(soglLoadSymbol("glXCreateWindow"));
	glx->CushionSGI = reinterpret_cast<glx_cushion_sgi_t*>(soglLoadSymbol("glXCushionSGI"));
	glx->DelayBeforeSwapNV = reinterpret_cast<glx_delay_before_swap_nv_t*>(soglLoadSymbol("glXDelayBeforeSwapNV"));
	glx->DeleteAssociatedContextAMD = reinterpret_cast<glx_delete_associated_context_amd_t*>(soglLoadSymbol("glXDeleteAssociatedContextAMD"));
	glx->DestroyGLXPbufferSGIX = reinterpret_cast<glx_destroy_glxpbuffer_sgix_t*>(soglLoadSymbol("glXDestroyGLXPbufferSGIX"));
	glx->DestroyHyperpipeConfigSGIX = reinterpret_cast<glx_destroy_hyperpipe_config_sgix_t*>(soglLoadSymbol("glXDestroyHyperpipeConfigSGIX"));
	glx->DestroyPbuffer = reinterpret_cast<glx_destroy_pbuffer_t*>(soglLoadSymbol("glXDestroyPbuffer"));
	glx->DestroyPixmap = reinterpret_cast<glx_destroy_pixmap_t*>(soglLoadSymbol("glXDestroyPixmap"));
	glx->DestroyWindow = reinterpret_cast<glx_destroy_window_t*>(soglLoadSymbol("glXDestroyWindow"));
	glx->FreeContextEXT = reinterpret_cast<glx_free_context_ext_t*>(soglLoadSymbol("glXFreeContextEXT"));
	glx->GetContextIDEXT = reinterpret_cast<glx_get_context_idext_t*>(soglLoadSymbol("glXGetContextIDEXT"));
	glx->GetCurrentAssociatedContextAMD = reinterpret_cast<glx_get_current_associated_context_amd_t*>(soglLoadSymbol("glXGetCurrentAssociatedContextAMD"));
	glx->GetCurrentReadDrawable = reinterpret_cast<glx_get_current_read_drawable_t*>(soglLoadSymbol("glXGetCurrentReadDrawable"));
	glx->GetCurrentReadDrawableSGI = reinterpret_cast<glx_get_current_read_drawable_sgi_t*>(soglLoadSymbol("glXGetCurrentReadDrawableSGI"));
	glx->GetFBConfigAttrib = reinterpret_cast<glx_get_fbconfig_attrib_t*>(soglLoadSymbol("glXGetFBConfigAttrib"));
	glx->GetFBConfigAttribSGIX = reinterpret_cast<glx_get_fbconfig_attrib_sgix_t*>(soglLoadSymbol("glXGetFBConfigAttribSGIX"));
	glx->GetFBConfigFromVisualSGIX = reinterpret_cast<glx_get_fbconfig_from_visual_sgix_t*>(soglLoadSymbol("glXGetFBConfigFromVisualSGIX"));
	glx->GetGPUInfoAMD = reinterpret_cast<glx_get_gpuinfo_amd_t*>(soglLoadSymbol("glXGetGPUInfoAMD"));
	glx->GetMscRateOML = reinterpret_cast<glx_get_msc_rate_oml_t*>(soglLoadSymbol("glXGetMscRateOML"));
	glx->GetProcAddressARB = reinterpret_cast<glx_get_proc_address_arb_t*>(soglLoadSymbol("glXGetProcAddressARB"));
	glx->GetSelectedEvent = reinterpret_cast<glx_get_selected_event_t*>(soglLoadSymbol("glXGetSelectedEvent"));
	glx->GetSelectedEventSGIX = reinterpret_cast<glx_get_selected_event_sgix_t*>(soglLoadSymbol("glXGetSelectedEventSGIX"));
	glx->GetSwapIntervalMESA = reinterpret_cast<glx_get_swap_interval_mesa_t*>(soglLoadSymbol("glXGetSwapIntervalMESA"));
	glx->GetSyncValuesOML = reinterpret_cast<glx_get_sync_values_oml_t*>(soglLoadSymbol("glXGetSyncValuesOML"));
	glx->GetTransparentIndexSUN = reinterpret_cast<glx_get_transparent_index_sun_t*>(soglLoadSymbol("glXGetTransparentIndexSUN"));
	glx->GetVideoDeviceNV = reinterpret_cast<glx_get_video_device_nv_t*>(soglLoadSymbol("glXGetVideoDeviceNV"));
	glx->GetVideoInfoNV = reinterpret_cast<glx_get_video_info_nv_t*>(soglLoadSymbol("glXGetVideoInfoNV"));
	glx->GetVideoSyncSGI = reinterpret_cast<glx_get_video_sync_sgi_t*>(soglLoadSymbol("glXGetVideoSyncSGI"));
	glx->HyperpipeAttribSGIX = reinterpret_cast<glx_hyperpipe_attrib_sgix_t*>(soglLoadSymbol("glXHyperpipeAttribSGIX"));
	glx->HyperpipeConfigSGIX = reinterpret_cast<glx_hyperpipe_config_sgix_t*>(soglLoadSymbol("glXHyperpipeConfigSGIX"));
	glx->ImportContextEXT = reinterpret_cast<glx_import_context_ext_t*>(soglLoadSymbol("glXImportContextEXT"));
	glx->JoinSwapGroupNV = reinterpret_cast<glx_join_swap_group_nv_t*>(soglLoadSymbol("glXJoinSwapGroupNV"));
	glx->JoinSwapGroupSGIX = reinterpret_cast<glx_join_swap_group_sgix_t*>(soglLoadSymbol("glXJoinSwapGroupSGIX"));
	glx->LockVideoCaptureDeviceNV = reinterpret_cast<glx_lock_video_capture_device_nv_t*>(soglLoadSymbol("glXLockVideoCaptureDeviceNV"));
	glx->MakeAssociatedContextCurrentAMD = reinterpret_cast<glx_make_associated_context_current_amd_t*>(soglLoadSymbol("glXMakeAssociatedContextCurrentAMD"));
	glx->MakeContextCurrent = reinterpret_cast<glx_make_context_current_t*>(soglLoadSymbol("glXMakeContextCurrent"));
	glx->MakeCurrentReadSGI = reinterpret_cast<glx_make_current_read_sgi_t*>(soglLoadSymbol("glXMakeCurrentReadSGI"));
	glx->NamedCopyBufferSubDataNV = reinterpret_cast<glx_named_copy_buffer_sub_data_nv_t*>(soglLoadSymbol("glXNamedCopyBufferSubDataNV"));
	glx->QueryChannelDeltasSGIX = reinterpret_cast<glx_query_channel_deltas_sgix_t*>(soglLoadSymbol("glXQueryChannelDeltasSGIX"));
	glx->QueryChannelRectSGIX = reinterpret_cast<glx_query_channel_rect_sgix_t*>(soglLoadSymbol("glXQueryChannelRectSGIX"));
	glx->QueryContext = reinterpret_cast<glx_query_context_t*>(soglLoadSymbol("glXQueryContext"));
	glx->QueryContextInfoEXT = reinterpret_cast<glx_query_context_info_ext_t*>(soglLoadSymbol("glXQueryContextInfoEXT"));
	glx->QueryCurrentRendererIntegerMESA = reinterpret_cast<glx_query_current_renderer_integer_mesa_t*>(soglLoadSymbol("glXQueryCurrentRendererIntegerMESA"));
	glx->QueryDrawable = reinterpret_cast<glx_query_drawable_t*>(soglLoadSymbol("glXQueryDrawable"));
	glx->QueryFrameCountNV = reinterpret_cast<glx_query_frame_count_nv_t*>(soglLoadSymbol("glXQueryFrameCountNV"));
	glx->QueryGLXPbufferSGIX = reinterpret_cast<glx_query_glxpbuffer_sgix_t*>(soglLoadSymbol("glXQueryGLXPbufferSGIX"));
	glx->QueryHyperpipeAttribSGIX = reinterpret_cast<glx_query_hyperpipe_attrib_sgix_t*>(soglLoadSymbol("glXQueryHyperpipeAttribSGIX"));
	glx->QueryHyperpipeBestAttribSGIX = reinterpret_cast<glx_query_hyperpipe_best_attrib_sgix_t*>(soglLoadSymbol("glXQueryHyperpipeBestAttribSGIX"));
	glx->QueryMaxSwapBarriersSGIX = reinterpret_cast<glx_query_max_swap_barriers_sgix_t*>(soglLoadSymbol("glXQueryMaxSwapBarriersSGIX"));
	glx->QueryMaxSwapGroupsNV = reinterpret_cast<glx_query_max_swap_groups_nv_t*>(soglLoadSymbol("glXQueryMaxSwapGroupsNV"));
	glx->QueryRendererIntegerMESA = reinterpret_cast<glx_query_renderer_integer_mesa_t*>(soglLoadSymbol("glXQueryRendererIntegerMESA"));
	glx->QuerySwapGroupNV = reinterpret_cast<glx_query_swap_group_nv_t*>(soglLoadSymbol("glXQuerySwapGroupNV"));
	glx->QueryVideoCaptureDeviceNV = reinterpret_cast<glx_query_video_capture_device_nv_t*>(soglLoadSymbol("glXQueryVideoCaptureDeviceNV"));
	glx->ReleaseBuffersMESA = reinterpret_cast<glx_release_buffers_mesa_t*>(soglLoadSymbol("glXReleaseBuffersMESA"));
	glx->ReleaseTexImageEXT = reinterpret_cast<glx_release_tex_image_ext_t*>(soglLoadSymbol("glXReleaseTexImageEXT"));
	glx->ReleaseVideoCaptureDeviceNV = reinterpret_cast<glx_release_video_capture_device_nv_t*>(soglLoadSymbol("glXReleaseVideoCaptureDeviceNV"));
	glx->ReleaseVideoDeviceNV = reinterpret_cast<glx_release_video_device_nv_t*>(soglLoadSymbol("glXReleaseVideoDeviceNV"));
	glx->ReleaseVideoImageNV = reinterpret_cast<glx_release_video_image_nv_t*>(soglLoadSymbol("glXReleaseVideoImageNV"));
	glx->ResetFrameCountNV = reinterpret_cast<glx_reset_frame_count_nv_t*>(soglLoadSymbol("glXResetFrameCountNV"));
	glx->SelectEvent = reinterpret_cast<glx_select_event_t*>(soglLoadSymbol("glXSelectEvent"));
	glx->SelectEventSGIX = reinterpret_cast<glx_select_event_sgix_t*>(soglLoadSymbol("glXSelectEventSGIX"));
	glx->SendPbufferToVideoNV = reinterpret_cast<glx_send_pbuffer_to_video_nv_t*>(soglLoadSymbol("glXSendPbufferToVideoNV"));
	glx->Set3DfxModeMESA = reinterpret_cast<glx_set3dfx_mode_mesa_t*>(soglLoadSymbol("glXSet3DfxModeMESA"));
	glx->SwapBuffersMscOML = reinterpret_cast<glx_swap_buffers_msc_oml_t*>(soglLoadSymbol("glXSwapBuffersMscOML"));
	glx->SwapIntervalEXT = reinterpret_cast<glx_swap_interval_ext_t*>(soglLoadSymbol("glXSwapIntervalEXT"));
	glx->SwapIntervalMESA = reinterpret_cast<glx_swap_interval_mesa_t*>(soglLoadSymbol("glXSwapIntervalMESA"));
	glx->SwapIntervalSGI = reinterpret_cast<glx_swap_interval_sgi_t*>(soglLoadSymbol("glXSwapIntervalSGI"));
	glx->WaitForMscOML = reinterpret_cast<glx_wait_for_msc_oml_t*>(soglLoadSymbol("glXWaitForMscOML"));
	glx->WaitForSbcOML = reinterpret_cast<glx_wait_for_sbc_oml_t*>(soglLoadSymbol("glXWaitForSbcOML"));
	glx->WaitVideoSyncSGI = reinterpret_cast<glx_wait_video_sync_sgi_t*>(soglLoadSymbol("glXWaitVideoSyncSGI"));

#endif

	GL* gl = GLFunctions();
	gl->AcquireKeyedMutexWin32EXT = reinterpret_cast<gl_acquire_keyed_mutex_win32ext_t*>(soglLoadSymbol("glAcquireKeyedMutexWin32EXT"));
	gl->ActiveProgramEXT = reinterpret_cast<gl_active_program_ext_t*>(soglLoadSymbol("glActiveProgramEXT"));
	gl->ActiveShaderProgram = reinterpret_cast<gl_active_shader_program_t*>(soglLoadSymbol("glActiveShaderProgram"));
	gl->ActiveStencilFaceEXT = reinterpret_cast<gl_active_stencil_face_ext_t*>(soglLoadSymbol("glActiveStencilFaceEXT"));
	gl->ActiveTexture = reinterpret_cast<gl_active_texture_t*>(soglLoadSymbol("glActiveTexture"));
	gl->ActiveTextureARB = reinterpret_cast<gl_active_texture_arb_t*>(soglLoadSymbol("glActiveTextureARB"));
	gl->ActiveVaryingNV = reinterpret_cast<gl_active_varying_nv_t*>(soglLoadSymbol("glActiveVaryingNV"));
	gl->AlphaFragmentOp1ATI = reinterpret_cast<gl_alpha_fragment_op1ati_t*>(soglLoadSymbol("glAlphaFragmentOp1ATI"));
	gl->AlphaFragmentOp2ATI = reinterpret_cast<gl_alpha_fragment_op2ati_t*>(soglLoadSymbol("glAlphaFragmentOp2ATI"));
	gl->AlphaFragmentOp3ATI = reinterpret_cast<gl_alpha_fragment_op3ati_t*>(soglLoadSymbol("glAlphaFragmentOp3ATI"));
	gl->ApplyTextureEXT = reinterpret_cast<gl_apply_texture_ext_t*>(soglLoadSymbol("glApplyTextureEXT"));
	gl->AreProgramsResidentNV = reinterpret_cast<gl_are_programs_resident_nv_t*>(soglLoadSymbol("glAreProgramsResidentNV"));
	gl->AreTexturesResidentEXT = reinterpret_cast<gl_are_textures_resident_ext_t*>(soglLoadSymbol("glAreTexturesResidentEXT"));
	gl->ArrayElementEXT = reinterpret_cast<gl_array_element_ext_t*>(soglLoadSymbol("glArrayElementEXT"));
	gl->ArrayObjectATI = reinterpret_cast<gl_array_object_ati_t*>(soglLoadSymbol("glArrayObjectATI"));
	gl->AsyncMarkerSGIX = reinterpret_cast<gl_async_marker_sgix_t*>(soglLoadSymbol("glAsyncMarkerSGIX"));
	gl->AttachObjectARB = reinterpret_cast<gl_attach_object_arb_t*>(soglLoadSymbol("glAttachObjectARB"));
	gl->AttachShader = reinterpret_cast<gl_attach_shader_t*>(soglLoadSymbol("glAttachShader"));
	gl->BeginConditionalRender = reinterpret_cast<gl_begin_conditional_render_t*>(soglLoadSymbol("glBeginConditionalRender"));
	gl->BeginConditionalRenderNV = reinterpret_cast<gl_begin_conditional_render_nv_t*>(soglLoadSymbol("glBeginConditionalRenderNV"));
	gl->BeginConditionalRenderNVX = reinterpret_cast<gl_begin_conditional_render_nvx_t*>(soglLoadSymbol("glBeginConditionalRenderNVX"));
	gl->BeginFragmentShaderATI = reinterpret_cast<gl_begin_fragment_shader_ati_t*>(soglLoadSymbol("glBeginFragmentShaderATI"));
	gl->BeginOcclusionQueryNV = reinterpret_cast<gl_begin_occlusion_query_nv_t*>(soglLoadSymbol("glBeginOcclusionQueryNV"));
	gl->BeginPerfMonitorAMD = reinterpret_cast<gl_begin_perf_monitor_amd_t*>(soglLoadSymbol("glBeginPerfMonitorAMD"));
	gl->BeginPerfQueryINTEL = reinterpret_cast<gl_begin_perf_query_intel_t*>(soglLoadSymbol("glBeginPerfQueryINTEL"));
	gl->BeginQuery = reinterpret_cast<gl_begin_query_t*>(soglLoadSymbol("glBeginQuery"));
	gl->BeginQueryARB = reinterpret_cast<gl_begin_query_arb_t*>(soglLoadSymbol("glBeginQueryARB"));
	gl->BeginQueryIndexed = reinterpret_cast<gl_begin_query_indexed_t*>(soglLoadSymbol("glBeginQueryIndexed"));
	gl->BeginTransformFeedback = reinterpret_cast<gl_begin_transform_feedback_t*>(soglLoadSymbol("glBeginTransformFeedback"));
	gl->BeginTransformFeedbackEXT = reinterpret_cast<gl_begin_transform_feedback_ext_t*>(soglLoadSymbol("glBeginTransformFeedbackEXT"));
	gl->BeginTransformFeedbackNV = reinterpret_cast<gl_begin_transform_feedback_nv_t*>(soglLoadSymbol("glBeginTransformFeedbackNV"));
	gl->BeginVertexShaderEXT = reinterpret_cast<gl_begin_vertex_shader_ext_t*>(soglLoadSymbol("glBeginVertexShaderEXT"));
	gl->BeginVideoCaptureNV = reinterpret_cast<gl_begin_video_capture_nv_t*>(soglLoadSymbol("glBeginVideoCaptureNV"));
	gl->BindAttribLocation = reinterpret_cast<gl_bind_attrib_location_t*>(soglLoadSymbol("glBindAttribLocation"));
	gl->BindAttribLocationARB = reinterpret_cast<gl_bind_attrib_location_arb_t*>(soglLoadSymbol("glBindAttribLocationARB"));
	gl->BindBuffer = reinterpret_cast<gl_bind_buffer_t*>(soglLoadSymbol("glBindBuffer"));
	gl->BindBufferARB = reinterpret_cast<gl_bind_buffer_arb_t*>(soglLoadSymbol("glBindBufferARB"));
	gl->BindBufferBase = reinterpret_cast<gl_bind_buffer_base_t*>(soglLoadSymbol("glBindBufferBase"));
	gl->BindBufferBaseEXT = reinterpret_cast<gl_bind_buffer_base_ext_t*>(soglLoadSymbol("glBindBufferBaseEXT"));
	gl->BindBufferBaseNV = reinterpret_cast<gl_bind_buffer_base_nv_t*>(soglLoadSymbol("glBindBufferBaseNV"));
	gl->BindBufferOffsetEXT = reinterpret_cast<gl_bind_buffer_offset_ext_t*>(soglLoadSymbol("glBindBufferOffsetEXT"));
	gl->BindBufferOffsetNV = reinterpret_cast<gl_bind_buffer_offset_nv_t*>(soglLoadSymbol("glBindBufferOffsetNV"));
	gl->BindBufferRange = reinterpret_cast<gl_bind_buffer_range_t*>(soglLoadSymbol("glBindBufferRange"));
	gl->BindBufferRangeEXT = reinterpret_cast<gl_bind_buffer_range_ext_t*>(soglLoadSymbol("glBindBufferRangeEXT"));
	gl->BindBufferRangeNV = reinterpret_cast<gl_bind_buffer_range_nv_t*>(soglLoadSymbol("glBindBufferRangeNV"));
	gl->BindBuffersBase = reinterpret_cast<gl_bind_buffers_base_t*>(soglLoadSymbol("glBindBuffersBase"));
	gl->BindBuffersRange = reinterpret_cast<gl_bind_buffers_range_t*>(soglLoadSymbol("glBindBuffersRange"));
	gl->BindFragDataLocation = reinterpret_cast<gl_bind_frag_data_location_t*>(soglLoadSymbol("glBindFragDataLocation"));
	gl->BindFragDataLocationEXT = reinterpret_cast<gl_bind_frag_data_location_ext_t*>(soglLoadSymbol("glBindFragDataLocationEXT"));
	gl->BindFragDataLocationIndexed = reinterpret_cast<gl_bind_frag_data_location_indexed_t*>(soglLoadSymbol("glBindFragDataLocationIndexed"));
	gl->BindFragmentShaderATI = reinterpret_cast<gl_bind_fragment_shader_ati_t*>(soglLoadSymbol("glBindFragmentShaderATI"));
	gl->BindFramebuffer = reinterpret_cast<gl_bind_framebuffer_t*>(soglLoadSymbol("glBindFramebuffer"));
	gl->BindFramebufferEXT = reinterpret_cast<gl_bind_framebuffer_ext_t*>(soglLoadSymbol("glBindFramebufferEXT"));
	gl->BindImageTexture = reinterpret_cast<gl_bind_image_texture_t*>(soglLoadSymbol("glBindImageTexture"));
	gl->BindImageTextureEXT = reinterpret_cast<gl_bind_image_texture_ext_t*>(soglLoadSymbol("glBindImageTextureEXT"));
	gl->BindImageTextures = reinterpret_cast<gl_bind_image_textures_t*>(soglLoadSymbol("glBindImageTextures"));
	gl->BindLightParameterEXT = reinterpret_cast<gl_bind_light_parameter_ext_t*>(soglLoadSymbol("glBindLightParameterEXT"));
	gl->BindMaterialParameterEXT = reinterpret_cast<gl_bind_material_parameter_ext_t*>(soglLoadSymbol("glBindMaterialParameterEXT"));
	gl->BindMultiTextureEXT = reinterpret_cast<gl_bind_multi_texture_ext_t*>(soglLoadSymbol("glBindMultiTextureEXT"));
	gl->BindParameterEXT = reinterpret_cast<gl_bind_parameter_ext_t*>(soglLoadSymbol("glBindParameterEXT"));
	gl->BindProgramARB = reinterpret_cast<gl_bind_program_arb_t*>(soglLoadSymbol("glBindProgramARB"));
	gl->BindProgramNV = reinterpret_cast<gl_bind_program_nv_t*>(soglLoadSymbol("glBindProgramNV"));
	gl->BindProgramPipeline = reinterpret_cast<gl_bind_program_pipeline_t*>(soglLoadSymbol("glBindProgramPipeline"));
	gl->BindRenderbuffer = reinterpret_cast<gl_bind_renderbuffer_t*>(soglLoadSymbol("glBindRenderbuffer"));
	gl->BindRenderbufferEXT = reinterpret_cast<gl_bind_renderbuffer_ext_t*>(soglLoadSymbol("glBindRenderbufferEXT"));
	gl->BindSampler = reinterpret_cast<gl_bind_sampler_t*>(soglLoadSymbol("glBindSampler"));
	gl->BindSamplers = reinterpret_cast<gl_bind_samplers_t*>(soglLoadSymbol("glBindSamplers"));
	gl->BindTexGenParameterEXT = reinterpret_cast<gl_bind_tex_gen_parameter_ext_t*>(soglLoadSymbol("glBindTexGenParameterEXT"));
	gl->BindTextureEXT = reinterpret_cast<gl_bind_texture_ext_t*>(soglLoadSymbol("glBindTextureEXT"));
	gl->BindTextureUnit = reinterpret_cast<gl_bind_texture_unit_t*>(soglLoadSymbol("glBindTextureUnit"));
	gl->BindTextureUnitParameterEXT = reinterpret_cast<gl_bind_texture_unit_parameter_ext_t*>(soglLoadSymbol("glBindTextureUnitParameterEXT"));
	gl->BindTextures = reinterpret_cast<gl_bind_textures_t*>(soglLoadSymbol("glBindTextures"));
	gl->BindTransformFeedback = reinterpret_cast<gl_bind_transform_feedback_t*>(soglLoadSymbol("glBindTransformFeedback"));
	gl->BindTransformFeedbackNV = reinterpret_cast<gl_bind_transform_feedback_nv_t*>(soglLoadSymbol("glBindTransformFeedbackNV"));
	gl->BindVertexArray = reinterpret_cast<gl_bind_vertex_array_t*>(soglLoadSymbol("glBindVertexArray"));
	gl->BindVertexArrayAPPLE = reinterpret_cast<gl_bind_vertex_array_apple_t*>(soglLoadSymbol("glBindVertexArrayAPPLE"));
	gl->BindVertexBuffer = reinterpret_cast<gl_bind_vertex_buffer_t*>(soglLoadSymbol("glBindVertexBuffer"));
	gl->BindVertexBuffers = reinterpret_cast<gl_bind_vertex_buffers_t*>(soglLoadSymbol("glBindVertexBuffers"));
	gl->BindVertexShaderEXT = reinterpret_cast<gl_bind_vertex_shader_ext_t*>(soglLoadSymbol("glBindVertexShaderEXT"));
	gl->BindVideoCaptureStreamBufferNV = reinterpret_cast<gl_bind_video_capture_stream_buffer_nv_t*>(soglLoadSymbol("glBindVideoCaptureStreamBufferNV"));
	gl->BindVideoCaptureStreamTextureNV = reinterpret_cast<gl_bind_video_capture_stream_texture_nv_t*>(soglLoadSymbol("glBindVideoCaptureStreamTextureNV"));
	gl->BinormalPointerEXT = reinterpret_cast<gl_binormal_pointer_ext_t*>(soglLoadSymbol("glBinormalPointerEXT"));
	gl->BlendBarrierKHR = reinterpret_cast<gl_blend_barrier_khr_t*>(soglLoadSymbol("glBlendBarrierKHR"));
	gl->BlendBarrierNV = reinterpret_cast<gl_blend_barrier_nv_t*>(soglLoadSymbol("glBlendBarrierNV"));
	gl->BlendColor = reinterpret_cast<gl_blend_color_t*>(soglLoadSymbol("glBlendColor"));
	gl->BlendColorEXT = reinterpret_cast<gl_blend_color_ext_t*>(soglLoadSymbol("glBlendColorEXT"));
	gl->BlendEquation = reinterpret_cast<gl_blend_equation_t*>(soglLoadSymbol("glBlendEquation"));
	gl->BlendEquationEXT = reinterpret_cast<gl_blend_equation_ext_t*>(soglLoadSymbol("glBlendEquationEXT"));
	gl->BlendEquationIndexedAMD = reinterpret_cast<gl_blend_equation_indexed_amd_t*>(soglLoadSymbol("glBlendEquationIndexedAMD"));
	gl->BlendEquationSeparate = reinterpret_cast<gl_blend_equation_separate_t*>(soglLoadSymbol("glBlendEquationSeparate"));
	gl->BlendEquationSeparateEXT = reinterpret_cast<gl_blend_equation_separate_ext_t*>(soglLoadSymbol("glBlendEquationSeparateEXT"));
	gl->BlendEquationSeparateIndexedAMD = reinterpret_cast<gl_blend_equation_separate_indexed_amd_t*>(soglLoadSymbol("glBlendEquationSeparateIndexedAMD"));
	gl->BlendEquationSeparatei = reinterpret_cast<gl_blend_equation_separatei_t*>(soglLoadSymbol("glBlendEquationSeparatei"));
	gl->BlendEquationSeparateiARB = reinterpret_cast<gl_blend_equation_separatei_arb_t*>(soglLoadSymbol("glBlendEquationSeparateiARB"));
	gl->BlendEquationi = reinterpret_cast<gl_blend_equationi_t*>(soglLoadSymbol("glBlendEquationi"));
	gl->BlendEquationiARB = reinterpret_cast<gl_blend_equationi_arb_t*>(soglLoadSymbol("glBlendEquationiARB"));
	gl->BlendFuncIndexedAMD = reinterpret_cast<gl_blend_func_indexed_amd_t*>(soglLoadSymbol("glBlendFuncIndexedAMD"));
	gl->BlendFuncSeparate = reinterpret_cast<gl_blend_func_separate_t*>(soglLoadSymbol("glBlendFuncSeparate"));
	gl->BlendFuncSeparateEXT = reinterpret_cast<gl_blend_func_separate_ext_t*>(soglLoadSymbol("glBlendFuncSeparateEXT"));
	gl->BlendFuncSeparateIndexedAMD = reinterpret_cast<gl_blend_func_separate_indexed_amd_t*>(soglLoadSymbol("glBlendFuncSeparateIndexedAMD"));
	gl->BlendFuncSeparatei = reinterpret_cast<gl_blend_func_separatei_t*>(soglLoadSymbol("glBlendFuncSeparatei"));
	gl->BlendFuncSeparateiARB = reinterpret_cast<gl_blend_func_separatei_arb_t*>(soglLoadSymbol("glBlendFuncSeparateiARB"));
	gl->BlendFunci = reinterpret_cast<gl_blend_funci_t*>(soglLoadSymbol("glBlendFunci"));
	gl->BlendFunciARB = reinterpret_cast<gl_blend_funci_arb_t*>(soglLoadSymbol("glBlendFunciARB"));
	gl->BlendParameteriNV = reinterpret_cast<gl_blend_parameteri_nv_t*>(soglLoadSymbol("glBlendParameteriNV"));
	gl->BlitFramebuffer = reinterpret_cast<gl_blit_framebuffer_t*>(soglLoadSymbol("glBlitFramebuffer"));
	gl->BlitFramebufferEXT = reinterpret_cast<gl_blit_framebuffer_ext_t*>(soglLoadSymbol("glBlitFramebufferEXT"));
	gl->BlitNamedFramebuffer = reinterpret_cast<gl_blit_named_framebuffer_t*>(soglLoadSymbol("glBlitNamedFramebuffer"));
	gl->BufferAddressRangeNV = reinterpret_cast<gl_buffer_address_range_nv_t*>(soglLoadSymbol("glBufferAddressRangeNV"));
	gl->BufferData = reinterpret_cast<gl_buffer_data_t*>(soglLoadSymbol("glBufferData"));
	gl->BufferDataARB = reinterpret_cast<gl_buffer_data_arb_t*>(soglLoadSymbol("glBufferDataARB"));
	gl->BufferPageCommitmentARB = reinterpret_cast<gl_buffer_page_commitment_arb_t*>(soglLoadSymbol("glBufferPageCommitmentARB"));
	gl->BufferParameteriAPPLE = reinterpret_cast<gl_buffer_parameteri_apple_t*>(soglLoadSymbol("glBufferParameteriAPPLE"));
	gl->BufferStorage = reinterpret_cast<gl_buffer_storage_t*>(soglLoadSymbol("glBufferStorage"));
	gl->BufferStorageExternalEXT = reinterpret_cast<gl_buffer_storage_external_ext_t*>(soglLoadSymbol("glBufferStorageExternalEXT"));
	gl->BufferStorageMemEXT = reinterpret_cast<gl_buffer_storage_mem_ext_t*>(soglLoadSymbol("glBufferStorageMemEXT"));
	gl->BufferSubData = reinterpret_cast<gl_buffer_sub_data_t*>(soglLoadSymbol("glBufferSubData"));
	gl->BufferSubDataARB = reinterpret_cast<gl_buffer_sub_data_arb_t*>(soglLoadSymbol("glBufferSubDataARB"));
	gl->CallCommandListNV = reinterpret_cast<gl_call_command_list_nv_t*>(soglLoadSymbol("glCallCommandListNV"));
	gl->CheckFramebufferStatus = reinterpret_cast<gl_check_framebuffer_status_t*>(soglLoadSymbol("glCheckFramebufferStatus"));
	gl->CheckFramebufferStatusEXT = reinterpret_cast<gl_check_framebuffer_status_ext_t*>(soglLoadSymbol("glCheckFramebufferStatusEXT"));
	gl->CheckNamedFramebufferStatus = reinterpret_cast<gl_check_named_framebuffer_status_t*>(soglLoadSymbol("glCheckNamedFramebufferStatus"));
	gl->CheckNamedFramebufferStatusEXT = reinterpret_cast<gl_check_named_framebuffer_status_ext_t*>(soglLoadSymbol("glCheckNamedFramebufferStatusEXT"));
	gl->ClampColor = reinterpret_cast<gl_clamp_color_t*>(soglLoadSymbol("glClampColor"));
	gl->ClampColorARB = reinterpret_cast<gl_clamp_color_arb_t*>(soglLoadSymbol("glClampColorARB"));
	gl->ClearBufferData = reinterpret_cast<gl_clear_buffer_data_t*>(soglLoadSymbol("glClearBufferData"));
	gl->ClearBufferSubData = reinterpret_cast<gl_clear_buffer_sub_data_t*>(soglLoadSymbol("glClearBufferSubData"));
	gl->ClearBufferfi = reinterpret_cast<gl_clear_bufferfi_t*>(soglLoadSymbol("glClearBufferfi"));
	gl->ClearBufferfv = reinterpret_cast<gl_clear_bufferfv_t*>(soglLoadSymbol("glClearBufferfv"));
	gl->ClearBufferiv = reinterpret_cast<gl_clear_bufferiv_t*>(soglLoadSymbol("glClearBufferiv"));
	gl->ClearBufferuiv = reinterpret_cast<gl_clear_bufferuiv_t*>(soglLoadSymbol("glClearBufferuiv"));
	gl->ClearColorIiEXT = reinterpret_cast<gl_clear_color_ii_ext_t*>(soglLoadSymbol("glClearColorIiEXT"));
	gl->ClearColorIuiEXT = reinterpret_cast<gl_clear_color_iui_ext_t*>(soglLoadSymbol("glClearColorIuiEXT"));
	gl->ClearDepthdNV = reinterpret_cast<gl_clear_depthd_nv_t*>(soglLoadSymbol("glClearDepthdNV"));
	gl->ClearDepthf = reinterpret_cast<gl_clear_depthf_t*>(soglLoadSymbol("glClearDepthf"));
	gl->ClearNamedBufferData = reinterpret_cast<gl_clear_named_buffer_data_t*>(soglLoadSymbol("glClearNamedBufferData"));
	gl->ClearNamedBufferDataEXT = reinterpret_cast<gl_clear_named_buffer_data_ext_t*>(soglLoadSymbol("glClearNamedBufferDataEXT"));
	gl->ClearNamedBufferSubData = reinterpret_cast<gl_clear_named_buffer_sub_data_t*>(soglLoadSymbol("glClearNamedBufferSubData"));
	gl->ClearNamedBufferSubDataEXT = reinterpret_cast<gl_clear_named_buffer_sub_data_ext_t*>(soglLoadSymbol("glClearNamedBufferSubDataEXT"));
	gl->ClearNamedFramebufferfi = reinterpret_cast<gl_clear_named_framebufferfi_t*>(soglLoadSymbol("glClearNamedFramebufferfi"));
	gl->ClearNamedFramebufferfv = reinterpret_cast<gl_clear_named_framebufferfv_t*>(soglLoadSymbol("glClearNamedFramebufferfv"));
	gl->ClearNamedFramebufferiv = reinterpret_cast<gl_clear_named_framebufferiv_t*>(soglLoadSymbol("glClearNamedFramebufferiv"));
	gl->ClearNamedFramebufferuiv = reinterpret_cast<gl_clear_named_framebufferuiv_t*>(soglLoadSymbol("glClearNamedFramebufferuiv"));
	gl->ClearTexImage = reinterpret_cast<gl_clear_tex_image_t*>(soglLoadSymbol("glClearTexImage"));
	gl->ClearTexSubImage = reinterpret_cast<gl_clear_tex_sub_image_t*>(soglLoadSymbol("glClearTexSubImage"));
	gl->ClientActiveTexture = reinterpret_cast<gl_client_active_texture_t*>(soglLoadSymbol("glClientActiveTexture"));
	gl->ClientActiveTextureARB = reinterpret_cast<gl_client_active_texture_arb_t*>(soglLoadSymbol("glClientActiveTextureARB"));
	gl->ClientActiveVertexStreamATI = reinterpret_cast<gl_client_active_vertex_stream_ati_t*>(soglLoadSymbol("glClientActiveVertexStreamATI"));
	gl->ClientAttribDefaultEXT = reinterpret_cast<gl_client_attrib_default_ext_t*>(soglLoadSymbol("glClientAttribDefaultEXT"));
	gl->ClientWaitSync = reinterpret_cast<gl_client_wait_sync_t*>(soglLoadSymbol("glClientWaitSync"));
	gl->ClipControl = reinterpret_cast<gl_clip_control_t*>(soglLoadSymbol("glClipControl"));
	gl->Color3fVertex3fSUN = reinterpret_cast<gl_color3f_vertex3f_sun_t*>(soglLoadSymbol("glColor3fVertex3fSUN"));
	gl->Color3fVertex3fvSUN = reinterpret_cast<gl_color3f_vertex3fv_sun_t*>(soglLoadSymbol("glColor3fVertex3fvSUN"));
	gl->Color3hNV = reinterpret_cast<gl_color3h_nv_t*>(soglLoadSymbol("glColor3hNV"));
	gl->Color3hvNV = reinterpret_cast<gl_color3hv_nv_t*>(soglLoadSymbol("glColor3hvNV"));
	gl->Color4fNormal3fVertex3fSUN = reinterpret_cast<gl_color4f_normal3f_vertex3f_sun_t*>(soglLoadSymbol("glColor4fNormal3fVertex3fSUN"));
	gl->Color4fNormal3fVertex3fvSUN = reinterpret_cast<gl_color4f_normal3f_vertex3fv_sun_t*>(soglLoadSymbol("glColor4fNormal3fVertex3fvSUN"));
	gl->Color4hNV = reinterpret_cast<gl_color4h_nv_t*>(soglLoadSymbol("glColor4hNV"));
	gl->Color4hvNV = reinterpret_cast<gl_color4hv_nv_t*>(soglLoadSymbol("glColor4hvNV"));
	gl->Color4ubVertex2fSUN = reinterpret_cast<gl_color4ub_vertex2f_sun_t*>(soglLoadSymbol("glColor4ubVertex2fSUN"));
	gl->Color4ubVertex2fvSUN = reinterpret_cast<gl_color4ub_vertex2fv_sun_t*>(soglLoadSymbol("glColor4ubVertex2fvSUN"));
	gl->Color4ubVertex3fSUN = reinterpret_cast<gl_color4ub_vertex3f_sun_t*>(soglLoadSymbol("glColor4ubVertex3fSUN"));
	gl->Color4ubVertex3fvSUN = reinterpret_cast<gl_color4ub_vertex3fv_sun_t*>(soglLoadSymbol("glColor4ubVertex3fvSUN"));
	gl->ColorFormatNV = reinterpret_cast<gl_color_format_nv_t*>(soglLoadSymbol("glColorFormatNV"));
	gl->ColorFragmentOp1ATI = reinterpret_cast<gl_color_fragment_op1ati_t*>(soglLoadSymbol("glColorFragmentOp1ATI"));
	gl->ColorFragmentOp2ATI = reinterpret_cast<gl_color_fragment_op2ati_t*>(soglLoadSymbol("glColorFragmentOp2ATI"));
	gl->ColorFragmentOp3ATI = reinterpret_cast<gl_color_fragment_op3ati_t*>(soglLoadSymbol("glColorFragmentOp3ATI"));
	gl->ColorMaskIndexedEXT = reinterpret_cast<gl_color_mask_indexed_ext_t*>(soglLoadSymbol("glColorMaskIndexedEXT"));
	gl->ColorMaski = reinterpret_cast<gl_color_maski_t*>(soglLoadSymbol("glColorMaski"));
	gl->ColorP3ui = reinterpret_cast<gl_color_p3ui_t*>(soglLoadSymbol("glColorP3ui"));
	gl->ColorP3uiv = reinterpret_cast<gl_color_p3uiv_t*>(soglLoadSymbol("glColorP3uiv"));
	gl->ColorP4ui = reinterpret_cast<gl_color_p4ui_t*>(soglLoadSymbol("glColorP4ui"));
	gl->ColorP4uiv = reinterpret_cast<gl_color_p4uiv_t*>(soglLoadSymbol("glColorP4uiv"));
	gl->ColorPointerEXT = reinterpret_cast<gl_color_pointer_ext_t*>(soglLoadSymbol("glColorPointerEXT"));
	gl->ColorPointerListIBM = reinterpret_cast<gl_color_pointer_list_ibm_t*>(soglLoadSymbol("glColorPointerListIBM"));
	gl->ColorPointervINTEL = reinterpret_cast<gl_color_pointerv_intel_t*>(soglLoadSymbol("glColorPointervINTEL"));
	gl->ColorSubTable = reinterpret_cast<gl_color_sub_table_t*>(soglLoadSymbol("glColorSubTable"));
	gl->ColorSubTableEXT = reinterpret_cast<gl_color_sub_table_ext_t*>(soglLoadSymbol("glColorSubTableEXT"));
	gl->ColorTable = reinterpret_cast<gl_color_table_t*>(soglLoadSymbol("glColorTable"));
	gl->ColorTableEXT = reinterpret_cast<gl_color_table_ext_t*>(soglLoadSymbol("glColorTableEXT"));
	gl->ColorTableParameterfv = reinterpret_cast<gl_color_table_parameterfv_t*>(soglLoadSymbol("glColorTableParameterfv"));
	gl->ColorTableParameterfvSGI = reinterpret_cast<gl_color_table_parameterfv_sgi_t*>(soglLoadSymbol("glColorTableParameterfvSGI"));
	gl->ColorTableParameteriv = reinterpret_cast<gl_color_table_parameteriv_t*>(soglLoadSymbol("glColorTableParameteriv"));
	gl->ColorTableParameterivSGI = reinterpret_cast<gl_color_table_parameteriv_sgi_t*>(soglLoadSymbol("glColorTableParameterivSGI"));
	gl->ColorTableSGI = reinterpret_cast<gl_color_table_sgi_t*>(soglLoadSymbol("glColorTableSGI"));
	gl->CombinerInputNV = reinterpret_cast<gl_combiner_input_nv_t*>(soglLoadSymbol("glCombinerInputNV"));
	gl->CombinerOutputNV = reinterpret_cast<gl_combiner_output_nv_t*>(soglLoadSymbol("glCombinerOutputNV"));
	gl->CombinerParameterfNV = reinterpret_cast<gl_combiner_parameterf_nv_t*>(soglLoadSymbol("glCombinerParameterfNV"));
	gl->CombinerParameterfvNV = reinterpret_cast<gl_combiner_parameterfv_nv_t*>(soglLoadSymbol("glCombinerParameterfvNV"));
	gl->CombinerParameteriNV = reinterpret_cast<gl_combiner_parameteri_nv_t*>(soglLoadSymbol("glCombinerParameteriNV"));
	gl->CombinerParameterivNV = reinterpret_cast<gl_combiner_parameteriv_nv_t*>(soglLoadSymbol("glCombinerParameterivNV"));
	gl->CombinerStageParameterfvNV = reinterpret_cast<gl_combiner_stage_parameterfv_nv_t*>(soglLoadSymbol("glCombinerStageParameterfvNV"));
	gl->CommandListSegmentsNV = reinterpret_cast<gl_command_list_segments_nv_t*>(soglLoadSymbol("glCommandListSegmentsNV"));
	gl->CompileCommandListNV = reinterpret_cast<gl_compile_command_list_nv_t*>(soglLoadSymbol("glCompileCommandListNV"));
	gl->CompileShader = reinterpret_cast<gl_compile_shader_t*>(soglLoadSymbol("glCompileShader"));
	gl->CompileShaderARB = reinterpret_cast<gl_compile_shader_arb_t*>(soglLoadSymbol("glCompileShaderARB"));
	gl->CompileShaderIncludeARB = reinterpret_cast<gl_compile_shader_include_arb_t*>(soglLoadSymbol("glCompileShaderIncludeARB"));
	gl->CompressedMultiTexImage1DEXT = reinterpret_cast<gl_compressed_multi_tex_image1dext_t*>(soglLoadSymbol("glCompressedMultiTexImage1DEXT"));
	gl->CompressedMultiTexImage2DEXT = reinterpret_cast<gl_compressed_multi_tex_image2dext_t*>(soglLoadSymbol("glCompressedMultiTexImage2DEXT"));
	gl->CompressedMultiTexImage3DEXT = reinterpret_cast<gl_compressed_multi_tex_image3dext_t*>(soglLoadSymbol("glCompressedMultiTexImage3DEXT"));
	gl->CompressedMultiTexSubImage1DEXT = reinterpret_cast<gl_compressed_multi_tex_sub_image1dext_t*>(soglLoadSymbol("glCompressedMultiTexSubImage1DEXT"));
	gl->CompressedMultiTexSubImage2DEXT = reinterpret_cast<gl_compressed_multi_tex_sub_image2dext_t*>(soglLoadSymbol("glCompressedMultiTexSubImage2DEXT"));
	gl->CompressedMultiTexSubImage3DEXT = reinterpret_cast<gl_compressed_multi_tex_sub_image3dext_t*>(soglLoadSymbol("glCompressedMultiTexSubImage3DEXT"));
	gl->CompressedTexImage1D = reinterpret_cast<gl_compressed_tex_image1d_t*>(soglLoadSymbol("glCompressedTexImage1D"));
	gl->CompressedTexImage1DARB = reinterpret_cast<gl_compressed_tex_image1darb_t*>(soglLoadSymbol("glCompressedTexImage1DARB"));
	gl->CompressedTexImage2D = reinterpret_cast<gl_compressed_tex_image2d_t*>(soglLoadSymbol("glCompressedTexImage2D"));
	gl->CompressedTexImage2DARB = reinterpret_cast<gl_compressed_tex_image2darb_t*>(soglLoadSymbol("glCompressedTexImage2DARB"));
	gl->CompressedTexImage3D = reinterpret_cast<gl_compressed_tex_image3d_t*>(soglLoadSymbol("glCompressedTexImage3D"));
	gl->CompressedTexImage3DARB = reinterpret_cast<gl_compressed_tex_image3darb_t*>(soglLoadSymbol("glCompressedTexImage3DARB"));
	gl->CompressedTexSubImage1D = reinterpret_cast<gl_compressed_tex_sub_image1d_t*>(soglLoadSymbol("glCompressedTexSubImage1D"));
	gl->CompressedTexSubImage1DARB = reinterpret_cast<gl_compressed_tex_sub_image1darb_t*>(soglLoadSymbol("glCompressedTexSubImage1DARB"));
	gl->CompressedTexSubImage2D = reinterpret_cast<gl_compressed_tex_sub_image2d_t*>(soglLoadSymbol("glCompressedTexSubImage2D"));
	gl->CompressedTexSubImage2DARB = reinterpret_cast<gl_compressed_tex_sub_image2darb_t*>(soglLoadSymbol("glCompressedTexSubImage2DARB"));
	gl->CompressedTexSubImage3D = reinterpret_cast<gl_compressed_tex_sub_image3d_t*>(soglLoadSymbol("glCompressedTexSubImage3D"));
	gl->CompressedTexSubImage3DARB = reinterpret_cast<gl_compressed_tex_sub_image3darb_t*>(soglLoadSymbol("glCompressedTexSubImage3DARB"));
	gl->CompressedTextureImage1DEXT = reinterpret_cast<gl_compressed_texture_image1dext_t*>(soglLoadSymbol("glCompressedTextureImage1DEXT"));
	gl->CompressedTextureImage2DEXT = reinterpret_cast<gl_compressed_texture_image2dext_t*>(soglLoadSymbol("glCompressedTextureImage2DEXT"));
	gl->CompressedTextureImage3DEXT = reinterpret_cast<gl_compressed_texture_image3dext_t*>(soglLoadSymbol("glCompressedTextureImage3DEXT"));
	gl->CompressedTextureSubImage1D = reinterpret_cast<gl_compressed_texture_sub_image1d_t*>(soglLoadSymbol("glCompressedTextureSubImage1D"));
	gl->CompressedTextureSubImage1DEXT = reinterpret_cast<gl_compressed_texture_sub_image1dext_t*>(soglLoadSymbol("glCompressedTextureSubImage1DEXT"));
	gl->CompressedTextureSubImage2D = reinterpret_cast<gl_compressed_texture_sub_image2d_t*>(soglLoadSymbol("glCompressedTextureSubImage2D"));
	gl->CompressedTextureSubImage2DEXT = reinterpret_cast<gl_compressed_texture_sub_image2dext_t*>(soglLoadSymbol("glCompressedTextureSubImage2DEXT"));
	gl->CompressedTextureSubImage3D = reinterpret_cast<gl_compressed_texture_sub_image3d_t*>(soglLoadSymbol("glCompressedTextureSubImage3D"));
	gl->CompressedTextureSubImage3DEXT = reinterpret_cast<gl_compressed_texture_sub_image3dext_t*>(soglLoadSymbol("glCompressedTextureSubImage3DEXT"));
	gl->ConservativeRasterParameterfNV = reinterpret_cast<gl_conservative_raster_parameterf_nv_t*>(soglLoadSymbol("glConservativeRasterParameterfNV"));
	gl->ConservativeRasterParameteriNV = reinterpret_cast<gl_conservative_raster_parameteri_nv_t*>(soglLoadSymbol("glConservativeRasterParameteriNV"));
	gl->ConvolutionFilter1D = reinterpret_cast<gl_convolution_filter1d_t*>(soglLoadSymbol("glConvolutionFilter1D"));
	gl->ConvolutionFilter1DEXT = reinterpret_cast<gl_convolution_filter1dext_t*>(soglLoadSymbol("glConvolutionFilter1DEXT"));
	gl->ConvolutionFilter2D = reinterpret_cast<gl_convolution_filter2d_t*>(soglLoadSymbol("glConvolutionFilter2D"));
	gl->ConvolutionFilter2DEXT = reinterpret_cast<gl_convolution_filter2dext_t*>(soglLoadSymbol("glConvolutionFilter2DEXT"));
	gl->ConvolutionParameterf = reinterpret_cast<gl_convolution_parameterf_t*>(soglLoadSymbol("glConvolutionParameterf"));
	gl->ConvolutionParameterfEXT = reinterpret_cast<gl_convolution_parameterf_ext_t*>(soglLoadSymbol("glConvolutionParameterfEXT"));
	gl->ConvolutionParameterfv = reinterpret_cast<gl_convolution_parameterfv_t*>(soglLoadSymbol("glConvolutionParameterfv"));
	gl->ConvolutionParameterfvEXT = reinterpret_cast<gl_convolution_parameterfv_ext_t*>(soglLoadSymbol("glConvolutionParameterfvEXT"));
	gl->ConvolutionParameteri = reinterpret_cast<gl_convolution_parameteri_t*>(soglLoadSymbol("glConvolutionParameteri"));
	gl->ConvolutionParameteriEXT = reinterpret_cast<gl_convolution_parameteri_ext_t*>(soglLoadSymbol("glConvolutionParameteriEXT"));
	gl->ConvolutionParameteriv = reinterpret_cast<gl_convolution_parameteriv_t*>(soglLoadSymbol("glConvolutionParameteriv"));
	gl->ConvolutionParameterivEXT = reinterpret_cast<gl_convolution_parameteriv_ext_t*>(soglLoadSymbol("glConvolutionParameterivEXT"));
	gl->CopyBufferSubData = reinterpret_cast<gl_copy_buffer_sub_data_t*>(soglLoadSymbol("glCopyBufferSubData"));
	gl->CopyColorSubTable = reinterpret_cast<gl_copy_color_sub_table_t*>(soglLoadSymbol("glCopyColorSubTable"));
	gl->CopyColorSubTableEXT = reinterpret_cast<gl_copy_color_sub_table_ext_t*>(soglLoadSymbol("glCopyColorSubTableEXT"));
	gl->CopyColorTable = reinterpret_cast<gl_copy_color_table_t*>(soglLoadSymbol("glCopyColorTable"));
	gl->CopyColorTableSGI = reinterpret_cast<gl_copy_color_table_sgi_t*>(soglLoadSymbol("glCopyColorTableSGI"));
	gl->CopyConvolutionFilter1D = reinterpret_cast<gl_copy_convolution_filter1d_t*>(soglLoadSymbol("glCopyConvolutionFilter1D"));
	gl->CopyConvolutionFilter1DEXT = reinterpret_cast<gl_copy_convolution_filter1dext_t*>(soglLoadSymbol("glCopyConvolutionFilter1DEXT"));
	gl->CopyConvolutionFilter2D = reinterpret_cast<gl_copy_convolution_filter2d_t*>(soglLoadSymbol("glCopyConvolutionFilter2D"));
	gl->CopyConvolutionFilter2DEXT = reinterpret_cast<gl_copy_convolution_filter2dext_t*>(soglLoadSymbol("glCopyConvolutionFilter2DEXT"));
	gl->CopyImageSubData = reinterpret_cast<gl_copy_image_sub_data_t*>(soglLoadSymbol("glCopyImageSubData"));
	gl->CopyImageSubDataNV = reinterpret_cast<gl_copy_image_sub_data_nv_t*>(soglLoadSymbol("glCopyImageSubDataNV"));
	gl->CopyMultiTexImage1DEXT = reinterpret_cast<gl_copy_multi_tex_image1dext_t*>(soglLoadSymbol("glCopyMultiTexImage1DEXT"));
	gl->CopyMultiTexImage2DEXT = reinterpret_cast<gl_copy_multi_tex_image2dext_t*>(soglLoadSymbol("glCopyMultiTexImage2DEXT"));
	gl->CopyMultiTexSubImage1DEXT = reinterpret_cast<gl_copy_multi_tex_sub_image1dext_t*>(soglLoadSymbol("glCopyMultiTexSubImage1DEXT"));
	gl->CopyMultiTexSubImage2DEXT = reinterpret_cast<gl_copy_multi_tex_sub_image2dext_t*>(soglLoadSymbol("glCopyMultiTexSubImage2DEXT"));
	gl->CopyMultiTexSubImage3DEXT = reinterpret_cast<gl_copy_multi_tex_sub_image3dext_t*>(soglLoadSymbol("glCopyMultiTexSubImage3DEXT"));
	gl->CopyNamedBufferSubData = reinterpret_cast<gl_copy_named_buffer_sub_data_t*>(soglLoadSymbol("glCopyNamedBufferSubData"));
	gl->CopyPathNV = reinterpret_cast<gl_copy_path_nv_t*>(soglLoadSymbol("glCopyPathNV"));
	gl->CopyTexImage1DEXT = reinterpret_cast<gl_copy_tex_image1dext_t*>(soglLoadSymbol("glCopyTexImage1DEXT"));
	gl->CopyTexImage2DEXT = reinterpret_cast<gl_copy_tex_image2dext_t*>(soglLoadSymbol("glCopyTexImage2DEXT"));
	gl->CopyTexSubImage1DEXT = reinterpret_cast<gl_copy_tex_sub_image1dext_t*>(soglLoadSymbol("glCopyTexSubImage1DEXT"));
	gl->CopyTexSubImage2DEXT = reinterpret_cast<gl_copy_tex_sub_image2dext_t*>(soglLoadSymbol("glCopyTexSubImage2DEXT"));
	gl->CopyTexSubImage3D = reinterpret_cast<gl_copy_tex_sub_image3d_t*>(soglLoadSymbol("glCopyTexSubImage3D"));
	gl->CopyTexSubImage3DEXT = reinterpret_cast<gl_copy_tex_sub_image3dext_t*>(soglLoadSymbol("glCopyTexSubImage3DEXT"));
	gl->CopyTextureImage1DEXT = reinterpret_cast<gl_copy_texture_image1dext_t*>(soglLoadSymbol("glCopyTextureImage1DEXT"));
	gl->CopyTextureImage2DEXT = reinterpret_cast<gl_copy_texture_image2dext_t*>(soglLoadSymbol("glCopyTextureImage2DEXT"));
	gl->CopyTextureSubImage1D = reinterpret_cast<gl_copy_texture_sub_image1d_t*>(soglLoadSymbol("glCopyTextureSubImage1D"));
	gl->CopyTextureSubImage1DEXT = reinterpret_cast<gl_copy_texture_sub_image1dext_t*>(soglLoadSymbol("glCopyTextureSubImage1DEXT"));
	gl->CopyTextureSubImage2D = reinterpret_cast<gl_copy_texture_sub_image2d_t*>(soglLoadSymbol("glCopyTextureSubImage2D"));
	gl->CopyTextureSubImage2DEXT = reinterpret_cast<gl_copy_texture_sub_image2dext_t*>(soglLoadSymbol("glCopyTextureSubImage2DEXT"));
	gl->CopyTextureSubImage3D = reinterpret_cast<gl_copy_texture_sub_image3d_t*>(soglLoadSymbol("glCopyTextureSubImage3D"));
	gl->CopyTextureSubImage3DEXT = reinterpret_cast<gl_copy_texture_sub_image3dext_t*>(soglLoadSymbol("glCopyTextureSubImage3DEXT"));
	gl->CoverFillPathInstancedNV = reinterpret_cast<gl_cover_fill_path_instanced_nv_t*>(soglLoadSymbol("glCoverFillPathInstancedNV"));
	gl->CoverFillPathNV = reinterpret_cast<gl_cover_fill_path_nv_t*>(soglLoadSymbol("glCoverFillPathNV"));
	gl->CoverStrokePathInstancedNV = reinterpret_cast<gl_cover_stroke_path_instanced_nv_t*>(soglLoadSymbol("glCoverStrokePathInstancedNV"));
	gl->CoverStrokePathNV = reinterpret_cast<gl_cover_stroke_path_nv_t*>(soglLoadSymbol("glCoverStrokePathNV"));
	gl->CoverageModulationNV = reinterpret_cast<gl_coverage_modulation_nv_t*>(soglLoadSymbol("glCoverageModulationNV"));
	gl->CoverageModulationTableNV = reinterpret_cast<gl_coverage_modulation_table_nv_t*>(soglLoadSymbol("glCoverageModulationTableNV"));
	gl->CreateBuffers = reinterpret_cast<gl_create_buffers_t*>(soglLoadSymbol("glCreateBuffers"));
	gl->CreateCommandListsNV = reinterpret_cast<gl_create_command_lists_nv_t*>(soglLoadSymbol("glCreateCommandListsNV"));
	gl->CreateFramebuffers = reinterpret_cast<gl_create_framebuffers_t*>(soglLoadSymbol("glCreateFramebuffers"));
	gl->CreateMemoryObjectsEXT = reinterpret_cast<gl_create_memory_objects_ext_t*>(soglLoadSymbol("glCreateMemoryObjectsEXT"));
	gl->CreatePerfQueryINTEL = reinterpret_cast<gl_create_perf_query_intel_t*>(soglLoadSymbol("glCreatePerfQueryINTEL"));
	gl->CreateProgram = reinterpret_cast<gl_create_program_t*>(soglLoadSymbol("glCreateProgram"));
	gl->CreateProgramObjectARB = reinterpret_cast<gl_create_program_object_arb_t*>(soglLoadSymbol("glCreateProgramObjectARB"));
	gl->CreateProgramPipelines = reinterpret_cast<gl_create_program_pipelines_t*>(soglLoadSymbol("glCreateProgramPipelines"));
	gl->CreateQueries = reinterpret_cast<gl_create_queries_t*>(soglLoadSymbol("glCreateQueries"));
	gl->CreateRenderbuffers = reinterpret_cast<gl_create_renderbuffers_t*>(soglLoadSymbol("glCreateRenderbuffers"));
	gl->CreateSamplers = reinterpret_cast<gl_create_samplers_t*>(soglLoadSymbol("glCreateSamplers"));
	gl->CreateShader = reinterpret_cast<gl_create_shader_t*>(soglLoadSymbol("glCreateShader"));
	gl->CreateShaderObjectARB = reinterpret_cast<gl_create_shader_object_arb_t*>(soglLoadSymbol("glCreateShaderObjectARB"));
	gl->CreateShaderProgramEXT = reinterpret_cast<gl_create_shader_program_ext_t*>(soglLoadSymbol("glCreateShaderProgramEXT"));
	gl->CreateShaderProgramv = reinterpret_cast<gl_create_shader_programv_t*>(soglLoadSymbol("glCreateShaderProgramv"));
	gl->CreateStatesNV = reinterpret_cast<gl_create_states_nv_t*>(soglLoadSymbol("glCreateStatesNV"));
	gl->CreateSyncFromCLeventARB = reinterpret_cast<gl_create_sync_from_clevent_arb_t*>(soglLoadSymbol("glCreateSyncFromCLeventARB"));
	gl->CreateTextures = reinterpret_cast<gl_create_textures_t*>(soglLoadSymbol("glCreateTextures"));
	gl->CreateTransformFeedbacks = reinterpret_cast<gl_create_transform_feedbacks_t*>(soglLoadSymbol("glCreateTransformFeedbacks"));
	gl->CreateVertexArrays = reinterpret_cast<gl_create_vertex_arrays_t*>(soglLoadSymbol("glCreateVertexArrays"));
	gl->CullParameterdvEXT = reinterpret_cast<gl_cull_parameterdv_ext_t*>(soglLoadSymbol("glCullParameterdvEXT"));
	gl->CullParameterfvEXT = reinterpret_cast<gl_cull_parameterfv_ext_t*>(soglLoadSymbol("glCullParameterfvEXT"));
	gl->CurrentPaletteMatrixARB = reinterpret_cast<gl_current_palette_matrix_arb_t*>(soglLoadSymbol("glCurrentPaletteMatrixARB"));
	gl->DebugMessageCallback = reinterpret_cast<gl_debug_message_callback_t*>(soglLoadSymbol("glDebugMessageCallback"));
	gl->DebugMessageCallbackAMD = reinterpret_cast<gl_debug_message_callback_amd_t*>(soglLoadSymbol("glDebugMessageCallbackAMD"));
	gl->DebugMessageCallbackARB = reinterpret_cast<gl_debug_message_callback_arb_t*>(soglLoadSymbol("glDebugMessageCallbackARB"));
	gl->DebugMessageControl = reinterpret_cast<gl_debug_message_control_t*>(soglLoadSymbol("glDebugMessageControl"));
	gl->DebugMessageControlARB = reinterpret_cast<gl_debug_message_control_arb_t*>(soglLoadSymbol("glDebugMessageControlARB"));
	gl->DebugMessageEnableAMD = reinterpret_cast<gl_debug_message_enable_amd_t*>(soglLoadSymbol("glDebugMessageEnableAMD"));
	gl->DebugMessageInsert = reinterpret_cast<gl_debug_message_insert_t*>(soglLoadSymbol("glDebugMessageInsert"));
	gl->DebugMessageInsertAMD = reinterpret_cast<gl_debug_message_insert_amd_t*>(soglLoadSymbol("glDebugMessageInsertAMD"));
	gl->DebugMessageInsertARB = reinterpret_cast<gl_debug_message_insert_arb_t*>(soglLoadSymbol("glDebugMessageInsertARB"));
	gl->DeformSGIX = reinterpret_cast<gl_deform_sgix_t*>(soglLoadSymbol("glDeformSGIX"));
	gl->DeleteAsyncMarkersSGIX = reinterpret_cast<gl_delete_async_markers_sgix_t*>(soglLoadSymbol("glDeleteAsyncMarkersSGIX"));
	gl->DeleteBuffers = reinterpret_cast<gl_delete_buffers_t*>(soglLoadSymbol("glDeleteBuffers"));
	gl->DeleteBuffersARB = reinterpret_cast<gl_delete_buffers_arb_t*>(soglLoadSymbol("glDeleteBuffersARB"));
	gl->DeleteCommandListsNV = reinterpret_cast<gl_delete_command_lists_nv_t*>(soglLoadSymbol("glDeleteCommandListsNV"));
	gl->DeleteFencesAPPLE = reinterpret_cast<gl_delete_fences_apple_t*>(soglLoadSymbol("glDeleteFencesAPPLE"));
	gl->DeleteFencesNV = reinterpret_cast<gl_delete_fences_nv_t*>(soglLoadSymbol("glDeleteFencesNV"));
	gl->DeleteFragmentShaderATI = reinterpret_cast<gl_delete_fragment_shader_ati_t*>(soglLoadSymbol("glDeleteFragmentShaderATI"));
	gl->DeleteFramebuffers = reinterpret_cast<gl_delete_framebuffers_t*>(soglLoadSymbol("glDeleteFramebuffers"));
	gl->DeleteFramebuffersEXT = reinterpret_cast<gl_delete_framebuffers_ext_t*>(soglLoadSymbol("glDeleteFramebuffersEXT"));
	gl->DeleteMemoryObjectsEXT = reinterpret_cast<gl_delete_memory_objects_ext_t*>(soglLoadSymbol("glDeleteMemoryObjectsEXT"));
	gl->DeleteNamedStringARB = reinterpret_cast<gl_delete_named_string_arb_t*>(soglLoadSymbol("glDeleteNamedStringARB"));
	gl->DeleteNamesAMD = reinterpret_cast<gl_delete_names_amd_t*>(soglLoadSymbol("glDeleteNamesAMD"));
	gl->DeleteObjectARB = reinterpret_cast<gl_delete_object_arb_t*>(soglLoadSymbol("glDeleteObjectARB"));
	gl->DeleteOcclusionQueriesNV = reinterpret_cast<gl_delete_occlusion_queries_nv_t*>(soglLoadSymbol("glDeleteOcclusionQueriesNV"));
	gl->DeletePathsNV = reinterpret_cast<gl_delete_paths_nv_t*>(soglLoadSymbol("glDeletePathsNV"));
	gl->DeletePerfMonitorsAMD = reinterpret_cast<gl_delete_perf_monitors_amd_t*>(soglLoadSymbol("glDeletePerfMonitorsAMD"));
	gl->DeletePerfQueryINTEL = reinterpret_cast<gl_delete_perf_query_intel_t*>(soglLoadSymbol("glDeletePerfQueryINTEL"));
	gl->DeleteProgram = reinterpret_cast<gl_delete_program_t*>(soglLoadSymbol("glDeleteProgram"));
	gl->DeleteProgramPipelines = reinterpret_cast<gl_delete_program_pipelines_t*>(soglLoadSymbol("glDeleteProgramPipelines"));
	gl->DeleteProgramsARB = reinterpret_cast<gl_delete_programs_arb_t*>(soglLoadSymbol("glDeleteProgramsARB"));
	gl->DeleteProgramsNV = reinterpret_cast<gl_delete_programs_nv_t*>(soglLoadSymbol("glDeleteProgramsNV"));
	gl->DeleteQueries = reinterpret_cast<gl_delete_queries_t*>(soglLoadSymbol("glDeleteQueries"));
	gl->DeleteQueriesARB = reinterpret_cast<gl_delete_queries_arb_t*>(soglLoadSymbol("glDeleteQueriesARB"));
	gl->DeleteRenderbuffers = reinterpret_cast<gl_delete_renderbuffers_t*>(soglLoadSymbol("glDeleteRenderbuffers"));
	gl->DeleteRenderbuffersEXT = reinterpret_cast<gl_delete_renderbuffers_ext_t*>(soglLoadSymbol("glDeleteRenderbuffersEXT"));
	gl->DeleteSamplers = reinterpret_cast<gl_delete_samplers_t*>(soglLoadSymbol("glDeleteSamplers"));
	gl->DeleteSemaphoresEXT = reinterpret_cast<gl_delete_semaphores_ext_t*>(soglLoadSymbol("glDeleteSemaphoresEXT"));
	gl->DeleteShader = reinterpret_cast<gl_delete_shader_t*>(soglLoadSymbol("glDeleteShader"));
	gl->DeleteStatesNV = reinterpret_cast<gl_delete_states_nv_t*>(soglLoadSymbol("glDeleteStatesNV"));
	gl->DeleteSync = reinterpret_cast<gl_delete_sync_t*>(soglLoadSymbol("glDeleteSync"));
	gl->DeleteTexturesEXT = reinterpret_cast<gl_delete_textures_ext_t*>(soglLoadSymbol("glDeleteTexturesEXT"));
	gl->DeleteTransformFeedbacks = reinterpret_cast<gl_delete_transform_feedbacks_t*>(soglLoadSymbol("glDeleteTransformFeedbacks"));
	gl->DeleteTransformFeedbacksNV = reinterpret_cast<gl_delete_transform_feedbacks_nv_t*>(soglLoadSymbol("glDeleteTransformFeedbacksNV"));
	gl->DeleteVertexArrays = reinterpret_cast<gl_delete_vertex_arrays_t*>(soglLoadSymbol("glDeleteVertexArrays"));
	gl->DeleteVertexArraysAPPLE = reinterpret_cast<gl_delete_vertex_arrays_apple_t*>(soglLoadSymbol("glDeleteVertexArraysAPPLE"));
	gl->DeleteVertexShaderEXT = reinterpret_cast<gl_delete_vertex_shader_ext_t*>(soglLoadSymbol("glDeleteVertexShaderEXT"));
	gl->DepthBoundsEXT = reinterpret_cast<gl_depth_bounds_ext_t*>(soglLoadSymbol("glDepthBoundsEXT"));
	gl->DepthBoundsdNV = reinterpret_cast<gl_depth_boundsd_nv_t*>(soglLoadSymbol("glDepthBoundsdNV"));
	gl->DepthRangeArrayv = reinterpret_cast<gl_depth_range_arrayv_t*>(soglLoadSymbol("glDepthRangeArrayv"));
	gl->DepthRangeIndexed = reinterpret_cast<gl_depth_range_indexed_t*>(soglLoadSymbol("glDepthRangeIndexed"));
	gl->DepthRangedNV = reinterpret_cast<gl_depth_ranged_nv_t*>(soglLoadSymbol("glDepthRangedNV"));
	gl->DepthRangef = reinterpret_cast<gl_depth_rangef_t*>(soglLoadSymbol("glDepthRangef"));
	gl->DetachObjectARB = reinterpret_cast<gl_detach_object_arb_t*>(soglLoadSymbol("glDetachObjectARB"));
	gl->DetachShader = reinterpret_cast<gl_detach_shader_t*>(soglLoadSymbol("glDetachShader"));
	gl->DetailTexFuncSGIS = reinterpret_cast<gl_detail_tex_func_sgis_t*>(soglLoadSymbol("glDetailTexFuncSGIS"));
	gl->DisableClientStateIndexedEXT = reinterpret_cast<gl_disable_client_state_indexed_ext_t*>(soglLoadSymbol("glDisableClientStateIndexedEXT"));
	gl->DisableClientStateiEXT = reinterpret_cast<gl_disable_client_statei_ext_t*>(soglLoadSymbol("glDisableClientStateiEXT"));
	gl->DisableIndexedEXT = reinterpret_cast<gl_disable_indexed_ext_t*>(soglLoadSymbol("glDisableIndexedEXT"));
	gl->DisableVariantClientStateEXT = reinterpret_cast<gl_disable_variant_client_state_ext_t*>(soglLoadSymbol("glDisableVariantClientStateEXT"));
	gl->DisableVertexArrayAttrib = reinterpret_cast<gl_disable_vertex_array_attrib_t*>(soglLoadSymbol("glDisableVertexArrayAttrib"));
	gl->DisableVertexArrayAttribEXT = reinterpret_cast<gl_disable_vertex_array_attrib_ext_t*>(soglLoadSymbol("glDisableVertexArrayAttribEXT"));
	gl->DisableVertexArrayEXT = reinterpret_cast<gl_disable_vertex_array_ext_t*>(soglLoadSymbol("glDisableVertexArrayEXT"));
	gl->DisableVertexAttribAPPLE = reinterpret_cast<gl_disable_vertex_attrib_apple_t*>(soglLoadSymbol("glDisableVertexAttribAPPLE"));
	gl->DisableVertexAttribArray = reinterpret_cast<gl_disable_vertex_attrib_array_t*>(soglLoadSymbol("glDisableVertexAttribArray"));
	gl->DisableVertexAttribArrayARB = reinterpret_cast<gl_disable_vertex_attrib_array_arb_t*>(soglLoadSymbol("glDisableVertexAttribArrayARB"));
	gl->Disablei = reinterpret_cast<gl_disablei_t*>(soglLoadSymbol("glDisablei"));
	gl->DispatchCompute = reinterpret_cast<gl_dispatch_compute_t*>(soglLoadSymbol("glDispatchCompute"));
	gl->DispatchComputeGroupSizeARB = reinterpret_cast<gl_dispatch_compute_group_size_arb_t*>(soglLoadSymbol("glDispatchComputeGroupSizeARB"));
	gl->DispatchComputeIndirect = reinterpret_cast<gl_dispatch_compute_indirect_t*>(soglLoadSymbol("glDispatchComputeIndirect"));
	gl->DrawArraysEXT = reinterpret_cast<gl_draw_arrays_ext_t*>(soglLoadSymbol("glDrawArraysEXT"));
	gl->DrawArraysIndirect = reinterpret_cast<gl_draw_arrays_indirect_t*>(soglLoadSymbol("glDrawArraysIndirect"));
	gl->DrawArraysInstanced = reinterpret_cast<gl_draw_arrays_instanced_t*>(soglLoadSymbol("glDrawArraysInstanced"));
	gl->DrawArraysInstancedARB = reinterpret_cast<gl_draw_arrays_instanced_arb_t*>(soglLoadSymbol("glDrawArraysInstancedARB"));
	gl->DrawArraysInstancedBaseInstance = reinterpret_cast<gl_draw_arrays_instanced_base_instance_t*>(soglLoadSymbol("glDrawArraysInstancedBaseInstance"));
	gl->DrawArraysInstancedEXT = reinterpret_cast<gl_draw_arrays_instanced_ext_t*>(soglLoadSymbol("glDrawArraysInstancedEXT"));
	gl->DrawBuffers = reinterpret_cast<gl_draw_buffers_t*>(soglLoadSymbol("glDrawBuffers"));
	gl->DrawBuffersARB = reinterpret_cast<gl_draw_buffers_arb_t*>(soglLoadSymbol("glDrawBuffersARB"));
	gl->DrawBuffersATI = reinterpret_cast<gl_draw_buffers_ati_t*>(soglLoadSymbol("glDrawBuffersATI"));
	gl->DrawCommandsAddressNV = reinterpret_cast<gl_draw_commands_address_nv_t*>(soglLoadSymbol("glDrawCommandsAddressNV"));
	gl->DrawCommandsNV = reinterpret_cast<gl_draw_commands_nv_t*>(soglLoadSymbol("glDrawCommandsNV"));
	gl->DrawCommandsStatesAddressNV = reinterpret_cast<gl_draw_commands_states_address_nv_t*>(soglLoadSymbol("glDrawCommandsStatesAddressNV"));
	gl->DrawCommandsStatesNV = reinterpret_cast<gl_draw_commands_states_nv_t*>(soglLoadSymbol("glDrawCommandsStatesNV"));
	gl->DrawElementArrayAPPLE = reinterpret_cast<gl_draw_element_array_apple_t*>(soglLoadSymbol("glDrawElementArrayAPPLE"));
	gl->DrawElementArrayATI = reinterpret_cast<gl_draw_element_array_ati_t*>(soglLoadSymbol("glDrawElementArrayATI"));
	gl->DrawElementsBaseVertex = reinterpret_cast<gl_draw_elements_base_vertex_t*>(soglLoadSymbol("glDrawElementsBaseVertex"));
	gl->DrawElementsIndirect = reinterpret_cast<gl_draw_elements_indirect_t*>(soglLoadSymbol("glDrawElementsIndirect"));
	gl->DrawElementsInstanced = reinterpret_cast<gl_draw_elements_instanced_t*>(soglLoadSymbol("glDrawElementsInstanced"));
	gl->DrawElementsInstancedARB = reinterpret_cast<gl_draw_elements_instanced_arb_t*>(soglLoadSymbol("glDrawElementsInstancedARB"));
	gl->DrawElementsInstancedBaseInstance = reinterpret_cast<gl_draw_elements_instanced_base_instance_t*>(soglLoadSymbol("glDrawElementsInstancedBaseInstance"));
	gl->DrawElementsInstancedBaseVertex = reinterpret_cast<gl_draw_elements_instanced_base_vertex_t*>(soglLoadSymbol("glDrawElementsInstancedBaseVertex"));
	gl->DrawElementsInstancedBaseVertexBaseInstance = reinterpret_cast<gl_draw_elements_instanced_base_vertex_base_instance_t*>(soglLoadSymbol("glDrawElementsInstancedBaseVertexBaseInstance"));
	gl->DrawElementsInstancedEXT = reinterpret_cast<gl_draw_elements_instanced_ext_t*>(soglLoadSymbol("glDrawElementsInstancedEXT"));
	gl->DrawRangeElementArrayAPPLE = reinterpret_cast<gl_draw_range_element_array_apple_t*>(soglLoadSymbol("glDrawRangeElementArrayAPPLE"));
	gl->DrawRangeElementArrayATI = reinterpret_cast<gl_draw_range_element_array_ati_t*>(soglLoadSymbol("glDrawRangeElementArrayATI"));
	gl->DrawRangeElements = reinterpret_cast<gl_draw_range_elements_t*>(soglLoadSymbol("glDrawRangeElements"));
	gl->DrawRangeElementsBaseVertex = reinterpret_cast<gl_draw_range_elements_base_vertex_t*>(soglLoadSymbol("glDrawRangeElementsBaseVertex"));
	gl->DrawRangeElementsEXT = reinterpret_cast<gl_draw_range_elements_ext_t*>(soglLoadSymbol("glDrawRangeElementsEXT"));
	gl->DrawTextureNV = reinterpret_cast<gl_draw_texture_nv_t*>(soglLoadSymbol("glDrawTextureNV"));
	gl->DrawTransformFeedback = reinterpret_cast<gl_draw_transform_feedback_t*>(soglLoadSymbol("glDrawTransformFeedback"));
	gl->DrawTransformFeedbackInstanced = reinterpret_cast<gl_draw_transform_feedback_instanced_t*>(soglLoadSymbol("glDrawTransformFeedbackInstanced"));
	gl->DrawTransformFeedbackNV = reinterpret_cast<gl_draw_transform_feedback_nv_t*>(soglLoadSymbol("glDrawTransformFeedbackNV"));
	gl->DrawTransformFeedbackStream = reinterpret_cast<gl_draw_transform_feedback_stream_t*>(soglLoadSymbol("glDrawTransformFeedbackStream"));
	gl->DrawTransformFeedbackStreamInstanced = reinterpret_cast<gl_draw_transform_feedback_stream_instanced_t*>(soglLoadSymbol("glDrawTransformFeedbackStreamInstanced"));
	gl->DrawVkImageNV = reinterpret_cast<gl_draw_vk_image_nv_t*>(soglLoadSymbol("glDrawVkImageNV"));
	gl->EdgeFlagFormatNV = reinterpret_cast<gl_edge_flag_format_nv_t*>(soglLoadSymbol("glEdgeFlagFormatNV"));
	gl->EdgeFlagPointerEXT = reinterpret_cast<gl_edge_flag_pointer_ext_t*>(soglLoadSymbol("glEdgeFlagPointerEXT"));
	gl->EdgeFlagPointerListIBM = reinterpret_cast<gl_edge_flag_pointer_list_ibm_t*>(soglLoadSymbol("glEdgeFlagPointerListIBM"));
	gl->ElementPointerAPPLE = reinterpret_cast<gl_element_pointer_apple_t*>(soglLoadSymbol("glElementPointerAPPLE"));
	gl->ElementPointerATI = reinterpret_cast<gl_element_pointer_ati_t*>(soglLoadSymbol("glElementPointerATI"));
	gl->EnableClientStateIndexedEXT = reinterpret_cast<gl_enable_client_state_indexed_ext_t*>(soglLoadSymbol("glEnableClientStateIndexedEXT"));
	gl->EnableClientStateiEXT = reinterpret_cast<gl_enable_client_statei_ext_t*>(soglLoadSymbol("glEnableClientStateiEXT"));
	gl->EnableIndexedEXT = reinterpret_cast<gl_enable_indexed_ext_t*>(soglLoadSymbol("glEnableIndexedEXT"));
	gl->EnableVariantClientStateEXT = reinterpret_cast<gl_enable_variant_client_state_ext_t*>(soglLoadSymbol("glEnableVariantClientStateEXT"));
	gl->EnableVertexArrayAttrib = reinterpret_cast<gl_enable_vertex_array_attrib_t*>(soglLoadSymbol("glEnableVertexArrayAttrib"));
	gl->EnableVertexArrayAttribEXT = reinterpret_cast<gl_enable_vertex_array_attrib_ext_t*>(soglLoadSymbol("glEnableVertexArrayAttribEXT"));
	gl->EnableVertexArrayEXT = reinterpret_cast<gl_enable_vertex_array_ext_t*>(soglLoadSymbol("glEnableVertexArrayEXT"));
	gl->EnableVertexAttribAPPLE = reinterpret_cast<gl_enable_vertex_attrib_apple_t*>(soglLoadSymbol("glEnableVertexAttribAPPLE"));
	gl->EnableVertexAttribArray = reinterpret_cast<gl_enable_vertex_attrib_array_t*>(soglLoadSymbol("glEnableVertexAttribArray"));
	gl->EnableVertexAttribArrayARB = reinterpret_cast<gl_enable_vertex_attrib_array_arb_t*>(soglLoadSymbol("glEnableVertexAttribArrayARB"));
	gl->Enablei = reinterpret_cast<gl_enablei_t*>(soglLoadSymbol("glEnablei"));
	gl->EndConditionalRender = reinterpret_cast<gl_end_conditional_render_t*>(soglLoadSymbol("glEndConditionalRender"));
	gl->EndConditionalRenderNV = reinterpret_cast<gl_end_conditional_render_nv_t*>(soglLoadSymbol("glEndConditionalRenderNV"));
	gl->EndConditionalRenderNVX = reinterpret_cast<gl_end_conditional_render_nvx_t*>(soglLoadSymbol("glEndConditionalRenderNVX"));
	gl->EndFragmentShaderATI = reinterpret_cast<gl_end_fragment_shader_ati_t*>(soglLoadSymbol("glEndFragmentShaderATI"));
	gl->EndOcclusionQueryNV = reinterpret_cast<gl_end_occlusion_query_nv_t*>(soglLoadSymbol("glEndOcclusionQueryNV"));
	gl->EndPerfMonitorAMD = reinterpret_cast<gl_end_perf_monitor_amd_t*>(soglLoadSymbol("glEndPerfMonitorAMD"));
	gl->EndPerfQueryINTEL = reinterpret_cast<gl_end_perf_query_intel_t*>(soglLoadSymbol("glEndPerfQueryINTEL"));
	gl->EndQuery = reinterpret_cast<gl_end_query_t*>(soglLoadSymbol("glEndQuery"));
	gl->EndQueryARB = reinterpret_cast<gl_end_query_arb_t*>(soglLoadSymbol("glEndQueryARB"));
	gl->EndQueryIndexed = reinterpret_cast<gl_end_query_indexed_t*>(soglLoadSymbol("glEndQueryIndexed"));
	gl->EndTransformFeedback = reinterpret_cast<gl_end_transform_feedback_t*>(soglLoadSymbol("glEndTransformFeedback"));
	gl->EndTransformFeedbackEXT = reinterpret_cast<gl_end_transform_feedback_ext_t*>(soglLoadSymbol("glEndTransformFeedbackEXT"));
	gl->EndTransformFeedbackNV = reinterpret_cast<gl_end_transform_feedback_nv_t*>(soglLoadSymbol("glEndTransformFeedbackNV"));
	gl->EndVertexShaderEXT = reinterpret_cast<gl_end_vertex_shader_ext_t*>(soglLoadSymbol("glEndVertexShaderEXT"));
	gl->EndVideoCaptureNV = reinterpret_cast<gl_end_video_capture_nv_t*>(soglLoadSymbol("glEndVideoCaptureNV"));
	gl->EvalMapsNV = reinterpret_cast<gl_eval_maps_nv_t*>(soglLoadSymbol("glEvalMapsNV"));
	gl->ExecuteProgramNV = reinterpret_cast<gl_execute_program_nv_t*>(soglLoadSymbol("glExecuteProgramNV"));
	gl->ExtractComponentEXT = reinterpret_cast<gl_extract_component_ext_t*>(soglLoadSymbol("glExtractComponentEXT"));
	gl->FenceSync = reinterpret_cast<gl_fence_sync_t*>(soglLoadSymbol("glFenceSync"));
	gl->FinalCombinerInputNV = reinterpret_cast<gl_final_combiner_input_nv_t*>(soglLoadSymbol("glFinalCombinerInputNV"));
	gl->FinishAsyncSGIX = reinterpret_cast<gl_finish_async_sgix_t*>(soglLoadSymbol("glFinishAsyncSGIX"));
	gl->FinishFenceAPPLE = reinterpret_cast<gl_finish_fence_apple_t*>(soglLoadSymbol("glFinishFenceAPPLE"));
	gl->FinishFenceNV = reinterpret_cast<gl_finish_fence_nv_t*>(soglLoadSymbol("glFinishFenceNV"));
	gl->FinishObjectAPPLE = reinterpret_cast<gl_finish_object_apple_t*>(soglLoadSymbol("glFinishObjectAPPLE"));
	gl->FinishTextureSUNX = reinterpret_cast<gl_finish_texture_sunx_t*>(soglLoadSymbol("glFinishTextureSUNX"));
	gl->FlushMappedBufferRange = reinterpret_cast<gl_flush_mapped_buffer_range_t*>(soglLoadSymbol("glFlushMappedBufferRange"));
	gl->FlushMappedBufferRangeAPPLE = reinterpret_cast<gl_flush_mapped_buffer_range_apple_t*>(soglLoadSymbol("glFlushMappedBufferRangeAPPLE"));
	gl->FlushMappedNamedBufferRange = reinterpret_cast<gl_flush_mapped_named_buffer_range_t*>(soglLoadSymbol("glFlushMappedNamedBufferRange"));
	gl->FlushMappedNamedBufferRangeEXT = reinterpret_cast<gl_flush_mapped_named_buffer_range_ext_t*>(soglLoadSymbol("glFlushMappedNamedBufferRangeEXT"));
	gl->FlushPixelDataRangeNV = reinterpret_cast<gl_flush_pixel_data_range_nv_t*>(soglLoadSymbol("glFlushPixelDataRangeNV"));
	gl->FlushRasterSGIX = reinterpret_cast<gl_flush_raster_sgix_t*>(soglLoadSymbol("glFlushRasterSGIX"));
	gl->FlushVertexArrayRangeAPPLE = reinterpret_cast<gl_flush_vertex_array_range_apple_t*>(soglLoadSymbol("glFlushVertexArrayRangeAPPLE"));
	gl->FlushVertexArrayRangeNV = reinterpret_cast<gl_flush_vertex_array_range_nv_t*>(soglLoadSymbol("glFlushVertexArrayRangeNV"));
	gl->FogCoordFormatNV = reinterpret_cast<gl_fog_coord_format_nv_t*>(soglLoadSymbol("glFogCoordFormatNV"));
	gl->FogCoordPointer = reinterpret_cast<gl_fog_coord_pointer_t*>(soglLoadSymbol("glFogCoordPointer"));
	gl->FogCoordPointerEXT = reinterpret_cast<gl_fog_coord_pointer_ext_t*>(soglLoadSymbol("glFogCoordPointerEXT"));
	gl->FogCoordPointerListIBM = reinterpret_cast<gl_fog_coord_pointer_list_ibm_t*>(soglLoadSymbol("glFogCoordPointerListIBM"));
	gl->FogCoordd = reinterpret_cast<gl_fog_coordd_t*>(soglLoadSymbol("glFogCoordd"));
	gl->FogCoorddEXT = reinterpret_cast<gl_fog_coordd_ext_t*>(soglLoadSymbol("glFogCoorddEXT"));
	gl->FogCoorddv = reinterpret_cast<gl_fog_coorddv_t*>(soglLoadSymbol("glFogCoorddv"));
	gl->FogCoorddvEXT = reinterpret_cast<gl_fog_coorddv_ext_t*>(soglLoadSymbol("glFogCoorddvEXT"));
	gl->FogCoordf = reinterpret_cast<gl_fog_coordf_t*>(soglLoadSymbol("glFogCoordf"));
	gl->FogCoordfEXT = reinterpret_cast<gl_fog_coordf_ext_t*>(soglLoadSymbol("glFogCoordfEXT"));
	gl->FogCoordfv = reinterpret_cast<gl_fog_coordfv_t*>(soglLoadSymbol("glFogCoordfv"));
	gl->FogCoordfvEXT = reinterpret_cast<gl_fog_coordfv_ext_t*>(soglLoadSymbol("glFogCoordfvEXT"));
	gl->FogCoordhNV = reinterpret_cast<gl_fog_coordh_nv_t*>(soglLoadSymbol("glFogCoordhNV"));
	gl->FogCoordhvNV = reinterpret_cast<gl_fog_coordhv_nv_t*>(soglLoadSymbol("glFogCoordhvNV"));
	gl->FogFuncSGIS = reinterpret_cast<gl_fog_func_sgis_t*>(soglLoadSymbol("glFogFuncSGIS"));
	gl->FragmentColorMaterialSGIX = reinterpret_cast<gl_fragment_color_material_sgix_t*>(soglLoadSymbol("glFragmentColorMaterialSGIX"));
	gl->FragmentCoverageColorNV = reinterpret_cast<gl_fragment_coverage_color_nv_t*>(soglLoadSymbol("glFragmentCoverageColorNV"));
	gl->FragmentLightModelfSGIX = reinterpret_cast<gl_fragment_light_modelf_sgix_t*>(soglLoadSymbol("glFragmentLightModelfSGIX"));
	gl->FragmentLightModelfvSGIX = reinterpret_cast<gl_fragment_light_modelfv_sgix_t*>(soglLoadSymbol("glFragmentLightModelfvSGIX"));
	gl->FragmentLightModeliSGIX = reinterpret_cast<gl_fragment_light_modeli_sgix_t*>(soglLoadSymbol("glFragmentLightModeliSGIX"));
	gl->FragmentLightModelivSGIX = reinterpret_cast<gl_fragment_light_modeliv_sgix_t*>(soglLoadSymbol("glFragmentLightModelivSGIX"));
	gl->FragmentLightfSGIX = reinterpret_cast<gl_fragment_lightf_sgix_t*>(soglLoadSymbol("glFragmentLightfSGIX"));
	gl->FragmentLightfvSGIX = reinterpret_cast<gl_fragment_lightfv_sgix_t*>(soglLoadSymbol("glFragmentLightfvSGIX"));
	gl->FragmentLightiSGIX = reinterpret_cast<gl_fragment_lighti_sgix_t*>(soglLoadSymbol("glFragmentLightiSGIX"));
	gl->FragmentLightivSGIX = reinterpret_cast<gl_fragment_lightiv_sgix_t*>(soglLoadSymbol("glFragmentLightivSGIX"));
	gl->FragmentMaterialfSGIX = reinterpret_cast<gl_fragment_materialf_sgix_t*>(soglLoadSymbol("glFragmentMaterialfSGIX"));
	gl->FragmentMaterialfvSGIX = reinterpret_cast<gl_fragment_materialfv_sgix_t*>(soglLoadSymbol("glFragmentMaterialfvSGIX"));
	gl->FragmentMaterialiSGIX = reinterpret_cast<gl_fragment_materiali_sgix_t*>(soglLoadSymbol("glFragmentMaterialiSGIX"));
	gl->FragmentMaterialivSGIX = reinterpret_cast<gl_fragment_materialiv_sgix_t*>(soglLoadSymbol("glFragmentMaterialivSGIX"));
	gl->FrameTerminatorGREMEDY = reinterpret_cast<gl_frame_terminator_gremedy_t*>(soglLoadSymbol("glFrameTerminatorGREMEDY"));
	gl->FrameZoomSGIX = reinterpret_cast<gl_frame_zoom_sgix_t*>(soglLoadSymbol("glFrameZoomSGIX"));
	gl->FramebufferDrawBufferEXT = reinterpret_cast<gl_framebuffer_draw_buffer_ext_t*>(soglLoadSymbol("glFramebufferDrawBufferEXT"));
	gl->FramebufferDrawBuffersEXT = reinterpret_cast<gl_framebuffer_draw_buffers_ext_t*>(soglLoadSymbol("glFramebufferDrawBuffersEXT"));
	gl->FramebufferParameteri = reinterpret_cast<gl_framebuffer_parameteri_t*>(soglLoadSymbol("glFramebufferParameteri"));
	gl->FramebufferReadBufferEXT = reinterpret_cast<gl_framebuffer_read_buffer_ext_t*>(soglLoadSymbol("glFramebufferReadBufferEXT"));
	gl->FramebufferRenderbuffer = reinterpret_cast<gl_framebuffer_renderbuffer_t*>(soglLoadSymbol("glFramebufferRenderbuffer"));
	gl->FramebufferRenderbufferEXT = reinterpret_cast<gl_framebuffer_renderbuffer_ext_t*>(soglLoadSymbol("glFramebufferRenderbufferEXT"));
	gl->FramebufferSampleLocationsfvARB = reinterpret_cast<gl_framebuffer_sample_locationsfv_arb_t*>(soglLoadSymbol("glFramebufferSampleLocationsfvARB"));
	gl->FramebufferSampleLocationsfvNV = reinterpret_cast<gl_framebuffer_sample_locationsfv_nv_t*>(soglLoadSymbol("glFramebufferSampleLocationsfvNV"));
	gl->FramebufferSamplePositionsfvAMD = reinterpret_cast<gl_framebuffer_sample_positionsfv_amd_t*>(soglLoadSymbol("glFramebufferSamplePositionsfvAMD"));
	gl->FramebufferTexture = reinterpret_cast<gl_framebuffer_texture_t*>(soglLoadSymbol("glFramebufferTexture"));
	gl->FramebufferTexture1D = reinterpret_cast<gl_framebuffer_texture1d_t*>(soglLoadSymbol("glFramebufferTexture1D"));
	gl->FramebufferTexture1DEXT = reinterpret_cast<gl_framebuffer_texture1dext_t*>(soglLoadSymbol("glFramebufferTexture1DEXT"));
	gl->FramebufferTexture2D = reinterpret_cast<gl_framebuffer_texture2d_t*>(soglLoadSymbol("glFramebufferTexture2D"));
	gl->FramebufferTexture2DEXT = reinterpret_cast<gl_framebuffer_texture2dext_t*>(soglLoadSymbol("glFramebufferTexture2DEXT"));
	gl->FramebufferTexture3D = reinterpret_cast<gl_framebuffer_texture3d_t*>(soglLoadSymbol("glFramebufferTexture3D"));
	gl->FramebufferTexture3DEXT = reinterpret_cast<gl_framebuffer_texture3dext_t*>(soglLoadSymbol("glFramebufferTexture3DEXT"));
	gl->FramebufferTextureARB = reinterpret_cast<gl_framebuffer_texture_arb_t*>(soglLoadSymbol("glFramebufferTextureARB"));
	gl->FramebufferTextureEXT = reinterpret_cast<gl_framebuffer_texture_ext_t*>(soglLoadSymbol("glFramebufferTextureEXT"));
	gl->FramebufferTextureFaceARB = reinterpret_cast<gl_framebuffer_texture_face_arb_t*>(soglLoadSymbol("glFramebufferTextureFaceARB"));
	gl->FramebufferTextureFaceEXT = reinterpret_cast<gl_framebuffer_texture_face_ext_t*>(soglLoadSymbol("glFramebufferTextureFaceEXT"));
	gl->FramebufferTextureLayer = reinterpret_cast<gl_framebuffer_texture_layer_t*>(soglLoadSymbol("glFramebufferTextureLayer"));
	gl->FramebufferTextureLayerARB = reinterpret_cast<gl_framebuffer_texture_layer_arb_t*>(soglLoadSymbol("glFramebufferTextureLayerARB"));
	gl->FramebufferTextureLayerEXT = reinterpret_cast<gl_framebuffer_texture_layer_ext_t*>(soglLoadSymbol("glFramebufferTextureLayerEXT"));
	gl->FramebufferTextureMultiviewOVR = reinterpret_cast<gl_framebuffer_texture_multiview_ovr_t*>(soglLoadSymbol("glFramebufferTextureMultiviewOVR"));
	gl->FreeObjectBufferATI = reinterpret_cast<gl_free_object_buffer_ati_t*>(soglLoadSymbol("glFreeObjectBufferATI"));
	gl->GenAsyncMarkersSGIX = reinterpret_cast<gl_gen_async_markers_sgix_t*>(soglLoadSymbol("glGenAsyncMarkersSGIX"));
	gl->GenBuffers = reinterpret_cast<gl_gen_buffers_t*>(soglLoadSymbol("glGenBuffers"));
	gl->GenBuffersARB = reinterpret_cast<gl_gen_buffers_arb_t*>(soglLoadSymbol("glGenBuffersARB"));
	gl->GenFencesAPPLE = reinterpret_cast<gl_gen_fences_apple_t*>(soglLoadSymbol("glGenFencesAPPLE"));
	gl->GenFencesNV = reinterpret_cast<gl_gen_fences_nv_t*>(soglLoadSymbol("glGenFencesNV"));
	gl->GenFragmentShadersATI = reinterpret_cast<gl_gen_fragment_shaders_ati_t*>(soglLoadSymbol("glGenFragmentShadersATI"));
	gl->GenFramebuffers = reinterpret_cast<gl_gen_framebuffers_t*>(soglLoadSymbol("glGenFramebuffers"));
	gl->GenFramebuffersEXT = reinterpret_cast<gl_gen_framebuffers_ext_t*>(soglLoadSymbol("glGenFramebuffersEXT"));
	gl->GenNamesAMD = reinterpret_cast<gl_gen_names_amd_t*>(soglLoadSymbol("glGenNamesAMD"));
	gl->GenOcclusionQueriesNV = reinterpret_cast<gl_gen_occlusion_queries_nv_t*>(soglLoadSymbol("glGenOcclusionQueriesNV"));
	gl->GenPathsNV = reinterpret_cast<gl_gen_paths_nv_t*>(soglLoadSymbol("glGenPathsNV"));
	gl->GenPerfMonitorsAMD = reinterpret_cast<gl_gen_perf_monitors_amd_t*>(soglLoadSymbol("glGenPerfMonitorsAMD"));
	gl->GenProgramPipelines = reinterpret_cast<gl_gen_program_pipelines_t*>(soglLoadSymbol("glGenProgramPipelines"));
	gl->GenProgramsARB = reinterpret_cast<gl_gen_programs_arb_t*>(soglLoadSymbol("glGenProgramsARB"));
	gl->GenProgramsNV = reinterpret_cast<gl_gen_programs_nv_t*>(soglLoadSymbol("glGenProgramsNV"));
	gl->GenQueries = reinterpret_cast<gl_gen_queries_t*>(soglLoadSymbol("glGenQueries"));
	gl->GenQueriesARB = reinterpret_cast<gl_gen_queries_arb_t*>(soglLoadSymbol("glGenQueriesARB"));
	gl->GenRenderbuffers = reinterpret_cast<gl_gen_renderbuffers_t*>(soglLoadSymbol("glGenRenderbuffers"));
	gl->GenRenderbuffersEXT = reinterpret_cast<gl_gen_renderbuffers_ext_t*>(soglLoadSymbol("glGenRenderbuffersEXT"));
	gl->GenSamplers = reinterpret_cast<gl_gen_samplers_t*>(soglLoadSymbol("glGenSamplers"));
	gl->GenSemaphoresEXT = reinterpret_cast<gl_gen_semaphores_ext_t*>(soglLoadSymbol("glGenSemaphoresEXT"));
	gl->GenSymbolsEXT = reinterpret_cast<gl_gen_symbols_ext_t*>(soglLoadSymbol("glGenSymbolsEXT"));
	gl->GenTexturesEXT = reinterpret_cast<gl_gen_textures_ext_t*>(soglLoadSymbol("glGenTexturesEXT"));
	gl->GenTransformFeedbacks = reinterpret_cast<gl_gen_transform_feedbacks_t*>(soglLoadSymbol("glGenTransformFeedbacks"));
	gl->GenTransformFeedbacksNV = reinterpret_cast<gl_gen_transform_feedbacks_nv_t*>(soglLoadSymbol("glGenTransformFeedbacksNV"));
	gl->GenVertexArrays = reinterpret_cast<gl_gen_vertex_arrays_t*>(soglLoadSymbol("glGenVertexArrays"));
	gl->GenVertexArraysAPPLE = reinterpret_cast<gl_gen_vertex_arrays_apple_t*>(soglLoadSymbol("glGenVertexArraysAPPLE"));
	gl->GenVertexShadersEXT = reinterpret_cast<gl_gen_vertex_shaders_ext_t*>(soglLoadSymbol("glGenVertexShadersEXT"));
	gl->GenerateMipmap = reinterpret_cast<gl_generate_mipmap_t*>(soglLoadSymbol("glGenerateMipmap"));
	gl->GenerateMipmapEXT = reinterpret_cast<gl_generate_mipmap_ext_t*>(soglLoadSymbol("glGenerateMipmapEXT"));
	gl->GenerateMultiTexMipmapEXT = reinterpret_cast<gl_generate_multi_tex_mipmap_ext_t*>(soglLoadSymbol("glGenerateMultiTexMipmapEXT"));
	gl->GenerateTextureMipmap = reinterpret_cast<gl_generate_texture_mipmap_t*>(soglLoadSymbol("glGenerateTextureMipmap"));
	gl->GenerateTextureMipmapEXT = reinterpret_cast<gl_generate_texture_mipmap_ext_t*>(soglLoadSymbol("glGenerateTextureMipmapEXT"));
	gl->GetActiveAtomicCounterBufferiv = reinterpret_cast<gl_get_active_atomic_counter_bufferiv_t*>(soglLoadSymbol("glGetActiveAtomicCounterBufferiv"));
	gl->GetActiveAttrib = reinterpret_cast<gl_get_active_attrib_t*>(soglLoadSymbol("glGetActiveAttrib"));
	gl->GetActiveAttribARB = reinterpret_cast<gl_get_active_attrib_arb_t*>(soglLoadSymbol("glGetActiveAttribARB"));
	gl->GetActiveSubroutineName = reinterpret_cast<gl_get_active_subroutine_name_t*>(soglLoadSymbol("glGetActiveSubroutineName"));
	gl->GetActiveSubroutineUniformName = reinterpret_cast<gl_get_active_subroutine_uniform_name_t*>(soglLoadSymbol("glGetActiveSubroutineUniformName"));
	gl->GetActiveSubroutineUniformiv = reinterpret_cast<gl_get_active_subroutine_uniformiv_t*>(soglLoadSymbol("glGetActiveSubroutineUniformiv"));
	gl->GetActiveUniform = reinterpret_cast<gl_get_active_uniform_t*>(soglLoadSymbol("glGetActiveUniform"));
	gl->GetActiveUniformARB = reinterpret_cast<gl_get_active_uniform_arb_t*>(soglLoadSymbol("glGetActiveUniformARB"));
	gl->GetActiveUniformBlockName = reinterpret_cast<gl_get_active_uniform_block_name_t*>(soglLoadSymbol("glGetActiveUniformBlockName"));
	gl->GetActiveUniformBlockiv = reinterpret_cast<gl_get_active_uniform_blockiv_t*>(soglLoadSymbol("glGetActiveUniformBlockiv"));
	gl->GetActiveUniformName = reinterpret_cast<gl_get_active_uniform_name_t*>(soglLoadSymbol("glGetActiveUniformName"));
	gl->GetActiveUniformsiv = reinterpret_cast<gl_get_active_uniformsiv_t*>(soglLoadSymbol("glGetActiveUniformsiv"));
	gl->GetActiveVaryingNV = reinterpret_cast<gl_get_active_varying_nv_t*>(soglLoadSymbol("glGetActiveVaryingNV"));
	gl->GetArrayObjectfvATI = reinterpret_cast<gl_get_array_objectfv_ati_t*>(soglLoadSymbol("glGetArrayObjectfvATI"));
	gl->GetArrayObjectivATI = reinterpret_cast<gl_get_array_objectiv_ati_t*>(soglLoadSymbol("glGetArrayObjectivATI"));
	gl->GetAttachedObjectsARB = reinterpret_cast<gl_get_attached_objects_arb_t*>(soglLoadSymbol("glGetAttachedObjectsARB"));
	gl->GetAttachedShaders = reinterpret_cast<gl_get_attached_shaders_t*>(soglLoadSymbol("glGetAttachedShaders"));
	gl->GetAttribLocation = reinterpret_cast<gl_get_attrib_location_t*>(soglLoadSymbol("glGetAttribLocation"));
	gl->GetAttribLocationARB = reinterpret_cast<gl_get_attrib_location_arb_t*>(soglLoadSymbol("glGetAttribLocationARB"));
	gl->GetBooleanIndexedvEXT = reinterpret_cast<gl_get_boolean_indexedv_ext_t*>(soglLoadSymbol("glGetBooleanIndexedvEXT"));
	gl->GetBooleani_v = reinterpret_cast<gl_get_booleani_v_t*>(soglLoadSymbol("glGetBooleani_v"));
	gl->GetBufferParameteri64v = reinterpret_cast<gl_get_buffer_parameteri64v_t*>(soglLoadSymbol("glGetBufferParameteri64v"));
	gl->GetBufferParameteriv = reinterpret_cast<gl_get_buffer_parameteriv_t*>(soglLoadSymbol("glGetBufferParameteriv"));
	gl->GetBufferParameterivARB = reinterpret_cast<gl_get_buffer_parameteriv_arb_t*>(soglLoadSymbol("glGetBufferParameterivARB"));
	gl->GetBufferParameterui64vNV = reinterpret_cast<gl_get_buffer_parameterui64v_nv_t*>(soglLoadSymbol("glGetBufferParameterui64vNV"));
	gl->GetBufferPointerv = reinterpret_cast<gl_get_buffer_pointerv_t*>(soglLoadSymbol("glGetBufferPointerv"));
	gl->GetBufferPointervARB = reinterpret_cast<gl_get_buffer_pointerv_arb_t*>(soglLoadSymbol("glGetBufferPointervARB"));
	gl->GetBufferSubData = reinterpret_cast<gl_get_buffer_sub_data_t*>(soglLoadSymbol("glGetBufferSubData"));
	gl->GetBufferSubDataARB = reinterpret_cast<gl_get_buffer_sub_data_arb_t*>(soglLoadSymbol("glGetBufferSubDataARB"));
	gl->GetColorTable = reinterpret_cast<gl_get_color_table_t*>(soglLoadSymbol("glGetColorTable"));
	gl->GetColorTableEXT = reinterpret_cast<gl_get_color_table_ext_t*>(soglLoadSymbol("glGetColorTableEXT"));
	gl->GetColorTableParameterfv = reinterpret_cast<gl_get_color_table_parameterfv_t*>(soglLoadSymbol("glGetColorTableParameterfv"));
	gl->GetColorTableParameterfvEXT = reinterpret_cast<gl_get_color_table_parameterfv_ext_t*>(soglLoadSymbol("glGetColorTableParameterfvEXT"));
	gl->GetColorTableParameterfvSGI = reinterpret_cast<gl_get_color_table_parameterfv_sgi_t*>(soglLoadSymbol("glGetColorTableParameterfvSGI"));
	gl->GetColorTableParameteriv = reinterpret_cast<gl_get_color_table_parameteriv_t*>(soglLoadSymbol("glGetColorTableParameteriv"));
	gl->GetColorTableParameterivEXT = reinterpret_cast<gl_get_color_table_parameteriv_ext_t*>(soglLoadSymbol("glGetColorTableParameterivEXT"));
	gl->GetColorTableParameterivSGI = reinterpret_cast<gl_get_color_table_parameteriv_sgi_t*>(soglLoadSymbol("glGetColorTableParameterivSGI"));
	gl->GetColorTableSGI = reinterpret_cast<gl_get_color_table_sgi_t*>(soglLoadSymbol("glGetColorTableSGI"));
	gl->GetCombinerInputParameterfvNV = reinterpret_cast<gl_get_combiner_input_parameterfv_nv_t*>(soglLoadSymbol("glGetCombinerInputParameterfvNV"));
	gl->GetCombinerInputParameterivNV = reinterpret_cast<gl_get_combiner_input_parameteriv_nv_t*>(soglLoadSymbol("glGetCombinerInputParameterivNV"));
	gl->GetCombinerOutputParameterfvNV = reinterpret_cast<gl_get_combiner_output_parameterfv_nv_t*>(soglLoadSymbol("glGetCombinerOutputParameterfvNV"));
	gl->GetCombinerOutputParameterivNV = reinterpret_cast<gl_get_combiner_output_parameteriv_nv_t*>(soglLoadSymbol("glGetCombinerOutputParameterivNV"));
	gl->GetCombinerStageParameterfvNV = reinterpret_cast<gl_get_combiner_stage_parameterfv_nv_t*>(soglLoadSymbol("glGetCombinerStageParameterfvNV"));
	gl->GetCommandHeaderNV = reinterpret_cast<gl_get_command_header_nv_t*>(soglLoadSymbol("glGetCommandHeaderNV"));
	gl->GetCompressedMultiTexImageEXT = reinterpret_cast<gl_get_compressed_multi_tex_image_ext_t*>(soglLoadSymbol("glGetCompressedMultiTexImageEXT"));
	gl->GetCompressedTexImage = reinterpret_cast<gl_get_compressed_tex_image_t*>(soglLoadSymbol("glGetCompressedTexImage"));
	gl->GetCompressedTexImageARB = reinterpret_cast<gl_get_compressed_tex_image_arb_t*>(soglLoadSymbol("glGetCompressedTexImageARB"));
	gl->GetCompressedTextureImage = reinterpret_cast<gl_get_compressed_texture_image_t*>(soglLoadSymbol("glGetCompressedTextureImage"));
	gl->GetCompressedTextureImageEXT = reinterpret_cast<gl_get_compressed_texture_image_ext_t*>(soglLoadSymbol("glGetCompressedTextureImageEXT"));
	gl->GetCompressedTextureSubImage = reinterpret_cast<gl_get_compressed_texture_sub_image_t*>(soglLoadSymbol("glGetCompressedTextureSubImage"));
	gl->GetConvolutionFilter = reinterpret_cast<gl_get_convolution_filter_t*>(soglLoadSymbol("glGetConvolutionFilter"));
	gl->GetConvolutionFilterEXT = reinterpret_cast<gl_get_convolution_filter_ext_t*>(soglLoadSymbol("glGetConvolutionFilterEXT"));
	gl->GetConvolutionParameterfv = reinterpret_cast<gl_get_convolution_parameterfv_t*>(soglLoadSymbol("glGetConvolutionParameterfv"));
	gl->GetConvolutionParameterfvEXT = reinterpret_cast<gl_get_convolution_parameterfv_ext_t*>(soglLoadSymbol("glGetConvolutionParameterfvEXT"));
	gl->GetConvolutionParameteriv = reinterpret_cast<gl_get_convolution_parameteriv_t*>(soglLoadSymbol("glGetConvolutionParameteriv"));
	gl->GetConvolutionParameterivEXT = reinterpret_cast<gl_get_convolution_parameteriv_ext_t*>(soglLoadSymbol("glGetConvolutionParameterivEXT"));
	gl->GetCoverageModulationTableNV = reinterpret_cast<gl_get_coverage_modulation_table_nv_t*>(soglLoadSymbol("glGetCoverageModulationTableNV"));
	gl->GetDebugMessageLog = reinterpret_cast<gl_get_debug_message_log_t*>(soglLoadSymbol("glGetDebugMessageLog"));
	gl->GetDebugMessageLogAMD = reinterpret_cast<gl_get_debug_message_log_amd_t*>(soglLoadSymbol("glGetDebugMessageLogAMD"));
	gl->GetDebugMessageLogARB = reinterpret_cast<gl_get_debug_message_log_arb_t*>(soglLoadSymbol("glGetDebugMessageLogARB"));
	gl->GetDetailTexFuncSGIS = reinterpret_cast<gl_get_detail_tex_func_sgis_t*>(soglLoadSymbol("glGetDetailTexFuncSGIS"));
	gl->GetDoubleIndexedvEXT = reinterpret_cast<gl_get_double_indexedv_ext_t*>(soglLoadSymbol("glGetDoubleIndexedvEXT"));
	gl->GetDoublei_v = reinterpret_cast<gl_get_doublei_v_t*>(soglLoadSymbol("glGetDoublei_v"));
	gl->GetDoublei_vEXT = reinterpret_cast<gl_get_doublei_v_ext_t*>(soglLoadSymbol("glGetDoublei_vEXT"));
	gl->GetFenceivNV = reinterpret_cast<gl_get_fenceiv_nv_t*>(soglLoadSymbol("glGetFenceivNV"));
	gl->GetFinalCombinerInputParameterfvNV = reinterpret_cast<gl_get_final_combiner_input_parameterfv_nv_t*>(soglLoadSymbol("glGetFinalCombinerInputParameterfvNV"));
	gl->GetFinalCombinerInputParameterivNV = reinterpret_cast<gl_get_final_combiner_input_parameteriv_nv_t*>(soglLoadSymbol("glGetFinalCombinerInputParameterivNV"));
	gl->GetFirstPerfQueryIdINTEL = reinterpret_cast<gl_get_first_perf_query_id_intel_t*>(soglLoadSymbol("glGetFirstPerfQueryIdINTEL"));
	gl->GetFloatIndexedvEXT = reinterpret_cast<gl_get_float_indexedv_ext_t*>(soglLoadSymbol("glGetFloatIndexedvEXT"));
	gl->GetFloati_v = reinterpret_cast<gl_get_floati_v_t*>(soglLoadSymbol("glGetFloati_v"));
	gl->GetFloati_vEXT = reinterpret_cast<gl_get_floati_v_ext_t*>(soglLoadSymbol("glGetFloati_vEXT"));
	gl->GetFogFuncSGIS = reinterpret_cast<gl_get_fog_func_sgis_t*>(soglLoadSymbol("glGetFogFuncSGIS"));
	gl->GetFragDataIndex = reinterpret_cast<gl_get_frag_data_index_t*>(soglLoadSymbol("glGetFragDataIndex"));
	gl->GetFragDataLocation = reinterpret_cast<gl_get_frag_data_location_t*>(soglLoadSymbol("glGetFragDataLocation"));
	gl->GetFragDataLocationEXT = reinterpret_cast<gl_get_frag_data_location_ext_t*>(soglLoadSymbol("glGetFragDataLocationEXT"));
	gl->GetFragmentLightfvSGIX = reinterpret_cast<gl_get_fragment_lightfv_sgix_t*>(soglLoadSymbol("glGetFragmentLightfvSGIX"));
	gl->GetFragmentLightivSGIX = reinterpret_cast<gl_get_fragment_lightiv_sgix_t*>(soglLoadSymbol("glGetFragmentLightivSGIX"));
	gl->GetFragmentMaterialfvSGIX = reinterpret_cast<gl_get_fragment_materialfv_sgix_t*>(soglLoadSymbol("glGetFragmentMaterialfvSGIX"));
	gl->GetFragmentMaterialivSGIX = reinterpret_cast<gl_get_fragment_materialiv_sgix_t*>(soglLoadSymbol("glGetFragmentMaterialivSGIX"));
	gl->GetFramebufferAttachmentParameteriv = reinterpret_cast<gl_get_framebuffer_attachment_parameteriv_t*>(soglLoadSymbol("glGetFramebufferAttachmentParameteriv"));
	gl->GetFramebufferAttachmentParameterivEXT = reinterpret_cast<gl_get_framebuffer_attachment_parameteriv_ext_t*>(soglLoadSymbol("glGetFramebufferAttachmentParameterivEXT"));
	gl->GetFramebufferParameterfvAMD = reinterpret_cast<gl_get_framebuffer_parameterfv_amd_t*>(soglLoadSymbol("glGetFramebufferParameterfvAMD"));
	gl->GetFramebufferParameteriv = reinterpret_cast<gl_get_framebuffer_parameteriv_t*>(soglLoadSymbol("glGetFramebufferParameteriv"));
	gl->GetFramebufferParameterivEXT = reinterpret_cast<gl_get_framebuffer_parameteriv_ext_t*>(soglLoadSymbol("glGetFramebufferParameterivEXT"));
	gl->GetGraphicsResetStatus = reinterpret_cast<gl_get_graphics_reset_status_t*>(soglLoadSymbol("glGetGraphicsResetStatus"));
	gl->GetGraphicsResetStatusARB = reinterpret_cast<gl_get_graphics_reset_status_arb_t*>(soglLoadSymbol("glGetGraphicsResetStatusARB"));
	gl->GetHandleARB = reinterpret_cast<gl_get_handle_arb_t*>(soglLoadSymbol("glGetHandleARB"));
	gl->GetHistogram = reinterpret_cast<gl_get_histogram_t*>(soglLoadSymbol("glGetHistogram"));
	gl->GetHistogramEXT = reinterpret_cast<gl_get_histogram_ext_t*>(soglLoadSymbol("glGetHistogramEXT"));
	gl->GetHistogramParameterfv = reinterpret_cast<gl_get_histogram_parameterfv_t*>(soglLoadSymbol("glGetHistogramParameterfv"));
	gl->GetHistogramParameterfvEXT = reinterpret_cast<gl_get_histogram_parameterfv_ext_t*>(soglLoadSymbol("glGetHistogramParameterfvEXT"));
	gl->GetHistogramParameteriv = reinterpret_cast<gl_get_histogram_parameteriv_t*>(soglLoadSymbol("glGetHistogramParameteriv"));
	gl->GetHistogramParameterivEXT = reinterpret_cast<gl_get_histogram_parameteriv_ext_t*>(soglLoadSymbol("glGetHistogramParameterivEXT"));
	gl->GetImageHandleARB = reinterpret_cast<gl_get_image_handle_arb_t*>(soglLoadSymbol("glGetImageHandleARB"));
	gl->GetImageHandleNV = reinterpret_cast<gl_get_image_handle_nv_t*>(soglLoadSymbol("glGetImageHandleNV"));
	gl->GetImageTransformParameterfvHP = reinterpret_cast<gl_get_image_transform_parameterfv_hp_t*>(soglLoadSymbol("glGetImageTransformParameterfvHP"));
	gl->GetImageTransformParameterivHP = reinterpret_cast<gl_get_image_transform_parameteriv_hp_t*>(soglLoadSymbol("glGetImageTransformParameterivHP"));
	gl->GetInfoLogARB = reinterpret_cast<gl_get_info_log_arb_t*>(soglLoadSymbol("glGetInfoLogARB"));
	gl->GetInteger64i_v = reinterpret_cast<gl_get_integer64i_v_t*>(soglLoadSymbol("glGetInteger64i_v"));
	gl->GetInteger64v = reinterpret_cast<gl_get_integer64v_t*>(soglLoadSymbol("glGetInteger64v"));
	gl->GetIntegerIndexedvEXT = reinterpret_cast<gl_get_integer_indexedv_ext_t*>(soglLoadSymbol("glGetIntegerIndexedvEXT"));
	gl->GetIntegeri_v = reinterpret_cast<gl_get_integeri_v_t*>(soglLoadSymbol("glGetIntegeri_v"));
	gl->GetIntegerui64i_vNV = reinterpret_cast<gl_get_integerui64i_v_nv_t*>(soglLoadSymbol("glGetIntegerui64i_vNV"));
	gl->GetIntegerui64vNV = reinterpret_cast<gl_get_integerui64v_nv_t*>(soglLoadSymbol("glGetIntegerui64vNV"));
	gl->GetInternalformatSampleivNV = reinterpret_cast<gl_get_internalformat_sampleiv_nv_t*>(soglLoadSymbol("glGetInternalformatSampleivNV"));
	gl->GetInternalformati64v = reinterpret_cast<gl_get_internalformati64v_t*>(soglLoadSymbol("glGetInternalformati64v"));
	gl->GetInternalformativ = reinterpret_cast<gl_get_internalformativ_t*>(soglLoadSymbol("glGetInternalformativ"));
	gl->GetInvariantBooleanvEXT = reinterpret_cast<gl_get_invariant_booleanv_ext_t*>(soglLoadSymbol("glGetInvariantBooleanvEXT"));
	gl->GetInvariantFloatvEXT = reinterpret_cast<gl_get_invariant_floatv_ext_t*>(soglLoadSymbol("glGetInvariantFloatvEXT"));
	gl->GetInvariantIntegervEXT = reinterpret_cast<gl_get_invariant_integerv_ext_t*>(soglLoadSymbol("glGetInvariantIntegervEXT"));
	gl->GetLocalConstantBooleanvEXT = reinterpret_cast<gl_get_local_constant_booleanv_ext_t*>(soglLoadSymbol("glGetLocalConstantBooleanvEXT"));
	gl->GetLocalConstantFloatvEXT = reinterpret_cast<gl_get_local_constant_floatv_ext_t*>(soglLoadSymbol("glGetLocalConstantFloatvEXT"));
	gl->GetLocalConstantIntegervEXT = reinterpret_cast<gl_get_local_constant_integerv_ext_t*>(soglLoadSymbol("glGetLocalConstantIntegervEXT"));
	gl->GetMapAttribParameterfvNV = reinterpret_cast<gl_get_map_attrib_parameterfv_nv_t*>(soglLoadSymbol("glGetMapAttribParameterfvNV"));
	gl->GetMapAttribParameterivNV = reinterpret_cast<gl_get_map_attrib_parameteriv_nv_t*>(soglLoadSymbol("glGetMapAttribParameterivNV"));
	gl->GetMapControlPointsNV = reinterpret_cast<gl_get_map_control_points_nv_t*>(soglLoadSymbol("glGetMapControlPointsNV"));
	gl->GetMapParameterfvNV = reinterpret_cast<gl_get_map_parameterfv_nv_t*>(soglLoadSymbol("glGetMapParameterfvNV"));
	gl->GetMapParameterivNV = reinterpret_cast<gl_get_map_parameteriv_nv_t*>(soglLoadSymbol("glGetMapParameterivNV"));
	gl->GetMemoryObjectParameterivEXT = reinterpret_cast<gl_get_memory_object_parameteriv_ext_t*>(soglLoadSymbol("glGetMemoryObjectParameterivEXT"));
	gl->GetMinmax = reinterpret_cast<gl_get_minmax_t*>(soglLoadSymbol("glGetMinmax"));
	gl->GetMinmaxEXT = reinterpret_cast<gl_get_minmax_ext_t*>(soglLoadSymbol("glGetMinmaxEXT"));
	gl->GetMinmaxParameterfv = reinterpret_cast<gl_get_minmax_parameterfv_t*>(soglLoadSymbol("glGetMinmaxParameterfv"));
	gl->GetMinmaxParameterfvEXT = reinterpret_cast<gl_get_minmax_parameterfv_ext_t*>(soglLoadSymbol("glGetMinmaxParameterfvEXT"));
	gl->GetMinmaxParameteriv = reinterpret_cast<gl_get_minmax_parameteriv_t*>(soglLoadSymbol("glGetMinmaxParameteriv"));
	gl->GetMinmaxParameterivEXT = reinterpret_cast<gl_get_minmax_parameteriv_ext_t*>(soglLoadSymbol("glGetMinmaxParameterivEXT"));
	gl->GetMultiTexEnvfvEXT = reinterpret_cast<gl_get_multi_tex_envfv_ext_t*>(soglLoadSymbol("glGetMultiTexEnvfvEXT"));
	gl->GetMultiTexEnvivEXT = reinterpret_cast<gl_get_multi_tex_enviv_ext_t*>(soglLoadSymbol("glGetMultiTexEnvivEXT"));
	gl->GetMultiTexGendvEXT = reinterpret_cast<gl_get_multi_tex_gendv_ext_t*>(soglLoadSymbol("glGetMultiTexGendvEXT"));
	gl->GetMultiTexGenfvEXT = reinterpret_cast<gl_get_multi_tex_genfv_ext_t*>(soglLoadSymbol("glGetMultiTexGenfvEXT"));
	gl->GetMultiTexGenivEXT = reinterpret_cast<gl_get_multi_tex_geniv_ext_t*>(soglLoadSymbol("glGetMultiTexGenivEXT"));
	gl->GetMultiTexImageEXT = reinterpret_cast<gl_get_multi_tex_image_ext_t*>(soglLoadSymbol("glGetMultiTexImageEXT"));
	gl->GetMultiTexLevelParameterfvEXT = reinterpret_cast<gl_get_multi_tex_level_parameterfv_ext_t*>(soglLoadSymbol("glGetMultiTexLevelParameterfvEXT"));
	gl->GetMultiTexLevelParameterivEXT = reinterpret_cast<gl_get_multi_tex_level_parameteriv_ext_t*>(soglLoadSymbol("glGetMultiTexLevelParameterivEXT"));
	gl->GetMultiTexParameterIivEXT = reinterpret_cast<gl_get_multi_tex_parameter_iiv_ext_t*>(soglLoadSymbol("glGetMultiTexParameterIivEXT"));
	gl->GetMultiTexParameterIuivEXT = reinterpret_cast<gl_get_multi_tex_parameter_iuiv_ext_t*>(soglLoadSymbol("glGetMultiTexParameterIuivEXT"));
	gl->GetMultiTexParameterfvEXT = reinterpret_cast<gl_get_multi_tex_parameterfv_ext_t*>(soglLoadSymbol("glGetMultiTexParameterfvEXT"));
	gl->GetMultiTexParameterivEXT = reinterpret_cast<gl_get_multi_tex_parameteriv_ext_t*>(soglLoadSymbol("glGetMultiTexParameterivEXT"));
	gl->GetMultisamplefv = reinterpret_cast<gl_get_multisamplefv_t*>(soglLoadSymbol("glGetMultisamplefv"));
	gl->GetMultisamplefvNV = reinterpret_cast<gl_get_multisamplefv_nv_t*>(soglLoadSymbol("glGetMultisamplefvNV"));
	gl->GetNamedBufferParameteri64v = reinterpret_cast<gl_get_named_buffer_parameteri64v_t*>(soglLoadSymbol("glGetNamedBufferParameteri64v"));
	gl->GetNamedBufferParameteriv = reinterpret_cast<gl_get_named_buffer_parameteriv_t*>(soglLoadSymbol("glGetNamedBufferParameteriv"));
	gl->GetNamedBufferParameterivEXT = reinterpret_cast<gl_get_named_buffer_parameteriv_ext_t*>(soglLoadSymbol("glGetNamedBufferParameterivEXT"));
	gl->GetNamedBufferParameterui64vNV = reinterpret_cast<gl_get_named_buffer_parameterui64v_nv_t*>(soglLoadSymbol("glGetNamedBufferParameterui64vNV"));
	gl->GetNamedBufferPointerv = reinterpret_cast<gl_get_named_buffer_pointerv_t*>(soglLoadSymbol("glGetNamedBufferPointerv"));
	gl->GetNamedBufferPointervEXT = reinterpret_cast<gl_get_named_buffer_pointerv_ext_t*>(soglLoadSymbol("glGetNamedBufferPointervEXT"));
	gl->GetNamedBufferSubData = reinterpret_cast<gl_get_named_buffer_sub_data_t*>(soglLoadSymbol("glGetNamedBufferSubData"));
	gl->GetNamedBufferSubDataEXT = reinterpret_cast<gl_get_named_buffer_sub_data_ext_t*>(soglLoadSymbol("glGetNamedBufferSubDataEXT"));
	gl->GetNamedFramebufferAttachmentParameteriv = reinterpret_cast<gl_get_named_framebuffer_attachment_parameteriv_t*>(soglLoadSymbol("glGetNamedFramebufferAttachmentParameteriv"));
	gl->GetNamedFramebufferAttachmentParameterivEXT = reinterpret_cast<gl_get_named_framebuffer_attachment_parameteriv_ext_t*>(soglLoadSymbol("glGetNamedFramebufferAttachmentParameterivEXT"));
	gl->GetNamedFramebufferParameterfvAMD = reinterpret_cast<gl_get_named_framebuffer_parameterfv_amd_t*>(soglLoadSymbol("glGetNamedFramebufferParameterfvAMD"));
	gl->GetNamedFramebufferParameteriv = reinterpret_cast<gl_get_named_framebuffer_parameteriv_t*>(soglLoadSymbol("glGetNamedFramebufferParameteriv"));
	gl->GetNamedFramebufferParameterivEXT = reinterpret_cast<gl_get_named_framebuffer_parameteriv_ext_t*>(soglLoadSymbol("glGetNamedFramebufferParameterivEXT"));
	gl->GetNamedProgramLocalParameterIivEXT = reinterpret_cast<gl_get_named_program_local_parameter_iiv_ext_t*>(soglLoadSymbol("glGetNamedProgramLocalParameterIivEXT"));
	gl->GetNamedProgramLocalParameterIuivEXT = reinterpret_cast<gl_get_named_program_local_parameter_iuiv_ext_t*>(soglLoadSymbol("glGetNamedProgramLocalParameterIuivEXT"));
	gl->GetNamedProgramLocalParameterdvEXT = reinterpret_cast<gl_get_named_program_local_parameterdv_ext_t*>(soglLoadSymbol("glGetNamedProgramLocalParameterdvEXT"));
	gl->GetNamedProgramLocalParameterfvEXT = reinterpret_cast<gl_get_named_program_local_parameterfv_ext_t*>(soglLoadSymbol("glGetNamedProgramLocalParameterfvEXT"));
	gl->GetNamedProgramStringEXT = reinterpret_cast<gl_get_named_program_string_ext_t*>(soglLoadSymbol("glGetNamedProgramStringEXT"));
	gl->GetNamedProgramivEXT = reinterpret_cast<gl_get_named_programiv_ext_t*>(soglLoadSymbol("glGetNamedProgramivEXT"));
	gl->GetNamedRenderbufferParameteriv = reinterpret_cast<gl_get_named_renderbuffer_parameteriv_t*>(soglLoadSymbol("glGetNamedRenderbufferParameteriv"));
	gl->GetNamedRenderbufferParameterivEXT = reinterpret_cast<gl_get_named_renderbuffer_parameteriv_ext_t*>(soglLoadSymbol("glGetNamedRenderbufferParameterivEXT"));
	gl->GetNamedStringARB = reinterpret_cast<gl_get_named_string_arb_t*>(soglLoadSymbol("glGetNamedStringARB"));
	gl->GetNamedStringivARB = reinterpret_cast<gl_get_named_stringiv_arb_t*>(soglLoadSymbol("glGetNamedStringivARB"));
	gl->GetNextPerfQueryIdINTEL = reinterpret_cast<gl_get_next_perf_query_id_intel_t*>(soglLoadSymbol("glGetNextPerfQueryIdINTEL"));
	gl->GetObjectBufferfvATI = reinterpret_cast<gl_get_object_bufferfv_ati_t*>(soglLoadSymbol("glGetObjectBufferfvATI"));
	gl->GetObjectBufferivATI = reinterpret_cast<gl_get_object_bufferiv_ati_t*>(soglLoadSymbol("glGetObjectBufferivATI"));
	gl->GetObjectLabel = reinterpret_cast<gl_get_object_label_t*>(soglLoadSymbol("glGetObjectLabel"));
	gl->GetObjectLabelEXT = reinterpret_cast<gl_get_object_label_ext_t*>(soglLoadSymbol("glGetObjectLabelEXT"));
	gl->GetObjectParameterfvARB = reinterpret_cast<gl_get_object_parameterfv_arb_t*>(soglLoadSymbol("glGetObjectParameterfvARB"));
	gl->GetObjectParameterivAPPLE = reinterpret_cast<gl_get_object_parameteriv_apple_t*>(soglLoadSymbol("glGetObjectParameterivAPPLE"));
	gl->GetObjectParameterivARB = reinterpret_cast<gl_get_object_parameteriv_arb_t*>(soglLoadSymbol("glGetObjectParameterivARB"));
	gl->GetObjectPtrLabel = reinterpret_cast<gl_get_object_ptr_label_t*>(soglLoadSymbol("glGetObjectPtrLabel"));
	gl->GetOcclusionQueryivNV = reinterpret_cast<gl_get_occlusion_queryiv_nv_t*>(soglLoadSymbol("glGetOcclusionQueryivNV"));
	gl->GetOcclusionQueryuivNV = reinterpret_cast<gl_get_occlusion_queryuiv_nv_t*>(soglLoadSymbol("glGetOcclusionQueryuivNV"));
	gl->GetPathColorGenfvNV = reinterpret_cast<gl_get_path_color_genfv_nv_t*>(soglLoadSymbol("glGetPathColorGenfvNV"));
	gl->GetPathColorGenivNV = reinterpret_cast<gl_get_path_color_geniv_nv_t*>(soglLoadSymbol("glGetPathColorGenivNV"));
	gl->GetPathCommandsNV = reinterpret_cast<gl_get_path_commands_nv_t*>(soglLoadSymbol("glGetPathCommandsNV"));
	gl->GetPathCoordsNV = reinterpret_cast<gl_get_path_coords_nv_t*>(soglLoadSymbol("glGetPathCoordsNV"));
	gl->GetPathDashArrayNV = reinterpret_cast<gl_get_path_dash_array_nv_t*>(soglLoadSymbol("glGetPathDashArrayNV"));
	gl->GetPathLengthNV = reinterpret_cast<gl_get_path_length_nv_t*>(soglLoadSymbol("glGetPathLengthNV"));
	gl->GetPathMetricRangeNV = reinterpret_cast<gl_get_path_metric_range_nv_t*>(soglLoadSymbol("glGetPathMetricRangeNV"));
	gl->GetPathMetricsNV = reinterpret_cast<gl_get_path_metrics_nv_t*>(soglLoadSymbol("glGetPathMetricsNV"));
	gl->GetPathParameterfvNV = reinterpret_cast<gl_get_path_parameterfv_nv_t*>(soglLoadSymbol("glGetPathParameterfvNV"));
	gl->GetPathParameterivNV = reinterpret_cast<gl_get_path_parameteriv_nv_t*>(soglLoadSymbol("glGetPathParameterivNV"));
	gl->GetPathSpacingNV = reinterpret_cast<gl_get_path_spacing_nv_t*>(soglLoadSymbol("glGetPathSpacingNV"));
	gl->GetPathTexGenfvNV = reinterpret_cast<gl_get_path_tex_genfv_nv_t*>(soglLoadSymbol("glGetPathTexGenfvNV"));
	gl->GetPathTexGenivNV = reinterpret_cast<gl_get_path_tex_geniv_nv_t*>(soglLoadSymbol("glGetPathTexGenivNV"));
	gl->GetPerfCounterInfoINTEL = reinterpret_cast<gl_get_perf_counter_info_intel_t*>(soglLoadSymbol("glGetPerfCounterInfoINTEL"));
	gl->GetPerfMonitorCounterDataAMD = reinterpret_cast<gl_get_perf_monitor_counter_data_amd_t*>(soglLoadSymbol("glGetPerfMonitorCounterDataAMD"));
	gl->GetPerfMonitorCounterInfoAMD = reinterpret_cast<gl_get_perf_monitor_counter_info_amd_t*>(soglLoadSymbol("glGetPerfMonitorCounterInfoAMD"));
	gl->GetPerfMonitorCounterStringAMD = reinterpret_cast<gl_get_perf_monitor_counter_string_amd_t*>(soglLoadSymbol("glGetPerfMonitorCounterStringAMD"));
	gl->GetPerfMonitorCountersAMD = reinterpret_cast<gl_get_perf_monitor_counters_amd_t*>(soglLoadSymbol("glGetPerfMonitorCountersAMD"));
	gl->GetPerfMonitorGroupStringAMD = reinterpret_cast<gl_get_perf_monitor_group_string_amd_t*>(soglLoadSymbol("glGetPerfMonitorGroupStringAMD"));
	gl->GetPerfMonitorGroupsAMD = reinterpret_cast<gl_get_perf_monitor_groups_amd_t*>(soglLoadSymbol("glGetPerfMonitorGroupsAMD"));
	gl->GetPerfQueryDataINTEL = reinterpret_cast<gl_get_perf_query_data_intel_t*>(soglLoadSymbol("glGetPerfQueryDataINTEL"));
	gl->GetPerfQueryIdByNameINTEL = reinterpret_cast<gl_get_perf_query_id_by_name_intel_t*>(soglLoadSymbol("glGetPerfQueryIdByNameINTEL"));
	gl->GetPerfQueryInfoINTEL = reinterpret_cast<gl_get_perf_query_info_intel_t*>(soglLoadSymbol("glGetPerfQueryInfoINTEL"));
	gl->GetPixelTransformParameterfvEXT = reinterpret_cast<gl_get_pixel_transform_parameterfv_ext_t*>(soglLoadSymbol("glGetPixelTransformParameterfvEXT"));
	gl->GetPixelTransformParameterivEXT = reinterpret_cast<gl_get_pixel_transform_parameteriv_ext_t*>(soglLoadSymbol("glGetPixelTransformParameterivEXT"));
	gl->GetPointerIndexedvEXT = reinterpret_cast<gl_get_pointer_indexedv_ext_t*>(soglLoadSymbol("glGetPointerIndexedvEXT"));
	gl->GetPointeri_vEXT = reinterpret_cast<gl_get_pointeri_v_ext_t*>(soglLoadSymbol("glGetPointeri_vEXT"));
	gl->GetProgramBinary = reinterpret_cast<gl_get_program_binary_t*>(soglLoadSymbol("glGetProgramBinary"));
	gl->GetProgramEnvParameterdvARB = reinterpret_cast<gl_get_program_env_parameterdv_arb_t*>(soglLoadSymbol("glGetProgramEnvParameterdvARB"));
	gl->GetProgramEnvParameterfvARB = reinterpret_cast<gl_get_program_env_parameterfv_arb_t*>(soglLoadSymbol("glGetProgramEnvParameterfvARB"));
	gl->GetProgramInfoLog = reinterpret_cast<gl_get_program_info_log_t*>(soglLoadSymbol("glGetProgramInfoLog"));
	gl->GetProgramInterfaceiv = reinterpret_cast<gl_get_program_interfaceiv_t*>(soglLoadSymbol("glGetProgramInterfaceiv"));
	gl->GetProgramLocalParameterdvARB = reinterpret_cast<gl_get_program_local_parameterdv_arb_t*>(soglLoadSymbol("glGetProgramLocalParameterdvARB"));
	gl->GetProgramLocalParameterfvARB = reinterpret_cast<gl_get_program_local_parameterfv_arb_t*>(soglLoadSymbol("glGetProgramLocalParameterfvARB"));
	gl->GetProgramNamedParameterdvNV = reinterpret_cast<gl_get_program_named_parameterdv_nv_t*>(soglLoadSymbol("glGetProgramNamedParameterdvNV"));
	gl->GetProgramNamedParameterfvNV = reinterpret_cast<gl_get_program_named_parameterfv_nv_t*>(soglLoadSymbol("glGetProgramNamedParameterfvNV"));
	gl->GetProgramParameterdvNV = reinterpret_cast<gl_get_program_parameterdv_nv_t*>(soglLoadSymbol("glGetProgramParameterdvNV"));
	gl->GetProgramParameterfvNV = reinterpret_cast<gl_get_program_parameterfv_nv_t*>(soglLoadSymbol("glGetProgramParameterfvNV"));
	gl->GetProgramPipelineInfoLog = reinterpret_cast<gl_get_program_pipeline_info_log_t*>(soglLoadSymbol("glGetProgramPipelineInfoLog"));
	gl->GetProgramPipelineiv = reinterpret_cast<gl_get_program_pipelineiv_t*>(soglLoadSymbol("glGetProgramPipelineiv"));
	gl->GetProgramResourceIndex = reinterpret_cast<gl_get_program_resource_index_t*>(soglLoadSymbol("glGetProgramResourceIndex"));
	gl->GetProgramResourceLocation = reinterpret_cast<gl_get_program_resource_location_t*>(soglLoadSymbol("glGetProgramResourceLocation"));
	gl->GetProgramResourceLocationIndex = reinterpret_cast<gl_get_program_resource_location_index_t*>(soglLoadSymbol("glGetProgramResourceLocationIndex"));
	gl->GetProgramResourceName = reinterpret_cast<gl_get_program_resource_name_t*>(soglLoadSymbol("glGetProgramResourceName"));
	gl->GetProgramResourcefvNV = reinterpret_cast<gl_get_program_resourcefv_nv_t*>(soglLoadSymbol("glGetProgramResourcefvNV"));
	gl->GetProgramResourceiv = reinterpret_cast<gl_get_program_resourceiv_t*>(soglLoadSymbol("glGetProgramResourceiv"));
	gl->GetProgramStageiv = reinterpret_cast<gl_get_program_stageiv_t*>(soglLoadSymbol("glGetProgramStageiv"));
	gl->GetProgramStringARB = reinterpret_cast<gl_get_program_string_arb_t*>(soglLoadSymbol("glGetProgramStringARB"));
	gl->GetProgramStringNV = reinterpret_cast<gl_get_program_string_nv_t*>(soglLoadSymbol("glGetProgramStringNV"));
	gl->GetProgramiv = reinterpret_cast<gl_get_programiv_t*>(soglLoadSymbol("glGetProgramiv"));
	gl->GetProgramivARB = reinterpret_cast<gl_get_programiv_arb_t*>(soglLoadSymbol("glGetProgramivARB"));
	gl->GetProgramivNV = reinterpret_cast<gl_get_programiv_nv_t*>(soglLoadSymbol("glGetProgramivNV"));
	gl->GetQueryBufferObjecti64v = reinterpret_cast<gl_get_query_buffer_objecti64v_t*>(soglLoadSymbol("glGetQueryBufferObjecti64v"));
	gl->GetQueryBufferObjectiv = reinterpret_cast<gl_get_query_buffer_objectiv_t*>(soglLoadSymbol("glGetQueryBufferObjectiv"));
	gl->GetQueryBufferObjectui64v = reinterpret_cast<gl_get_query_buffer_objectui64v_t*>(soglLoadSymbol("glGetQueryBufferObjectui64v"));
	gl->GetQueryBufferObjectuiv = reinterpret_cast<gl_get_query_buffer_objectuiv_t*>(soglLoadSymbol("glGetQueryBufferObjectuiv"));
	gl->GetQueryIndexediv = reinterpret_cast<gl_get_query_indexediv_t*>(soglLoadSymbol("glGetQueryIndexediv"));
	gl->GetQueryObjecti64v = reinterpret_cast<gl_get_query_objecti64v_t*>(soglLoadSymbol("glGetQueryObjecti64v"));
	gl->GetQueryObjecti64vEXT = reinterpret_cast<gl_get_query_objecti64v_ext_t*>(soglLoadSymbol("glGetQueryObjecti64vEXT"));
	gl->GetQueryObjectiv = reinterpret_cast<gl_get_query_objectiv_t*>(soglLoadSymbol("glGetQueryObjectiv"));
	gl->GetQueryObjectivARB = reinterpret_cast<gl_get_query_objectiv_arb_t*>(soglLoadSymbol("glGetQueryObjectivARB"));
	gl->GetQueryObjectui64v = reinterpret_cast<gl_get_query_objectui64v_t*>(soglLoadSymbol("glGetQueryObjectui64v"));
	gl->GetQueryObjectui64vEXT = reinterpret_cast<gl_get_query_objectui64v_ext_t*>(soglLoadSymbol("glGetQueryObjectui64vEXT"));
	gl->GetQueryObjectuiv = reinterpret_cast<gl_get_query_objectuiv_t*>(soglLoadSymbol("glGetQueryObjectuiv"));
	gl->GetQueryObjectuivARB = reinterpret_cast<gl_get_query_objectuiv_arb_t*>(soglLoadSymbol("glGetQueryObjectuivARB"));
	gl->GetQueryiv = reinterpret_cast<gl_get_queryiv_t*>(soglLoadSymbol("glGetQueryiv"));
	gl->GetQueryivARB = reinterpret_cast<gl_get_queryiv_arb_t*>(soglLoadSymbol("glGetQueryivARB"));
	gl->GetRenderbufferParameteriv = reinterpret_cast<gl_get_renderbuffer_parameteriv_t*>(soglLoadSymbol("glGetRenderbufferParameteriv"));
	gl->GetRenderbufferParameterivEXT = reinterpret_cast<gl_get_renderbuffer_parameteriv_ext_t*>(soglLoadSymbol("glGetRenderbufferParameterivEXT"));
	gl->GetSamplerParameterIiv = reinterpret_cast<gl_get_sampler_parameter_iiv_t*>(soglLoadSymbol("glGetSamplerParameterIiv"));
	gl->GetSamplerParameterIuiv = reinterpret_cast<gl_get_sampler_parameter_iuiv_t*>(soglLoadSymbol("glGetSamplerParameterIuiv"));
	gl->GetSamplerParameterfv = reinterpret_cast<gl_get_sampler_parameterfv_t*>(soglLoadSymbol("glGetSamplerParameterfv"));
	gl->GetSamplerParameteriv = reinterpret_cast<gl_get_sampler_parameteriv_t*>(soglLoadSymbol("glGetSamplerParameteriv"));
	gl->GetSemaphoreParameterui64vEXT = reinterpret_cast<gl_get_semaphore_parameterui64v_ext_t*>(soglLoadSymbol("glGetSemaphoreParameterui64vEXT"));
	gl->GetSeparableFilter = reinterpret_cast<gl_get_separable_filter_t*>(soglLoadSymbol("glGetSeparableFilter"));
	gl->GetSeparableFilterEXT = reinterpret_cast<gl_get_separable_filter_ext_t*>(soglLoadSymbol("glGetSeparableFilterEXT"));
	gl->GetShaderInfoLog = reinterpret_cast<gl_get_shader_info_log_t*>(soglLoadSymbol("glGetShaderInfoLog"));
	gl->GetShaderPrecisionFormat = reinterpret_cast<gl_get_shader_precision_format_t*>(soglLoadSymbol("glGetShaderPrecisionFormat"));
	gl->GetShaderSource = reinterpret_cast<gl_get_shader_source_t*>(soglLoadSymbol("glGetShaderSource"));
	gl->GetShaderSourceARB = reinterpret_cast<gl_get_shader_source_arb_t*>(soglLoadSymbol("glGetShaderSourceARB"));
	gl->GetShaderiv = reinterpret_cast<gl_get_shaderiv_t*>(soglLoadSymbol("glGetShaderiv"));
	gl->GetSharpenTexFuncSGIS = reinterpret_cast<gl_get_sharpen_tex_func_sgis_t*>(soglLoadSymbol("glGetSharpenTexFuncSGIS"));
	gl->GetStageIndexNV = reinterpret_cast<gl_get_stage_index_nv_t*>(soglLoadSymbol("glGetStageIndexNV"));
	gl->GetSubroutineIndex = reinterpret_cast<gl_get_subroutine_index_t*>(soglLoadSymbol("glGetSubroutineIndex"));
	gl->GetSubroutineUniformLocation = reinterpret_cast<gl_get_subroutine_uniform_location_t*>(soglLoadSymbol("glGetSubroutineUniformLocation"));
	gl->GetSynciv = reinterpret_cast<gl_get_synciv_t*>(soglLoadSymbol("glGetSynciv"));
	gl->GetTexBumpParameterfvATI = reinterpret_cast<gl_get_tex_bump_parameterfv_ati_t*>(soglLoadSymbol("glGetTexBumpParameterfvATI"));
	gl->GetTexBumpParameterivATI = reinterpret_cast<gl_get_tex_bump_parameteriv_ati_t*>(soglLoadSymbol("glGetTexBumpParameterivATI"));
	gl->GetTexFilterFuncSGIS = reinterpret_cast<gl_get_tex_filter_func_sgis_t*>(soglLoadSymbol("glGetTexFilterFuncSGIS"));
	gl->GetTexParameterIiv = reinterpret_cast<gl_get_tex_parameter_iiv_t*>(soglLoadSymbol("glGetTexParameterIiv"));
	gl->GetTexParameterIivEXT = reinterpret_cast<gl_get_tex_parameter_iiv_ext_t*>(soglLoadSymbol("glGetTexParameterIivEXT"));
	gl->GetTexParameterIuiv = reinterpret_cast<gl_get_tex_parameter_iuiv_t*>(soglLoadSymbol("glGetTexParameterIuiv"));
	gl->GetTexParameterIuivEXT = reinterpret_cast<gl_get_tex_parameter_iuiv_ext_t*>(soglLoadSymbol("glGetTexParameterIuivEXT"));
	gl->GetTexParameterPointervAPPLE = reinterpret_cast<gl_get_tex_parameter_pointerv_apple_t*>(soglLoadSymbol("glGetTexParameterPointervAPPLE"));
	gl->GetTextureHandleARB = reinterpret_cast<gl_get_texture_handle_arb_t*>(soglLoadSymbol("glGetTextureHandleARB"));
	gl->GetTextureHandleNV = reinterpret_cast<gl_get_texture_handle_nv_t*>(soglLoadSymbol("glGetTextureHandleNV"));
	gl->GetTextureImage = reinterpret_cast<gl_get_texture_image_t*>(soglLoadSymbol("glGetTextureImage"));
	gl->GetTextureImageEXT = reinterpret_cast<gl_get_texture_image_ext_t*>(soglLoadSymbol("glGetTextureImageEXT"));
	gl->GetTextureLevelParameterfv = reinterpret_cast<gl_get_texture_level_parameterfv_t*>(soglLoadSymbol("glGetTextureLevelParameterfv"));
	gl->GetTextureLevelParameterfvEXT = reinterpret_cast<gl_get_texture_level_parameterfv_ext_t*>(soglLoadSymbol("glGetTextureLevelParameterfvEXT"));
	gl->GetTextureLevelParameteriv = reinterpret_cast<gl_get_texture_level_parameteriv_t*>(soglLoadSymbol("glGetTextureLevelParameteriv"));
	gl->GetTextureLevelParameterivEXT = reinterpret_cast<gl_get_texture_level_parameteriv_ext_t*>(soglLoadSymbol("glGetTextureLevelParameterivEXT"));
	gl->GetTextureParameterIiv = reinterpret_cast<gl_get_texture_parameter_iiv_t*>(soglLoadSymbol("glGetTextureParameterIiv"));
	gl->GetTextureParameterIivEXT = reinterpret_cast<gl_get_texture_parameter_iiv_ext_t*>(soglLoadSymbol("glGetTextureParameterIivEXT"));
	gl->GetTextureParameterIuiv = reinterpret_cast<gl_get_texture_parameter_iuiv_t*>(soglLoadSymbol("glGetTextureParameterIuiv"));
	gl->GetTextureParameterIuivEXT = reinterpret_cast<gl_get_texture_parameter_iuiv_ext_t*>(soglLoadSymbol("glGetTextureParameterIuivEXT"));
	gl->GetTextureParameterfv = reinterpret_cast<gl_get_texture_parameterfv_t*>(soglLoadSymbol("glGetTextureParameterfv"));
	gl->GetTextureParameterfvEXT = reinterpret_cast<gl_get_texture_parameterfv_ext_t*>(soglLoadSymbol("glGetTextureParameterfvEXT"));
	gl->GetTextureParameteriv = reinterpret_cast<gl_get_texture_parameteriv_t*>(soglLoadSymbol("glGetTextureParameteriv"));
	gl->GetTextureParameterivEXT = reinterpret_cast<gl_get_texture_parameteriv_ext_t*>(soglLoadSymbol("glGetTextureParameterivEXT"));
	gl->GetTextureSamplerHandleARB = reinterpret_cast<gl_get_texture_sampler_handle_arb_t*>(soglLoadSymbol("glGetTextureSamplerHandleARB"));
	gl->GetTextureSamplerHandleNV = reinterpret_cast<gl_get_texture_sampler_handle_nv_t*>(soglLoadSymbol("glGetTextureSamplerHandleNV"));
	gl->GetTextureSubImage = reinterpret_cast<gl_get_texture_sub_image_t*>(soglLoadSymbol("glGetTextureSubImage"));
	gl->GetTrackMatrixivNV = reinterpret_cast<gl_get_track_matrixiv_nv_t*>(soglLoadSymbol("glGetTrackMatrixivNV"));
	gl->GetTransformFeedbackVarying = reinterpret_cast<gl_get_transform_feedback_varying_t*>(soglLoadSymbol("glGetTransformFeedbackVarying"));
	gl->GetTransformFeedbackVaryingEXT = reinterpret_cast<gl_get_transform_feedback_varying_ext_t*>(soglLoadSymbol("glGetTransformFeedbackVaryingEXT"));
	gl->GetTransformFeedbackVaryingNV = reinterpret_cast<gl_get_transform_feedback_varying_nv_t*>(soglLoadSymbol("glGetTransformFeedbackVaryingNV"));
	gl->GetTransformFeedbacki64_v = reinterpret_cast<gl_get_transform_feedbacki64_v_t*>(soglLoadSymbol("glGetTransformFeedbacki64_v"));
	gl->GetTransformFeedbacki_v = reinterpret_cast<gl_get_transform_feedbacki_v_t*>(soglLoadSymbol("glGetTransformFeedbacki_v"));
	gl->GetTransformFeedbackiv = reinterpret_cast<gl_get_transform_feedbackiv_t*>(soglLoadSymbol("glGetTransformFeedbackiv"));
	gl->GetUniformBlockIndex = reinterpret_cast<gl_get_uniform_block_index_t*>(soglLoadSymbol("glGetUniformBlockIndex"));
	gl->GetUniformBufferSizeEXT = reinterpret_cast<gl_get_uniform_buffer_size_ext_t*>(soglLoadSymbol("glGetUniformBufferSizeEXT"));
	gl->GetUniformIndices = reinterpret_cast<gl_get_uniform_indices_t*>(soglLoadSymbol("glGetUniformIndices"));
	gl->GetUniformLocation = reinterpret_cast<gl_get_uniform_location_t*>(soglLoadSymbol("glGetUniformLocation"));
	gl->GetUniformLocationARB = reinterpret_cast<gl_get_uniform_location_arb_t*>(soglLoadSymbol("glGetUniformLocationARB"));
	gl->GetUniformOffsetEXT = reinterpret_cast<gl_get_uniform_offset_ext_t*>(soglLoadSymbol("glGetUniformOffsetEXT"));
	gl->GetUniformSubroutineuiv = reinterpret_cast<gl_get_uniform_subroutineuiv_t*>(soglLoadSymbol("glGetUniformSubroutineuiv"));
	gl->GetUniformdv = reinterpret_cast<gl_get_uniformdv_t*>(soglLoadSymbol("glGetUniformdv"));
	gl->GetUniformfv = reinterpret_cast<gl_get_uniformfv_t*>(soglLoadSymbol("glGetUniformfv"));
	gl->GetUniformfvARB = reinterpret_cast<gl_get_uniformfv_arb_t*>(soglLoadSymbol("glGetUniformfvARB"));
	gl->GetUniformi64vARB = reinterpret_cast<gl_get_uniformi64v_arb_t*>(soglLoadSymbol("glGetUniformi64vARB"));
	gl->GetUniformi64vNV = reinterpret_cast<gl_get_uniformi64v_nv_t*>(soglLoadSymbol("glGetUniformi64vNV"));
	gl->GetUniformiv = reinterpret_cast<gl_get_uniformiv_t*>(soglLoadSymbol("glGetUniformiv"));
	gl->GetUniformivARB = reinterpret_cast<gl_get_uniformiv_arb_t*>(soglLoadSymbol("glGetUniformivARB"));
	gl->GetUniformui64vARB = reinterpret_cast<gl_get_uniformui64v_arb_t*>(soglLoadSymbol("glGetUniformui64vARB"));
	gl->GetUniformui64vNV = reinterpret_cast<gl_get_uniformui64v_nv_t*>(soglLoadSymbol("glGetUniformui64vNV"));
	gl->GetUniformuiv = reinterpret_cast<gl_get_uniformuiv_t*>(soglLoadSymbol("glGetUniformuiv"));
	gl->GetUniformuivEXT = reinterpret_cast<gl_get_uniformuiv_ext_t*>(soglLoadSymbol("glGetUniformuivEXT"));
	gl->GetUnsignedBytei_vEXT = reinterpret_cast<gl_get_unsigned_bytei_v_ext_t*>(soglLoadSymbol("glGetUnsignedBytei_vEXT"));
	gl->GetUnsignedBytevEXT = reinterpret_cast<gl_get_unsigned_bytev_ext_t*>(soglLoadSymbol("glGetUnsignedBytevEXT"));
	gl->GetVariantArrayObjectfvATI = reinterpret_cast<gl_get_variant_array_objectfv_ati_t*>(soglLoadSymbol("glGetVariantArrayObjectfvATI"));
	gl->GetVariantArrayObjectivATI = reinterpret_cast<gl_get_variant_array_objectiv_ati_t*>(soglLoadSymbol("glGetVariantArrayObjectivATI"));
	gl->GetVariantBooleanvEXT = reinterpret_cast<gl_get_variant_booleanv_ext_t*>(soglLoadSymbol("glGetVariantBooleanvEXT"));
	gl->GetVariantFloatvEXT = reinterpret_cast<gl_get_variant_floatv_ext_t*>(soglLoadSymbol("glGetVariantFloatvEXT"));
	gl->GetVariantIntegervEXT = reinterpret_cast<gl_get_variant_integerv_ext_t*>(soglLoadSymbol("glGetVariantIntegervEXT"));
	gl->GetVariantPointervEXT = reinterpret_cast<gl_get_variant_pointerv_ext_t*>(soglLoadSymbol("glGetVariantPointervEXT"));
	gl->GetVaryingLocationNV = reinterpret_cast<gl_get_varying_location_nv_t*>(soglLoadSymbol("glGetVaryingLocationNV"));
	gl->GetVertexArrayIndexed64iv = reinterpret_cast<gl_get_vertex_array_indexed64iv_t*>(soglLoadSymbol("glGetVertexArrayIndexed64iv"));
	gl->GetVertexArrayIndexediv = reinterpret_cast<gl_get_vertex_array_indexediv_t*>(soglLoadSymbol("glGetVertexArrayIndexediv"));
	gl->GetVertexArrayIntegeri_vEXT = reinterpret_cast<gl_get_vertex_array_integeri_v_ext_t*>(soglLoadSymbol("glGetVertexArrayIntegeri_vEXT"));
	gl->GetVertexArrayIntegervEXT = reinterpret_cast<gl_get_vertex_array_integerv_ext_t*>(soglLoadSymbol("glGetVertexArrayIntegervEXT"));
	gl->GetVertexArrayPointeri_vEXT = reinterpret_cast<gl_get_vertex_array_pointeri_v_ext_t*>(soglLoadSymbol("glGetVertexArrayPointeri_vEXT"));
	gl->GetVertexArrayPointervEXT = reinterpret_cast<gl_get_vertex_array_pointerv_ext_t*>(soglLoadSymbol("glGetVertexArrayPointervEXT"));
	gl->GetVertexArrayiv = reinterpret_cast<gl_get_vertex_arrayiv_t*>(soglLoadSymbol("glGetVertexArrayiv"));
	gl->GetVertexAttribArrayObjectfvATI = reinterpret_cast<gl_get_vertex_attrib_array_objectfv_ati_t*>(soglLoadSymbol("glGetVertexAttribArrayObjectfvATI"));
	gl->GetVertexAttribArrayObjectivATI = reinterpret_cast<gl_get_vertex_attrib_array_objectiv_ati_t*>(soglLoadSymbol("glGetVertexAttribArrayObjectivATI"));
	gl->GetVertexAttribIiv = reinterpret_cast<gl_get_vertex_attrib_iiv_t*>(soglLoadSymbol("glGetVertexAttribIiv"));
	gl->GetVertexAttribIivEXT = reinterpret_cast<gl_get_vertex_attrib_iiv_ext_t*>(soglLoadSymbol("glGetVertexAttribIivEXT"));
	gl->GetVertexAttribIuiv = reinterpret_cast<gl_get_vertex_attrib_iuiv_t*>(soglLoadSymbol("glGetVertexAttribIuiv"));
	gl->GetVertexAttribIuivEXT = reinterpret_cast<gl_get_vertex_attrib_iuiv_ext_t*>(soglLoadSymbol("glGetVertexAttribIuivEXT"));
	gl->GetVertexAttribLdv = reinterpret_cast<gl_get_vertex_attrib_ldv_t*>(soglLoadSymbol("glGetVertexAttribLdv"));
	gl->GetVertexAttribLdvEXT = reinterpret_cast<gl_get_vertex_attrib_ldv_ext_t*>(soglLoadSymbol("glGetVertexAttribLdvEXT"));
	gl->GetVertexAttribLi64vNV = reinterpret_cast<gl_get_vertex_attrib_li64v_nv_t*>(soglLoadSymbol("glGetVertexAttribLi64vNV"));
	gl->GetVertexAttribLui64vARB = reinterpret_cast<gl_get_vertex_attrib_lui64v_arb_t*>(soglLoadSymbol("glGetVertexAttribLui64vARB"));
	gl->GetVertexAttribLui64vNV = reinterpret_cast<gl_get_vertex_attrib_lui64v_nv_t*>(soglLoadSymbol("glGetVertexAttribLui64vNV"));
	gl->GetVertexAttribPointerv = reinterpret_cast<gl_get_vertex_attrib_pointerv_t*>(soglLoadSymbol("glGetVertexAttribPointerv"));
	gl->GetVertexAttribPointervARB = reinterpret_cast<gl_get_vertex_attrib_pointerv_arb_t*>(soglLoadSymbol("glGetVertexAttribPointervARB"));
	gl->GetVertexAttribPointervNV = reinterpret_cast<gl_get_vertex_attrib_pointerv_nv_t*>(soglLoadSymbol("glGetVertexAttribPointervNV"));
	gl->GetVertexAttribdv = reinterpret_cast<gl_get_vertex_attribdv_t*>(soglLoadSymbol("glGetVertexAttribdv"));
	gl->GetVertexAttribdvARB = reinterpret_cast<gl_get_vertex_attribdv_arb_t*>(soglLoadSymbol("glGetVertexAttribdvARB"));
	gl->GetVertexAttribdvNV = reinterpret_cast<gl_get_vertex_attribdv_nv_t*>(soglLoadSymbol("glGetVertexAttribdvNV"));
	gl->GetVertexAttribfv = reinterpret_cast<gl_get_vertex_attribfv_t*>(soglLoadSymbol("glGetVertexAttribfv"));
	gl->GetVertexAttribfvARB = reinterpret_cast<gl_get_vertex_attribfv_arb_t*>(soglLoadSymbol("glGetVertexAttribfvARB"));
	gl->GetVertexAttribfvNV = reinterpret_cast<gl_get_vertex_attribfv_nv_t*>(soglLoadSymbol("glGetVertexAttribfvNV"));
	gl->GetVertexAttribiv = reinterpret_cast<gl_get_vertex_attribiv_t*>(soglLoadSymbol("glGetVertexAttribiv"));
	gl->GetVertexAttribivARB = reinterpret_cast<gl_get_vertex_attribiv_arb_t*>(soglLoadSymbol("glGetVertexAttribivARB"));
	gl->GetVertexAttribivNV = reinterpret_cast<gl_get_vertex_attribiv_nv_t*>(soglLoadSymbol("glGetVertexAttribivNV"));
	gl->GetVideoCaptureStreamdvNV = reinterpret_cast<gl_get_video_capture_streamdv_nv_t*>(soglLoadSymbol("glGetVideoCaptureStreamdvNV"));
	gl->GetVideoCaptureStreamfvNV = reinterpret_cast<gl_get_video_capture_streamfv_nv_t*>(soglLoadSymbol("glGetVideoCaptureStreamfvNV"));
	gl->GetVideoCaptureStreamivNV = reinterpret_cast<gl_get_video_capture_streamiv_nv_t*>(soglLoadSymbol("glGetVideoCaptureStreamivNV"));
	gl->GetVideoCaptureivNV = reinterpret_cast<gl_get_video_captureiv_nv_t*>(soglLoadSymbol("glGetVideoCaptureivNV"));
	gl->GetVideoi64vNV = reinterpret_cast<gl_get_videoi64v_nv_t*>(soglLoadSymbol("glGetVideoi64vNV"));
	gl->GetVideoivNV = reinterpret_cast<gl_get_videoiv_nv_t*>(soglLoadSymbol("glGetVideoivNV"));
	gl->GetVideoui64vNV = reinterpret_cast<gl_get_videoui64v_nv_t*>(soglLoadSymbol("glGetVideoui64vNV"));
	gl->GetVideouivNV = reinterpret_cast<gl_get_videouiv_nv_t*>(soglLoadSymbol("glGetVideouivNV"));
	gl->GetVkProcAddrNV = reinterpret_cast<gl_get_vk_proc_addr_nv_t*>(soglLoadSymbol("glGetVkProcAddrNV"));
	gl->GetnColorTableARB = reinterpret_cast<gl_getn_color_table_arb_t*>(soglLoadSymbol("glGetnColorTableARB"));
	gl->GetnCompressedTexImage = reinterpret_cast<gl_getn_compressed_tex_image_t*>(soglLoadSymbol("glGetnCompressedTexImage"));
	gl->GetnCompressedTexImageARB = reinterpret_cast<gl_getn_compressed_tex_image_arb_t*>(soglLoadSymbol("glGetnCompressedTexImageARB"));
	gl->GetnConvolutionFilterARB = reinterpret_cast<gl_getn_convolution_filter_arb_t*>(soglLoadSymbol("glGetnConvolutionFilterARB"));
	gl->GetnHistogramARB = reinterpret_cast<gl_getn_histogram_arb_t*>(soglLoadSymbol("glGetnHistogramARB"));
	gl->GetnMapdvARB = reinterpret_cast<gl_getn_mapdv_arb_t*>(soglLoadSymbol("glGetnMapdvARB"));
	gl->GetnMapfvARB = reinterpret_cast<gl_getn_mapfv_arb_t*>(soglLoadSymbol("glGetnMapfvARB"));
	gl->GetnMapivARB = reinterpret_cast<gl_getn_mapiv_arb_t*>(soglLoadSymbol("glGetnMapivARB"));
	gl->GetnMinmaxARB = reinterpret_cast<gl_getn_minmax_arb_t*>(soglLoadSymbol("glGetnMinmaxARB"));
	gl->GetnPixelMapfvARB = reinterpret_cast<gl_getn_pixel_mapfv_arb_t*>(soglLoadSymbol("glGetnPixelMapfvARB"));
	gl->GetnPixelMapuivARB = reinterpret_cast<gl_getn_pixel_mapuiv_arb_t*>(soglLoadSymbol("glGetnPixelMapuivARB"));
	gl->GetnPixelMapusvARB = reinterpret_cast<gl_getn_pixel_mapusv_arb_t*>(soglLoadSymbol("glGetnPixelMapusvARB"));
	gl->GetnPolygonStippleARB = reinterpret_cast<gl_getn_polygon_stipple_arb_t*>(soglLoadSymbol("glGetnPolygonStippleARB"));
	gl->GetnSeparableFilterARB = reinterpret_cast<gl_getn_separable_filter_arb_t*>(soglLoadSymbol("glGetnSeparableFilterARB"));
	gl->GetnTexImage = reinterpret_cast<gl_getn_tex_image_t*>(soglLoadSymbol("glGetnTexImage"));
	gl->GetnTexImageARB = reinterpret_cast<gl_getn_tex_image_arb_t*>(soglLoadSymbol("glGetnTexImageARB"));
	gl->GetnUniformdv = reinterpret_cast<gl_getn_uniformdv_t*>(soglLoadSymbol("glGetnUniformdv"));
	gl->GetnUniformdvARB = reinterpret_cast<gl_getn_uniformdv_arb_t*>(soglLoadSymbol("glGetnUniformdvARB"));
	gl->GetnUniformfv = reinterpret_cast<gl_getn_uniformfv_t*>(soglLoadSymbol("glGetnUniformfv"));
	gl->GetnUniformfvARB = reinterpret_cast<gl_getn_uniformfv_arb_t*>(soglLoadSymbol("glGetnUniformfvARB"));
	gl->GetnUniformi64vARB = reinterpret_cast<gl_getn_uniformi64v_arb_t*>(soglLoadSymbol("glGetnUniformi64vARB"));
	gl->GetnUniformiv = reinterpret_cast<gl_getn_uniformiv_t*>(soglLoadSymbol("glGetnUniformiv"));
	gl->GetnUniformivARB = reinterpret_cast<gl_getn_uniformiv_arb_t*>(soglLoadSymbol("glGetnUniformivARB"));
	gl->GetnUniformui64vARB = reinterpret_cast<gl_getn_uniformui64v_arb_t*>(soglLoadSymbol("glGetnUniformui64vARB"));
	gl->GetnUniformuiv = reinterpret_cast<gl_getn_uniformuiv_t*>(soglLoadSymbol("glGetnUniformuiv"));
	gl->GetnUniformuivARB = reinterpret_cast<gl_getn_uniformuiv_arb_t*>(soglLoadSymbol("glGetnUniformuivARB"));
	gl->GlobalAlphaFactorbSUN = reinterpret_cast<gl_global_alpha_factorb_sun_t*>(soglLoadSymbol("glGlobalAlphaFactorbSUN"));
	gl->GlobalAlphaFactordSUN = reinterpret_cast<gl_global_alpha_factord_sun_t*>(soglLoadSymbol("glGlobalAlphaFactordSUN"));
	gl->GlobalAlphaFactorfSUN = reinterpret_cast<gl_global_alpha_factorf_sun_t*>(soglLoadSymbol("glGlobalAlphaFactorfSUN"));
	gl->GlobalAlphaFactoriSUN = reinterpret_cast<gl_global_alpha_factori_sun_t*>(soglLoadSymbol("glGlobalAlphaFactoriSUN"));
	gl->GlobalAlphaFactorsSUN = reinterpret_cast<gl_global_alpha_factors_sun_t*>(soglLoadSymbol("glGlobalAlphaFactorsSUN"));
	gl->GlobalAlphaFactorubSUN = reinterpret_cast<gl_global_alpha_factorub_sun_t*>(soglLoadSymbol("glGlobalAlphaFactorubSUN"));
	gl->GlobalAlphaFactoruiSUN = reinterpret_cast<gl_global_alpha_factorui_sun_t*>(soglLoadSymbol("glGlobalAlphaFactoruiSUN"));
	gl->GlobalAlphaFactorusSUN = reinterpret_cast<gl_global_alpha_factorus_sun_t*>(soglLoadSymbol("glGlobalAlphaFactorusSUN"));
	gl->Histogram = reinterpret_cast<gl_histogram_t*>(soglLoadSymbol("glHistogram"));
	gl->HistogramEXT = reinterpret_cast<gl_histogram_ext_t*>(soglLoadSymbol("glHistogramEXT"));
	gl->IglooInterfaceSGIX = reinterpret_cast<gl_igloo_interface_sgix_t*>(soglLoadSymbol("glIglooInterfaceSGIX"));
	gl->ImageTransformParameterfHP = reinterpret_cast<gl_image_transform_parameterf_hp_t*>(soglLoadSymbol("glImageTransformParameterfHP"));
	gl->ImageTransformParameterfvHP = reinterpret_cast<gl_image_transform_parameterfv_hp_t*>(soglLoadSymbol("glImageTransformParameterfvHP"));
	gl->ImageTransformParameteriHP = reinterpret_cast<gl_image_transform_parameteri_hp_t*>(soglLoadSymbol("glImageTransformParameteriHP"));
	gl->ImageTransformParameterivHP = reinterpret_cast<gl_image_transform_parameteriv_hp_t*>(soglLoadSymbol("glImageTransformParameterivHP"));
	gl->ImportMemoryFdEXT = reinterpret_cast<gl_import_memory_fd_ext_t*>(soglLoadSymbol("glImportMemoryFdEXT"));
	gl->ImportMemoryWin32HandleEXT = reinterpret_cast<gl_import_memory_win32handle_ext_t*>(soglLoadSymbol("glImportMemoryWin32HandleEXT"));
	gl->ImportMemoryWin32NameEXT = reinterpret_cast<gl_import_memory_win32name_ext_t*>(soglLoadSymbol("glImportMemoryWin32NameEXT"));
	gl->ImportSemaphoreFdEXT = reinterpret_cast<gl_import_semaphore_fd_ext_t*>(soglLoadSymbol("glImportSemaphoreFdEXT"));
	gl->ImportSemaphoreWin32HandleEXT = reinterpret_cast<gl_import_semaphore_win32handle_ext_t*>(soglLoadSymbol("glImportSemaphoreWin32HandleEXT"));
	gl->ImportSemaphoreWin32NameEXT = reinterpret_cast<gl_import_semaphore_win32name_ext_t*>(soglLoadSymbol("glImportSemaphoreWin32NameEXT"));
	gl->ImportSyncEXT = reinterpret_cast<gl_import_sync_ext_t*>(soglLoadSymbol("glImportSyncEXT"));
	gl->IndexFormatNV = reinterpret_cast<gl_index_format_nv_t*>(soglLoadSymbol("glIndexFormatNV"));
	gl->IndexFuncEXT = reinterpret_cast<gl_index_func_ext_t*>(soglLoadSymbol("glIndexFuncEXT"));
	gl->IndexMaterialEXT = reinterpret_cast<gl_index_material_ext_t*>(soglLoadSymbol("glIndexMaterialEXT"));
	gl->IndexPointerEXT = reinterpret_cast<gl_index_pointer_ext_t*>(soglLoadSymbol("glIndexPointerEXT"));
	gl->IndexPointerListIBM = reinterpret_cast<gl_index_pointer_list_ibm_t*>(soglLoadSymbol("glIndexPointerListIBM"));
	gl->InsertComponentEXT = reinterpret_cast<gl_insert_component_ext_t*>(soglLoadSymbol("glInsertComponentEXT"));
	gl->InsertEventMarkerEXT = reinterpret_cast<gl_insert_event_marker_ext_t*>(soglLoadSymbol("glInsertEventMarkerEXT"));
	gl->InterpolatePathsNV = reinterpret_cast<gl_interpolate_paths_nv_t*>(soglLoadSymbol("glInterpolatePathsNV"));
	gl->InvalidateBufferData = reinterpret_cast<gl_invalidate_buffer_data_t*>(soglLoadSymbol("glInvalidateBufferData"));
	gl->InvalidateBufferSubData = reinterpret_cast<gl_invalidate_buffer_sub_data_t*>(soglLoadSymbol("glInvalidateBufferSubData"));
	gl->InvalidateFramebuffer = reinterpret_cast<gl_invalidate_framebuffer_t*>(soglLoadSymbol("glInvalidateFramebuffer"));
	gl->InvalidateNamedFramebufferData = reinterpret_cast<gl_invalidate_named_framebuffer_data_t*>(soglLoadSymbol("glInvalidateNamedFramebufferData"));
	gl->InvalidateNamedFramebufferSubData = reinterpret_cast<gl_invalidate_named_framebuffer_sub_data_t*>(soglLoadSymbol("glInvalidateNamedFramebufferSubData"));
	gl->InvalidateSubFramebuffer = reinterpret_cast<gl_invalidate_sub_framebuffer_t*>(soglLoadSymbol("glInvalidateSubFramebuffer"));
	gl->InvalidateTexImage = reinterpret_cast<gl_invalidate_tex_image_t*>(soglLoadSymbol("glInvalidateTexImage"));
	gl->InvalidateTexSubImage = reinterpret_cast<gl_invalidate_tex_sub_image_t*>(soglLoadSymbol("glInvalidateTexSubImage"));
	gl->IsAsyncMarkerSGIX = reinterpret_cast<gl_is_async_marker_sgix_t*>(soglLoadSymbol("glIsAsyncMarkerSGIX"));
	gl->IsBuffer = reinterpret_cast<gl_is_buffer_t*>(soglLoadSymbol("glIsBuffer"));
	gl->IsBufferARB = reinterpret_cast<gl_is_buffer_arb_t*>(soglLoadSymbol("glIsBufferARB"));
	gl->IsBufferResidentNV = reinterpret_cast<gl_is_buffer_resident_nv_t*>(soglLoadSymbol("glIsBufferResidentNV"));
	gl->IsCommandListNV = reinterpret_cast<gl_is_command_list_nv_t*>(soglLoadSymbol("glIsCommandListNV"));
	gl->IsEnabledIndexedEXT = reinterpret_cast<gl_is_enabled_indexed_ext_t*>(soglLoadSymbol("glIsEnabledIndexedEXT"));
	gl->IsEnabledi = reinterpret_cast<gl_is_enabledi_t*>(soglLoadSymbol("glIsEnabledi"));
	gl->IsFenceAPPLE = reinterpret_cast<gl_is_fence_apple_t*>(soglLoadSymbol("glIsFenceAPPLE"));
	gl->IsFenceNV = reinterpret_cast<gl_is_fence_nv_t*>(soglLoadSymbol("glIsFenceNV"));
	gl->IsFramebuffer = reinterpret_cast<gl_is_framebuffer_t*>(soglLoadSymbol("glIsFramebuffer"));
	gl->IsFramebufferEXT = reinterpret_cast<gl_is_framebuffer_ext_t*>(soglLoadSymbol("glIsFramebufferEXT"));
	gl->IsImageHandleResidentARB = reinterpret_cast<gl_is_image_handle_resident_arb_t*>(soglLoadSymbol("glIsImageHandleResidentARB"));
	gl->IsImageHandleResidentNV = reinterpret_cast<gl_is_image_handle_resident_nv_t*>(soglLoadSymbol("glIsImageHandleResidentNV"));
	gl->IsMemoryObjectEXT = reinterpret_cast<gl_is_memory_object_ext_t*>(soglLoadSymbol("glIsMemoryObjectEXT"));
	gl->IsNameAMD = reinterpret_cast<gl_is_name_amd_t*>(soglLoadSymbol("glIsNameAMD"));
	gl->IsNamedBufferResidentNV = reinterpret_cast<gl_is_named_buffer_resident_nv_t*>(soglLoadSymbol("glIsNamedBufferResidentNV"));
	gl->IsNamedStringARB = reinterpret_cast<gl_is_named_string_arb_t*>(soglLoadSymbol("glIsNamedStringARB"));
	gl->IsObjectBufferATI = reinterpret_cast<gl_is_object_buffer_ati_t*>(soglLoadSymbol("glIsObjectBufferATI"));
	gl->IsOcclusionQueryNV = reinterpret_cast<gl_is_occlusion_query_nv_t*>(soglLoadSymbol("glIsOcclusionQueryNV"));
	gl->IsPathNV = reinterpret_cast<gl_is_path_nv_t*>(soglLoadSymbol("glIsPathNV"));
	gl->IsPointInFillPathNV = reinterpret_cast<gl_is_point_in_fill_path_nv_t*>(soglLoadSymbol("glIsPointInFillPathNV"));
	gl->IsPointInStrokePathNV = reinterpret_cast<gl_is_point_in_stroke_path_nv_t*>(soglLoadSymbol("glIsPointInStrokePathNV"));
	gl->IsProgram = reinterpret_cast<gl_is_program_t*>(soglLoadSymbol("glIsProgram"));
	gl->IsProgramARB = reinterpret_cast<gl_is_program_arb_t*>(soglLoadSymbol("glIsProgramARB"));
	gl->IsProgramNV = reinterpret_cast<gl_is_program_nv_t*>(soglLoadSymbol("glIsProgramNV"));
	gl->IsProgramPipeline = reinterpret_cast<gl_is_program_pipeline_t*>(soglLoadSymbol("glIsProgramPipeline"));
	gl->IsQuery = reinterpret_cast<gl_is_query_t*>(soglLoadSymbol("glIsQuery"));
	gl->IsQueryARB = reinterpret_cast<gl_is_query_arb_t*>(soglLoadSymbol("glIsQueryARB"));
	gl->IsRenderbuffer = reinterpret_cast<gl_is_renderbuffer_t*>(soglLoadSymbol("glIsRenderbuffer"));
	gl->IsRenderbufferEXT = reinterpret_cast<gl_is_renderbuffer_ext_t*>(soglLoadSymbol("glIsRenderbufferEXT"));
	gl->IsSampler = reinterpret_cast<gl_is_sampler_t*>(soglLoadSymbol("glIsSampler"));
	gl->IsSemaphoreEXT = reinterpret_cast<gl_is_semaphore_ext_t*>(soglLoadSymbol("glIsSemaphoreEXT"));
	gl->IsShader = reinterpret_cast<gl_is_shader_t*>(soglLoadSymbol("glIsShader"));
	gl->IsStateNV = reinterpret_cast<gl_is_state_nv_t*>(soglLoadSymbol("glIsStateNV"));
	gl->IsSync = reinterpret_cast<gl_is_sync_t*>(soglLoadSymbol("glIsSync"));
	gl->IsTextureEXT = reinterpret_cast<gl_is_texture_ext_t*>(soglLoadSymbol("glIsTextureEXT"));
	gl->IsTextureHandleResidentARB = reinterpret_cast<gl_is_texture_handle_resident_arb_t*>(soglLoadSymbol("glIsTextureHandleResidentARB"));
	gl->IsTextureHandleResidentNV = reinterpret_cast<gl_is_texture_handle_resident_nv_t*>(soglLoadSymbol("glIsTextureHandleResidentNV"));
	gl->IsTransformFeedback = reinterpret_cast<gl_is_transform_feedback_t*>(soglLoadSymbol("glIsTransformFeedback"));
	gl->IsTransformFeedbackNV = reinterpret_cast<gl_is_transform_feedback_nv_t*>(soglLoadSymbol("glIsTransformFeedbackNV"));
	gl->IsVariantEnabledEXT = reinterpret_cast<gl_is_variant_enabled_ext_t*>(soglLoadSymbol("glIsVariantEnabledEXT"));
	gl->IsVertexArray = reinterpret_cast<gl_is_vertex_array_t*>(soglLoadSymbol("glIsVertexArray"));
	gl->IsVertexArrayAPPLE = reinterpret_cast<gl_is_vertex_array_apple_t*>(soglLoadSymbol("glIsVertexArrayAPPLE"));
	gl->IsVertexAttribEnabledAPPLE = reinterpret_cast<gl_is_vertex_attrib_enabled_apple_t*>(soglLoadSymbol("glIsVertexAttribEnabledAPPLE"));
	gl->LGPUCopyImageSubDataNVX = reinterpret_cast<gl_lgpucopy_image_sub_data_nvx_t*>(soglLoadSymbol("glLGPUCopyImageSubDataNVX"));
	gl->LGPUInterlockNVX = reinterpret_cast<gl_lgpuinterlock_nvx_t*>(soglLoadSymbol("glLGPUInterlockNVX"));
	gl->LGPUNamedBufferSubDataNVX = reinterpret_cast<gl_lgpunamed_buffer_sub_data_nvx_t*>(soglLoadSymbol("glLGPUNamedBufferSubDataNVX"));
	gl->LabelObjectEXT = reinterpret_cast<gl_label_object_ext_t*>(soglLoadSymbol("glLabelObjectEXT"));
	gl->LinkProgram = reinterpret_cast<gl_link_program_t*>(soglLoadSymbol("glLinkProgram"));
	gl->LinkProgramARB = reinterpret_cast<gl_link_program_arb_t*>(soglLoadSymbol("glLinkProgramARB"));
	gl->ListDrawCommandsStatesClientNV = reinterpret_cast<gl_list_draw_commands_states_client_nv_t*>(soglLoadSymbol("glListDrawCommandsStatesClientNV"));
	gl->LoadIdentityDeformationMapSGIX = reinterpret_cast<gl_load_identity_deformation_map_sgix_t*>(soglLoadSymbol("glLoadIdentityDeformationMapSGIX"));
	gl->LoadProgramNV = reinterpret_cast<gl_load_program_nv_t*>(soglLoadSymbol("glLoadProgramNV"));
	gl->LoadTransposeMatrixd = reinterpret_cast<gl_load_transpose_matrixd_t*>(soglLoadSymbol("glLoadTransposeMatrixd"));
	gl->LoadTransposeMatrixdARB = reinterpret_cast<gl_load_transpose_matrixd_arb_t*>(soglLoadSymbol("glLoadTransposeMatrixdARB"));
	gl->LoadTransposeMatrixf = reinterpret_cast<gl_load_transpose_matrixf_t*>(soglLoadSymbol("glLoadTransposeMatrixf"));
	gl->LoadTransposeMatrixfARB = reinterpret_cast<gl_load_transpose_matrixf_arb_t*>(soglLoadSymbol("glLoadTransposeMatrixfARB"));
	gl->LockArraysEXT = reinterpret_cast<gl_lock_arrays_ext_t*>(soglLoadSymbol("glLockArraysEXT"));
	gl->MakeBufferNonResidentNV = reinterpret_cast<gl_make_buffer_non_resident_nv_t*>(soglLoadSymbol("glMakeBufferNonResidentNV"));
	gl->MakeBufferResidentNV = reinterpret_cast<gl_make_buffer_resident_nv_t*>(soglLoadSymbol("glMakeBufferResidentNV"));
	gl->MakeImageHandleNonResidentARB = reinterpret_cast<gl_make_image_handle_non_resident_arb_t*>(soglLoadSymbol("glMakeImageHandleNonResidentARB"));
	gl->MakeImageHandleNonResidentNV = reinterpret_cast<gl_make_image_handle_non_resident_nv_t*>(soglLoadSymbol("glMakeImageHandleNonResidentNV"));
	gl->MakeImageHandleResidentARB = reinterpret_cast<gl_make_image_handle_resident_arb_t*>(soglLoadSymbol("glMakeImageHandleResidentARB"));
	gl->MakeImageHandleResidentNV = reinterpret_cast<gl_make_image_handle_resident_nv_t*>(soglLoadSymbol("glMakeImageHandleResidentNV"));
	gl->MakeNamedBufferNonResidentNV = reinterpret_cast<gl_make_named_buffer_non_resident_nv_t*>(soglLoadSymbol("glMakeNamedBufferNonResidentNV"));
	gl->MakeNamedBufferResidentNV = reinterpret_cast<gl_make_named_buffer_resident_nv_t*>(soglLoadSymbol("glMakeNamedBufferResidentNV"));
	gl->MakeTextureHandleNonResidentARB = reinterpret_cast<gl_make_texture_handle_non_resident_arb_t*>(soglLoadSymbol("glMakeTextureHandleNonResidentARB"));
	gl->MakeTextureHandleNonResidentNV = reinterpret_cast<gl_make_texture_handle_non_resident_nv_t*>(soglLoadSymbol("glMakeTextureHandleNonResidentNV"));
	gl->MakeTextureHandleResidentARB = reinterpret_cast<gl_make_texture_handle_resident_arb_t*>(soglLoadSymbol("glMakeTextureHandleResidentARB"));
	gl->MakeTextureHandleResidentNV = reinterpret_cast<gl_make_texture_handle_resident_nv_t*>(soglLoadSymbol("glMakeTextureHandleResidentNV"));
	gl->MapControlPointsNV = reinterpret_cast<gl_map_control_points_nv_t*>(soglLoadSymbol("glMapControlPointsNV"));
	gl->MapParameterfvNV = reinterpret_cast<gl_map_parameterfv_nv_t*>(soglLoadSymbol("glMapParameterfvNV"));
	gl->MapParameterivNV = reinterpret_cast<gl_map_parameteriv_nv_t*>(soglLoadSymbol("glMapParameterivNV"));
	gl->MapVertexAttrib1dAPPLE = reinterpret_cast<gl_map_vertex_attrib1d_apple_t*>(soglLoadSymbol("glMapVertexAttrib1dAPPLE"));
	gl->MapVertexAttrib1fAPPLE = reinterpret_cast<gl_map_vertex_attrib1f_apple_t*>(soglLoadSymbol("glMapVertexAttrib1fAPPLE"));
	gl->MapVertexAttrib2dAPPLE = reinterpret_cast<gl_map_vertex_attrib2d_apple_t*>(soglLoadSymbol("glMapVertexAttrib2dAPPLE"));
	gl->MapVertexAttrib2fAPPLE = reinterpret_cast<gl_map_vertex_attrib2f_apple_t*>(soglLoadSymbol("glMapVertexAttrib2fAPPLE"));
	gl->MatrixFrustumEXT = reinterpret_cast<gl_matrix_frustum_ext_t*>(soglLoadSymbol("glMatrixFrustumEXT"));
	gl->MatrixIndexPointerARB = reinterpret_cast<gl_matrix_index_pointer_arb_t*>(soglLoadSymbol("glMatrixIndexPointerARB"));
	gl->MatrixIndexubvARB = reinterpret_cast<gl_matrix_indexubv_arb_t*>(soglLoadSymbol("glMatrixIndexubvARB"));
	gl->MatrixIndexuivARB = reinterpret_cast<gl_matrix_indexuiv_arb_t*>(soglLoadSymbol("glMatrixIndexuivARB"));
	gl->MatrixIndexusvARB = reinterpret_cast<gl_matrix_indexusv_arb_t*>(soglLoadSymbol("glMatrixIndexusvARB"));
	gl->MatrixLoad3x2fNV = reinterpret_cast<gl_matrix_load3x2f_nv_t*>(soglLoadSymbol("glMatrixLoad3x2fNV"));
	gl->MatrixLoad3x3fNV = reinterpret_cast<gl_matrix_load3x3f_nv_t*>(soglLoadSymbol("glMatrixLoad3x3fNV"));
	gl->MatrixLoadIdentityEXT = reinterpret_cast<gl_matrix_load_identity_ext_t*>(soglLoadSymbol("glMatrixLoadIdentityEXT"));
	gl->MatrixLoadTranspose3x3fNV = reinterpret_cast<gl_matrix_load_transpose3x3f_nv_t*>(soglLoadSymbol("glMatrixLoadTranspose3x3fNV"));
	gl->MatrixLoadTransposedEXT = reinterpret_cast<gl_matrix_load_transposed_ext_t*>(soglLoadSymbol("glMatrixLoadTransposedEXT"));
	gl->MatrixLoadTransposefEXT = reinterpret_cast<gl_matrix_load_transposef_ext_t*>(soglLoadSymbol("glMatrixLoadTransposefEXT"));
	gl->MatrixLoaddEXT = reinterpret_cast<gl_matrix_loadd_ext_t*>(soglLoadSymbol("glMatrixLoaddEXT"));
	gl->MatrixLoadfEXT = reinterpret_cast<gl_matrix_loadf_ext_t*>(soglLoadSymbol("glMatrixLoadfEXT"));
	gl->MatrixMult3x2fNV = reinterpret_cast<gl_matrix_mult3x2f_nv_t*>(soglLoadSymbol("glMatrixMult3x2fNV"));
	gl->MatrixMult3x3fNV = reinterpret_cast<gl_matrix_mult3x3f_nv_t*>(soglLoadSymbol("glMatrixMult3x3fNV"));
	gl->MatrixMultTranspose3x3fNV = reinterpret_cast<gl_matrix_mult_transpose3x3f_nv_t*>(soglLoadSymbol("glMatrixMultTranspose3x3fNV"));
	gl->MatrixMultTransposedEXT = reinterpret_cast<gl_matrix_mult_transposed_ext_t*>(soglLoadSymbol("glMatrixMultTransposedEXT"));
	gl->MatrixMultTransposefEXT = reinterpret_cast<gl_matrix_mult_transposef_ext_t*>(soglLoadSymbol("glMatrixMultTransposefEXT"));
	gl->MatrixMultdEXT = reinterpret_cast<gl_matrix_multd_ext_t*>(soglLoadSymbol("glMatrixMultdEXT"));
	gl->MatrixMultfEXT = reinterpret_cast<gl_matrix_multf_ext_t*>(soglLoadSymbol("glMatrixMultfEXT"));
	gl->MatrixOrthoEXT = reinterpret_cast<gl_matrix_ortho_ext_t*>(soglLoadSymbol("glMatrixOrthoEXT"));
	gl->MatrixPopEXT = reinterpret_cast<gl_matrix_pop_ext_t*>(soglLoadSymbol("glMatrixPopEXT"));
	gl->MatrixPushEXT = reinterpret_cast<gl_matrix_push_ext_t*>(soglLoadSymbol("glMatrixPushEXT"));
	gl->MatrixRotatedEXT = reinterpret_cast<gl_matrix_rotated_ext_t*>(soglLoadSymbol("glMatrixRotatedEXT"));
	gl->MatrixRotatefEXT = reinterpret_cast<gl_matrix_rotatef_ext_t*>(soglLoadSymbol("glMatrixRotatefEXT"));
	gl->MatrixScaledEXT = reinterpret_cast<gl_matrix_scaled_ext_t*>(soglLoadSymbol("glMatrixScaledEXT"));
	gl->MatrixScalefEXT = reinterpret_cast<gl_matrix_scalef_ext_t*>(soglLoadSymbol("glMatrixScalefEXT"));
	gl->MatrixTranslatedEXT = reinterpret_cast<gl_matrix_translated_ext_t*>(soglLoadSymbol("glMatrixTranslatedEXT"));
	gl->MatrixTranslatefEXT = reinterpret_cast<gl_matrix_translatef_ext_t*>(soglLoadSymbol("glMatrixTranslatefEXT"));
	gl->MaxShaderCompilerThreadsARB = reinterpret_cast<gl_max_shader_compiler_threads_arb_t*>(soglLoadSymbol("glMaxShaderCompilerThreadsARB"));
	gl->MaxShaderCompilerThreadsKHR = reinterpret_cast<gl_max_shader_compiler_threads_khr_t*>(soglLoadSymbol("glMaxShaderCompilerThreadsKHR"));
	gl->MemoryBarrier = reinterpret_cast<gl_memory_barrier_t*>(soglLoadSymbol("glMemoryBarrier"));
	gl->MemoryBarrierByRegion = reinterpret_cast<gl_memory_barrier_by_region_t*>(soglLoadSymbol("glMemoryBarrierByRegion"));
	gl->MemoryBarrierEXT = reinterpret_cast<gl_memory_barrier_ext_t*>(soglLoadSymbol("glMemoryBarrierEXT"));
	gl->MemoryObjectParameterivEXT = reinterpret_cast<gl_memory_object_parameteriv_ext_t*>(soglLoadSymbol("glMemoryObjectParameterivEXT"));
	gl->MinSampleShading = reinterpret_cast<gl_min_sample_shading_t*>(soglLoadSymbol("glMinSampleShading"));
	gl->MinSampleShadingARB = reinterpret_cast<gl_min_sample_shading_arb_t*>(soglLoadSymbol("glMinSampleShadingARB"));
	gl->Minmax = reinterpret_cast<gl_minmax_t*>(soglLoadSymbol("glMinmax"));
	gl->MinmaxEXT = reinterpret_cast<gl_minmax_ext_t*>(soglLoadSymbol("glMinmaxEXT"));
	gl->MultTransposeMatrixd = reinterpret_cast<gl_mult_transpose_matrixd_t*>(soglLoadSymbol("glMultTransposeMatrixd"));
	gl->MultTransposeMatrixdARB = reinterpret_cast<gl_mult_transpose_matrixd_arb_t*>(soglLoadSymbol("glMultTransposeMatrixdARB"));
	gl->MultTransposeMatrixf = reinterpret_cast<gl_mult_transpose_matrixf_t*>(soglLoadSymbol("glMultTransposeMatrixf"));
	gl->MultTransposeMatrixfARB = reinterpret_cast<gl_mult_transpose_matrixf_arb_t*>(soglLoadSymbol("glMultTransposeMatrixfARB"));
	gl->MultiDrawArrays = reinterpret_cast<gl_multi_draw_arrays_t*>(soglLoadSymbol("glMultiDrawArrays"));
	gl->MultiDrawArraysEXT = reinterpret_cast<gl_multi_draw_arrays_ext_t*>(soglLoadSymbol("glMultiDrawArraysEXT"));
	gl->MultiDrawArraysIndirect = reinterpret_cast<gl_multi_draw_arrays_indirect_t*>(soglLoadSymbol("glMultiDrawArraysIndirect"));
	gl->MultiDrawArraysIndirectAMD = reinterpret_cast<gl_multi_draw_arrays_indirect_amd_t*>(soglLoadSymbol("glMultiDrawArraysIndirectAMD"));
	gl->MultiDrawArraysIndirectBindlessCountNV = reinterpret_cast<gl_multi_draw_arrays_indirect_bindless_count_nv_t*>(soglLoadSymbol("glMultiDrawArraysIndirectBindlessCountNV"));
	gl->MultiDrawArraysIndirectBindlessNV = reinterpret_cast<gl_multi_draw_arrays_indirect_bindless_nv_t*>(soglLoadSymbol("glMultiDrawArraysIndirectBindlessNV"));
	gl->MultiDrawArraysIndirectCount = reinterpret_cast<gl_multi_draw_arrays_indirect_count_t*>(soglLoadSymbol("glMultiDrawArraysIndirectCount"));
	gl->MultiDrawArraysIndirectCountARB = reinterpret_cast<gl_multi_draw_arrays_indirect_count_arb_t*>(soglLoadSymbol("glMultiDrawArraysIndirectCountARB"));
	gl->MultiDrawElementArrayAPPLE = reinterpret_cast<gl_multi_draw_element_array_apple_t*>(soglLoadSymbol("glMultiDrawElementArrayAPPLE"));
	gl->MultiDrawElements = reinterpret_cast<gl_multi_draw_elements_t*>(soglLoadSymbol("glMultiDrawElements"));
	gl->MultiDrawElementsBaseVertex = reinterpret_cast<gl_multi_draw_elements_base_vertex_t*>(soglLoadSymbol("glMultiDrawElementsBaseVertex"));
	gl->MultiDrawElementsEXT = reinterpret_cast<gl_multi_draw_elements_ext_t*>(soglLoadSymbol("glMultiDrawElementsEXT"));
	gl->MultiDrawElementsIndirect = reinterpret_cast<gl_multi_draw_elements_indirect_t*>(soglLoadSymbol("glMultiDrawElementsIndirect"));
	gl->MultiDrawElementsIndirectAMD = reinterpret_cast<gl_multi_draw_elements_indirect_amd_t*>(soglLoadSymbol("glMultiDrawElementsIndirectAMD"));
	gl->MultiDrawElementsIndirectBindlessCountNV = reinterpret_cast<gl_multi_draw_elements_indirect_bindless_count_nv_t*>(soglLoadSymbol("glMultiDrawElementsIndirectBindlessCountNV"));
	gl->MultiDrawElementsIndirectBindlessNV = reinterpret_cast<gl_multi_draw_elements_indirect_bindless_nv_t*>(soglLoadSymbol("glMultiDrawElementsIndirectBindlessNV"));
	gl->MultiDrawElementsIndirectCount = reinterpret_cast<gl_multi_draw_elements_indirect_count_t*>(soglLoadSymbol("glMultiDrawElementsIndirectCount"));
	gl->MultiDrawElementsIndirectCountARB = reinterpret_cast<gl_multi_draw_elements_indirect_count_arb_t*>(soglLoadSymbol("glMultiDrawElementsIndirectCountARB"));
	gl->MultiDrawRangeElementArrayAPPLE = reinterpret_cast<gl_multi_draw_range_element_array_apple_t*>(soglLoadSymbol("glMultiDrawRangeElementArrayAPPLE"));
	gl->MultiModeDrawArraysIBM = reinterpret_cast<gl_multi_mode_draw_arrays_ibm_t*>(soglLoadSymbol("glMultiModeDrawArraysIBM"));
	gl->MultiModeDrawElementsIBM = reinterpret_cast<gl_multi_mode_draw_elements_ibm_t*>(soglLoadSymbol("glMultiModeDrawElementsIBM"));
	gl->MultiTexBufferEXT = reinterpret_cast<gl_multi_tex_buffer_ext_t*>(soglLoadSymbol("glMultiTexBufferEXT"));
	gl->MultiTexCoord1d = reinterpret_cast<gl_multi_tex_coord1d_t*>(soglLoadSymbol("glMultiTexCoord1d"));
	gl->MultiTexCoord1dARB = reinterpret_cast<gl_multi_tex_coord1d_arb_t*>(soglLoadSymbol("glMultiTexCoord1dARB"));
	gl->MultiTexCoord1dv = reinterpret_cast<gl_multi_tex_coord1dv_t*>(soglLoadSymbol("glMultiTexCoord1dv"));
	gl->MultiTexCoord1dvARB = reinterpret_cast<gl_multi_tex_coord1dv_arb_t*>(soglLoadSymbol("glMultiTexCoord1dvARB"));
	gl->MultiTexCoord1f = reinterpret_cast<gl_multi_tex_coord1f_t*>(soglLoadSymbol("glMultiTexCoord1f"));
	gl->MultiTexCoord1fARB = reinterpret_cast<gl_multi_tex_coord1f_arb_t*>(soglLoadSymbol("glMultiTexCoord1fARB"));
	gl->MultiTexCoord1fv = reinterpret_cast<gl_multi_tex_coord1fv_t*>(soglLoadSymbol("glMultiTexCoord1fv"));
	gl->MultiTexCoord1fvARB = reinterpret_cast<gl_multi_tex_coord1fv_arb_t*>(soglLoadSymbol("glMultiTexCoord1fvARB"));
	gl->MultiTexCoord1hNV = reinterpret_cast<gl_multi_tex_coord1h_nv_t*>(soglLoadSymbol("glMultiTexCoord1hNV"));
	gl->MultiTexCoord1hvNV = reinterpret_cast<gl_multi_tex_coord1hv_nv_t*>(soglLoadSymbol("glMultiTexCoord1hvNV"));
	gl->MultiTexCoord1i = reinterpret_cast<gl_multi_tex_coord1i_t*>(soglLoadSymbol("glMultiTexCoord1i"));
	gl->MultiTexCoord1iARB = reinterpret_cast<gl_multi_tex_coord1i_arb_t*>(soglLoadSymbol("glMultiTexCoord1iARB"));
	gl->MultiTexCoord1iv = reinterpret_cast<gl_multi_tex_coord1iv_t*>(soglLoadSymbol("glMultiTexCoord1iv"));
	gl->MultiTexCoord1ivARB = reinterpret_cast<gl_multi_tex_coord1iv_arb_t*>(soglLoadSymbol("glMultiTexCoord1ivARB"));
	gl->MultiTexCoord1s = reinterpret_cast<gl_multi_tex_coord1s_t*>(soglLoadSymbol("glMultiTexCoord1s"));
	gl->MultiTexCoord1sARB = reinterpret_cast<gl_multi_tex_coord1s_arb_t*>(soglLoadSymbol("glMultiTexCoord1sARB"));
	gl->MultiTexCoord1sv = reinterpret_cast<gl_multi_tex_coord1sv_t*>(soglLoadSymbol("glMultiTexCoord1sv"));
	gl->MultiTexCoord1svARB = reinterpret_cast<gl_multi_tex_coord1sv_arb_t*>(soglLoadSymbol("glMultiTexCoord1svARB"));
	gl->MultiTexCoord2d = reinterpret_cast<gl_multi_tex_coord2d_t*>(soglLoadSymbol("glMultiTexCoord2d"));
	gl->MultiTexCoord2dARB = reinterpret_cast<gl_multi_tex_coord2d_arb_t*>(soglLoadSymbol("glMultiTexCoord2dARB"));
	gl->MultiTexCoord2dv = reinterpret_cast<gl_multi_tex_coord2dv_t*>(soglLoadSymbol("glMultiTexCoord2dv"));
	gl->MultiTexCoord2dvARB = reinterpret_cast<gl_multi_tex_coord2dv_arb_t*>(soglLoadSymbol("glMultiTexCoord2dvARB"));
	gl->MultiTexCoord2f = reinterpret_cast<gl_multi_tex_coord2f_t*>(soglLoadSymbol("glMultiTexCoord2f"));
	gl->MultiTexCoord2fARB = reinterpret_cast<gl_multi_tex_coord2f_arb_t*>(soglLoadSymbol("glMultiTexCoord2fARB"));
	gl->MultiTexCoord2fv = reinterpret_cast<gl_multi_tex_coord2fv_t*>(soglLoadSymbol("glMultiTexCoord2fv"));
	gl->MultiTexCoord2fvARB = reinterpret_cast<gl_multi_tex_coord2fv_arb_t*>(soglLoadSymbol("glMultiTexCoord2fvARB"));
	gl->MultiTexCoord2hNV = reinterpret_cast<gl_multi_tex_coord2h_nv_t*>(soglLoadSymbol("glMultiTexCoord2hNV"));
	gl->MultiTexCoord2hvNV = reinterpret_cast<gl_multi_tex_coord2hv_nv_t*>(soglLoadSymbol("glMultiTexCoord2hvNV"));
	gl->MultiTexCoord2i = reinterpret_cast<gl_multi_tex_coord2i_t*>(soglLoadSymbol("glMultiTexCoord2i"));
	gl->MultiTexCoord2iARB = reinterpret_cast<gl_multi_tex_coord2i_arb_t*>(soglLoadSymbol("glMultiTexCoord2iARB"));
	gl->MultiTexCoord2iv = reinterpret_cast<gl_multi_tex_coord2iv_t*>(soglLoadSymbol("glMultiTexCoord2iv"));
	gl->MultiTexCoord2ivARB = reinterpret_cast<gl_multi_tex_coord2iv_arb_t*>(soglLoadSymbol("glMultiTexCoord2ivARB"));
	gl->MultiTexCoord2s = reinterpret_cast<gl_multi_tex_coord2s_t*>(soglLoadSymbol("glMultiTexCoord2s"));
	gl->MultiTexCoord2sARB = reinterpret_cast<gl_multi_tex_coord2s_arb_t*>(soglLoadSymbol("glMultiTexCoord2sARB"));
	gl->MultiTexCoord2sv = reinterpret_cast<gl_multi_tex_coord2sv_t*>(soglLoadSymbol("glMultiTexCoord2sv"));
	gl->MultiTexCoord2svARB = reinterpret_cast<gl_multi_tex_coord2sv_arb_t*>(soglLoadSymbol("glMultiTexCoord2svARB"));
	gl->MultiTexCoord3d = reinterpret_cast<gl_multi_tex_coord3d_t*>(soglLoadSymbol("glMultiTexCoord3d"));
	gl->MultiTexCoord3dARB = reinterpret_cast<gl_multi_tex_coord3d_arb_t*>(soglLoadSymbol("glMultiTexCoord3dARB"));
	gl->MultiTexCoord3dv = reinterpret_cast<gl_multi_tex_coord3dv_t*>(soglLoadSymbol("glMultiTexCoord3dv"));
	gl->MultiTexCoord3dvARB = reinterpret_cast<gl_multi_tex_coord3dv_arb_t*>(soglLoadSymbol("glMultiTexCoord3dvARB"));
	gl->MultiTexCoord3f = reinterpret_cast<gl_multi_tex_coord3f_t*>(soglLoadSymbol("glMultiTexCoord3f"));
	gl->MultiTexCoord3fARB = reinterpret_cast<gl_multi_tex_coord3f_arb_t*>(soglLoadSymbol("glMultiTexCoord3fARB"));
	gl->MultiTexCoord3fv = reinterpret_cast<gl_multi_tex_coord3fv_t*>(soglLoadSymbol("glMultiTexCoord3fv"));
	gl->MultiTexCoord3fvARB = reinterpret_cast<gl_multi_tex_coord3fv_arb_t*>(soglLoadSymbol("glMultiTexCoord3fvARB"));
	gl->MultiTexCoord3hNV = reinterpret_cast<gl_multi_tex_coord3h_nv_t*>(soglLoadSymbol("glMultiTexCoord3hNV"));
	gl->MultiTexCoord3hvNV = reinterpret_cast<gl_multi_tex_coord3hv_nv_t*>(soglLoadSymbol("glMultiTexCoord3hvNV"));
	gl->MultiTexCoord3i = reinterpret_cast<gl_multi_tex_coord3i_t*>(soglLoadSymbol("glMultiTexCoord3i"));
	gl->MultiTexCoord3iARB = reinterpret_cast<gl_multi_tex_coord3i_arb_t*>(soglLoadSymbol("glMultiTexCoord3iARB"));
	gl->MultiTexCoord3iv = reinterpret_cast<gl_multi_tex_coord3iv_t*>(soglLoadSymbol("glMultiTexCoord3iv"));
	gl->MultiTexCoord3ivARB = reinterpret_cast<gl_multi_tex_coord3iv_arb_t*>(soglLoadSymbol("glMultiTexCoord3ivARB"));
	gl->MultiTexCoord3s = reinterpret_cast<gl_multi_tex_coord3s_t*>(soglLoadSymbol("glMultiTexCoord3s"));
	gl->MultiTexCoord3sARB = reinterpret_cast<gl_multi_tex_coord3s_arb_t*>(soglLoadSymbol("glMultiTexCoord3sARB"));
	gl->MultiTexCoord3sv = reinterpret_cast<gl_multi_tex_coord3sv_t*>(soglLoadSymbol("glMultiTexCoord3sv"));
	gl->MultiTexCoord3svARB = reinterpret_cast<gl_multi_tex_coord3sv_arb_t*>(soglLoadSymbol("glMultiTexCoord3svARB"));
	gl->MultiTexCoord4d = reinterpret_cast<gl_multi_tex_coord4d_t*>(soglLoadSymbol("glMultiTexCoord4d"));
	gl->MultiTexCoord4dARB = reinterpret_cast<gl_multi_tex_coord4d_arb_t*>(soglLoadSymbol("glMultiTexCoord4dARB"));
	gl->MultiTexCoord4dv = reinterpret_cast<gl_multi_tex_coord4dv_t*>(soglLoadSymbol("glMultiTexCoord4dv"));
	gl->MultiTexCoord4dvARB = reinterpret_cast<gl_multi_tex_coord4dv_arb_t*>(soglLoadSymbol("glMultiTexCoord4dvARB"));
	gl->MultiTexCoord4f = reinterpret_cast<gl_multi_tex_coord4f_t*>(soglLoadSymbol("glMultiTexCoord4f"));
	gl->MultiTexCoord4fARB = reinterpret_cast<gl_multi_tex_coord4f_arb_t*>(soglLoadSymbol("glMultiTexCoord4fARB"));
	gl->MultiTexCoord4fv = reinterpret_cast<gl_multi_tex_coord4fv_t*>(soglLoadSymbol("glMultiTexCoord4fv"));
	gl->MultiTexCoord4fvARB = reinterpret_cast<gl_multi_tex_coord4fv_arb_t*>(soglLoadSymbol("glMultiTexCoord4fvARB"));
	gl->MultiTexCoord4hNV = reinterpret_cast<gl_multi_tex_coord4h_nv_t*>(soglLoadSymbol("glMultiTexCoord4hNV"));
	gl->MultiTexCoord4hvNV = reinterpret_cast<gl_multi_tex_coord4hv_nv_t*>(soglLoadSymbol("glMultiTexCoord4hvNV"));
	gl->MultiTexCoord4i = reinterpret_cast<gl_multi_tex_coord4i_t*>(soglLoadSymbol("glMultiTexCoord4i"));
	gl->MultiTexCoord4iARB = reinterpret_cast<gl_multi_tex_coord4i_arb_t*>(soglLoadSymbol("glMultiTexCoord4iARB"));
	gl->MultiTexCoord4iv = reinterpret_cast<gl_multi_tex_coord4iv_t*>(soglLoadSymbol("glMultiTexCoord4iv"));
	gl->MultiTexCoord4ivARB = reinterpret_cast<gl_multi_tex_coord4iv_arb_t*>(soglLoadSymbol("glMultiTexCoord4ivARB"));
	gl->MultiTexCoord4s = reinterpret_cast<gl_multi_tex_coord4s_t*>(soglLoadSymbol("glMultiTexCoord4s"));
	gl->MultiTexCoord4sARB = reinterpret_cast<gl_multi_tex_coord4s_arb_t*>(soglLoadSymbol("glMultiTexCoord4sARB"));
	gl->MultiTexCoord4sv = reinterpret_cast<gl_multi_tex_coord4sv_t*>(soglLoadSymbol("glMultiTexCoord4sv"));
	gl->MultiTexCoord4svARB = reinterpret_cast<gl_multi_tex_coord4sv_arb_t*>(soglLoadSymbol("glMultiTexCoord4svARB"));
	gl->MultiTexCoordP1ui = reinterpret_cast<gl_multi_tex_coord_p1ui_t*>(soglLoadSymbol("glMultiTexCoordP1ui"));
	gl->MultiTexCoordP1uiv = reinterpret_cast<gl_multi_tex_coord_p1uiv_t*>(soglLoadSymbol("glMultiTexCoordP1uiv"));
	gl->MultiTexCoordP2ui = reinterpret_cast<gl_multi_tex_coord_p2ui_t*>(soglLoadSymbol("glMultiTexCoordP2ui"));
	gl->MultiTexCoordP2uiv = reinterpret_cast<gl_multi_tex_coord_p2uiv_t*>(soglLoadSymbol("glMultiTexCoordP2uiv"));
	gl->MultiTexCoordP3ui = reinterpret_cast<gl_multi_tex_coord_p3ui_t*>(soglLoadSymbol("glMultiTexCoordP3ui"));
	gl->MultiTexCoordP3uiv = reinterpret_cast<gl_multi_tex_coord_p3uiv_t*>(soglLoadSymbol("glMultiTexCoordP3uiv"));
	gl->MultiTexCoordP4ui = reinterpret_cast<gl_multi_tex_coord_p4ui_t*>(soglLoadSymbol("glMultiTexCoordP4ui"));
	gl->MultiTexCoordP4uiv = reinterpret_cast<gl_multi_tex_coord_p4uiv_t*>(soglLoadSymbol("glMultiTexCoordP4uiv"));
	gl->MultiTexCoordPointerEXT = reinterpret_cast<gl_multi_tex_coord_pointer_ext_t*>(soglLoadSymbol("glMultiTexCoordPointerEXT"));
	gl->MultiTexEnvfEXT = reinterpret_cast<gl_multi_tex_envf_ext_t*>(soglLoadSymbol("glMultiTexEnvfEXT"));
	gl->MultiTexEnvfvEXT = reinterpret_cast<gl_multi_tex_envfv_ext_t*>(soglLoadSymbol("glMultiTexEnvfvEXT"));
	gl->MultiTexEnviEXT = reinterpret_cast<gl_multi_tex_envi_ext_t*>(soglLoadSymbol("glMultiTexEnviEXT"));
	gl->MultiTexEnvivEXT = reinterpret_cast<gl_multi_tex_enviv_ext_t*>(soglLoadSymbol("glMultiTexEnvivEXT"));
	gl->MultiTexGendEXT = reinterpret_cast<gl_multi_tex_gend_ext_t*>(soglLoadSymbol("glMultiTexGendEXT"));
	gl->MultiTexGendvEXT = reinterpret_cast<gl_multi_tex_gendv_ext_t*>(soglLoadSymbol("glMultiTexGendvEXT"));
	gl->MultiTexGenfEXT = reinterpret_cast<gl_multi_tex_genf_ext_t*>(soglLoadSymbol("glMultiTexGenfEXT"));
	gl->MultiTexGenfvEXT = reinterpret_cast<gl_multi_tex_genfv_ext_t*>(soglLoadSymbol("glMultiTexGenfvEXT"));
	gl->MultiTexGeniEXT = reinterpret_cast<gl_multi_tex_geni_ext_t*>(soglLoadSymbol("glMultiTexGeniEXT"));
	gl->MultiTexGenivEXT = reinterpret_cast<gl_multi_tex_geniv_ext_t*>(soglLoadSymbol("glMultiTexGenivEXT"));
	gl->MultiTexImage1DEXT = reinterpret_cast<gl_multi_tex_image1dext_t*>(soglLoadSymbol("glMultiTexImage1DEXT"));
	gl->MultiTexImage2DEXT = reinterpret_cast<gl_multi_tex_image2dext_t*>(soglLoadSymbol("glMultiTexImage2DEXT"));
	gl->MultiTexImage3DEXT = reinterpret_cast<gl_multi_tex_image3dext_t*>(soglLoadSymbol("glMultiTexImage3DEXT"));
	gl->MultiTexParameterIivEXT = reinterpret_cast<gl_multi_tex_parameter_iiv_ext_t*>(soglLoadSymbol("glMultiTexParameterIivEXT"));
	gl->MultiTexParameterIuivEXT = reinterpret_cast<gl_multi_tex_parameter_iuiv_ext_t*>(soglLoadSymbol("glMultiTexParameterIuivEXT"));
	gl->MultiTexParameterfEXT = reinterpret_cast<gl_multi_tex_parameterf_ext_t*>(soglLoadSymbol("glMultiTexParameterfEXT"));
	gl->MultiTexParameterfvEXT = reinterpret_cast<gl_multi_tex_parameterfv_ext_t*>(soglLoadSymbol("glMultiTexParameterfvEXT"));
	gl->MultiTexParameteriEXT = reinterpret_cast<gl_multi_tex_parameteri_ext_t*>(soglLoadSymbol("glMultiTexParameteriEXT"));
	gl->MultiTexParameterivEXT = reinterpret_cast<gl_multi_tex_parameteriv_ext_t*>(soglLoadSymbol("glMultiTexParameterivEXT"));
	gl->MultiTexRenderbufferEXT = reinterpret_cast<gl_multi_tex_renderbuffer_ext_t*>(soglLoadSymbol("glMultiTexRenderbufferEXT"));
	gl->MultiTexSubImage1DEXT = reinterpret_cast<gl_multi_tex_sub_image1dext_t*>(soglLoadSymbol("glMultiTexSubImage1DEXT"));
	gl->MultiTexSubImage2DEXT = reinterpret_cast<gl_multi_tex_sub_image2dext_t*>(soglLoadSymbol("glMultiTexSubImage2DEXT"));
	gl->MultiTexSubImage3DEXT = reinterpret_cast<gl_multi_tex_sub_image3dext_t*>(soglLoadSymbol("glMultiTexSubImage3DEXT"));
	gl->MulticastBarrierNV = reinterpret_cast<gl_multicast_barrier_nv_t*>(soglLoadSymbol("glMulticastBarrierNV"));
	gl->MulticastBlitFramebufferNV = reinterpret_cast<gl_multicast_blit_framebuffer_nv_t*>(soglLoadSymbol("glMulticastBlitFramebufferNV"));
	gl->MulticastBufferSubDataNV = reinterpret_cast<gl_multicast_buffer_sub_data_nv_t*>(soglLoadSymbol("glMulticastBufferSubDataNV"));
	gl->MulticastCopyBufferSubDataNV = reinterpret_cast<gl_multicast_copy_buffer_sub_data_nv_t*>(soglLoadSymbol("glMulticastCopyBufferSubDataNV"));
	gl->MulticastCopyImageSubDataNV = reinterpret_cast<gl_multicast_copy_image_sub_data_nv_t*>(soglLoadSymbol("glMulticastCopyImageSubDataNV"));
	gl->MulticastFramebufferSampleLocationsfvNV = reinterpret_cast<gl_multicast_framebuffer_sample_locationsfv_nv_t*>(soglLoadSymbol("glMulticastFramebufferSampleLocationsfvNV"));
	gl->MulticastGetQueryObjecti64vNV = reinterpret_cast<gl_multicast_get_query_objecti64v_nv_t*>(soglLoadSymbol("glMulticastGetQueryObjecti64vNV"));
	gl->MulticastGetQueryObjectivNV = reinterpret_cast<gl_multicast_get_query_objectiv_nv_t*>(soglLoadSymbol("glMulticastGetQueryObjectivNV"));
	gl->MulticastGetQueryObjectui64vNV = reinterpret_cast<gl_multicast_get_query_objectui64v_nv_t*>(soglLoadSymbol("glMulticastGetQueryObjectui64vNV"));
	gl->MulticastGetQueryObjectuivNV = reinterpret_cast<gl_multicast_get_query_objectuiv_nv_t*>(soglLoadSymbol("glMulticastGetQueryObjectuivNV"));
	gl->MulticastWaitSyncNV = reinterpret_cast<gl_multicast_wait_sync_nv_t*>(soglLoadSymbol("glMulticastWaitSyncNV"));
	gl->NamedBufferData = reinterpret_cast<gl_named_buffer_data_t*>(soglLoadSymbol("glNamedBufferData"));
	gl->NamedBufferDataEXT = reinterpret_cast<gl_named_buffer_data_ext_t*>(soglLoadSymbol("glNamedBufferDataEXT"));
	gl->NamedBufferStorage = reinterpret_cast<gl_named_buffer_storage_t*>(soglLoadSymbol("glNamedBufferStorage"));
	gl->NamedBufferStorageEXT = reinterpret_cast<gl_named_buffer_storage_ext_t*>(soglLoadSymbol("glNamedBufferStorageEXT"));
	gl->NamedBufferStorageExternalEXT = reinterpret_cast<gl_named_buffer_storage_external_ext_t*>(soglLoadSymbol("glNamedBufferStorageExternalEXT"));
	gl->NamedBufferStorageMemEXT = reinterpret_cast<gl_named_buffer_storage_mem_ext_t*>(soglLoadSymbol("glNamedBufferStorageMemEXT"));
	gl->NamedBufferSubData = reinterpret_cast<gl_named_buffer_sub_data_t*>(soglLoadSymbol("glNamedBufferSubData"));
	gl->NamedBufferSubDataEXT = reinterpret_cast<gl_named_buffer_sub_data_ext_t*>(soglLoadSymbol("glNamedBufferSubDataEXT"));
	gl->NamedCopyBufferSubDataEXT = reinterpret_cast<gl_named_copy_buffer_sub_data_ext_t*>(soglLoadSymbol("glNamedCopyBufferSubDataEXT"));
	gl->NamedFramebufferDrawBuffer = reinterpret_cast<gl_named_framebuffer_draw_buffer_t*>(soglLoadSymbol("glNamedFramebufferDrawBuffer"));
	gl->NamedFramebufferDrawBuffers = reinterpret_cast<gl_named_framebuffer_draw_buffers_t*>(soglLoadSymbol("glNamedFramebufferDrawBuffers"));
	gl->NamedFramebufferParameteri = reinterpret_cast<gl_named_framebuffer_parameteri_t*>(soglLoadSymbol("glNamedFramebufferParameteri"));
	gl->NamedFramebufferParameteriEXT = reinterpret_cast<gl_named_framebuffer_parameteri_ext_t*>(soglLoadSymbol("glNamedFramebufferParameteriEXT"));
	gl->NamedFramebufferReadBuffer = reinterpret_cast<gl_named_framebuffer_read_buffer_t*>(soglLoadSymbol("glNamedFramebufferReadBuffer"));
	gl->NamedFramebufferRenderbuffer = reinterpret_cast<gl_named_framebuffer_renderbuffer_t*>(soglLoadSymbol("glNamedFramebufferRenderbuffer"));
	gl->NamedFramebufferRenderbufferEXT = reinterpret_cast<gl_named_framebuffer_renderbuffer_ext_t*>(soglLoadSymbol("glNamedFramebufferRenderbufferEXT"));
	gl->NamedFramebufferSampleLocationsfvARB = reinterpret_cast<gl_named_framebuffer_sample_locationsfv_arb_t*>(soglLoadSymbol("glNamedFramebufferSampleLocationsfvARB"));
	gl->NamedFramebufferSampleLocationsfvNV = reinterpret_cast<gl_named_framebuffer_sample_locationsfv_nv_t*>(soglLoadSymbol("glNamedFramebufferSampleLocationsfvNV"));
	gl->NamedFramebufferSamplePositionsfvAMD = reinterpret_cast<gl_named_framebuffer_sample_positionsfv_amd_t*>(soglLoadSymbol("glNamedFramebufferSamplePositionsfvAMD"));
	gl->NamedFramebufferTexture = reinterpret_cast<gl_named_framebuffer_texture_t*>(soglLoadSymbol("glNamedFramebufferTexture"));
	gl->NamedFramebufferTexture1DEXT = reinterpret_cast<gl_named_framebuffer_texture1dext_t*>(soglLoadSymbol("glNamedFramebufferTexture1DEXT"));
	gl->NamedFramebufferTexture2DEXT = reinterpret_cast<gl_named_framebuffer_texture2dext_t*>(soglLoadSymbol("glNamedFramebufferTexture2DEXT"));
	gl->NamedFramebufferTexture3DEXT = reinterpret_cast<gl_named_framebuffer_texture3dext_t*>(soglLoadSymbol("glNamedFramebufferTexture3DEXT"));
	gl->NamedFramebufferTextureEXT = reinterpret_cast<gl_named_framebuffer_texture_ext_t*>(soglLoadSymbol("glNamedFramebufferTextureEXT"));
	gl->NamedFramebufferTextureFaceEXT = reinterpret_cast<gl_named_framebuffer_texture_face_ext_t*>(soglLoadSymbol("glNamedFramebufferTextureFaceEXT"));
	gl->NamedFramebufferTextureLayer = reinterpret_cast<gl_named_framebuffer_texture_layer_t*>(soglLoadSymbol("glNamedFramebufferTextureLayer"));
	gl->NamedFramebufferTextureLayerEXT = reinterpret_cast<gl_named_framebuffer_texture_layer_ext_t*>(soglLoadSymbol("glNamedFramebufferTextureLayerEXT"));
	gl->NamedProgramLocalParameter4dEXT = reinterpret_cast<gl_named_program_local_parameter4d_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameter4dEXT"));
	gl->NamedProgramLocalParameter4dvEXT = reinterpret_cast<gl_named_program_local_parameter4dv_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameter4dvEXT"));
	gl->NamedProgramLocalParameter4fEXT = reinterpret_cast<gl_named_program_local_parameter4f_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameter4fEXT"));
	gl->NamedProgramLocalParameter4fvEXT = reinterpret_cast<gl_named_program_local_parameter4fv_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameter4fvEXT"));
	gl->NamedProgramLocalParameterI4iEXT = reinterpret_cast<gl_named_program_local_parameter_i4i_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameterI4iEXT"));
	gl->NamedProgramLocalParameterI4ivEXT = reinterpret_cast<gl_named_program_local_parameter_i4iv_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameterI4ivEXT"));
	gl->NamedProgramLocalParameterI4uiEXT = reinterpret_cast<gl_named_program_local_parameter_i4ui_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameterI4uiEXT"));
	gl->NamedProgramLocalParameterI4uivEXT = reinterpret_cast<gl_named_program_local_parameter_i4uiv_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameterI4uivEXT"));
	gl->NamedProgramLocalParameters4fvEXT = reinterpret_cast<gl_named_program_local_parameters4fv_ext_t*>(soglLoadSymbol("glNamedProgramLocalParameters4fvEXT"));
	gl->NamedProgramLocalParametersI4ivEXT = reinterpret_cast<gl_named_program_local_parameters_i4iv_ext_t*>(soglLoadSymbol("glNamedProgramLocalParametersI4ivEXT"));
	gl->NamedProgramLocalParametersI4uivEXT = reinterpret_cast<gl_named_program_local_parameters_i4uiv_ext_t*>(soglLoadSymbol("glNamedProgramLocalParametersI4uivEXT"));
	gl->NamedProgramStringEXT = reinterpret_cast<gl_named_program_string_ext_t*>(soglLoadSymbol("glNamedProgramStringEXT"));
	gl->NamedRenderbufferStorage = reinterpret_cast<gl_named_renderbuffer_storage_t*>(soglLoadSymbol("glNamedRenderbufferStorage"));
	gl->NamedRenderbufferStorageEXT = reinterpret_cast<gl_named_renderbuffer_storage_ext_t*>(soglLoadSymbol("glNamedRenderbufferStorageEXT"));
	gl->NamedRenderbufferStorageMultisample = reinterpret_cast<gl_named_renderbuffer_storage_multisample_t*>(soglLoadSymbol("glNamedRenderbufferStorageMultisample"));
	gl->NamedRenderbufferStorageMultisampleCoverageEXT = reinterpret_cast<gl_named_renderbuffer_storage_multisample_coverage_ext_t*>(soglLoadSymbol("glNamedRenderbufferStorageMultisampleCoverageEXT"));
	gl->NamedRenderbufferStorageMultisampleEXT = reinterpret_cast<gl_named_renderbuffer_storage_multisample_ext_t*>(soglLoadSymbol("glNamedRenderbufferStorageMultisampleEXT"));
	gl->NamedStringARB = reinterpret_cast<gl_named_string_arb_t*>(soglLoadSymbol("glNamedStringARB"));
	gl->NewObjectBufferATI = reinterpret_cast<gl_new_object_buffer_ati_t*>(soglLoadSymbol("glNewObjectBufferATI"));
	gl->Normal3fVertex3fSUN = reinterpret_cast<gl_normal3f_vertex3f_sun_t*>(soglLoadSymbol("glNormal3fVertex3fSUN"));
	gl->Normal3fVertex3fvSUN = reinterpret_cast<gl_normal3f_vertex3fv_sun_t*>(soglLoadSymbol("glNormal3fVertex3fvSUN"));
	gl->Normal3hNV = reinterpret_cast<gl_normal3h_nv_t*>(soglLoadSymbol("glNormal3hNV"));
	gl->Normal3hvNV = reinterpret_cast<gl_normal3hv_nv_t*>(soglLoadSymbol("glNormal3hvNV"));
	gl->NormalFormatNV = reinterpret_cast<gl_normal_format_nv_t*>(soglLoadSymbol("glNormalFormatNV"));
	gl->NormalP3ui = reinterpret_cast<gl_normal_p3ui_t*>(soglLoadSymbol("glNormalP3ui"));
	gl->NormalP3uiv = reinterpret_cast<gl_normal_p3uiv_t*>(soglLoadSymbol("glNormalP3uiv"));
	gl->NormalPointerEXT = reinterpret_cast<gl_normal_pointer_ext_t*>(soglLoadSymbol("glNormalPointerEXT"));
	gl->NormalPointerListIBM = reinterpret_cast<gl_normal_pointer_list_ibm_t*>(soglLoadSymbol("glNormalPointerListIBM"));
	gl->NormalPointervINTEL = reinterpret_cast<gl_normal_pointerv_intel_t*>(soglLoadSymbol("glNormalPointervINTEL"));
	gl->NormalStream3bATI = reinterpret_cast<gl_normal_stream3b_ati_t*>(soglLoadSymbol("glNormalStream3bATI"));
	gl->NormalStream3bvATI = reinterpret_cast<gl_normal_stream3bv_ati_t*>(soglLoadSymbol("glNormalStream3bvATI"));
	gl->NormalStream3dATI = reinterpret_cast<gl_normal_stream3d_ati_t*>(soglLoadSymbol("glNormalStream3dATI"));
	gl->NormalStream3dvATI = reinterpret_cast<gl_normal_stream3dv_ati_t*>(soglLoadSymbol("glNormalStream3dvATI"));
	gl->NormalStream3fATI = reinterpret_cast<gl_normal_stream3f_ati_t*>(soglLoadSymbol("glNormalStream3fATI"));
	gl->NormalStream3fvATI = reinterpret_cast<gl_normal_stream3fv_ati_t*>(soglLoadSymbol("glNormalStream3fvATI"));
	gl->NormalStream3iATI = reinterpret_cast<gl_normal_stream3i_ati_t*>(soglLoadSymbol("glNormalStream3iATI"));
	gl->NormalStream3ivATI = reinterpret_cast<gl_normal_stream3iv_ati_t*>(soglLoadSymbol("glNormalStream3ivATI"));
	gl->NormalStream3sATI = reinterpret_cast<gl_normal_stream3s_ati_t*>(soglLoadSymbol("glNormalStream3sATI"));
	gl->NormalStream3svATI = reinterpret_cast<gl_normal_stream3sv_ati_t*>(soglLoadSymbol("glNormalStream3svATI"));
	gl->ObjectLabel = reinterpret_cast<gl_object_label_t*>(soglLoadSymbol("glObjectLabel"));
	gl->ObjectPtrLabel = reinterpret_cast<gl_object_ptr_label_t*>(soglLoadSymbol("glObjectPtrLabel"));
	gl->ObjectPurgeableAPPLE = reinterpret_cast<gl_object_purgeable_apple_t*>(soglLoadSymbol("glObjectPurgeableAPPLE"));
	gl->ObjectUnpurgeableAPPLE = reinterpret_cast<gl_object_unpurgeable_apple_t*>(soglLoadSymbol("glObjectUnpurgeableAPPLE"));
	gl->PNTrianglesfATI = reinterpret_cast<gl_pntrianglesf_ati_t*>(soglLoadSymbol("glPNTrianglesfATI"));
	gl->PNTrianglesiATI = reinterpret_cast<gl_pntrianglesi_ati_t*>(soglLoadSymbol("glPNTrianglesiATI"));
	gl->PassTexCoordATI = reinterpret_cast<gl_pass_tex_coord_ati_t*>(soglLoadSymbol("glPassTexCoordATI"));
	gl->PatchParameterfv = reinterpret_cast<gl_patch_parameterfv_t*>(soglLoadSymbol("glPatchParameterfv"));
	gl->PatchParameteri = reinterpret_cast<gl_patch_parameteri_t*>(soglLoadSymbol("glPatchParameteri"));
	gl->PathColorGenNV = reinterpret_cast<gl_path_color_gen_nv_t*>(soglLoadSymbol("glPathColorGenNV"));
	gl->PathCommandsNV = reinterpret_cast<gl_path_commands_nv_t*>(soglLoadSymbol("glPathCommandsNV"));
	gl->PathCoordsNV = reinterpret_cast<gl_path_coords_nv_t*>(soglLoadSymbol("glPathCoordsNV"));
	gl->PathCoverDepthFuncNV = reinterpret_cast<gl_path_cover_depth_func_nv_t*>(soglLoadSymbol("glPathCoverDepthFuncNV"));
	gl->PathDashArrayNV = reinterpret_cast<gl_path_dash_array_nv_t*>(soglLoadSymbol("glPathDashArrayNV"));
	gl->PathFogGenNV = reinterpret_cast<gl_path_fog_gen_nv_t*>(soglLoadSymbol("glPathFogGenNV"));
	gl->PathGlyphIndexArrayNV = reinterpret_cast<gl_path_glyph_index_array_nv_t*>(soglLoadSymbol("glPathGlyphIndexArrayNV"));
	gl->PathGlyphIndexRangeNV = reinterpret_cast<gl_path_glyph_index_range_nv_t*>(soglLoadSymbol("glPathGlyphIndexRangeNV"));
	gl->PathGlyphRangeNV = reinterpret_cast<gl_path_glyph_range_nv_t*>(soglLoadSymbol("glPathGlyphRangeNV"));
	gl->PathGlyphsNV = reinterpret_cast<gl_path_glyphs_nv_t*>(soglLoadSymbol("glPathGlyphsNV"));
	gl->PathMemoryGlyphIndexArrayNV = reinterpret_cast<gl_path_memory_glyph_index_array_nv_t*>(soglLoadSymbol("glPathMemoryGlyphIndexArrayNV"));
	gl->PathParameterfNV = reinterpret_cast<gl_path_parameterf_nv_t*>(soglLoadSymbol("glPathParameterfNV"));
	gl->PathParameterfvNV = reinterpret_cast<gl_path_parameterfv_nv_t*>(soglLoadSymbol("glPathParameterfvNV"));
	gl->PathParameteriNV = reinterpret_cast<gl_path_parameteri_nv_t*>(soglLoadSymbol("glPathParameteriNV"));
	gl->PathParameterivNV = reinterpret_cast<gl_path_parameteriv_nv_t*>(soglLoadSymbol("glPathParameterivNV"));
	gl->PathStencilDepthOffsetNV = reinterpret_cast<gl_path_stencil_depth_offset_nv_t*>(soglLoadSymbol("glPathStencilDepthOffsetNV"));
	gl->PathStencilFuncNV = reinterpret_cast<gl_path_stencil_func_nv_t*>(soglLoadSymbol("glPathStencilFuncNV"));
	gl->PathStringNV = reinterpret_cast<gl_path_string_nv_t*>(soglLoadSymbol("glPathStringNV"));
	gl->PathSubCommandsNV = reinterpret_cast<gl_path_sub_commands_nv_t*>(soglLoadSymbol("glPathSubCommandsNV"));
	gl->PathSubCoordsNV = reinterpret_cast<gl_path_sub_coords_nv_t*>(soglLoadSymbol("glPathSubCoordsNV"));
	gl->PathTexGenNV = reinterpret_cast<gl_path_tex_gen_nv_t*>(soglLoadSymbol("glPathTexGenNV"));
	gl->PauseTransformFeedback = reinterpret_cast<gl_pause_transform_feedback_t*>(soglLoadSymbol("glPauseTransformFeedback"));
	gl->PauseTransformFeedbackNV = reinterpret_cast<gl_pause_transform_feedback_nv_t*>(soglLoadSymbol("glPauseTransformFeedbackNV"));
	gl->PixelDataRangeNV = reinterpret_cast<gl_pixel_data_range_nv_t*>(soglLoadSymbol("glPixelDataRangeNV"));
	gl->PixelTexGenSGIX = reinterpret_cast<gl_pixel_tex_gen_sgix_t*>(soglLoadSymbol("glPixelTexGenSGIX"));
	gl->PixelTransformParameterfEXT = reinterpret_cast<gl_pixel_transform_parameterf_ext_t*>(soglLoadSymbol("glPixelTransformParameterfEXT"));
	gl->PixelTransformParameterfvEXT = reinterpret_cast<gl_pixel_transform_parameterfv_ext_t*>(soglLoadSymbol("glPixelTransformParameterfvEXT"));
	gl->PixelTransformParameteriEXT = reinterpret_cast<gl_pixel_transform_parameteri_ext_t*>(soglLoadSymbol("glPixelTransformParameteriEXT"));
	gl->PixelTransformParameterivEXT = reinterpret_cast<gl_pixel_transform_parameteriv_ext_t*>(soglLoadSymbol("glPixelTransformParameterivEXT"));
	gl->PointAlongPathNV = reinterpret_cast<gl_point_along_path_nv_t*>(soglLoadSymbol("glPointAlongPathNV"));
	gl->PointParameterf = reinterpret_cast<gl_point_parameterf_t*>(soglLoadSymbol("glPointParameterf"));
	gl->PointParameterfARB = reinterpret_cast<gl_point_parameterf_arb_t*>(soglLoadSymbol("glPointParameterfARB"));
	gl->PointParameterfEXT = reinterpret_cast<gl_point_parameterf_ext_t*>(soglLoadSymbol("glPointParameterfEXT"));
	gl->PointParameterfv = reinterpret_cast<gl_point_parameterfv_t*>(soglLoadSymbol("glPointParameterfv"));
	gl->PointParameterfvARB = reinterpret_cast<gl_point_parameterfv_arb_t*>(soglLoadSymbol("glPointParameterfvARB"));
	gl->PointParameterfvEXT = reinterpret_cast<gl_point_parameterfv_ext_t*>(soglLoadSymbol("glPointParameterfvEXT"));
	gl->PointParameteri = reinterpret_cast<gl_point_parameteri_t*>(soglLoadSymbol("glPointParameteri"));
	gl->PointParameteriNV = reinterpret_cast<gl_point_parameteri_nv_t*>(soglLoadSymbol("glPointParameteriNV"));
	gl->PointParameteriv = reinterpret_cast<gl_point_parameteriv_t*>(soglLoadSymbol("glPointParameteriv"));
	gl->PointParameterivNV = reinterpret_cast<gl_point_parameteriv_nv_t*>(soglLoadSymbol("glPointParameterivNV"));
	gl->PollAsyncSGIX = reinterpret_cast<gl_poll_async_sgix_t*>(soglLoadSymbol("glPollAsyncSGIX"));
	gl->PolygonOffsetClamp = reinterpret_cast<gl_polygon_offset_clamp_t*>(soglLoadSymbol("glPolygonOffsetClamp"));
	gl->PolygonOffsetClampEXT = reinterpret_cast<gl_polygon_offset_clamp_ext_t*>(soglLoadSymbol("glPolygonOffsetClampEXT"));
	gl->PolygonOffsetEXT = reinterpret_cast<gl_polygon_offset_ext_t*>(soglLoadSymbol("glPolygonOffsetEXT"));
	gl->PopDebugGroup = reinterpret_cast<gl_pop_debug_group_t*>(soglLoadSymbol("glPopDebugGroup"));
	gl->PopGroupMarkerEXT = reinterpret_cast<gl_pop_group_marker_ext_t*>(soglLoadSymbol("glPopGroupMarkerEXT"));
	gl->PresentFrameDualFillNV = reinterpret_cast<gl_present_frame_dual_fill_nv_t*>(soglLoadSymbol("glPresentFrameDualFillNV"));
	gl->PresentFrameKeyedNV = reinterpret_cast<gl_present_frame_keyed_nv_t*>(soglLoadSymbol("glPresentFrameKeyedNV"));
	gl->PrimitiveBoundingBoxARB = reinterpret_cast<gl_primitive_bounding_box_arb_t*>(soglLoadSymbol("glPrimitiveBoundingBoxARB"));
	gl->PrimitiveRestartIndex = reinterpret_cast<gl_primitive_restart_index_t*>(soglLoadSymbol("glPrimitiveRestartIndex"));
	gl->PrimitiveRestartIndexNV = reinterpret_cast<gl_primitive_restart_index_nv_t*>(soglLoadSymbol("glPrimitiveRestartIndexNV"));
	gl->PrimitiveRestartNV = reinterpret_cast<gl_primitive_restart_nv_t*>(soglLoadSymbol("glPrimitiveRestartNV"));
	gl->PrioritizeTexturesEXT = reinterpret_cast<gl_prioritize_textures_ext_t*>(soglLoadSymbol("glPrioritizeTexturesEXT"));
	gl->ProgramBinary = reinterpret_cast<gl_program_binary_t*>(soglLoadSymbol("glProgramBinary"));
	gl->ProgramBufferParametersIivNV = reinterpret_cast<gl_program_buffer_parameters_iiv_nv_t*>(soglLoadSymbol("glProgramBufferParametersIivNV"));
	gl->ProgramBufferParametersIuivNV = reinterpret_cast<gl_program_buffer_parameters_iuiv_nv_t*>(soglLoadSymbol("glProgramBufferParametersIuivNV"));
	gl->ProgramBufferParametersfvNV = reinterpret_cast<gl_program_buffer_parametersfv_nv_t*>(soglLoadSymbol("glProgramBufferParametersfvNV"));
	gl->ProgramEnvParameter4dARB = reinterpret_cast<gl_program_env_parameter4d_arb_t*>(soglLoadSymbol("glProgramEnvParameter4dARB"));
	gl->ProgramEnvParameter4dvARB = reinterpret_cast<gl_program_env_parameter4dv_arb_t*>(soglLoadSymbol("glProgramEnvParameter4dvARB"));
	gl->ProgramEnvParameter4fARB = reinterpret_cast<gl_program_env_parameter4f_arb_t*>(soglLoadSymbol("glProgramEnvParameter4fARB"));
	gl->ProgramEnvParameter4fvARB = reinterpret_cast<gl_program_env_parameter4fv_arb_t*>(soglLoadSymbol("glProgramEnvParameter4fvARB"));
	gl->ProgramEnvParameterI4iNV = reinterpret_cast<gl_program_env_parameter_i4i_nv_t*>(soglLoadSymbol("glProgramEnvParameterI4iNV"));
	gl->ProgramEnvParameterI4ivNV = reinterpret_cast<gl_program_env_parameter_i4iv_nv_t*>(soglLoadSymbol("glProgramEnvParameterI4ivNV"));
	gl->ProgramEnvParameterI4uiNV = reinterpret_cast<gl_program_env_parameter_i4ui_nv_t*>(soglLoadSymbol("glProgramEnvParameterI4uiNV"));
	gl->ProgramEnvParameterI4uivNV = reinterpret_cast<gl_program_env_parameter_i4uiv_nv_t*>(soglLoadSymbol("glProgramEnvParameterI4uivNV"));
	gl->ProgramEnvParameters4fvEXT = reinterpret_cast<gl_program_env_parameters4fv_ext_t*>(soglLoadSymbol("glProgramEnvParameters4fvEXT"));
	gl->ProgramEnvParametersI4ivNV = reinterpret_cast<gl_program_env_parameters_i4iv_nv_t*>(soglLoadSymbol("glProgramEnvParametersI4ivNV"));
	gl->ProgramEnvParametersI4uivNV = reinterpret_cast<gl_program_env_parameters_i4uiv_nv_t*>(soglLoadSymbol("glProgramEnvParametersI4uivNV"));
	gl->ProgramLocalParameter4dARB = reinterpret_cast<gl_program_local_parameter4d_arb_t*>(soglLoadSymbol("glProgramLocalParameter4dARB"));
	gl->ProgramLocalParameter4dvARB = reinterpret_cast<gl_program_local_parameter4dv_arb_t*>(soglLoadSymbol("glProgramLocalParameter4dvARB"));
	gl->ProgramLocalParameter4fARB = reinterpret_cast<gl_program_local_parameter4f_arb_t*>(soglLoadSymbol("glProgramLocalParameter4fARB"));
	gl->ProgramLocalParameter4fvARB = reinterpret_cast<gl_program_local_parameter4fv_arb_t*>(soglLoadSymbol("glProgramLocalParameter4fvARB"));
	gl->ProgramLocalParameterI4iNV = reinterpret_cast<gl_program_local_parameter_i4i_nv_t*>(soglLoadSymbol("glProgramLocalParameterI4iNV"));
	gl->ProgramLocalParameterI4ivNV = reinterpret_cast<gl_program_local_parameter_i4iv_nv_t*>(soglLoadSymbol("glProgramLocalParameterI4ivNV"));
	gl->ProgramLocalParameterI4uiNV = reinterpret_cast<gl_program_local_parameter_i4ui_nv_t*>(soglLoadSymbol("glProgramLocalParameterI4uiNV"));
	gl->ProgramLocalParameterI4uivNV = reinterpret_cast<gl_program_local_parameter_i4uiv_nv_t*>(soglLoadSymbol("glProgramLocalParameterI4uivNV"));
	gl->ProgramLocalParameters4fvEXT = reinterpret_cast<gl_program_local_parameters4fv_ext_t*>(soglLoadSymbol("glProgramLocalParameters4fvEXT"));
	gl->ProgramLocalParametersI4ivNV = reinterpret_cast<gl_program_local_parameters_i4iv_nv_t*>(soglLoadSymbol("glProgramLocalParametersI4ivNV"));
	gl->ProgramLocalParametersI4uivNV = reinterpret_cast<gl_program_local_parameters_i4uiv_nv_t*>(soglLoadSymbol("glProgramLocalParametersI4uivNV"));
	gl->ProgramNamedParameter4dNV = reinterpret_cast<gl_program_named_parameter4d_nv_t*>(soglLoadSymbol("glProgramNamedParameter4dNV"));
	gl->ProgramNamedParameter4dvNV = reinterpret_cast<gl_program_named_parameter4dv_nv_t*>(soglLoadSymbol("glProgramNamedParameter4dvNV"));
	gl->ProgramNamedParameter4fNV = reinterpret_cast<gl_program_named_parameter4f_nv_t*>(soglLoadSymbol("glProgramNamedParameter4fNV"));
	gl->ProgramNamedParameter4fvNV = reinterpret_cast<gl_program_named_parameter4fv_nv_t*>(soglLoadSymbol("glProgramNamedParameter4fvNV"));
	gl->ProgramParameter4dNV = reinterpret_cast<gl_program_parameter4d_nv_t*>(soglLoadSymbol("glProgramParameter4dNV"));
	gl->ProgramParameter4dvNV = reinterpret_cast<gl_program_parameter4dv_nv_t*>(soglLoadSymbol("glProgramParameter4dvNV"));
	gl->ProgramParameter4fNV = reinterpret_cast<gl_program_parameter4f_nv_t*>(soglLoadSymbol("glProgramParameter4fNV"));
	gl->ProgramParameter4fvNV = reinterpret_cast<gl_program_parameter4fv_nv_t*>(soglLoadSymbol("glProgramParameter4fvNV"));
	gl->ProgramParameteri = reinterpret_cast<gl_program_parameteri_t*>(soglLoadSymbol("glProgramParameteri"));
	gl->ProgramParameteriARB = reinterpret_cast<gl_program_parameteri_arb_t*>(soglLoadSymbol("glProgramParameteriARB"));
	gl->ProgramParameteriEXT = reinterpret_cast<gl_program_parameteri_ext_t*>(soglLoadSymbol("glProgramParameteriEXT"));
	gl->ProgramParameters4dvNV = reinterpret_cast<gl_program_parameters4dv_nv_t*>(soglLoadSymbol("glProgramParameters4dvNV"));
	gl->ProgramParameters4fvNV = reinterpret_cast<gl_program_parameters4fv_nv_t*>(soglLoadSymbol("glProgramParameters4fvNV"));
	gl->ProgramPathFragmentInputGenNV = reinterpret_cast<gl_program_path_fragment_input_gen_nv_t*>(soglLoadSymbol("glProgramPathFragmentInputGenNV"));
	gl->ProgramStringARB = reinterpret_cast<gl_program_string_arb_t*>(soglLoadSymbol("glProgramStringARB"));
	gl->ProgramUniform1d = reinterpret_cast<gl_program_uniform1d_t*>(soglLoadSymbol("glProgramUniform1d"));
	gl->ProgramUniform1dv = reinterpret_cast<gl_program_uniform1dv_t*>(soglLoadSymbol("glProgramUniform1dv"));
	gl->ProgramUniform1f = reinterpret_cast<gl_program_uniform1f_t*>(soglLoadSymbol("glProgramUniform1f"));
	gl->ProgramUniform1fEXT = reinterpret_cast<gl_program_uniform1f_ext_t*>(soglLoadSymbol("glProgramUniform1fEXT"));
	gl->ProgramUniform1fv = reinterpret_cast<gl_program_uniform1fv_t*>(soglLoadSymbol("glProgramUniform1fv"));
	gl->ProgramUniform1fvEXT = reinterpret_cast<gl_program_uniform1fv_ext_t*>(soglLoadSymbol("glProgramUniform1fvEXT"));
	gl->ProgramUniform1i = reinterpret_cast<gl_program_uniform1i_t*>(soglLoadSymbol("glProgramUniform1i"));
	gl->ProgramUniform1i64ARB = reinterpret_cast<gl_program_uniform1i64arb_t*>(soglLoadSymbol("glProgramUniform1i64ARB"));
	gl->ProgramUniform1i64NV = reinterpret_cast<gl_program_uniform1i64nv_t*>(soglLoadSymbol("glProgramUniform1i64NV"));
	gl->ProgramUniform1i64vARB = reinterpret_cast<gl_program_uniform1i64v_arb_t*>(soglLoadSymbol("glProgramUniform1i64vARB"));
	gl->ProgramUniform1i64vNV = reinterpret_cast<gl_program_uniform1i64v_nv_t*>(soglLoadSymbol("glProgramUniform1i64vNV"));
	gl->ProgramUniform1iEXT = reinterpret_cast<gl_program_uniform1i_ext_t*>(soglLoadSymbol("glProgramUniform1iEXT"));
	gl->ProgramUniform1iv = reinterpret_cast<gl_program_uniform1iv_t*>(soglLoadSymbol("glProgramUniform1iv"));
	gl->ProgramUniform1ivEXT = reinterpret_cast<gl_program_uniform1iv_ext_t*>(soglLoadSymbol("glProgramUniform1ivEXT"));
	gl->ProgramUniform1ui = reinterpret_cast<gl_program_uniform1ui_t*>(soglLoadSymbol("glProgramUniform1ui"));
	gl->ProgramUniform1ui64ARB = reinterpret_cast<gl_program_uniform1ui64arb_t*>(soglLoadSymbol("glProgramUniform1ui64ARB"));
	gl->ProgramUniform1ui64NV = reinterpret_cast<gl_program_uniform1ui64nv_t*>(soglLoadSymbol("glProgramUniform1ui64NV"));
	gl->ProgramUniform1ui64vARB = reinterpret_cast<gl_program_uniform1ui64v_arb_t*>(soglLoadSymbol("glProgramUniform1ui64vARB"));
	gl->ProgramUniform1ui64vNV = reinterpret_cast<gl_program_uniform1ui64v_nv_t*>(soglLoadSymbol("glProgramUniform1ui64vNV"));
	gl->ProgramUniform1uiEXT = reinterpret_cast<gl_program_uniform1ui_ext_t*>(soglLoadSymbol("glProgramUniform1uiEXT"));
	gl->ProgramUniform1uiv = reinterpret_cast<gl_program_uniform1uiv_t*>(soglLoadSymbol("glProgramUniform1uiv"));
	gl->ProgramUniform1uivEXT = reinterpret_cast<gl_program_uniform1uiv_ext_t*>(soglLoadSymbol("glProgramUniform1uivEXT"));
	gl->ProgramUniform2d = reinterpret_cast<gl_program_uniform2d_t*>(soglLoadSymbol("glProgramUniform2d"));
	gl->ProgramUniform2dv = reinterpret_cast<gl_program_uniform2dv_t*>(soglLoadSymbol("glProgramUniform2dv"));
	gl->ProgramUniform2f = reinterpret_cast<gl_program_uniform2f_t*>(soglLoadSymbol("glProgramUniform2f"));
	gl->ProgramUniform2fEXT = reinterpret_cast<gl_program_uniform2f_ext_t*>(soglLoadSymbol("glProgramUniform2fEXT"));
	gl->ProgramUniform2fv = reinterpret_cast<gl_program_uniform2fv_t*>(soglLoadSymbol("glProgramUniform2fv"));
	gl->ProgramUniform2fvEXT = reinterpret_cast<gl_program_uniform2fv_ext_t*>(soglLoadSymbol("glProgramUniform2fvEXT"));
	gl->ProgramUniform2i = reinterpret_cast<gl_program_uniform2i_t*>(soglLoadSymbol("glProgramUniform2i"));
	gl->ProgramUniform2i64ARB = reinterpret_cast<gl_program_uniform2i64arb_t*>(soglLoadSymbol("glProgramUniform2i64ARB"));
	gl->ProgramUniform2i64NV = reinterpret_cast<gl_program_uniform2i64nv_t*>(soglLoadSymbol("glProgramUniform2i64NV"));
	gl->ProgramUniform2i64vARB = reinterpret_cast<gl_program_uniform2i64v_arb_t*>(soglLoadSymbol("glProgramUniform2i64vARB"));
	gl->ProgramUniform2i64vNV = reinterpret_cast<gl_program_uniform2i64v_nv_t*>(soglLoadSymbol("glProgramUniform2i64vNV"));
	gl->ProgramUniform2iEXT = reinterpret_cast<gl_program_uniform2i_ext_t*>(soglLoadSymbol("glProgramUniform2iEXT"));
	gl->ProgramUniform2iv = reinterpret_cast<gl_program_uniform2iv_t*>(soglLoadSymbol("glProgramUniform2iv"));
	gl->ProgramUniform2ivEXT = reinterpret_cast<gl_program_uniform2iv_ext_t*>(soglLoadSymbol("glProgramUniform2ivEXT"));
	gl->ProgramUniform2ui = reinterpret_cast<gl_program_uniform2ui_t*>(soglLoadSymbol("glProgramUniform2ui"));
	gl->ProgramUniform2ui64ARB = reinterpret_cast<gl_program_uniform2ui64arb_t*>(soglLoadSymbol("glProgramUniform2ui64ARB"));
	gl->ProgramUniform2ui64NV = reinterpret_cast<gl_program_uniform2ui64nv_t*>(soglLoadSymbol("glProgramUniform2ui64NV"));
	gl->ProgramUniform2ui64vARB = reinterpret_cast<gl_program_uniform2ui64v_arb_t*>(soglLoadSymbol("glProgramUniform2ui64vARB"));
	gl->ProgramUniform2ui64vNV = reinterpret_cast<gl_program_uniform2ui64v_nv_t*>(soglLoadSymbol("glProgramUniform2ui64vNV"));
	gl->ProgramUniform2uiEXT = reinterpret_cast<gl_program_uniform2ui_ext_t*>(soglLoadSymbol("glProgramUniform2uiEXT"));
	gl->ProgramUniform2uiv = reinterpret_cast<gl_program_uniform2uiv_t*>(soglLoadSymbol("glProgramUniform2uiv"));
	gl->ProgramUniform2uivEXT = reinterpret_cast<gl_program_uniform2uiv_ext_t*>(soglLoadSymbol("glProgramUniform2uivEXT"));
	gl->ProgramUniform3d = reinterpret_cast<gl_program_uniform3d_t*>(soglLoadSymbol("glProgramUniform3d"));
	gl->ProgramUniform3dv = reinterpret_cast<gl_program_uniform3dv_t*>(soglLoadSymbol("glProgramUniform3dv"));
	gl->ProgramUniform3f = reinterpret_cast<gl_program_uniform3f_t*>(soglLoadSymbol("glProgramUniform3f"));
	gl->ProgramUniform3fEXT = reinterpret_cast<gl_program_uniform3f_ext_t*>(soglLoadSymbol("glProgramUniform3fEXT"));
	gl->ProgramUniform3fv = reinterpret_cast<gl_program_uniform3fv_t*>(soglLoadSymbol("glProgramUniform3fv"));
	gl->ProgramUniform3fvEXT = reinterpret_cast<gl_program_uniform3fv_ext_t*>(soglLoadSymbol("glProgramUniform3fvEXT"));
	gl->ProgramUniform3i = reinterpret_cast<gl_program_uniform3i_t*>(soglLoadSymbol("glProgramUniform3i"));
	gl->ProgramUniform3i64ARB = reinterpret_cast<gl_program_uniform3i64arb_t*>(soglLoadSymbol("glProgramUniform3i64ARB"));
	gl->ProgramUniform3i64NV = reinterpret_cast<gl_program_uniform3i64nv_t*>(soglLoadSymbol("glProgramUniform3i64NV"));
	gl->ProgramUniform3i64vARB = reinterpret_cast<gl_program_uniform3i64v_arb_t*>(soglLoadSymbol("glProgramUniform3i64vARB"));
	gl->ProgramUniform3i64vNV = reinterpret_cast<gl_program_uniform3i64v_nv_t*>(soglLoadSymbol("glProgramUniform3i64vNV"));
	gl->ProgramUniform3iEXT = reinterpret_cast<gl_program_uniform3i_ext_t*>(soglLoadSymbol("glProgramUniform3iEXT"));
	gl->ProgramUniform3iv = reinterpret_cast<gl_program_uniform3iv_t*>(soglLoadSymbol("glProgramUniform3iv"));
	gl->ProgramUniform3ivEXT = reinterpret_cast<gl_program_uniform3iv_ext_t*>(soglLoadSymbol("glProgramUniform3ivEXT"));
	gl->ProgramUniform3ui = reinterpret_cast<gl_program_uniform3ui_t*>(soglLoadSymbol("glProgramUniform3ui"));
	gl->ProgramUniform3ui64ARB = reinterpret_cast<gl_program_uniform3ui64arb_t*>(soglLoadSymbol("glProgramUniform3ui64ARB"));
	gl->ProgramUniform3ui64NV = reinterpret_cast<gl_program_uniform3ui64nv_t*>(soglLoadSymbol("glProgramUniform3ui64NV"));
	gl->ProgramUniform3ui64vARB = reinterpret_cast<gl_program_uniform3ui64v_arb_t*>(soglLoadSymbol("glProgramUniform3ui64vARB"));
	gl->ProgramUniform3ui64vNV = reinterpret_cast<gl_program_uniform3ui64v_nv_t*>(soglLoadSymbol("glProgramUniform3ui64vNV"));
	gl->ProgramUniform3uiEXT = reinterpret_cast<gl_program_uniform3ui_ext_t*>(soglLoadSymbol("glProgramUniform3uiEXT"));
	gl->ProgramUniform3uiv = reinterpret_cast<gl_program_uniform3uiv_t*>(soglLoadSymbol("glProgramUniform3uiv"));
	gl->ProgramUniform3uivEXT = reinterpret_cast<gl_program_uniform3uiv_ext_t*>(soglLoadSymbol("glProgramUniform3uivEXT"));
	gl->ProgramUniform4d = reinterpret_cast<gl_program_uniform4d_t*>(soglLoadSymbol("glProgramUniform4d"));
	gl->ProgramUniform4dv = reinterpret_cast<gl_program_uniform4dv_t*>(soglLoadSymbol("glProgramUniform4dv"));
	gl->ProgramUniform4f = reinterpret_cast<gl_program_uniform4f_t*>(soglLoadSymbol("glProgramUniform4f"));
	gl->ProgramUniform4fEXT = reinterpret_cast<gl_program_uniform4f_ext_t*>(soglLoadSymbol("glProgramUniform4fEXT"));
	gl->ProgramUniform4fv = reinterpret_cast<gl_program_uniform4fv_t*>(soglLoadSymbol("glProgramUniform4fv"));
	gl->ProgramUniform4fvEXT = reinterpret_cast<gl_program_uniform4fv_ext_t*>(soglLoadSymbol("glProgramUniform4fvEXT"));
	gl->ProgramUniform4i = reinterpret_cast<gl_program_uniform4i_t*>(soglLoadSymbol("glProgramUniform4i"));
	gl->ProgramUniform4i64ARB = reinterpret_cast<gl_program_uniform4i64arb_t*>(soglLoadSymbol("glProgramUniform4i64ARB"));
	gl->ProgramUniform4i64NV = reinterpret_cast<gl_program_uniform4i64nv_t*>(soglLoadSymbol("glProgramUniform4i64NV"));
	gl->ProgramUniform4i64vARB = reinterpret_cast<gl_program_uniform4i64v_arb_t*>(soglLoadSymbol("glProgramUniform4i64vARB"));
	gl->ProgramUniform4i64vNV = reinterpret_cast<gl_program_uniform4i64v_nv_t*>(soglLoadSymbol("glProgramUniform4i64vNV"));
	gl->ProgramUniform4iEXT = reinterpret_cast<gl_program_uniform4i_ext_t*>(soglLoadSymbol("glProgramUniform4iEXT"));
	gl->ProgramUniform4iv = reinterpret_cast<gl_program_uniform4iv_t*>(soglLoadSymbol("glProgramUniform4iv"));
	gl->ProgramUniform4ivEXT = reinterpret_cast<gl_program_uniform4iv_ext_t*>(soglLoadSymbol("glProgramUniform4ivEXT"));
	gl->ProgramUniform4ui = reinterpret_cast<gl_program_uniform4ui_t*>(soglLoadSymbol("glProgramUniform4ui"));
	gl->ProgramUniform4ui64ARB = reinterpret_cast<gl_program_uniform4ui64arb_t*>(soglLoadSymbol("glProgramUniform4ui64ARB"));
	gl->ProgramUniform4ui64NV = reinterpret_cast<gl_program_uniform4ui64nv_t*>(soglLoadSymbol("glProgramUniform4ui64NV"));
	gl->ProgramUniform4ui64vARB = reinterpret_cast<gl_program_uniform4ui64v_arb_t*>(soglLoadSymbol("glProgramUniform4ui64vARB"));
	gl->ProgramUniform4ui64vNV = reinterpret_cast<gl_program_uniform4ui64v_nv_t*>(soglLoadSymbol("glProgramUniform4ui64vNV"));
	gl->ProgramUniform4uiEXT = reinterpret_cast<gl_program_uniform4ui_ext_t*>(soglLoadSymbol("glProgramUniform4uiEXT"));
	gl->ProgramUniform4uiv = reinterpret_cast<gl_program_uniform4uiv_t*>(soglLoadSymbol("glProgramUniform4uiv"));
	gl->ProgramUniform4uivEXT = reinterpret_cast<gl_program_uniform4uiv_ext_t*>(soglLoadSymbol("glProgramUniform4uivEXT"));
	gl->ProgramUniformHandleui64ARB = reinterpret_cast<gl_program_uniform_handleui64arb_t*>(soglLoadSymbol("glProgramUniformHandleui64ARB"));
	gl->ProgramUniformHandleui64NV = reinterpret_cast<gl_program_uniform_handleui64nv_t*>(soglLoadSymbol("glProgramUniformHandleui64NV"));
	gl->ProgramUniformHandleui64vARB = reinterpret_cast<gl_program_uniform_handleui64v_arb_t*>(soglLoadSymbol("glProgramUniformHandleui64vARB"));
	gl->ProgramUniformHandleui64vNV = reinterpret_cast<gl_program_uniform_handleui64v_nv_t*>(soglLoadSymbol("glProgramUniformHandleui64vNV"));
	gl->ProgramUniformMatrix2dv = reinterpret_cast<gl_program_uniform_matrix2dv_t*>(soglLoadSymbol("glProgramUniformMatrix2dv"));
	gl->ProgramUniformMatrix2fv = reinterpret_cast<gl_program_uniform_matrix2fv_t*>(soglLoadSymbol("glProgramUniformMatrix2fv"));
	gl->ProgramUniformMatrix2fvEXT = reinterpret_cast<gl_program_uniform_matrix2fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix2fvEXT"));
	gl->ProgramUniformMatrix2x3dv = reinterpret_cast<gl_program_uniform_matrix2x3dv_t*>(soglLoadSymbol("glProgramUniformMatrix2x3dv"));
	gl->ProgramUniformMatrix2x3fv = reinterpret_cast<gl_program_uniform_matrix2x3fv_t*>(soglLoadSymbol("glProgramUniformMatrix2x3fv"));
	gl->ProgramUniformMatrix2x3fvEXT = reinterpret_cast<gl_program_uniform_matrix2x3fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix2x3fvEXT"));
	gl->ProgramUniformMatrix2x4dv = reinterpret_cast<gl_program_uniform_matrix2x4dv_t*>(soglLoadSymbol("glProgramUniformMatrix2x4dv"));
	gl->ProgramUniformMatrix2x4fv = reinterpret_cast<gl_program_uniform_matrix2x4fv_t*>(soglLoadSymbol("glProgramUniformMatrix2x4fv"));
	gl->ProgramUniformMatrix2x4fvEXT = reinterpret_cast<gl_program_uniform_matrix2x4fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix2x4fvEXT"));
	gl->ProgramUniformMatrix3dv = reinterpret_cast<gl_program_uniform_matrix3dv_t*>(soglLoadSymbol("glProgramUniformMatrix3dv"));
	gl->ProgramUniformMatrix3fv = reinterpret_cast<gl_program_uniform_matrix3fv_t*>(soglLoadSymbol("glProgramUniformMatrix3fv"));
	gl->ProgramUniformMatrix3fvEXT = reinterpret_cast<gl_program_uniform_matrix3fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix3fvEXT"));
	gl->ProgramUniformMatrix3x2dv = reinterpret_cast<gl_program_uniform_matrix3x2dv_t*>(soglLoadSymbol("glProgramUniformMatrix3x2dv"));
	gl->ProgramUniformMatrix3x2fv = reinterpret_cast<gl_program_uniform_matrix3x2fv_t*>(soglLoadSymbol("glProgramUniformMatrix3x2fv"));
	gl->ProgramUniformMatrix3x2fvEXT = reinterpret_cast<gl_program_uniform_matrix3x2fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix3x2fvEXT"));
	gl->ProgramUniformMatrix3x4dv = reinterpret_cast<gl_program_uniform_matrix3x4dv_t*>(soglLoadSymbol("glProgramUniformMatrix3x4dv"));
	gl->ProgramUniformMatrix3x4fv = reinterpret_cast<gl_program_uniform_matrix3x4fv_t*>(soglLoadSymbol("glProgramUniformMatrix3x4fv"));
	gl->ProgramUniformMatrix3x4fvEXT = reinterpret_cast<gl_program_uniform_matrix3x4fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix3x4fvEXT"));
	gl->ProgramUniformMatrix4dv = reinterpret_cast<gl_program_uniform_matrix4dv_t*>(soglLoadSymbol("glProgramUniformMatrix4dv"));
	gl->ProgramUniformMatrix4fv = reinterpret_cast<gl_program_uniform_matrix4fv_t*>(soglLoadSymbol("glProgramUniformMatrix4fv"));
	gl->ProgramUniformMatrix4fvEXT = reinterpret_cast<gl_program_uniform_matrix4fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix4fvEXT"));
	gl->ProgramUniformMatrix4x2dv = reinterpret_cast<gl_program_uniform_matrix4x2dv_t*>(soglLoadSymbol("glProgramUniformMatrix4x2dv"));
	gl->ProgramUniformMatrix4x2fv = reinterpret_cast<gl_program_uniform_matrix4x2fv_t*>(soglLoadSymbol("glProgramUniformMatrix4x2fv"));
	gl->ProgramUniformMatrix4x2fvEXT = reinterpret_cast<gl_program_uniform_matrix4x2fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix4x2fvEXT"));
	gl->ProgramUniformMatrix4x3dv = reinterpret_cast<gl_program_uniform_matrix4x3dv_t*>(soglLoadSymbol("glProgramUniformMatrix4x3dv"));
	gl->ProgramUniformMatrix4x3fv = reinterpret_cast<gl_program_uniform_matrix4x3fv_t*>(soglLoadSymbol("glProgramUniformMatrix4x3fv"));
	gl->ProgramUniformMatrix4x3fvEXT = reinterpret_cast<gl_program_uniform_matrix4x3fv_ext_t*>(soglLoadSymbol("glProgramUniformMatrix4x3fvEXT"));
	gl->ProgramUniformui64NV = reinterpret_cast<gl_program_uniformui64nv_t*>(soglLoadSymbol("glProgramUniformui64NV"));
	gl->ProgramUniformui64vNV = reinterpret_cast<gl_program_uniformui64v_nv_t*>(soglLoadSymbol("glProgramUniformui64vNV"));
	gl->ProgramVertexLimitNV = reinterpret_cast<gl_program_vertex_limit_nv_t*>(soglLoadSymbol("glProgramVertexLimitNV"));
	gl->ProvokingVertex = reinterpret_cast<gl_provoking_vertex_t*>(soglLoadSymbol("glProvokingVertex"));
	gl->ProvokingVertexEXT = reinterpret_cast<gl_provoking_vertex_ext_t*>(soglLoadSymbol("glProvokingVertexEXT"));
	gl->PushClientAttribDefaultEXT = reinterpret_cast<gl_push_client_attrib_default_ext_t*>(soglLoadSymbol("glPushClientAttribDefaultEXT"));
	gl->PushDebugGroup = reinterpret_cast<gl_push_debug_group_t*>(soglLoadSymbol("glPushDebugGroup"));
	gl->PushGroupMarkerEXT = reinterpret_cast<gl_push_group_marker_ext_t*>(soglLoadSymbol("glPushGroupMarkerEXT"));
	gl->QueryCounter = reinterpret_cast<gl_query_counter_t*>(soglLoadSymbol("glQueryCounter"));
	gl->QueryObjectParameteruiAMD = reinterpret_cast<gl_query_object_parameterui_amd_t*>(soglLoadSymbol("glQueryObjectParameteruiAMD"));
	gl->RasterSamplesEXT = reinterpret_cast<gl_raster_samples_ext_t*>(soglLoadSymbol("glRasterSamplesEXT"));
	gl->ReadnPixels = reinterpret_cast<gl_readn_pixels_t*>(soglLoadSymbol("glReadnPixels"));
	gl->ReadnPixelsARB = reinterpret_cast<gl_readn_pixels_arb_t*>(soglLoadSymbol("glReadnPixelsARB"));
	gl->ReferencePlaneSGIX = reinterpret_cast<gl_reference_plane_sgix_t*>(soglLoadSymbol("glReferencePlaneSGIX"));
	gl->ReleaseKeyedMutexWin32EXT = reinterpret_cast<gl_release_keyed_mutex_win32ext_t*>(soglLoadSymbol("glReleaseKeyedMutexWin32EXT"));
	gl->ReleaseShaderCompiler = reinterpret_cast<gl_release_shader_compiler_t*>(soglLoadSymbol("glReleaseShaderCompiler"));
	gl->RenderGpuMaskNV = reinterpret_cast<gl_render_gpu_mask_nv_t*>(soglLoadSymbol("glRenderGpuMaskNV"));
	gl->RenderbufferStorage = reinterpret_cast<gl_renderbuffer_storage_t*>(soglLoadSymbol("glRenderbufferStorage"));
	gl->RenderbufferStorageEXT = reinterpret_cast<gl_renderbuffer_storage_ext_t*>(soglLoadSymbol("glRenderbufferStorageEXT"));
	gl->RenderbufferStorageMultisample = reinterpret_cast<gl_renderbuffer_storage_multisample_t*>(soglLoadSymbol("glRenderbufferStorageMultisample"));
	gl->RenderbufferStorageMultisampleCoverageNV = reinterpret_cast<gl_renderbuffer_storage_multisample_coverage_nv_t*>(soglLoadSymbol("glRenderbufferStorageMultisampleCoverageNV"));
	gl->RenderbufferStorageMultisampleEXT = reinterpret_cast<gl_renderbuffer_storage_multisample_ext_t*>(soglLoadSymbol("glRenderbufferStorageMultisampleEXT"));
	gl->ReplacementCodePointerSUN = reinterpret_cast<gl_replacement_code_pointer_sun_t*>(soglLoadSymbol("glReplacementCodePointerSUN"));
	gl->ReplacementCodeubSUN = reinterpret_cast<gl_replacement_codeub_sun_t*>(soglLoadSymbol("glReplacementCodeubSUN"));
	gl->ReplacementCodeubvSUN = reinterpret_cast<gl_replacement_codeubv_sun_t*>(soglLoadSymbol("glReplacementCodeubvSUN"));
	gl->ReplacementCodeuiColor3fVertex3fSUN = reinterpret_cast<gl_replacement_codeui_color3f_vertex3f_sun_t*>(soglLoadSymbol("glReplacementCodeuiColor3fVertex3fSUN"));
	gl->ReplacementCodeuiColor3fVertex3fvSUN = reinterpret_cast<gl_replacement_codeui_color3f_vertex3fv_sun_t*>(soglLoadSymbol("glReplacementCodeuiColor3fVertex3fvSUN"));
	gl->ReplacementCodeuiColor4fNormal3fVertex3fSUN = reinterpret_cast<gl_replacement_codeui_color4f_normal3f_vertex3f_sun_t*>(soglLoadSymbol("glReplacementCodeuiColor4fNormal3fVertex3fSUN"));
	gl->ReplacementCodeuiColor4fNormal3fVertex3fvSUN = reinterpret_cast<gl_replacement_codeui_color4f_normal3f_vertex3fv_sun_t*>(soglLoadSymbol("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"));
	gl->ReplacementCodeuiColor4ubVertex3fSUN = reinterpret_cast<gl_replacement_codeui_color4ub_vertex3f_sun_t*>(soglLoadSymbol("glReplacementCodeuiColor4ubVertex3fSUN"));
	gl->ReplacementCodeuiColor4ubVertex3fvSUN = reinterpret_cast<gl_replacement_codeui_color4ub_vertex3fv_sun_t*>(soglLoadSymbol("glReplacementCodeuiColor4ubVertex3fvSUN"));
	gl->ReplacementCodeuiNormal3fVertex3fSUN = reinterpret_cast<gl_replacement_codeui_normal3f_vertex3f_sun_t*>(soglLoadSymbol("glReplacementCodeuiNormal3fVertex3fSUN"));
	gl->ReplacementCodeuiNormal3fVertex3fvSUN = reinterpret_cast<gl_replacement_codeui_normal3f_vertex3fv_sun_t*>(soglLoadSymbol("glReplacementCodeuiNormal3fVertex3fvSUN"));
	gl->ReplacementCodeuiSUN = reinterpret_cast<gl_replacement_codeui_sun_t*>(soglLoadSymbol("glReplacementCodeuiSUN"));
	gl->ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = reinterpret_cast<gl_replacement_codeui_tex_coord2f_color4f_normal3f_vertex3f_sun_t*>(soglLoadSymbol("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"));
	gl->ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = reinterpret_cast<gl_replacement_codeui_tex_coord2f_color4f_normal3f_vertex3fv_sun_t*>(soglLoadSymbol("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"));
	gl->ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = reinterpret_cast<gl_replacement_codeui_tex_coord2f_normal3f_vertex3f_sun_t*>(soglLoadSymbol("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"));
	gl->ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = reinterpret_cast<gl_replacement_codeui_tex_coord2f_normal3f_vertex3fv_sun_t*>(soglLoadSymbol("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"));
	gl->ReplacementCodeuiTexCoord2fVertex3fSUN = reinterpret_cast<gl_replacement_codeui_tex_coord2f_vertex3f_sun_t*>(soglLoadSymbol("glReplacementCodeuiTexCoord2fVertex3fSUN"));
	gl->ReplacementCodeuiTexCoord2fVertex3fvSUN = reinterpret_cast<gl_replacement_codeui_tex_coord2f_vertex3fv_sun_t*>(soglLoadSymbol("glReplacementCodeuiTexCoord2fVertex3fvSUN"));
	gl->ReplacementCodeuiVertex3fSUN = reinterpret_cast<gl_replacement_codeui_vertex3f_sun_t*>(soglLoadSymbol("glReplacementCodeuiVertex3fSUN"));
	gl->ReplacementCodeuiVertex3fvSUN = reinterpret_cast<gl_replacement_codeui_vertex3fv_sun_t*>(soglLoadSymbol("glReplacementCodeuiVertex3fvSUN"));
	gl->ReplacementCodeuivSUN = reinterpret_cast<gl_replacement_codeuiv_sun_t*>(soglLoadSymbol("glReplacementCodeuivSUN"));
	gl->ReplacementCodeusSUN = reinterpret_cast<gl_replacement_codeus_sun_t*>(soglLoadSymbol("glReplacementCodeusSUN"));
	gl->ReplacementCodeusvSUN = reinterpret_cast<gl_replacement_codeusv_sun_t*>(soglLoadSymbol("glReplacementCodeusvSUN"));
	gl->RequestResidentProgramsNV = reinterpret_cast<gl_request_resident_programs_nv_t*>(soglLoadSymbol("glRequestResidentProgramsNV"));
	gl->ResetHistogram = reinterpret_cast<gl_reset_histogram_t*>(soglLoadSymbol("glResetHistogram"));
	gl->ResetHistogramEXT = reinterpret_cast<gl_reset_histogram_ext_t*>(soglLoadSymbol("glResetHistogramEXT"));
	gl->ResetMinmax = reinterpret_cast<gl_reset_minmax_t*>(soglLoadSymbol("glResetMinmax"));
	gl->ResetMinmaxEXT = reinterpret_cast<gl_reset_minmax_ext_t*>(soglLoadSymbol("glResetMinmaxEXT"));
	gl->ResizeBuffersMESA = reinterpret_cast<gl_resize_buffers_mesa_t*>(soglLoadSymbol("glResizeBuffersMESA"));
	gl->ResumeTransformFeedback = reinterpret_cast<gl_resume_transform_feedback_t*>(soglLoadSymbol("glResumeTransformFeedback"));
	gl->ResumeTransformFeedbackNV = reinterpret_cast<gl_resume_transform_feedback_nv_t*>(soglLoadSymbol("glResumeTransformFeedbackNV"));
	gl->SampleCoverage = reinterpret_cast<gl_sample_coverage_t*>(soglLoadSymbol("glSampleCoverage"));
	gl->SampleCoverageARB = reinterpret_cast<gl_sample_coverage_arb_t*>(soglLoadSymbol("glSampleCoverageARB"));
	gl->SampleMapATI = reinterpret_cast<gl_sample_map_ati_t*>(soglLoadSymbol("glSampleMapATI"));
	gl->SampleMaskEXT = reinterpret_cast<gl_sample_mask_ext_t*>(soglLoadSymbol("glSampleMaskEXT"));
	gl->SampleMaskIndexedNV = reinterpret_cast<gl_sample_mask_indexed_nv_t*>(soglLoadSymbol("glSampleMaskIndexedNV"));
	gl->SampleMaskSGIS = reinterpret_cast<gl_sample_mask_sgis_t*>(soglLoadSymbol("glSampleMaskSGIS"));
	gl->SampleMaski = reinterpret_cast<gl_sample_maski_t*>(soglLoadSymbol("glSampleMaski"));
	gl->SamplePatternEXT = reinterpret_cast<gl_sample_pattern_ext_t*>(soglLoadSymbol("glSamplePatternEXT"));
	gl->SamplePatternSGIS = reinterpret_cast<gl_sample_pattern_sgis_t*>(soglLoadSymbol("glSamplePatternSGIS"));
	gl->SamplerParameterIiv = reinterpret_cast<gl_sampler_parameter_iiv_t*>(soglLoadSymbol("glSamplerParameterIiv"));
	gl->SamplerParameterIuiv = reinterpret_cast<gl_sampler_parameter_iuiv_t*>(soglLoadSymbol("glSamplerParameterIuiv"));
	gl->SamplerParameterf = reinterpret_cast<gl_sampler_parameterf_t*>(soglLoadSymbol("glSamplerParameterf"));
	gl->SamplerParameterfv = reinterpret_cast<gl_sampler_parameterfv_t*>(soglLoadSymbol("glSamplerParameterfv"));
	gl->SamplerParameteri = reinterpret_cast<gl_sampler_parameteri_t*>(soglLoadSymbol("glSamplerParameteri"));
	gl->SamplerParameteriv = reinterpret_cast<gl_sampler_parameteriv_t*>(soglLoadSymbol("glSamplerParameteriv"));
	gl->ScissorArrayv = reinterpret_cast<gl_scissor_arrayv_t*>(soglLoadSymbol("glScissorArrayv"));
	gl->ScissorIndexed = reinterpret_cast<gl_scissor_indexed_t*>(soglLoadSymbol("glScissorIndexed"));
	gl->ScissorIndexedv = reinterpret_cast<gl_scissor_indexedv_t*>(soglLoadSymbol("glScissorIndexedv"));
	gl->SecondaryColor3b = reinterpret_cast<gl_secondary_color3b_t*>(soglLoadSymbol("glSecondaryColor3b"));
	gl->SecondaryColor3bEXT = reinterpret_cast<gl_secondary_color3b_ext_t*>(soglLoadSymbol("glSecondaryColor3bEXT"));
	gl->SecondaryColor3bv = reinterpret_cast<gl_secondary_color3bv_t*>(soglLoadSymbol("glSecondaryColor3bv"));
	gl->SecondaryColor3bvEXT = reinterpret_cast<gl_secondary_color3bv_ext_t*>(soglLoadSymbol("glSecondaryColor3bvEXT"));
	gl->SecondaryColor3d = reinterpret_cast<gl_secondary_color3d_t*>(soglLoadSymbol("glSecondaryColor3d"));
	gl->SecondaryColor3dEXT = reinterpret_cast<gl_secondary_color3d_ext_t*>(soglLoadSymbol("glSecondaryColor3dEXT"));
	gl->SecondaryColor3dv = reinterpret_cast<gl_secondary_color3dv_t*>(soglLoadSymbol("glSecondaryColor3dv"));
	gl->SecondaryColor3dvEXT = reinterpret_cast<gl_secondary_color3dv_ext_t*>(soglLoadSymbol("glSecondaryColor3dvEXT"));
	gl->SecondaryColor3f = reinterpret_cast<gl_secondary_color3f_t*>(soglLoadSymbol("glSecondaryColor3f"));
	gl->SecondaryColor3fEXT = reinterpret_cast<gl_secondary_color3f_ext_t*>(soglLoadSymbol("glSecondaryColor3fEXT"));
	gl->SecondaryColor3fv = reinterpret_cast<gl_secondary_color3fv_t*>(soglLoadSymbol("glSecondaryColor3fv"));
	gl->SecondaryColor3fvEXT = reinterpret_cast<gl_secondary_color3fv_ext_t*>(soglLoadSymbol("glSecondaryColor3fvEXT"));
	gl->SecondaryColor3hNV = reinterpret_cast<gl_secondary_color3h_nv_t*>(soglLoadSymbol("glSecondaryColor3hNV"));
	gl->SecondaryColor3hvNV = reinterpret_cast<gl_secondary_color3hv_nv_t*>(soglLoadSymbol("glSecondaryColor3hvNV"));
	gl->SecondaryColor3i = reinterpret_cast<gl_secondary_color3i_t*>(soglLoadSymbol("glSecondaryColor3i"));
	gl->SecondaryColor3iEXT = reinterpret_cast<gl_secondary_color3i_ext_t*>(soglLoadSymbol("glSecondaryColor3iEXT"));
	gl->SecondaryColor3iv = reinterpret_cast<gl_secondary_color3iv_t*>(soglLoadSymbol("glSecondaryColor3iv"));
	gl->SecondaryColor3ivEXT = reinterpret_cast<gl_secondary_color3iv_ext_t*>(soglLoadSymbol("glSecondaryColor3ivEXT"));
	gl->SecondaryColor3s = reinterpret_cast<gl_secondary_color3s_t*>(soglLoadSymbol("glSecondaryColor3s"));
	gl->SecondaryColor3sEXT = reinterpret_cast<gl_secondary_color3s_ext_t*>(soglLoadSymbol("glSecondaryColor3sEXT"));
	gl->SecondaryColor3sv = reinterpret_cast<gl_secondary_color3sv_t*>(soglLoadSymbol("glSecondaryColor3sv"));
	gl->SecondaryColor3svEXT = reinterpret_cast<gl_secondary_color3sv_ext_t*>(soglLoadSymbol("glSecondaryColor3svEXT"));
	gl->SecondaryColor3ub = reinterpret_cast<gl_secondary_color3ub_t*>(soglLoadSymbol("glSecondaryColor3ub"));
	gl->SecondaryColor3ubEXT = reinterpret_cast<gl_secondary_color3ub_ext_t*>(soglLoadSymbol("glSecondaryColor3ubEXT"));
	gl->SecondaryColor3ubv = reinterpret_cast<gl_secondary_color3ubv_t*>(soglLoadSymbol("glSecondaryColor3ubv"));
	gl->SecondaryColor3ubvEXT = reinterpret_cast<gl_secondary_color3ubv_ext_t*>(soglLoadSymbol("glSecondaryColor3ubvEXT"));
	gl->SecondaryColor3ui = reinterpret_cast<gl_secondary_color3ui_t*>(soglLoadSymbol("glSecondaryColor3ui"));
	gl->SecondaryColor3uiEXT = reinterpret_cast<gl_secondary_color3ui_ext_t*>(soglLoadSymbol("glSecondaryColor3uiEXT"));
	gl->SecondaryColor3uiv = reinterpret_cast<gl_secondary_color3uiv_t*>(soglLoadSymbol("glSecondaryColor3uiv"));
	gl->SecondaryColor3uivEXT = reinterpret_cast<gl_secondary_color3uiv_ext_t*>(soglLoadSymbol("glSecondaryColor3uivEXT"));
	gl->SecondaryColor3us = reinterpret_cast<gl_secondary_color3us_t*>(soglLoadSymbol("glSecondaryColor3us"));
	gl->SecondaryColor3usEXT = reinterpret_cast<gl_secondary_color3us_ext_t*>(soglLoadSymbol("glSecondaryColor3usEXT"));
	gl->SecondaryColor3usv = reinterpret_cast<gl_secondary_color3usv_t*>(soglLoadSymbol("glSecondaryColor3usv"));
	gl->SecondaryColor3usvEXT = reinterpret_cast<gl_secondary_color3usv_ext_t*>(soglLoadSymbol("glSecondaryColor3usvEXT"));
	gl->SecondaryColorFormatNV = reinterpret_cast<gl_secondary_color_format_nv_t*>(soglLoadSymbol("glSecondaryColorFormatNV"));
	gl->SecondaryColorP3ui = reinterpret_cast<gl_secondary_color_p3ui_t*>(soglLoadSymbol("glSecondaryColorP3ui"));
	gl->SecondaryColorP3uiv = reinterpret_cast<gl_secondary_color_p3uiv_t*>(soglLoadSymbol("glSecondaryColorP3uiv"));
	gl->SecondaryColorPointer = reinterpret_cast<gl_secondary_color_pointer_t*>(soglLoadSymbol("glSecondaryColorPointer"));
	gl->SecondaryColorPointerEXT = reinterpret_cast<gl_secondary_color_pointer_ext_t*>(soglLoadSymbol("glSecondaryColorPointerEXT"));
	gl->SecondaryColorPointerListIBM = reinterpret_cast<gl_secondary_color_pointer_list_ibm_t*>(soglLoadSymbol("glSecondaryColorPointerListIBM"));
	gl->SelectPerfMonitorCountersAMD = reinterpret_cast<gl_select_perf_monitor_counters_amd_t*>(soglLoadSymbol("glSelectPerfMonitorCountersAMD"));
	gl->SemaphoreParameterui64vEXT = reinterpret_cast<gl_semaphore_parameterui64v_ext_t*>(soglLoadSymbol("glSemaphoreParameterui64vEXT"));
	gl->SeparableFilter2D = reinterpret_cast<gl_separable_filter2d_t*>(soglLoadSymbol("glSeparableFilter2D"));
	gl->SeparableFilter2DEXT = reinterpret_cast<gl_separable_filter2dext_t*>(soglLoadSymbol("glSeparableFilter2DEXT"));
	gl->SetFenceAPPLE = reinterpret_cast<gl_set_fence_apple_t*>(soglLoadSymbol("glSetFenceAPPLE"));
	gl->SetFenceNV = reinterpret_cast<gl_set_fence_nv_t*>(soglLoadSymbol("glSetFenceNV"));
	gl->SetFragmentShaderConstantATI = reinterpret_cast<gl_set_fragment_shader_constant_ati_t*>(soglLoadSymbol("glSetFragmentShaderConstantATI"));
	gl->SetInvariantEXT = reinterpret_cast<gl_set_invariant_ext_t*>(soglLoadSymbol("glSetInvariantEXT"));
	gl->SetLocalConstantEXT = reinterpret_cast<gl_set_local_constant_ext_t*>(soglLoadSymbol("glSetLocalConstantEXT"));
	gl->SetMultisamplefvAMD = reinterpret_cast<gl_set_multisamplefv_amd_t*>(soglLoadSymbol("glSetMultisamplefvAMD"));
	gl->ShaderBinary = reinterpret_cast<gl_shader_binary_t*>(soglLoadSymbol("glShaderBinary"));
	gl->ShaderOp1EXT = reinterpret_cast<gl_shader_op1ext_t*>(soglLoadSymbol("glShaderOp1EXT"));
	gl->ShaderOp2EXT = reinterpret_cast<gl_shader_op2ext_t*>(soglLoadSymbol("glShaderOp2EXT"));
	gl->ShaderOp3EXT = reinterpret_cast<gl_shader_op3ext_t*>(soglLoadSymbol("glShaderOp3EXT"));
	gl->ShaderSource = reinterpret_cast<gl_shader_source_t*>(soglLoadSymbol("glShaderSource"));
	gl->ShaderSourceARB = reinterpret_cast<gl_shader_source_arb_t*>(soglLoadSymbol("glShaderSourceARB"));
	gl->ShaderStorageBlockBinding = reinterpret_cast<gl_shader_storage_block_binding_t*>(soglLoadSymbol("glShaderStorageBlockBinding"));
	gl->SharpenTexFuncSGIS = reinterpret_cast<gl_sharpen_tex_func_sgis_t*>(soglLoadSymbol("glSharpenTexFuncSGIS"));
	gl->SignalSemaphoreEXT = reinterpret_cast<gl_signal_semaphore_ext_t*>(soglLoadSymbol("glSignalSemaphoreEXT"));
	gl->SignalVkFenceNV = reinterpret_cast<gl_signal_vk_fence_nv_t*>(soglLoadSymbol("glSignalVkFenceNV"));
	gl->SignalVkSemaphoreNV = reinterpret_cast<gl_signal_vk_semaphore_nv_t*>(soglLoadSymbol("glSignalVkSemaphoreNV"));
	gl->SpecializeShader = reinterpret_cast<gl_specialize_shader_t*>(soglLoadSymbol("glSpecializeShader"));
	gl->SpecializeShaderARB = reinterpret_cast<gl_specialize_shader_arb_t*>(soglLoadSymbol("glSpecializeShaderARB"));
	gl->SpriteParameterfSGIX = reinterpret_cast<gl_sprite_parameterf_sgix_t*>(soglLoadSymbol("glSpriteParameterfSGIX"));
	gl->SpriteParameterfvSGIX = reinterpret_cast<gl_sprite_parameterfv_sgix_t*>(soglLoadSymbol("glSpriteParameterfvSGIX"));
	gl->SpriteParameteriSGIX = reinterpret_cast<gl_sprite_parameteri_sgix_t*>(soglLoadSymbol("glSpriteParameteriSGIX"));
	gl->SpriteParameterivSGIX = reinterpret_cast<gl_sprite_parameteriv_sgix_t*>(soglLoadSymbol("glSpriteParameterivSGIX"));
	gl->StateCaptureNV = reinterpret_cast<gl_state_capture_nv_t*>(soglLoadSymbol("glStateCaptureNV"));
	gl->StencilFillPathInstancedNV = reinterpret_cast<gl_stencil_fill_path_instanced_nv_t*>(soglLoadSymbol("glStencilFillPathInstancedNV"));
	gl->StencilFillPathNV = reinterpret_cast<gl_stencil_fill_path_nv_t*>(soglLoadSymbol("glStencilFillPathNV"));
	gl->StencilFuncSeparate = reinterpret_cast<gl_stencil_func_separate_t*>(soglLoadSymbol("glStencilFuncSeparate"));
	gl->StencilFuncSeparateATI = reinterpret_cast<gl_stencil_func_separate_ati_t*>(soglLoadSymbol("glStencilFuncSeparateATI"));
	gl->StencilMaskSeparate = reinterpret_cast<gl_stencil_mask_separate_t*>(soglLoadSymbol("glStencilMaskSeparate"));
	gl->StencilOpSeparate = reinterpret_cast<gl_stencil_op_separate_t*>(soglLoadSymbol("glStencilOpSeparate"));
	gl->StencilOpSeparateATI = reinterpret_cast<gl_stencil_op_separate_ati_t*>(soglLoadSymbol("glStencilOpSeparateATI"));
	gl->StencilOpValueAMD = reinterpret_cast<gl_stencil_op_value_amd_t*>(soglLoadSymbol("glStencilOpValueAMD"));
	gl->StencilStrokePathInstancedNV = reinterpret_cast<gl_stencil_stroke_path_instanced_nv_t*>(soglLoadSymbol("glStencilStrokePathInstancedNV"));
	gl->StencilStrokePathNV = reinterpret_cast<gl_stencil_stroke_path_nv_t*>(soglLoadSymbol("glStencilStrokePathNV"));
	gl->StencilThenCoverFillPathInstancedNV = reinterpret_cast<gl_stencil_then_cover_fill_path_instanced_nv_t*>(soglLoadSymbol("glStencilThenCoverFillPathInstancedNV"));
	gl->StencilThenCoverFillPathNV = reinterpret_cast<gl_stencil_then_cover_fill_path_nv_t*>(soglLoadSymbol("glStencilThenCoverFillPathNV"));
	gl->StencilThenCoverStrokePathInstancedNV = reinterpret_cast<gl_stencil_then_cover_stroke_path_instanced_nv_t*>(soglLoadSymbol("glStencilThenCoverStrokePathInstancedNV"));
	gl->StencilThenCoverStrokePathNV = reinterpret_cast<gl_stencil_then_cover_stroke_path_nv_t*>(soglLoadSymbol("glStencilThenCoverStrokePathNV"));
	gl->StringMarkerGREMEDY = reinterpret_cast<gl_string_marker_gremedy_t*>(soglLoadSymbol("glStringMarkerGREMEDY"));
	gl->SubpixelPrecisionBiasNV = reinterpret_cast<gl_subpixel_precision_bias_nv_t*>(soglLoadSymbol("glSubpixelPrecisionBiasNV"));
	gl->SwizzleEXT = reinterpret_cast<gl_swizzle_ext_t*>(soglLoadSymbol("glSwizzleEXT"));
	gl->SyncTextureINTEL = reinterpret_cast<gl_sync_texture_intel_t*>(soglLoadSymbol("glSyncTextureINTEL"));
	gl->TagSampleBufferSGIX = reinterpret_cast<gl_tag_sample_buffer_sgix_t*>(soglLoadSymbol("glTagSampleBufferSGIX"));
	gl->TangentPointerEXT = reinterpret_cast<gl_tangent_pointer_ext_t*>(soglLoadSymbol("glTangentPointerEXT"));
	gl->TbufferMask3DFX = reinterpret_cast<gl_tbuffer_mask3dfx_t*>(soglLoadSymbol("glTbufferMask3DFX"));
	gl->TessellationFactorAMD = reinterpret_cast<gl_tessellation_factor_amd_t*>(soglLoadSymbol("glTessellationFactorAMD"));
	gl->TessellationModeAMD = reinterpret_cast<gl_tessellation_mode_amd_t*>(soglLoadSymbol("glTessellationModeAMD"));
	gl->TestFenceAPPLE = reinterpret_cast<gl_test_fence_apple_t*>(soglLoadSymbol("glTestFenceAPPLE"));
	gl->TestFenceNV = reinterpret_cast<gl_test_fence_nv_t*>(soglLoadSymbol("glTestFenceNV"));
	gl->TestObjectAPPLE = reinterpret_cast<gl_test_object_apple_t*>(soglLoadSymbol("glTestObjectAPPLE"));
	gl->TexBuffer = reinterpret_cast<gl_tex_buffer_t*>(soglLoadSymbol("glTexBuffer"));
	gl->TexBufferARB = reinterpret_cast<gl_tex_buffer_arb_t*>(soglLoadSymbol("glTexBufferARB"));
	gl->TexBufferEXT = reinterpret_cast<gl_tex_buffer_ext_t*>(soglLoadSymbol("glTexBufferEXT"));
	gl->TexBufferRange = reinterpret_cast<gl_tex_buffer_range_t*>(soglLoadSymbol("glTexBufferRange"));
	gl->TexBumpParameterfvATI = reinterpret_cast<gl_tex_bump_parameterfv_ati_t*>(soglLoadSymbol("glTexBumpParameterfvATI"));
	gl->TexBumpParameterivATI = reinterpret_cast<gl_tex_bump_parameteriv_ati_t*>(soglLoadSymbol("glTexBumpParameterivATI"));
	gl->TexCoord1hNV = reinterpret_cast<gl_tex_coord1h_nv_t*>(soglLoadSymbol("glTexCoord1hNV"));
	gl->TexCoord1hvNV = reinterpret_cast<gl_tex_coord1hv_nv_t*>(soglLoadSymbol("glTexCoord1hvNV"));
	gl->TexCoord2fColor3fVertex3fSUN = reinterpret_cast<gl_tex_coord2f_color3f_vertex3f_sun_t*>(soglLoadSymbol("glTexCoord2fColor3fVertex3fSUN"));
	gl->TexCoord2fColor3fVertex3fvSUN = reinterpret_cast<gl_tex_coord2f_color3f_vertex3fv_sun_t*>(soglLoadSymbol("glTexCoord2fColor3fVertex3fvSUN"));
	gl->TexCoord2fColor4fNormal3fVertex3fSUN = reinterpret_cast<gl_tex_coord2f_color4f_normal3f_vertex3f_sun_t*>(soglLoadSymbol("glTexCoord2fColor4fNormal3fVertex3fSUN"));
	gl->TexCoord2fColor4fNormal3fVertex3fvSUN = reinterpret_cast<gl_tex_coord2f_color4f_normal3f_vertex3fv_sun_t*>(soglLoadSymbol("glTexCoord2fColor4fNormal3fVertex3fvSUN"));
	gl->TexCoord2fColor4ubVertex3fSUN = reinterpret_cast<gl_tex_coord2f_color4ub_vertex3f_sun_t*>(soglLoadSymbol("glTexCoord2fColor4ubVertex3fSUN"));
	gl->TexCoord2fColor4ubVertex3fvSUN = reinterpret_cast<gl_tex_coord2f_color4ub_vertex3fv_sun_t*>(soglLoadSymbol("glTexCoord2fColor4ubVertex3fvSUN"));
	gl->TexCoord2fNormal3fVertex3fSUN = reinterpret_cast<gl_tex_coord2f_normal3f_vertex3f_sun_t*>(soglLoadSymbol("glTexCoord2fNormal3fVertex3fSUN"));
	gl->TexCoord2fNormal3fVertex3fvSUN = reinterpret_cast<gl_tex_coord2f_normal3f_vertex3fv_sun_t*>(soglLoadSymbol("glTexCoord2fNormal3fVertex3fvSUN"));
	gl->TexCoord2fVertex3fSUN = reinterpret_cast<gl_tex_coord2f_vertex3f_sun_t*>(soglLoadSymbol("glTexCoord2fVertex3fSUN"));
	gl->TexCoord2fVertex3fvSUN = reinterpret_cast<gl_tex_coord2f_vertex3fv_sun_t*>(soglLoadSymbol("glTexCoord2fVertex3fvSUN"));
	gl->TexCoord2hNV = reinterpret_cast<gl_tex_coord2h_nv_t*>(soglLoadSymbol("glTexCoord2hNV"));
	gl->TexCoord2hvNV = reinterpret_cast<gl_tex_coord2hv_nv_t*>(soglLoadSymbol("glTexCoord2hvNV"));
	gl->TexCoord3hNV = reinterpret_cast<gl_tex_coord3h_nv_t*>(soglLoadSymbol("glTexCoord3hNV"));
	gl->TexCoord3hvNV = reinterpret_cast<gl_tex_coord3hv_nv_t*>(soglLoadSymbol("glTexCoord3hvNV"));
	gl->TexCoord4fColor4fNormal3fVertex4fSUN = reinterpret_cast<gl_tex_coord4f_color4f_normal3f_vertex4f_sun_t*>(soglLoadSymbol("glTexCoord4fColor4fNormal3fVertex4fSUN"));
	gl->TexCoord4fColor4fNormal3fVertex4fvSUN = reinterpret_cast<gl_tex_coord4f_color4f_normal3f_vertex4fv_sun_t*>(soglLoadSymbol("glTexCoord4fColor4fNormal3fVertex4fvSUN"));
	gl->TexCoord4fVertex4fSUN = reinterpret_cast<gl_tex_coord4f_vertex4f_sun_t*>(soglLoadSymbol("glTexCoord4fVertex4fSUN"));
	gl->TexCoord4fVertex4fvSUN = reinterpret_cast<gl_tex_coord4f_vertex4fv_sun_t*>(soglLoadSymbol("glTexCoord4fVertex4fvSUN"));
	gl->TexCoord4hNV = reinterpret_cast<gl_tex_coord4h_nv_t*>(soglLoadSymbol("glTexCoord4hNV"));
	gl->TexCoord4hvNV = reinterpret_cast<gl_tex_coord4hv_nv_t*>(soglLoadSymbol("glTexCoord4hvNV"));
	gl->TexCoordFormatNV = reinterpret_cast<gl_tex_coord_format_nv_t*>(soglLoadSymbol("glTexCoordFormatNV"));
	gl->TexCoordP1ui = reinterpret_cast<gl_tex_coord_p1ui_t*>(soglLoadSymbol("glTexCoordP1ui"));
	gl->TexCoordP1uiv = reinterpret_cast<gl_tex_coord_p1uiv_t*>(soglLoadSymbol("glTexCoordP1uiv"));
	gl->TexCoordP2ui = reinterpret_cast<gl_tex_coord_p2ui_t*>(soglLoadSymbol("glTexCoordP2ui"));
	gl->TexCoordP2uiv = reinterpret_cast<gl_tex_coord_p2uiv_t*>(soglLoadSymbol("glTexCoordP2uiv"));
	gl->TexCoordP3ui = reinterpret_cast<gl_tex_coord_p3ui_t*>(soglLoadSymbol("glTexCoordP3ui"));
	gl->TexCoordP3uiv = reinterpret_cast<gl_tex_coord_p3uiv_t*>(soglLoadSymbol("glTexCoordP3uiv"));
	gl->TexCoordP4ui = reinterpret_cast<gl_tex_coord_p4ui_t*>(soglLoadSymbol("glTexCoordP4ui"));
	gl->TexCoordP4uiv = reinterpret_cast<gl_tex_coord_p4uiv_t*>(soglLoadSymbol("glTexCoordP4uiv"));
	gl->TexCoordPointerEXT = reinterpret_cast<gl_tex_coord_pointer_ext_t*>(soglLoadSymbol("glTexCoordPointerEXT"));
	gl->TexCoordPointerListIBM = reinterpret_cast<gl_tex_coord_pointer_list_ibm_t*>(soglLoadSymbol("glTexCoordPointerListIBM"));
	gl->TexCoordPointervINTEL = reinterpret_cast<gl_tex_coord_pointerv_intel_t*>(soglLoadSymbol("glTexCoordPointervINTEL"));
	gl->TexFilterFuncSGIS = reinterpret_cast<gl_tex_filter_func_sgis_t*>(soglLoadSymbol("glTexFilterFuncSGIS"));
	gl->TexImage2DMultisample = reinterpret_cast<gl_tex_image2dmultisample_t*>(soglLoadSymbol("glTexImage2DMultisample"));
	gl->TexImage2DMultisampleCoverageNV = reinterpret_cast<gl_tex_image2dmultisample_coverage_nv_t*>(soglLoadSymbol("glTexImage2DMultisampleCoverageNV"));
	gl->TexImage3D = reinterpret_cast<gl_tex_image3d_t*>(soglLoadSymbol("glTexImage3D"));
	gl->TexImage3DEXT = reinterpret_cast<gl_tex_image3dext_t*>(soglLoadSymbol("glTexImage3DEXT"));
	gl->TexImage3DMultisample = reinterpret_cast<gl_tex_image3dmultisample_t*>(soglLoadSymbol("glTexImage3DMultisample"));
	gl->TexImage3DMultisampleCoverageNV = reinterpret_cast<gl_tex_image3dmultisample_coverage_nv_t*>(soglLoadSymbol("glTexImage3DMultisampleCoverageNV"));
	gl->TexImage4DSGIS = reinterpret_cast<gl_tex_image4dsgis_t*>(soglLoadSymbol("glTexImage4DSGIS"));
	gl->TexPageCommitmentARB = reinterpret_cast<gl_tex_page_commitment_arb_t*>(soglLoadSymbol("glTexPageCommitmentARB"));
	gl->TexParameterIiv = reinterpret_cast<gl_tex_parameter_iiv_t*>(soglLoadSymbol("glTexParameterIiv"));
	gl->TexParameterIivEXT = reinterpret_cast<gl_tex_parameter_iiv_ext_t*>(soglLoadSymbol("glTexParameterIivEXT"));
	gl->TexParameterIuiv = reinterpret_cast<gl_tex_parameter_iuiv_t*>(soglLoadSymbol("glTexParameterIuiv"));
	gl->TexParameterIuivEXT = reinterpret_cast<gl_tex_parameter_iuiv_ext_t*>(soglLoadSymbol("glTexParameterIuivEXT"));
	gl->TexRenderbufferNV = reinterpret_cast<gl_tex_renderbuffer_nv_t*>(soglLoadSymbol("glTexRenderbufferNV"));
	gl->TexStorage1D = reinterpret_cast<gl_tex_storage1d_t*>(soglLoadSymbol("glTexStorage1D"));
	gl->TexStorage2D = reinterpret_cast<gl_tex_storage2d_t*>(soglLoadSymbol("glTexStorage2D"));
	gl->TexStorage2DMultisample = reinterpret_cast<gl_tex_storage2dmultisample_t*>(soglLoadSymbol("glTexStorage2DMultisample"));
	gl->TexStorage3D = reinterpret_cast<gl_tex_storage3d_t*>(soglLoadSymbol("glTexStorage3D"));
	gl->TexStorage3DMultisample = reinterpret_cast<gl_tex_storage3dmultisample_t*>(soglLoadSymbol("glTexStorage3DMultisample"));
	gl->TexStorageMem1DEXT = reinterpret_cast<gl_tex_storage_mem1dext_t*>(soglLoadSymbol("glTexStorageMem1DEXT"));
	gl->TexStorageMem2DEXT = reinterpret_cast<gl_tex_storage_mem2dext_t*>(soglLoadSymbol("glTexStorageMem2DEXT"));
	gl->TexStorageMem2DMultisampleEXT = reinterpret_cast<gl_tex_storage_mem2dmultisample_ext_t*>(soglLoadSymbol("glTexStorageMem2DMultisampleEXT"));
	gl->TexStorageMem3DEXT = reinterpret_cast<gl_tex_storage_mem3dext_t*>(soglLoadSymbol("glTexStorageMem3DEXT"));
	gl->TexStorageMem3DMultisampleEXT = reinterpret_cast<gl_tex_storage_mem3dmultisample_ext_t*>(soglLoadSymbol("glTexStorageMem3DMultisampleEXT"));
	gl->TexStorageSparseAMD = reinterpret_cast<gl_tex_storage_sparse_amd_t*>(soglLoadSymbol("glTexStorageSparseAMD"));
	gl->TexSubImage1DEXT = reinterpret_cast<gl_tex_sub_image1dext_t*>(soglLoadSymbol("glTexSubImage1DEXT"));
	gl->TexSubImage2DEXT = reinterpret_cast<gl_tex_sub_image2dext_t*>(soglLoadSymbol("glTexSubImage2DEXT"));
	gl->TexSubImage3D = reinterpret_cast<gl_tex_sub_image3d_t*>(soglLoadSymbol("glTexSubImage3D"));
	gl->TexSubImage3DEXT = reinterpret_cast<gl_tex_sub_image3dext_t*>(soglLoadSymbol("glTexSubImage3DEXT"));
	gl->TexSubImage4DSGIS = reinterpret_cast<gl_tex_sub_image4dsgis_t*>(soglLoadSymbol("glTexSubImage4DSGIS"));
	gl->TextureBarrier = reinterpret_cast<gl_texture_barrier_t*>(soglLoadSymbol("glTextureBarrier"));
	gl->TextureBarrierNV = reinterpret_cast<gl_texture_barrier_nv_t*>(soglLoadSymbol("glTextureBarrierNV"));
	gl->TextureBuffer = reinterpret_cast<gl_texture_buffer_t*>(soglLoadSymbol("glTextureBuffer"));
	gl->TextureBufferEXT = reinterpret_cast<gl_texture_buffer_ext_t*>(soglLoadSymbol("glTextureBufferEXT"));
	gl->TextureBufferRange = reinterpret_cast<gl_texture_buffer_range_t*>(soglLoadSymbol("glTextureBufferRange"));
	gl->TextureBufferRangeEXT = reinterpret_cast<gl_texture_buffer_range_ext_t*>(soglLoadSymbol("glTextureBufferRangeEXT"));
	gl->TextureImage1DEXT = reinterpret_cast<gl_texture_image1dext_t*>(soglLoadSymbol("glTextureImage1DEXT"));
	gl->TextureImage2DEXT = reinterpret_cast<gl_texture_image2dext_t*>(soglLoadSymbol("glTextureImage2DEXT"));
	gl->TextureImage2DMultisampleCoverageNV = reinterpret_cast<gl_texture_image2dmultisample_coverage_nv_t*>(soglLoadSymbol("glTextureImage2DMultisampleCoverageNV"));
	gl->TextureImage2DMultisampleNV = reinterpret_cast<gl_texture_image2dmultisample_nv_t*>(soglLoadSymbol("glTextureImage2DMultisampleNV"));
	gl->TextureImage3DEXT = reinterpret_cast<gl_texture_image3dext_t*>(soglLoadSymbol("glTextureImage3DEXT"));
	gl->TextureImage3DMultisampleCoverageNV = reinterpret_cast<gl_texture_image3dmultisample_coverage_nv_t*>(soglLoadSymbol("glTextureImage3DMultisampleCoverageNV"));
	gl->TextureImage3DMultisampleNV = reinterpret_cast<gl_texture_image3dmultisample_nv_t*>(soglLoadSymbol("glTextureImage3DMultisampleNV"));
	gl->TextureLightEXT = reinterpret_cast<gl_texture_light_ext_t*>(soglLoadSymbol("glTextureLightEXT"));
	gl->TextureMaterialEXT = reinterpret_cast<gl_texture_material_ext_t*>(soglLoadSymbol("glTextureMaterialEXT"));
	gl->TextureNormalEXT = reinterpret_cast<gl_texture_normal_ext_t*>(soglLoadSymbol("glTextureNormalEXT"));
	gl->TexturePageCommitmentEXT = reinterpret_cast<gl_texture_page_commitment_ext_t*>(soglLoadSymbol("glTexturePageCommitmentEXT"));
	gl->TextureParameterIiv = reinterpret_cast<gl_texture_parameter_iiv_t*>(soglLoadSymbol("glTextureParameterIiv"));
	gl->TextureParameterIivEXT = reinterpret_cast<gl_texture_parameter_iiv_ext_t*>(soglLoadSymbol("glTextureParameterIivEXT"));
	gl->TextureParameterIuiv = reinterpret_cast<gl_texture_parameter_iuiv_t*>(soglLoadSymbol("glTextureParameterIuiv"));
	gl->TextureParameterIuivEXT = reinterpret_cast<gl_texture_parameter_iuiv_ext_t*>(soglLoadSymbol("glTextureParameterIuivEXT"));
	gl->TextureParameterf = reinterpret_cast<gl_texture_parameterf_t*>(soglLoadSymbol("glTextureParameterf"));
	gl->TextureParameterfEXT = reinterpret_cast<gl_texture_parameterf_ext_t*>(soglLoadSymbol("glTextureParameterfEXT"));
	gl->TextureParameterfv = reinterpret_cast<gl_texture_parameterfv_t*>(soglLoadSymbol("glTextureParameterfv"));
	gl->TextureParameterfvEXT = reinterpret_cast<gl_texture_parameterfv_ext_t*>(soglLoadSymbol("glTextureParameterfvEXT"));
	gl->TextureParameteri = reinterpret_cast<gl_texture_parameteri_t*>(soglLoadSymbol("glTextureParameteri"));
	gl->TextureParameteriEXT = reinterpret_cast<gl_texture_parameteri_ext_t*>(soglLoadSymbol("glTextureParameteriEXT"));
	gl->TextureParameteriv = reinterpret_cast<gl_texture_parameteriv_t*>(soglLoadSymbol("glTextureParameteriv"));
	gl->TextureParameterivEXT = reinterpret_cast<gl_texture_parameteriv_ext_t*>(soglLoadSymbol("glTextureParameterivEXT"));
	gl->TextureRangeAPPLE = reinterpret_cast<gl_texture_range_apple_t*>(soglLoadSymbol("glTextureRangeAPPLE"));
	gl->TextureRenderbufferEXT = reinterpret_cast<gl_texture_renderbuffer_ext_t*>(soglLoadSymbol("glTextureRenderbufferEXT"));
	gl->TextureStorage1D = reinterpret_cast<gl_texture_storage1d_t*>(soglLoadSymbol("glTextureStorage1D"));
	gl->TextureStorage1DEXT = reinterpret_cast<gl_texture_storage1dext_t*>(soglLoadSymbol("glTextureStorage1DEXT"));
	gl->TextureStorage2D = reinterpret_cast<gl_texture_storage2d_t*>(soglLoadSymbol("glTextureStorage2D"));
	gl->TextureStorage2DEXT = reinterpret_cast<gl_texture_storage2dext_t*>(soglLoadSymbol("glTextureStorage2DEXT"));
	gl->TextureStorage2DMultisample = reinterpret_cast<gl_texture_storage2dmultisample_t*>(soglLoadSymbol("glTextureStorage2DMultisample"));
	gl->TextureStorage2DMultisampleEXT = reinterpret_cast<gl_texture_storage2dmultisample_ext_t*>(soglLoadSymbol("glTextureStorage2DMultisampleEXT"));
	gl->TextureStorage3D = reinterpret_cast<gl_texture_storage3d_t*>(soglLoadSymbol("glTextureStorage3D"));
	gl->TextureStorage3DEXT = reinterpret_cast<gl_texture_storage3dext_t*>(soglLoadSymbol("glTextureStorage3DEXT"));
	gl->TextureStorage3DMultisample = reinterpret_cast<gl_texture_storage3dmultisample_t*>(soglLoadSymbol("glTextureStorage3DMultisample"));
	gl->TextureStorage3DMultisampleEXT = reinterpret_cast<gl_texture_storage3dmultisample_ext_t*>(soglLoadSymbol("glTextureStorage3DMultisampleEXT"));
	gl->TextureStorageMem1DEXT = reinterpret_cast<gl_texture_storage_mem1dext_t*>(soglLoadSymbol("glTextureStorageMem1DEXT"));
	gl->TextureStorageMem2DEXT = reinterpret_cast<gl_texture_storage_mem2dext_t*>(soglLoadSymbol("glTextureStorageMem2DEXT"));
	gl->TextureStorageMem2DMultisampleEXT = reinterpret_cast<gl_texture_storage_mem2dmultisample_ext_t*>(soglLoadSymbol("glTextureStorageMem2DMultisampleEXT"));
	gl->TextureStorageMem3DEXT = reinterpret_cast<gl_texture_storage_mem3dext_t*>(soglLoadSymbol("glTextureStorageMem3DEXT"));
	gl->TextureStorageMem3DMultisampleEXT = reinterpret_cast<gl_texture_storage_mem3dmultisample_ext_t*>(soglLoadSymbol("glTextureStorageMem3DMultisampleEXT"));
	gl->TextureStorageSparseAMD = reinterpret_cast<gl_texture_storage_sparse_amd_t*>(soglLoadSymbol("glTextureStorageSparseAMD"));
	gl->TextureSubImage1D = reinterpret_cast<gl_texture_sub_image1d_t*>(soglLoadSymbol("glTextureSubImage1D"));
	gl->TextureSubImage1DEXT = reinterpret_cast<gl_texture_sub_image1dext_t*>(soglLoadSymbol("glTextureSubImage1DEXT"));
	gl->TextureSubImage2D = reinterpret_cast<gl_texture_sub_image2d_t*>(soglLoadSymbol("glTextureSubImage2D"));
	gl->TextureSubImage2DEXT = reinterpret_cast<gl_texture_sub_image2dext_t*>(soglLoadSymbol("glTextureSubImage2DEXT"));
	gl->TextureSubImage3D = reinterpret_cast<gl_texture_sub_image3d_t*>(soglLoadSymbol("glTextureSubImage3D"));
	gl->TextureSubImage3DEXT = reinterpret_cast<gl_texture_sub_image3dext_t*>(soglLoadSymbol("glTextureSubImage3DEXT"));
	gl->TextureView = reinterpret_cast<gl_texture_view_t*>(soglLoadSymbol("glTextureView"));
	gl->TrackMatrixNV = reinterpret_cast<gl_track_matrix_nv_t*>(soglLoadSymbol("glTrackMatrixNV"));
	gl->TransformFeedbackAttribsNV = reinterpret_cast<gl_transform_feedback_attribs_nv_t*>(soglLoadSymbol("glTransformFeedbackAttribsNV"));
	gl->TransformFeedbackBufferBase = reinterpret_cast<gl_transform_feedback_buffer_base_t*>(soglLoadSymbol("glTransformFeedbackBufferBase"));
	gl->TransformFeedbackBufferRange = reinterpret_cast<gl_transform_feedback_buffer_range_t*>(soglLoadSymbol("glTransformFeedbackBufferRange"));
	gl->TransformFeedbackVaryings = reinterpret_cast<gl_transform_feedback_varyings_t*>(soglLoadSymbol("glTransformFeedbackVaryings"));
	gl->TransformFeedbackVaryingsEXT = reinterpret_cast<gl_transform_feedback_varyings_ext_t*>(soglLoadSymbol("glTransformFeedbackVaryingsEXT"));
	gl->TransformFeedbackVaryingsNV = reinterpret_cast<gl_transform_feedback_varyings_nv_t*>(soglLoadSymbol("glTransformFeedbackVaryingsNV"));
	gl->TransformPathNV = reinterpret_cast<gl_transform_path_nv_t*>(soglLoadSymbol("glTransformPathNV"));
	gl->Uniform1d = reinterpret_cast<gl_uniform1d_t*>(soglLoadSymbol("glUniform1d"));
	gl->Uniform1dv = reinterpret_cast<gl_uniform1dv_t*>(soglLoadSymbol("glUniform1dv"));
	gl->Uniform1f = reinterpret_cast<gl_uniform1f_t*>(soglLoadSymbol("glUniform1f"));
	gl->Uniform1fARB = reinterpret_cast<gl_uniform1f_arb_t*>(soglLoadSymbol("glUniform1fARB"));
	gl->Uniform1fv = reinterpret_cast<gl_uniform1fv_t*>(soglLoadSymbol("glUniform1fv"));
	gl->Uniform1fvARB = reinterpret_cast<gl_uniform1fv_arb_t*>(soglLoadSymbol("glUniform1fvARB"));
	gl->Uniform1i = reinterpret_cast<gl_uniform1i_t*>(soglLoadSymbol("glUniform1i"));
	gl->Uniform1i64ARB = reinterpret_cast<gl_uniform1i64arb_t*>(soglLoadSymbol("glUniform1i64ARB"));
	gl->Uniform1i64NV = reinterpret_cast<gl_uniform1i64nv_t*>(soglLoadSymbol("glUniform1i64NV"));
	gl->Uniform1i64vARB = reinterpret_cast<gl_uniform1i64v_arb_t*>(soglLoadSymbol("glUniform1i64vARB"));
	gl->Uniform1i64vNV = reinterpret_cast<gl_uniform1i64v_nv_t*>(soglLoadSymbol("glUniform1i64vNV"));
	gl->Uniform1iARB = reinterpret_cast<gl_uniform1i_arb_t*>(soglLoadSymbol("glUniform1iARB"));
	gl->Uniform1iv = reinterpret_cast<gl_uniform1iv_t*>(soglLoadSymbol("glUniform1iv"));
	gl->Uniform1ivARB = reinterpret_cast<gl_uniform1iv_arb_t*>(soglLoadSymbol("glUniform1ivARB"));
	gl->Uniform1ui = reinterpret_cast<gl_uniform1ui_t*>(soglLoadSymbol("glUniform1ui"));
	gl->Uniform1ui64ARB = reinterpret_cast<gl_uniform1ui64arb_t*>(soglLoadSymbol("glUniform1ui64ARB"));
	gl->Uniform1ui64NV = reinterpret_cast<gl_uniform1ui64nv_t*>(soglLoadSymbol("glUniform1ui64NV"));
	gl->Uniform1ui64vARB = reinterpret_cast<gl_uniform1ui64v_arb_t*>(soglLoadSymbol("glUniform1ui64vARB"));
	gl->Uniform1ui64vNV = reinterpret_cast<gl_uniform1ui64v_nv_t*>(soglLoadSymbol("glUniform1ui64vNV"));
	gl->Uniform1uiEXT = reinterpret_cast<gl_uniform1ui_ext_t*>(soglLoadSymbol("glUniform1uiEXT"));
	gl->Uniform1uiv = reinterpret_cast<gl_uniform1uiv_t*>(soglLoadSymbol("glUniform1uiv"));
	gl->Uniform1uivEXT = reinterpret_cast<gl_uniform1uiv_ext_t*>(soglLoadSymbol("glUniform1uivEXT"));
	gl->Uniform2d = reinterpret_cast<gl_uniform2d_t*>(soglLoadSymbol("glUniform2d"));
	gl->Uniform2dv = reinterpret_cast<gl_uniform2dv_t*>(soglLoadSymbol("glUniform2dv"));
	gl->Uniform2f = reinterpret_cast<gl_uniform2f_t*>(soglLoadSymbol("glUniform2f"));
	gl->Uniform2fARB = reinterpret_cast<gl_uniform2f_arb_t*>(soglLoadSymbol("glUniform2fARB"));
	gl->Uniform2fv = reinterpret_cast<gl_uniform2fv_t*>(soglLoadSymbol("glUniform2fv"));
	gl->Uniform2fvARB = reinterpret_cast<gl_uniform2fv_arb_t*>(soglLoadSymbol("glUniform2fvARB"));
	gl->Uniform2i = reinterpret_cast<gl_uniform2i_t*>(soglLoadSymbol("glUniform2i"));
	gl->Uniform2i64ARB = reinterpret_cast<gl_uniform2i64arb_t*>(soglLoadSymbol("glUniform2i64ARB"));
	gl->Uniform2i64NV = reinterpret_cast<gl_uniform2i64nv_t*>(soglLoadSymbol("glUniform2i64NV"));
	gl->Uniform2i64vARB = reinterpret_cast<gl_uniform2i64v_arb_t*>(soglLoadSymbol("glUniform2i64vARB"));
	gl->Uniform2i64vNV = reinterpret_cast<gl_uniform2i64v_nv_t*>(soglLoadSymbol("glUniform2i64vNV"));
	gl->Uniform2iARB = reinterpret_cast<gl_uniform2i_arb_t*>(soglLoadSymbol("glUniform2iARB"));
	gl->Uniform2iv = reinterpret_cast<gl_uniform2iv_t*>(soglLoadSymbol("glUniform2iv"));
	gl->Uniform2ivARB = reinterpret_cast<gl_uniform2iv_arb_t*>(soglLoadSymbol("glUniform2ivARB"));
	gl->Uniform2ui = reinterpret_cast<gl_uniform2ui_t*>(soglLoadSymbol("glUniform2ui"));
	gl->Uniform2ui64ARB = reinterpret_cast<gl_uniform2ui64arb_t*>(soglLoadSymbol("glUniform2ui64ARB"));
	gl->Uniform2ui64NV = reinterpret_cast<gl_uniform2ui64nv_t*>(soglLoadSymbol("glUniform2ui64NV"));
	gl->Uniform2ui64vARB = reinterpret_cast<gl_uniform2ui64v_arb_t*>(soglLoadSymbol("glUniform2ui64vARB"));
	gl->Uniform2ui64vNV = reinterpret_cast<gl_uniform2ui64v_nv_t*>(soglLoadSymbol("glUniform2ui64vNV"));
	gl->Uniform2uiEXT = reinterpret_cast<gl_uniform2ui_ext_t*>(soglLoadSymbol("glUniform2uiEXT"));
	gl->Uniform2uiv = reinterpret_cast<gl_uniform2uiv_t*>(soglLoadSymbol("glUniform2uiv"));
	gl->Uniform2uivEXT = reinterpret_cast<gl_uniform2uiv_ext_t*>(soglLoadSymbol("glUniform2uivEXT"));
	gl->Uniform3d = reinterpret_cast<gl_uniform3d_t*>(soglLoadSymbol("glUniform3d"));
	gl->Uniform3dv = reinterpret_cast<gl_uniform3dv_t*>(soglLoadSymbol("glUniform3dv"));
	gl->Uniform3f = reinterpret_cast<gl_uniform3f_t*>(soglLoadSymbol("glUniform3f"));
	gl->Uniform3fARB = reinterpret_cast<gl_uniform3f_arb_t*>(soglLoadSymbol("glUniform3fARB"));
	gl->Uniform3fv = reinterpret_cast<gl_uniform3fv_t*>(soglLoadSymbol("glUniform3fv"));
	gl->Uniform3fvARB = reinterpret_cast<gl_uniform3fv_arb_t*>(soglLoadSymbol("glUniform3fvARB"));
	gl->Uniform3i = reinterpret_cast<gl_uniform3i_t*>(soglLoadSymbol("glUniform3i"));
	gl->Uniform3i64ARB = reinterpret_cast<gl_uniform3i64arb_t*>(soglLoadSymbol("glUniform3i64ARB"));
	gl->Uniform3i64NV = reinterpret_cast<gl_uniform3i64nv_t*>(soglLoadSymbol("glUniform3i64NV"));
	gl->Uniform3i64vARB = reinterpret_cast<gl_uniform3i64v_arb_t*>(soglLoadSymbol("glUniform3i64vARB"));
	gl->Uniform3i64vNV = reinterpret_cast<gl_uniform3i64v_nv_t*>(soglLoadSymbol("glUniform3i64vNV"));
	gl->Uniform3iARB = reinterpret_cast<gl_uniform3i_arb_t*>(soglLoadSymbol("glUniform3iARB"));
	gl->Uniform3iv = reinterpret_cast<gl_uniform3iv_t*>(soglLoadSymbol("glUniform3iv"));
	gl->Uniform3ivARB = reinterpret_cast<gl_uniform3iv_arb_t*>(soglLoadSymbol("glUniform3ivARB"));
	gl->Uniform3ui = reinterpret_cast<gl_uniform3ui_t*>(soglLoadSymbol("glUniform3ui"));
	gl->Uniform3ui64ARB = reinterpret_cast<gl_uniform3ui64arb_t*>(soglLoadSymbol("glUniform3ui64ARB"));
	gl->Uniform3ui64NV = reinterpret_cast<gl_uniform3ui64nv_t*>(soglLoadSymbol("glUniform3ui64NV"));
	gl->Uniform3ui64vARB = reinterpret_cast<gl_uniform3ui64v_arb_t*>(soglLoadSymbol("glUniform3ui64vARB"));
	gl->Uniform3ui64vNV = reinterpret_cast<gl_uniform3ui64v_nv_t*>(soglLoadSymbol("glUniform3ui64vNV"));
	gl->Uniform3uiEXT = reinterpret_cast<gl_uniform3ui_ext_t*>(soglLoadSymbol("glUniform3uiEXT"));
	gl->Uniform3uiv = reinterpret_cast<gl_uniform3uiv_t*>(soglLoadSymbol("glUniform3uiv"));
	gl->Uniform3uivEXT = reinterpret_cast<gl_uniform3uiv_ext_t*>(soglLoadSymbol("glUniform3uivEXT"));
	gl->Uniform4d = reinterpret_cast<gl_uniform4d_t*>(soglLoadSymbol("glUniform4d"));
	gl->Uniform4dv = reinterpret_cast<gl_uniform4dv_t*>(soglLoadSymbol("glUniform4dv"));
	gl->Uniform4f = reinterpret_cast<gl_uniform4f_t*>(soglLoadSymbol("glUniform4f"));
	gl->Uniform4fARB = reinterpret_cast<gl_uniform4f_arb_t*>(soglLoadSymbol("glUniform4fARB"));
	gl->Uniform4fv = reinterpret_cast<gl_uniform4fv_t*>(soglLoadSymbol("glUniform4fv"));
	gl->Uniform4fvARB = reinterpret_cast<gl_uniform4fv_arb_t*>(soglLoadSymbol("glUniform4fvARB"));
	gl->Uniform4i = reinterpret_cast<gl_uniform4i_t*>(soglLoadSymbol("glUniform4i"));
	gl->Uniform4i64ARB = reinterpret_cast<gl_uniform4i64arb_t*>(soglLoadSymbol("glUniform4i64ARB"));
	gl->Uniform4i64NV = reinterpret_cast<gl_uniform4i64nv_t*>(soglLoadSymbol("glUniform4i64NV"));
	gl->Uniform4i64vARB = reinterpret_cast<gl_uniform4i64v_arb_t*>(soglLoadSymbol("glUniform4i64vARB"));
	gl->Uniform4i64vNV = reinterpret_cast<gl_uniform4i64v_nv_t*>(soglLoadSymbol("glUniform4i64vNV"));
	gl->Uniform4iARB = reinterpret_cast<gl_uniform4i_arb_t*>(soglLoadSymbol("glUniform4iARB"));
	gl->Uniform4iv = reinterpret_cast<gl_uniform4iv_t*>(soglLoadSymbol("glUniform4iv"));
	gl->Uniform4ivARB = reinterpret_cast<gl_uniform4iv_arb_t*>(soglLoadSymbol("glUniform4ivARB"));
	gl->Uniform4ui = reinterpret_cast<gl_uniform4ui_t*>(soglLoadSymbol("glUniform4ui"));
	gl->Uniform4ui64ARB = reinterpret_cast<gl_uniform4ui64arb_t*>(soglLoadSymbol("glUniform4ui64ARB"));
	gl->Uniform4ui64NV = reinterpret_cast<gl_uniform4ui64nv_t*>(soglLoadSymbol("glUniform4ui64NV"));
	gl->Uniform4ui64vARB = reinterpret_cast<gl_uniform4ui64v_arb_t*>(soglLoadSymbol("glUniform4ui64vARB"));
	gl->Uniform4ui64vNV = reinterpret_cast<gl_uniform4ui64v_nv_t*>(soglLoadSymbol("glUniform4ui64vNV"));
	gl->Uniform4uiEXT = reinterpret_cast<gl_uniform4ui_ext_t*>(soglLoadSymbol("glUniform4uiEXT"));
	gl->Uniform4uiv = reinterpret_cast<gl_uniform4uiv_t*>(soglLoadSymbol("glUniform4uiv"));
	gl->Uniform4uivEXT = reinterpret_cast<gl_uniform4uiv_ext_t*>(soglLoadSymbol("glUniform4uivEXT"));
	gl->UniformBlockBinding = reinterpret_cast<gl_uniform_block_binding_t*>(soglLoadSymbol("glUniformBlockBinding"));
	gl->UniformBufferEXT = reinterpret_cast<gl_uniform_buffer_ext_t*>(soglLoadSymbol("glUniformBufferEXT"));
	gl->UniformHandleui64ARB = reinterpret_cast<gl_uniform_handleui64arb_t*>(soglLoadSymbol("glUniformHandleui64ARB"));
	gl->UniformHandleui64NV = reinterpret_cast<gl_uniform_handleui64nv_t*>(soglLoadSymbol("glUniformHandleui64NV"));
	gl->UniformHandleui64vARB = reinterpret_cast<gl_uniform_handleui64v_arb_t*>(soglLoadSymbol("glUniformHandleui64vARB"));
	gl->UniformHandleui64vNV = reinterpret_cast<gl_uniform_handleui64v_nv_t*>(soglLoadSymbol("glUniformHandleui64vNV"));
	gl->UniformMatrix2dv = reinterpret_cast<gl_uniform_matrix2dv_t*>(soglLoadSymbol("glUniformMatrix2dv"));
	gl->UniformMatrix2fv = reinterpret_cast<gl_uniform_matrix2fv_t*>(soglLoadSymbol("glUniformMatrix2fv"));
	gl->UniformMatrix2fvARB = reinterpret_cast<gl_uniform_matrix2fv_arb_t*>(soglLoadSymbol("glUniformMatrix2fvARB"));
	gl->UniformMatrix2x3dv = reinterpret_cast<gl_uniform_matrix2x3dv_t*>(soglLoadSymbol("glUniformMatrix2x3dv"));
	gl->UniformMatrix2x3fv = reinterpret_cast<gl_uniform_matrix2x3fv_t*>(soglLoadSymbol("glUniformMatrix2x3fv"));
	gl->UniformMatrix2x4dv = reinterpret_cast<gl_uniform_matrix2x4dv_t*>(soglLoadSymbol("glUniformMatrix2x4dv"));
	gl->UniformMatrix2x4fv = reinterpret_cast<gl_uniform_matrix2x4fv_t*>(soglLoadSymbol("glUniformMatrix2x4fv"));
	gl->UniformMatrix3dv = reinterpret_cast<gl_uniform_matrix3dv_t*>(soglLoadSymbol("glUniformMatrix3dv"));
	gl->UniformMatrix3fv = reinterpret_cast<gl_uniform_matrix3fv_t*>(soglLoadSymbol("glUniformMatrix3fv"));
	gl->UniformMatrix3fvARB = reinterpret_cast<gl_uniform_matrix3fv_arb_t*>(soglLoadSymbol("glUniformMatrix3fvARB"));
	gl->UniformMatrix3x2dv = reinterpret_cast<gl_uniform_matrix3x2dv_t*>(soglLoadSymbol("glUniformMatrix3x2dv"));
	gl->UniformMatrix3x2fv = reinterpret_cast<gl_uniform_matrix3x2fv_t*>(soglLoadSymbol("glUniformMatrix3x2fv"));
	gl->UniformMatrix3x4dv = reinterpret_cast<gl_uniform_matrix3x4dv_t*>(soglLoadSymbol("glUniformMatrix3x4dv"));
	gl->UniformMatrix3x4fv = reinterpret_cast<gl_uniform_matrix3x4fv_t*>(soglLoadSymbol("glUniformMatrix3x4fv"));
	gl->UniformMatrix4dv = reinterpret_cast<gl_uniform_matrix4dv_t*>(soglLoadSymbol("glUniformMatrix4dv"));
	gl->UniformMatrix4fv = reinterpret_cast<gl_uniform_matrix4fv_t*>(soglLoadSymbol("glUniformMatrix4fv"));
	gl->UniformMatrix4fvARB = reinterpret_cast<gl_uniform_matrix4fv_arb_t*>(soglLoadSymbol("glUniformMatrix4fvARB"));
	gl->UniformMatrix4x2dv = reinterpret_cast<gl_uniform_matrix4x2dv_t*>(soglLoadSymbol("glUniformMatrix4x2dv"));
	gl->UniformMatrix4x2fv = reinterpret_cast<gl_uniform_matrix4x2fv_t*>(soglLoadSymbol("glUniformMatrix4x2fv"));
	gl->UniformMatrix4x3dv = reinterpret_cast<gl_uniform_matrix4x3dv_t*>(soglLoadSymbol("glUniformMatrix4x3dv"));
	gl->UniformMatrix4x3fv = reinterpret_cast<gl_uniform_matrix4x3fv_t*>(soglLoadSymbol("glUniformMatrix4x3fv"));
	gl->UniformSubroutinesuiv = reinterpret_cast<gl_uniform_subroutinesuiv_t*>(soglLoadSymbol("glUniformSubroutinesuiv"));
	gl->Uniformui64NV = reinterpret_cast<gl_uniformui64nv_t*>(soglLoadSymbol("glUniformui64NV"));
	gl->Uniformui64vNV = reinterpret_cast<gl_uniformui64v_nv_t*>(soglLoadSymbol("glUniformui64vNV"));
	gl->UnlockArraysEXT = reinterpret_cast<gl_unlock_arrays_ext_t*>(soglLoadSymbol("glUnlockArraysEXT"));
	gl->UnmapBuffer = reinterpret_cast<gl_unmap_buffer_t*>(soglLoadSymbol("glUnmapBuffer"));
	gl->UnmapBufferARB = reinterpret_cast<gl_unmap_buffer_arb_t*>(soglLoadSymbol("glUnmapBufferARB"));
	gl->UnmapNamedBuffer = reinterpret_cast<gl_unmap_named_buffer_t*>(soglLoadSymbol("glUnmapNamedBuffer"));
	gl->UnmapNamedBufferEXT = reinterpret_cast<gl_unmap_named_buffer_ext_t*>(soglLoadSymbol("glUnmapNamedBufferEXT"));
	gl->UnmapObjectBufferATI = reinterpret_cast<gl_unmap_object_buffer_ati_t*>(soglLoadSymbol("glUnmapObjectBufferATI"));
	gl->UnmapTexture2DINTEL = reinterpret_cast<gl_unmap_texture2dintel_t*>(soglLoadSymbol("glUnmapTexture2DINTEL"));
	gl->UpdateObjectBufferATI = reinterpret_cast<gl_update_object_buffer_ati_t*>(soglLoadSymbol("glUpdateObjectBufferATI"));
	gl->UseProgram = reinterpret_cast<gl_use_program_t*>(soglLoadSymbol("glUseProgram"));
	gl->UseProgramObjectARB = reinterpret_cast<gl_use_program_object_arb_t*>(soglLoadSymbol("glUseProgramObjectARB"));
	gl->UseProgramStages = reinterpret_cast<gl_use_program_stages_t*>(soglLoadSymbol("glUseProgramStages"));
	gl->UseShaderProgramEXT = reinterpret_cast<gl_use_shader_program_ext_t*>(soglLoadSymbol("glUseShaderProgramEXT"));
	gl->VDPAUFiniNV = reinterpret_cast<gl_vdpaufini_nv_t*>(soglLoadSymbol("glVDPAUFiniNV"));
	gl->VDPAUGetSurfaceivNV = reinterpret_cast<gl_vdpauget_surfaceiv_nv_t*>(soglLoadSymbol("glVDPAUGetSurfaceivNV"));
	gl->VDPAUInitNV = reinterpret_cast<gl_vdpauinit_nv_t*>(soglLoadSymbol("glVDPAUInitNV"));
	gl->VDPAUIsSurfaceNV = reinterpret_cast<gl_vdpauis_surface_nv_t*>(soglLoadSymbol("glVDPAUIsSurfaceNV"));
	gl->VDPAUMapSurfacesNV = reinterpret_cast<gl_vdpaumap_surfaces_nv_t*>(soglLoadSymbol("glVDPAUMapSurfacesNV"));
	gl->VDPAURegisterOutputSurfaceNV = reinterpret_cast<gl_vdpauregister_output_surface_nv_t*>(soglLoadSymbol("glVDPAURegisterOutputSurfaceNV"));
	gl->VDPAURegisterVideoSurfaceNV = reinterpret_cast<gl_vdpauregister_video_surface_nv_t*>(soglLoadSymbol("glVDPAURegisterVideoSurfaceNV"));
	gl->VDPAUSurfaceAccessNV = reinterpret_cast<gl_vdpausurface_access_nv_t*>(soglLoadSymbol("glVDPAUSurfaceAccessNV"));
	gl->VDPAUUnmapSurfacesNV = reinterpret_cast<gl_vdpauunmap_surfaces_nv_t*>(soglLoadSymbol("glVDPAUUnmapSurfacesNV"));
	gl->VDPAUUnregisterSurfaceNV = reinterpret_cast<gl_vdpauunregister_surface_nv_t*>(soglLoadSymbol("glVDPAUUnregisterSurfaceNV"));
	gl->ValidateProgram = reinterpret_cast<gl_validate_program_t*>(soglLoadSymbol("glValidateProgram"));
	gl->ValidateProgramARB = reinterpret_cast<gl_validate_program_arb_t*>(soglLoadSymbol("glValidateProgramARB"));
	gl->ValidateProgramPipeline = reinterpret_cast<gl_validate_program_pipeline_t*>(soglLoadSymbol("glValidateProgramPipeline"));
	gl->VariantArrayObjectATI = reinterpret_cast<gl_variant_array_object_ati_t*>(soglLoadSymbol("glVariantArrayObjectATI"));
	gl->VariantPointerEXT = reinterpret_cast<gl_variant_pointer_ext_t*>(soglLoadSymbol("glVariantPointerEXT"));
	gl->VariantbvEXT = reinterpret_cast<gl_variantbv_ext_t*>(soglLoadSymbol("glVariantbvEXT"));
	gl->VariantdvEXT = reinterpret_cast<gl_variantdv_ext_t*>(soglLoadSymbol("glVariantdvEXT"));
	gl->VariantfvEXT = reinterpret_cast<gl_variantfv_ext_t*>(soglLoadSymbol("glVariantfvEXT"));
	gl->VariantivEXT = reinterpret_cast<gl_variantiv_ext_t*>(soglLoadSymbol("glVariantivEXT"));
	gl->VariantsvEXT = reinterpret_cast<gl_variantsv_ext_t*>(soglLoadSymbol("glVariantsvEXT"));
	gl->VariantubvEXT = reinterpret_cast<gl_variantubv_ext_t*>(soglLoadSymbol("glVariantubvEXT"));
	gl->VariantuivEXT = reinterpret_cast<gl_variantuiv_ext_t*>(soglLoadSymbol("glVariantuivEXT"));
	gl->VariantusvEXT = reinterpret_cast<gl_variantusv_ext_t*>(soglLoadSymbol("glVariantusvEXT"));
	gl->Vertex2hNV = reinterpret_cast<gl_vertex2h_nv_t*>(soglLoadSymbol("glVertex2hNV"));
	gl->Vertex2hvNV = reinterpret_cast<gl_vertex2hv_nv_t*>(soglLoadSymbol("glVertex2hvNV"));
	gl->Vertex3hNV = reinterpret_cast<gl_vertex3h_nv_t*>(soglLoadSymbol("glVertex3hNV"));
	gl->Vertex3hvNV = reinterpret_cast<gl_vertex3hv_nv_t*>(soglLoadSymbol("glVertex3hvNV"));
	gl->Vertex4hNV = reinterpret_cast<gl_vertex4h_nv_t*>(soglLoadSymbol("glVertex4hNV"));
	gl->Vertex4hvNV = reinterpret_cast<gl_vertex4hv_nv_t*>(soglLoadSymbol("glVertex4hvNV"));
	gl->VertexArrayAttribBinding = reinterpret_cast<gl_vertex_array_attrib_binding_t*>(soglLoadSymbol("glVertexArrayAttribBinding"));
	gl->VertexArrayAttribFormat = reinterpret_cast<gl_vertex_array_attrib_format_t*>(soglLoadSymbol("glVertexArrayAttribFormat"));
	gl->VertexArrayAttribIFormat = reinterpret_cast<gl_vertex_array_attrib_iformat_t*>(soglLoadSymbol("glVertexArrayAttribIFormat"));
	gl->VertexArrayAttribLFormat = reinterpret_cast<gl_vertex_array_attrib_lformat_t*>(soglLoadSymbol("glVertexArrayAttribLFormat"));
	gl->VertexArrayBindVertexBufferEXT = reinterpret_cast<gl_vertex_array_bind_vertex_buffer_ext_t*>(soglLoadSymbol("glVertexArrayBindVertexBufferEXT"));
	gl->VertexArrayBindingDivisor = reinterpret_cast<gl_vertex_array_binding_divisor_t*>(soglLoadSymbol("glVertexArrayBindingDivisor"));
	gl->VertexArrayColorOffsetEXT = reinterpret_cast<gl_vertex_array_color_offset_ext_t*>(soglLoadSymbol("glVertexArrayColorOffsetEXT"));
	gl->VertexArrayEdgeFlagOffsetEXT = reinterpret_cast<gl_vertex_array_edge_flag_offset_ext_t*>(soglLoadSymbol("glVertexArrayEdgeFlagOffsetEXT"));
	gl->VertexArrayElementBuffer = reinterpret_cast<gl_vertex_array_element_buffer_t*>(soglLoadSymbol("glVertexArrayElementBuffer"));
	gl->VertexArrayFogCoordOffsetEXT = reinterpret_cast<gl_vertex_array_fog_coord_offset_ext_t*>(soglLoadSymbol("glVertexArrayFogCoordOffsetEXT"));
	gl->VertexArrayIndexOffsetEXT = reinterpret_cast<gl_vertex_array_index_offset_ext_t*>(soglLoadSymbol("glVertexArrayIndexOffsetEXT"));
	gl->VertexArrayMultiTexCoordOffsetEXT = reinterpret_cast<gl_vertex_array_multi_tex_coord_offset_ext_t*>(soglLoadSymbol("glVertexArrayMultiTexCoordOffsetEXT"));
	gl->VertexArrayNormalOffsetEXT = reinterpret_cast<gl_vertex_array_normal_offset_ext_t*>(soglLoadSymbol("glVertexArrayNormalOffsetEXT"));
	gl->VertexArrayParameteriAPPLE = reinterpret_cast<gl_vertex_array_parameteri_apple_t*>(soglLoadSymbol("glVertexArrayParameteriAPPLE"));
	gl->VertexArrayRangeAPPLE = reinterpret_cast<gl_vertex_array_range_apple_t*>(soglLoadSymbol("glVertexArrayRangeAPPLE"));
	gl->VertexArrayRangeNV = reinterpret_cast<gl_vertex_array_range_nv_t*>(soglLoadSymbol("glVertexArrayRangeNV"));
	gl->VertexArraySecondaryColorOffsetEXT = reinterpret_cast<gl_vertex_array_secondary_color_offset_ext_t*>(soglLoadSymbol("glVertexArraySecondaryColorOffsetEXT"));
	gl->VertexArrayTexCoordOffsetEXT = reinterpret_cast<gl_vertex_array_tex_coord_offset_ext_t*>(soglLoadSymbol("glVertexArrayTexCoordOffsetEXT"));
	gl->VertexArrayVertexAttribBindingEXT = reinterpret_cast<gl_vertex_array_vertex_attrib_binding_ext_t*>(soglLoadSymbol("glVertexArrayVertexAttribBindingEXT"));
	gl->VertexArrayVertexAttribDivisorEXT = reinterpret_cast<gl_vertex_array_vertex_attrib_divisor_ext_t*>(soglLoadSymbol("glVertexArrayVertexAttribDivisorEXT"));
	gl->VertexArrayVertexAttribFormatEXT = reinterpret_cast<gl_vertex_array_vertex_attrib_format_ext_t*>(soglLoadSymbol("glVertexArrayVertexAttribFormatEXT"));
	gl->VertexArrayVertexAttribIFormatEXT = reinterpret_cast<gl_vertex_array_vertex_attrib_iformat_ext_t*>(soglLoadSymbol("glVertexArrayVertexAttribIFormatEXT"));
	gl->VertexArrayVertexAttribIOffsetEXT = reinterpret_cast<gl_vertex_array_vertex_attrib_ioffset_ext_t*>(soglLoadSymbol("glVertexArrayVertexAttribIOffsetEXT"));
	gl->VertexArrayVertexAttribLFormatEXT = reinterpret_cast<gl_vertex_array_vertex_attrib_lformat_ext_t*>(soglLoadSymbol("glVertexArrayVertexAttribLFormatEXT"));
	gl->VertexArrayVertexAttribLOffsetEXT = reinterpret_cast<gl_vertex_array_vertex_attrib_loffset_ext_t*>(soglLoadSymbol("glVertexArrayVertexAttribLOffsetEXT"));
	gl->VertexArrayVertexAttribOffsetEXT = reinterpret_cast<gl_vertex_array_vertex_attrib_offset_ext_t*>(soglLoadSymbol("glVertexArrayVertexAttribOffsetEXT"));
	gl->VertexArrayVertexBindingDivisorEXT = reinterpret_cast<gl_vertex_array_vertex_binding_divisor_ext_t*>(soglLoadSymbol("glVertexArrayVertexBindingDivisorEXT"));
	gl->VertexArrayVertexBuffer = reinterpret_cast<gl_vertex_array_vertex_buffer_t*>(soglLoadSymbol("glVertexArrayVertexBuffer"));
	gl->VertexArrayVertexBuffers = reinterpret_cast<gl_vertex_array_vertex_buffers_t*>(soglLoadSymbol("glVertexArrayVertexBuffers"));
	gl->VertexArrayVertexOffsetEXT = reinterpret_cast<gl_vertex_array_vertex_offset_ext_t*>(soglLoadSymbol("glVertexArrayVertexOffsetEXT"));
	gl->VertexAttrib1d = reinterpret_cast<gl_vertex_attrib1d_t*>(soglLoadSymbol("glVertexAttrib1d"));
	gl->VertexAttrib1dARB = reinterpret_cast<gl_vertex_attrib1d_arb_t*>(soglLoadSymbol("glVertexAttrib1dARB"));
	gl->VertexAttrib1dNV = reinterpret_cast<gl_vertex_attrib1d_nv_t*>(soglLoadSymbol("glVertexAttrib1dNV"));
	gl->VertexAttrib1dv = reinterpret_cast<gl_vertex_attrib1dv_t*>(soglLoadSymbol("glVertexAttrib1dv"));
	gl->VertexAttrib1dvARB = reinterpret_cast<gl_vertex_attrib1dv_arb_t*>(soglLoadSymbol("glVertexAttrib1dvARB"));
	gl->VertexAttrib1dvNV = reinterpret_cast<gl_vertex_attrib1dv_nv_t*>(soglLoadSymbol("glVertexAttrib1dvNV"));
	gl->VertexAttrib1f = reinterpret_cast<gl_vertex_attrib1f_t*>(soglLoadSymbol("glVertexAttrib1f"));
	gl->VertexAttrib1fARB = reinterpret_cast<gl_vertex_attrib1f_arb_t*>(soglLoadSymbol("glVertexAttrib1fARB"));
	gl->VertexAttrib1fNV = reinterpret_cast<gl_vertex_attrib1f_nv_t*>(soglLoadSymbol("glVertexAttrib1fNV"));
	gl->VertexAttrib1fv = reinterpret_cast<gl_vertex_attrib1fv_t*>(soglLoadSymbol("glVertexAttrib1fv"));
	gl->VertexAttrib1fvARB = reinterpret_cast<gl_vertex_attrib1fv_arb_t*>(soglLoadSymbol("glVertexAttrib1fvARB"));
	gl->VertexAttrib1fvNV = reinterpret_cast<gl_vertex_attrib1fv_nv_t*>(soglLoadSymbol("glVertexAttrib1fvNV"));
	gl->VertexAttrib1hNV = reinterpret_cast<gl_vertex_attrib1h_nv_t*>(soglLoadSymbol("glVertexAttrib1hNV"));
	gl->VertexAttrib1hvNV = reinterpret_cast<gl_vertex_attrib1hv_nv_t*>(soglLoadSymbol("glVertexAttrib1hvNV"));
	gl->VertexAttrib1s = reinterpret_cast<gl_vertex_attrib1s_t*>(soglLoadSymbol("glVertexAttrib1s"));
	gl->VertexAttrib1sARB = reinterpret_cast<gl_vertex_attrib1s_arb_t*>(soglLoadSymbol("glVertexAttrib1sARB"));
	gl->VertexAttrib1sNV = reinterpret_cast<gl_vertex_attrib1s_nv_t*>(soglLoadSymbol("glVertexAttrib1sNV"));
	gl->VertexAttrib1sv = reinterpret_cast<gl_vertex_attrib1sv_t*>(soglLoadSymbol("glVertexAttrib1sv"));
	gl->VertexAttrib1svARB = reinterpret_cast<gl_vertex_attrib1sv_arb_t*>(soglLoadSymbol("glVertexAttrib1svARB"));
	gl->VertexAttrib1svNV = reinterpret_cast<gl_vertex_attrib1sv_nv_t*>(soglLoadSymbol("glVertexAttrib1svNV"));
	gl->VertexAttrib2d = reinterpret_cast<gl_vertex_attrib2d_t*>(soglLoadSymbol("glVertexAttrib2d"));
	gl->VertexAttrib2dARB = reinterpret_cast<gl_vertex_attrib2d_arb_t*>(soglLoadSymbol("glVertexAttrib2dARB"));
	gl->VertexAttrib2dNV = reinterpret_cast<gl_vertex_attrib2d_nv_t*>(soglLoadSymbol("glVertexAttrib2dNV"));
	gl->VertexAttrib2dv = reinterpret_cast<gl_vertex_attrib2dv_t*>(soglLoadSymbol("glVertexAttrib2dv"));
	gl->VertexAttrib2dvARB = reinterpret_cast<gl_vertex_attrib2dv_arb_t*>(soglLoadSymbol("glVertexAttrib2dvARB"));
	gl->VertexAttrib2dvNV = reinterpret_cast<gl_vertex_attrib2dv_nv_t*>(soglLoadSymbol("glVertexAttrib2dvNV"));
	gl->VertexAttrib2f = reinterpret_cast<gl_vertex_attrib2f_t*>(soglLoadSymbol("glVertexAttrib2f"));
	gl->VertexAttrib2fARB = reinterpret_cast<gl_vertex_attrib2f_arb_t*>(soglLoadSymbol("glVertexAttrib2fARB"));
	gl->VertexAttrib2fNV = reinterpret_cast<gl_vertex_attrib2f_nv_t*>(soglLoadSymbol("glVertexAttrib2fNV"));
	gl->VertexAttrib2fv = reinterpret_cast<gl_vertex_attrib2fv_t*>(soglLoadSymbol("glVertexAttrib2fv"));
	gl->VertexAttrib2fvARB = reinterpret_cast<gl_vertex_attrib2fv_arb_t*>(soglLoadSymbol("glVertexAttrib2fvARB"));
	gl->VertexAttrib2fvNV = reinterpret_cast<gl_vertex_attrib2fv_nv_t*>(soglLoadSymbol("glVertexAttrib2fvNV"));
	gl->VertexAttrib2hNV = reinterpret_cast<gl_vertex_attrib2h_nv_t*>(soglLoadSymbol("glVertexAttrib2hNV"));
	gl->VertexAttrib2hvNV = reinterpret_cast<gl_vertex_attrib2hv_nv_t*>(soglLoadSymbol("glVertexAttrib2hvNV"));
	gl->VertexAttrib2s = reinterpret_cast<gl_vertex_attrib2s_t*>(soglLoadSymbol("glVertexAttrib2s"));
	gl->VertexAttrib2sARB = reinterpret_cast<gl_vertex_attrib2s_arb_t*>(soglLoadSymbol("glVertexAttrib2sARB"));
	gl->VertexAttrib2sNV = reinterpret_cast<gl_vertex_attrib2s_nv_t*>(soglLoadSymbol("glVertexAttrib2sNV"));
	gl->VertexAttrib2sv = reinterpret_cast<gl_vertex_attrib2sv_t*>(soglLoadSymbol("glVertexAttrib2sv"));
	gl->VertexAttrib2svARB = reinterpret_cast<gl_vertex_attrib2sv_arb_t*>(soglLoadSymbol("glVertexAttrib2svARB"));
	gl->VertexAttrib2svNV = reinterpret_cast<gl_vertex_attrib2sv_nv_t*>(soglLoadSymbol("glVertexAttrib2svNV"));
	gl->VertexAttrib3d = reinterpret_cast<gl_vertex_attrib3d_t*>(soglLoadSymbol("glVertexAttrib3d"));
	gl->VertexAttrib3dARB = reinterpret_cast<gl_vertex_attrib3d_arb_t*>(soglLoadSymbol("glVertexAttrib3dARB"));
	gl->VertexAttrib3dNV = reinterpret_cast<gl_vertex_attrib3d_nv_t*>(soglLoadSymbol("glVertexAttrib3dNV"));
	gl->VertexAttrib3dv = reinterpret_cast<gl_vertex_attrib3dv_t*>(soglLoadSymbol("glVertexAttrib3dv"));
	gl->VertexAttrib3dvARB = reinterpret_cast<gl_vertex_attrib3dv_arb_t*>(soglLoadSymbol("glVertexAttrib3dvARB"));
	gl->VertexAttrib3dvNV = reinterpret_cast<gl_vertex_attrib3dv_nv_t*>(soglLoadSymbol("glVertexAttrib3dvNV"));
	gl->VertexAttrib3f = reinterpret_cast<gl_vertex_attrib3f_t*>(soglLoadSymbol("glVertexAttrib3f"));
	gl->VertexAttrib3fARB = reinterpret_cast<gl_vertex_attrib3f_arb_t*>(soglLoadSymbol("glVertexAttrib3fARB"));
	gl->VertexAttrib3fNV = reinterpret_cast<gl_vertex_attrib3f_nv_t*>(soglLoadSymbol("glVertexAttrib3fNV"));
	gl->VertexAttrib3fv = reinterpret_cast<gl_vertex_attrib3fv_t*>(soglLoadSymbol("glVertexAttrib3fv"));
	gl->VertexAttrib3fvARB = reinterpret_cast<gl_vertex_attrib3fv_arb_t*>(soglLoadSymbol("glVertexAttrib3fvARB"));
	gl->VertexAttrib3fvNV = reinterpret_cast<gl_vertex_attrib3fv_nv_t*>(soglLoadSymbol("glVertexAttrib3fvNV"));
	gl->VertexAttrib3hNV = reinterpret_cast<gl_vertex_attrib3h_nv_t*>(soglLoadSymbol("glVertexAttrib3hNV"));
	gl->VertexAttrib3hvNV = reinterpret_cast<gl_vertex_attrib3hv_nv_t*>(soglLoadSymbol("glVertexAttrib3hvNV"));
	gl->VertexAttrib3s = reinterpret_cast<gl_vertex_attrib3s_t*>(soglLoadSymbol("glVertexAttrib3s"));
	gl->VertexAttrib3sARB = reinterpret_cast<gl_vertex_attrib3s_arb_t*>(soglLoadSymbol("glVertexAttrib3sARB"));
	gl->VertexAttrib3sNV = reinterpret_cast<gl_vertex_attrib3s_nv_t*>(soglLoadSymbol("glVertexAttrib3sNV"));
	gl->VertexAttrib3sv = reinterpret_cast<gl_vertex_attrib3sv_t*>(soglLoadSymbol("glVertexAttrib3sv"));
	gl->VertexAttrib3svARB = reinterpret_cast<gl_vertex_attrib3sv_arb_t*>(soglLoadSymbol("glVertexAttrib3svARB"));
	gl->VertexAttrib3svNV = reinterpret_cast<gl_vertex_attrib3sv_nv_t*>(soglLoadSymbol("glVertexAttrib3svNV"));
	gl->VertexAttrib4Nbv = reinterpret_cast<gl_vertex_attrib4nbv_t*>(soglLoadSymbol("glVertexAttrib4Nbv"));
	gl->VertexAttrib4NbvARB = reinterpret_cast<gl_vertex_attrib4nbv_arb_t*>(soglLoadSymbol("glVertexAttrib4NbvARB"));
	gl->VertexAttrib4Niv = reinterpret_cast<gl_vertex_attrib4niv_t*>(soglLoadSymbol("glVertexAttrib4Niv"));
	gl->VertexAttrib4NivARB = reinterpret_cast<gl_vertex_attrib4niv_arb_t*>(soglLoadSymbol("glVertexAttrib4NivARB"));
	gl->VertexAttrib4Nsv = reinterpret_cast<gl_vertex_attrib4nsv_t*>(soglLoadSymbol("glVertexAttrib4Nsv"));
	gl->VertexAttrib4NsvARB = reinterpret_cast<gl_vertex_attrib4nsv_arb_t*>(soglLoadSymbol("glVertexAttrib4NsvARB"));
	gl->VertexAttrib4Nub = reinterpret_cast<gl_vertex_attrib4nub_t*>(soglLoadSymbol("glVertexAttrib4Nub"));
	gl->VertexAttrib4NubARB = reinterpret_cast<gl_vertex_attrib4nub_arb_t*>(soglLoadSymbol("glVertexAttrib4NubARB"));
	gl->VertexAttrib4Nubv = reinterpret_cast<gl_vertex_attrib4nubv_t*>(soglLoadSymbol("glVertexAttrib4Nubv"));
	gl->VertexAttrib4NubvARB = reinterpret_cast<gl_vertex_attrib4nubv_arb_t*>(soglLoadSymbol("glVertexAttrib4NubvARB"));
	gl->VertexAttrib4Nuiv = reinterpret_cast<gl_vertex_attrib4nuiv_t*>(soglLoadSymbol("glVertexAttrib4Nuiv"));
	gl->VertexAttrib4NuivARB = reinterpret_cast<gl_vertex_attrib4nuiv_arb_t*>(soglLoadSymbol("glVertexAttrib4NuivARB"));
	gl->VertexAttrib4Nusv = reinterpret_cast<gl_vertex_attrib4nusv_t*>(soglLoadSymbol("glVertexAttrib4Nusv"));
	gl->VertexAttrib4NusvARB = reinterpret_cast<gl_vertex_attrib4nusv_arb_t*>(soglLoadSymbol("glVertexAttrib4NusvARB"));
	gl->VertexAttrib4bv = reinterpret_cast<gl_vertex_attrib4bv_t*>(soglLoadSymbol("glVertexAttrib4bv"));
	gl->VertexAttrib4bvARB = reinterpret_cast<gl_vertex_attrib4bv_arb_t*>(soglLoadSymbol("glVertexAttrib4bvARB"));
	gl->VertexAttrib4d = reinterpret_cast<gl_vertex_attrib4d_t*>(soglLoadSymbol("glVertexAttrib4d"));
	gl->VertexAttrib4dARB = reinterpret_cast<gl_vertex_attrib4d_arb_t*>(soglLoadSymbol("glVertexAttrib4dARB"));
	gl->VertexAttrib4dNV = reinterpret_cast<gl_vertex_attrib4d_nv_t*>(soglLoadSymbol("glVertexAttrib4dNV"));
	gl->VertexAttrib4dv = reinterpret_cast<gl_vertex_attrib4dv_t*>(soglLoadSymbol("glVertexAttrib4dv"));
	gl->VertexAttrib4dvARB = reinterpret_cast<gl_vertex_attrib4dv_arb_t*>(soglLoadSymbol("glVertexAttrib4dvARB"));
	gl->VertexAttrib4dvNV = reinterpret_cast<gl_vertex_attrib4dv_nv_t*>(soglLoadSymbol("glVertexAttrib4dvNV"));
	gl->VertexAttrib4f = reinterpret_cast<gl_vertex_attrib4f_t*>(soglLoadSymbol("glVertexAttrib4f"));
	gl->VertexAttrib4fARB = reinterpret_cast<gl_vertex_attrib4f_arb_t*>(soglLoadSymbol("glVertexAttrib4fARB"));
	gl->VertexAttrib4fNV = reinterpret_cast<gl_vertex_attrib4f_nv_t*>(soglLoadSymbol("glVertexAttrib4fNV"));
	gl->VertexAttrib4fv = reinterpret_cast<gl_vertex_attrib4fv_t*>(soglLoadSymbol("glVertexAttrib4fv"));
	gl->VertexAttrib4fvARB = reinterpret_cast<gl_vertex_attrib4fv_arb_t*>(soglLoadSymbol("glVertexAttrib4fvARB"));
	gl->VertexAttrib4fvNV = reinterpret_cast<gl_vertex_attrib4fv_nv_t*>(soglLoadSymbol("glVertexAttrib4fvNV"));
	gl->VertexAttrib4hNV = reinterpret_cast<gl_vertex_attrib4h_nv_t*>(soglLoadSymbol("glVertexAttrib4hNV"));
	gl->VertexAttrib4hvNV = reinterpret_cast<gl_vertex_attrib4hv_nv_t*>(soglLoadSymbol("glVertexAttrib4hvNV"));
	gl->VertexAttrib4iv = reinterpret_cast<gl_vertex_attrib4iv_t*>(soglLoadSymbol("glVertexAttrib4iv"));
	gl->VertexAttrib4ivARB = reinterpret_cast<gl_vertex_attrib4iv_arb_t*>(soglLoadSymbol("glVertexAttrib4ivARB"));
	gl->VertexAttrib4s = reinterpret_cast<gl_vertex_attrib4s_t*>(soglLoadSymbol("glVertexAttrib4s"));
	gl->VertexAttrib4sARB = reinterpret_cast<gl_vertex_attrib4s_arb_t*>(soglLoadSymbol("glVertexAttrib4sARB"));
	gl->VertexAttrib4sNV = reinterpret_cast<gl_vertex_attrib4s_nv_t*>(soglLoadSymbol("glVertexAttrib4sNV"));
	gl->VertexAttrib4sv = reinterpret_cast<gl_vertex_attrib4sv_t*>(soglLoadSymbol("glVertexAttrib4sv"));
	gl->VertexAttrib4svARB = reinterpret_cast<gl_vertex_attrib4sv_arb_t*>(soglLoadSymbol("glVertexAttrib4svARB"));
	gl->VertexAttrib4svNV = reinterpret_cast<gl_vertex_attrib4sv_nv_t*>(soglLoadSymbol("glVertexAttrib4svNV"));
	gl->VertexAttrib4ubNV = reinterpret_cast<gl_vertex_attrib4ub_nv_t*>(soglLoadSymbol("glVertexAttrib4ubNV"));
	gl->VertexAttrib4ubv = reinterpret_cast<gl_vertex_attrib4ubv_t*>(soglLoadSymbol("glVertexAttrib4ubv"));
	gl->VertexAttrib4ubvARB = reinterpret_cast<gl_vertex_attrib4ubv_arb_t*>(soglLoadSymbol("glVertexAttrib4ubvARB"));
	gl->VertexAttrib4ubvNV = reinterpret_cast<gl_vertex_attrib4ubv_nv_t*>(soglLoadSymbol("glVertexAttrib4ubvNV"));
	gl->VertexAttrib4uiv = reinterpret_cast<gl_vertex_attrib4uiv_t*>(soglLoadSymbol("glVertexAttrib4uiv"));
	gl->VertexAttrib4uivARB = reinterpret_cast<gl_vertex_attrib4uiv_arb_t*>(soglLoadSymbol("glVertexAttrib4uivARB"));
	gl->VertexAttrib4usv = reinterpret_cast<gl_vertex_attrib4usv_t*>(soglLoadSymbol("glVertexAttrib4usv"));
	gl->VertexAttrib4usvARB = reinterpret_cast<gl_vertex_attrib4usv_arb_t*>(soglLoadSymbol("glVertexAttrib4usvARB"));
	gl->VertexAttribArrayObjectATI = reinterpret_cast<gl_vertex_attrib_array_object_ati_t*>(soglLoadSymbol("glVertexAttribArrayObjectATI"));
	gl->VertexAttribBinding = reinterpret_cast<gl_vertex_attrib_binding_t*>(soglLoadSymbol("glVertexAttribBinding"));
	gl->VertexAttribDivisor = reinterpret_cast<gl_vertex_attrib_divisor_t*>(soglLoadSymbol("glVertexAttribDivisor"));
	gl->VertexAttribDivisorARB = reinterpret_cast<gl_vertex_attrib_divisor_arb_t*>(soglLoadSymbol("glVertexAttribDivisorARB"));
	gl->VertexAttribFormat = reinterpret_cast<gl_vertex_attrib_format_t*>(soglLoadSymbol("glVertexAttribFormat"));
	gl->VertexAttribFormatNV = reinterpret_cast<gl_vertex_attrib_format_nv_t*>(soglLoadSymbol("glVertexAttribFormatNV"));
	gl->VertexAttribI1i = reinterpret_cast<gl_vertex_attrib_i1i_t*>(soglLoadSymbol("glVertexAttribI1i"));
	gl->VertexAttribI1iEXT = reinterpret_cast<gl_vertex_attrib_i1i_ext_t*>(soglLoadSymbol("glVertexAttribI1iEXT"));
	gl->VertexAttribI1iv = reinterpret_cast<gl_vertex_attrib_i1iv_t*>(soglLoadSymbol("glVertexAttribI1iv"));
	gl->VertexAttribI1ivEXT = reinterpret_cast<gl_vertex_attrib_i1iv_ext_t*>(soglLoadSymbol("glVertexAttribI1ivEXT"));
	gl->VertexAttribI1ui = reinterpret_cast<gl_vertex_attrib_i1ui_t*>(soglLoadSymbol("glVertexAttribI1ui"));
	gl->VertexAttribI1uiEXT = reinterpret_cast<gl_vertex_attrib_i1ui_ext_t*>(soglLoadSymbol("glVertexAttribI1uiEXT"));
	gl->VertexAttribI1uiv = reinterpret_cast<gl_vertex_attrib_i1uiv_t*>(soglLoadSymbol("glVertexAttribI1uiv"));
	gl->VertexAttribI1uivEXT = reinterpret_cast<gl_vertex_attrib_i1uiv_ext_t*>(soglLoadSymbol("glVertexAttribI1uivEXT"));
	gl->VertexAttribI2i = reinterpret_cast<gl_vertex_attrib_i2i_t*>(soglLoadSymbol("glVertexAttribI2i"));
	gl->VertexAttribI2iEXT = reinterpret_cast<gl_vertex_attrib_i2i_ext_t*>(soglLoadSymbol("glVertexAttribI2iEXT"));
	gl->VertexAttribI2iv = reinterpret_cast<gl_vertex_attrib_i2iv_t*>(soglLoadSymbol("glVertexAttribI2iv"));
	gl->VertexAttribI2ivEXT = reinterpret_cast<gl_vertex_attrib_i2iv_ext_t*>(soglLoadSymbol("glVertexAttribI2ivEXT"));
	gl->VertexAttribI2ui = reinterpret_cast<gl_vertex_attrib_i2ui_t*>(soglLoadSymbol("glVertexAttribI2ui"));
	gl->VertexAttribI2uiEXT = reinterpret_cast<gl_vertex_attrib_i2ui_ext_t*>(soglLoadSymbol("glVertexAttribI2uiEXT"));
	gl->VertexAttribI2uiv = reinterpret_cast<gl_vertex_attrib_i2uiv_t*>(soglLoadSymbol("glVertexAttribI2uiv"));
	gl->VertexAttribI2uivEXT = reinterpret_cast<gl_vertex_attrib_i2uiv_ext_t*>(soglLoadSymbol("glVertexAttribI2uivEXT"));
	gl->VertexAttribI3i = reinterpret_cast<gl_vertex_attrib_i3i_t*>(soglLoadSymbol("glVertexAttribI3i"));
	gl->VertexAttribI3iEXT = reinterpret_cast<gl_vertex_attrib_i3i_ext_t*>(soglLoadSymbol("glVertexAttribI3iEXT"));
	gl->VertexAttribI3iv = reinterpret_cast<gl_vertex_attrib_i3iv_t*>(soglLoadSymbol("glVertexAttribI3iv"));
	gl->VertexAttribI3ivEXT = reinterpret_cast<gl_vertex_attrib_i3iv_ext_t*>(soglLoadSymbol("glVertexAttribI3ivEXT"));
	gl->VertexAttribI3ui = reinterpret_cast<gl_vertex_attrib_i3ui_t*>(soglLoadSymbol("glVertexAttribI3ui"));
	gl->VertexAttribI3uiEXT = reinterpret_cast<gl_vertex_attrib_i3ui_ext_t*>(soglLoadSymbol("glVertexAttribI3uiEXT"));
	gl->VertexAttribI3uiv = reinterpret_cast<gl_vertex_attrib_i3uiv_t*>(soglLoadSymbol("glVertexAttribI3uiv"));
	gl->VertexAttribI3uivEXT = reinterpret_cast<gl_vertex_attrib_i3uiv_ext_t*>(soglLoadSymbol("glVertexAttribI3uivEXT"));
	gl->VertexAttribI4bv = reinterpret_cast<gl_vertex_attrib_i4bv_t*>(soglLoadSymbol("glVertexAttribI4bv"));
	gl->VertexAttribI4bvEXT = reinterpret_cast<gl_vertex_attrib_i4bv_ext_t*>(soglLoadSymbol("glVertexAttribI4bvEXT"));
	gl->VertexAttribI4i = reinterpret_cast<gl_vertex_attrib_i4i_t*>(soglLoadSymbol("glVertexAttribI4i"));
	gl->VertexAttribI4iEXT = reinterpret_cast<gl_vertex_attrib_i4i_ext_t*>(soglLoadSymbol("glVertexAttribI4iEXT"));
	gl->VertexAttribI4iv = reinterpret_cast<gl_vertex_attrib_i4iv_t*>(soglLoadSymbol("glVertexAttribI4iv"));
	gl->VertexAttribI4ivEXT = reinterpret_cast<gl_vertex_attrib_i4iv_ext_t*>(soglLoadSymbol("glVertexAttribI4ivEXT"));
	gl->VertexAttribI4sv = reinterpret_cast<gl_vertex_attrib_i4sv_t*>(soglLoadSymbol("glVertexAttribI4sv"));
	gl->VertexAttribI4svEXT = reinterpret_cast<gl_vertex_attrib_i4sv_ext_t*>(soglLoadSymbol("glVertexAttribI4svEXT"));
	gl->VertexAttribI4ubv = reinterpret_cast<gl_vertex_attrib_i4ubv_t*>(soglLoadSymbol("glVertexAttribI4ubv"));
	gl->VertexAttribI4ubvEXT = reinterpret_cast<gl_vertex_attrib_i4ubv_ext_t*>(soglLoadSymbol("glVertexAttribI4ubvEXT"));
	gl->VertexAttribI4ui = reinterpret_cast<gl_vertex_attrib_i4ui_t*>(soglLoadSymbol("glVertexAttribI4ui"));
	gl->VertexAttribI4uiEXT = reinterpret_cast<gl_vertex_attrib_i4ui_ext_t*>(soglLoadSymbol("glVertexAttribI4uiEXT"));
	gl->VertexAttribI4uiv = reinterpret_cast<gl_vertex_attrib_i4uiv_t*>(soglLoadSymbol("glVertexAttribI4uiv"));
	gl->VertexAttribI4uivEXT = reinterpret_cast<gl_vertex_attrib_i4uiv_ext_t*>(soglLoadSymbol("glVertexAttribI4uivEXT"));
	gl->VertexAttribI4usv = reinterpret_cast<gl_vertex_attrib_i4usv_t*>(soglLoadSymbol("glVertexAttribI4usv"));
	gl->VertexAttribI4usvEXT = reinterpret_cast<gl_vertex_attrib_i4usv_ext_t*>(soglLoadSymbol("glVertexAttribI4usvEXT"));
	gl->VertexAttribIFormat = reinterpret_cast<gl_vertex_attrib_iformat_t*>(soglLoadSymbol("glVertexAttribIFormat"));
	gl->VertexAttribIFormatNV = reinterpret_cast<gl_vertex_attrib_iformat_nv_t*>(soglLoadSymbol("glVertexAttribIFormatNV"));
	gl->VertexAttribIPointer = reinterpret_cast<gl_vertex_attrib_ipointer_t*>(soglLoadSymbol("glVertexAttribIPointer"));
	gl->VertexAttribIPointerEXT = reinterpret_cast<gl_vertex_attrib_ipointer_ext_t*>(soglLoadSymbol("glVertexAttribIPointerEXT"));
	gl->VertexAttribL1d = reinterpret_cast<gl_vertex_attrib_l1d_t*>(soglLoadSymbol("glVertexAttribL1d"));
	gl->VertexAttribL1dEXT = reinterpret_cast<gl_vertex_attrib_l1d_ext_t*>(soglLoadSymbol("glVertexAttribL1dEXT"));
	gl->VertexAttribL1dv = reinterpret_cast<gl_vertex_attrib_l1dv_t*>(soglLoadSymbol("glVertexAttribL1dv"));
	gl->VertexAttribL1dvEXT = reinterpret_cast<gl_vertex_attrib_l1dv_ext_t*>(soglLoadSymbol("glVertexAttribL1dvEXT"));
	gl->VertexAttribL1i64NV = reinterpret_cast<gl_vertex_attrib_l1i64nv_t*>(soglLoadSymbol("glVertexAttribL1i64NV"));
	gl->VertexAttribL1i64vNV = reinterpret_cast<gl_vertex_attrib_l1i64v_nv_t*>(soglLoadSymbol("glVertexAttribL1i64vNV"));
	gl->VertexAttribL1ui64ARB = reinterpret_cast<gl_vertex_attrib_l1ui64arb_t*>(soglLoadSymbol("glVertexAttribL1ui64ARB"));
	gl->VertexAttribL1ui64NV = reinterpret_cast<gl_vertex_attrib_l1ui64nv_t*>(soglLoadSymbol("glVertexAttribL1ui64NV"));
	gl->VertexAttribL1ui64vARB = reinterpret_cast<gl_vertex_attrib_l1ui64v_arb_t*>(soglLoadSymbol("glVertexAttribL1ui64vARB"));
	gl->VertexAttribL1ui64vNV = reinterpret_cast<gl_vertex_attrib_l1ui64v_nv_t*>(soglLoadSymbol("glVertexAttribL1ui64vNV"));
	gl->VertexAttribL2d = reinterpret_cast<gl_vertex_attrib_l2d_t*>(soglLoadSymbol("glVertexAttribL2d"));
	gl->VertexAttribL2dEXT = reinterpret_cast<gl_vertex_attrib_l2d_ext_t*>(soglLoadSymbol("glVertexAttribL2dEXT"));
	gl->VertexAttribL2dv = reinterpret_cast<gl_vertex_attrib_l2dv_t*>(soglLoadSymbol("glVertexAttribL2dv"));
	gl->VertexAttribL2dvEXT = reinterpret_cast<gl_vertex_attrib_l2dv_ext_t*>(soglLoadSymbol("glVertexAttribL2dvEXT"));
	gl->VertexAttribL2i64NV = reinterpret_cast<gl_vertex_attrib_l2i64nv_t*>(soglLoadSymbol("glVertexAttribL2i64NV"));
	gl->VertexAttribL2i64vNV = reinterpret_cast<gl_vertex_attrib_l2i64v_nv_t*>(soglLoadSymbol("glVertexAttribL2i64vNV"));
	gl->VertexAttribL2ui64NV = reinterpret_cast<gl_vertex_attrib_l2ui64nv_t*>(soglLoadSymbol("glVertexAttribL2ui64NV"));
	gl->VertexAttribL2ui64vNV = reinterpret_cast<gl_vertex_attrib_l2ui64v_nv_t*>(soglLoadSymbol("glVertexAttribL2ui64vNV"));
	gl->VertexAttribL3d = reinterpret_cast<gl_vertex_attrib_l3d_t*>(soglLoadSymbol("glVertexAttribL3d"));
	gl->VertexAttribL3dEXT = reinterpret_cast<gl_vertex_attrib_l3d_ext_t*>(soglLoadSymbol("glVertexAttribL3dEXT"));
	gl->VertexAttribL3dv = reinterpret_cast<gl_vertex_attrib_l3dv_t*>(soglLoadSymbol("glVertexAttribL3dv"));
	gl->VertexAttribL3dvEXT = reinterpret_cast<gl_vertex_attrib_l3dv_ext_t*>(soglLoadSymbol("glVertexAttribL3dvEXT"));
	gl->VertexAttribL3i64NV = reinterpret_cast<gl_vertex_attrib_l3i64nv_t*>(soglLoadSymbol("glVertexAttribL3i64NV"));
	gl->VertexAttribL3i64vNV = reinterpret_cast<gl_vertex_attrib_l3i64v_nv_t*>(soglLoadSymbol("glVertexAttribL3i64vNV"));
	gl->VertexAttribL3ui64NV = reinterpret_cast<gl_vertex_attrib_l3ui64nv_t*>(soglLoadSymbol("glVertexAttribL3ui64NV"));
	gl->VertexAttribL3ui64vNV = reinterpret_cast<gl_vertex_attrib_l3ui64v_nv_t*>(soglLoadSymbol("glVertexAttribL3ui64vNV"));
	gl->VertexAttribL4d = reinterpret_cast<gl_vertex_attrib_l4d_t*>(soglLoadSymbol("glVertexAttribL4d"));
	gl->VertexAttribL4dEXT = reinterpret_cast<gl_vertex_attrib_l4d_ext_t*>(soglLoadSymbol("glVertexAttribL4dEXT"));
	gl->VertexAttribL4dv = reinterpret_cast<gl_vertex_attrib_l4dv_t*>(soglLoadSymbol("glVertexAttribL4dv"));
	gl->VertexAttribL4dvEXT = reinterpret_cast<gl_vertex_attrib_l4dv_ext_t*>(soglLoadSymbol("glVertexAttribL4dvEXT"));
	gl->VertexAttribL4i64NV = reinterpret_cast<gl_vertex_attrib_l4i64nv_t*>(soglLoadSymbol("glVertexAttribL4i64NV"));
	gl->VertexAttribL4i64vNV = reinterpret_cast<gl_vertex_attrib_l4i64v_nv_t*>(soglLoadSymbol("glVertexAttribL4i64vNV"));
	gl->VertexAttribL4ui64NV = reinterpret_cast<gl_vertex_attrib_l4ui64nv_t*>(soglLoadSymbol("glVertexAttribL4ui64NV"));
	gl->VertexAttribL4ui64vNV = reinterpret_cast<gl_vertex_attrib_l4ui64v_nv_t*>(soglLoadSymbol("glVertexAttribL4ui64vNV"));
	gl->VertexAttribLFormat = reinterpret_cast<gl_vertex_attrib_lformat_t*>(soglLoadSymbol("glVertexAttribLFormat"));
	gl->VertexAttribLFormatNV = reinterpret_cast<gl_vertex_attrib_lformat_nv_t*>(soglLoadSymbol("glVertexAttribLFormatNV"));
	gl->VertexAttribLPointer = reinterpret_cast<gl_vertex_attrib_lpointer_t*>(soglLoadSymbol("glVertexAttribLPointer"));
	gl->VertexAttribLPointerEXT = reinterpret_cast<gl_vertex_attrib_lpointer_ext_t*>(soglLoadSymbol("glVertexAttribLPointerEXT"));
	gl->VertexAttribP1ui = reinterpret_cast<gl_vertex_attrib_p1ui_t*>(soglLoadSymbol("glVertexAttribP1ui"));
	gl->VertexAttribP1uiv = reinterpret_cast<gl_vertex_attrib_p1uiv_t*>(soglLoadSymbol("glVertexAttribP1uiv"));
	gl->VertexAttribP2ui = reinterpret_cast<gl_vertex_attrib_p2ui_t*>(soglLoadSymbol("glVertexAttribP2ui"));
	gl->VertexAttribP2uiv = reinterpret_cast<gl_vertex_attrib_p2uiv_t*>(soglLoadSymbol("glVertexAttribP2uiv"));
	gl->VertexAttribP3ui = reinterpret_cast<gl_vertex_attrib_p3ui_t*>(soglLoadSymbol("glVertexAttribP3ui"));
	gl->VertexAttribP3uiv = reinterpret_cast<gl_vertex_attrib_p3uiv_t*>(soglLoadSymbol("glVertexAttribP3uiv"));
	gl->VertexAttribP4ui = reinterpret_cast<gl_vertex_attrib_p4ui_t*>(soglLoadSymbol("glVertexAttribP4ui"));
	gl->VertexAttribP4uiv = reinterpret_cast<gl_vertex_attrib_p4uiv_t*>(soglLoadSymbol("glVertexAttribP4uiv"));
	gl->VertexAttribParameteriAMD = reinterpret_cast<gl_vertex_attrib_parameteri_amd_t*>(soglLoadSymbol("glVertexAttribParameteriAMD"));
	gl->VertexAttribPointer = reinterpret_cast<gl_vertex_attrib_pointer_t*>(soglLoadSymbol("glVertexAttribPointer"));
	gl->VertexAttribPointerARB = reinterpret_cast<gl_vertex_attrib_pointer_arb_t*>(soglLoadSymbol("glVertexAttribPointerARB"));
	gl->VertexAttribPointerNV = reinterpret_cast<gl_vertex_attrib_pointer_nv_t*>(soglLoadSymbol("glVertexAttribPointerNV"));
	gl->VertexAttribs1dvNV = reinterpret_cast<gl_vertex_attribs1dv_nv_t*>(soglLoadSymbol("glVertexAttribs1dvNV"));
	gl->VertexAttribs1fvNV = reinterpret_cast<gl_vertex_attribs1fv_nv_t*>(soglLoadSymbol("glVertexAttribs1fvNV"));
	gl->VertexAttribs1hvNV = reinterpret_cast<gl_vertex_attribs1hv_nv_t*>(soglLoadSymbol("glVertexAttribs1hvNV"));
	gl->VertexAttribs1svNV = reinterpret_cast<gl_vertex_attribs1sv_nv_t*>(soglLoadSymbol("glVertexAttribs1svNV"));
	gl->VertexAttribs2dvNV = reinterpret_cast<gl_vertex_attribs2dv_nv_t*>(soglLoadSymbol("glVertexAttribs2dvNV"));
	gl->VertexAttribs2fvNV = reinterpret_cast<gl_vertex_attribs2fv_nv_t*>(soglLoadSymbol("glVertexAttribs2fvNV"));
	gl->VertexAttribs2hvNV = reinterpret_cast<gl_vertex_attribs2hv_nv_t*>(soglLoadSymbol("glVertexAttribs2hvNV"));
	gl->VertexAttribs2svNV = reinterpret_cast<gl_vertex_attribs2sv_nv_t*>(soglLoadSymbol("glVertexAttribs2svNV"));
	gl->VertexAttribs3dvNV = reinterpret_cast<gl_vertex_attribs3dv_nv_t*>(soglLoadSymbol("glVertexAttribs3dvNV"));
	gl->VertexAttribs3fvNV = reinterpret_cast<gl_vertex_attribs3fv_nv_t*>(soglLoadSymbol("glVertexAttribs3fvNV"));
	gl->VertexAttribs3hvNV = reinterpret_cast<gl_vertex_attribs3hv_nv_t*>(soglLoadSymbol("glVertexAttribs3hvNV"));
	gl->VertexAttribs3svNV = reinterpret_cast<gl_vertex_attribs3sv_nv_t*>(soglLoadSymbol("glVertexAttribs3svNV"));
	gl->VertexAttribs4dvNV = reinterpret_cast<gl_vertex_attribs4dv_nv_t*>(soglLoadSymbol("glVertexAttribs4dvNV"));
	gl->VertexAttribs4fvNV = reinterpret_cast<gl_vertex_attribs4fv_nv_t*>(soglLoadSymbol("glVertexAttribs4fvNV"));
	gl->VertexAttribs4hvNV = reinterpret_cast<gl_vertex_attribs4hv_nv_t*>(soglLoadSymbol("glVertexAttribs4hvNV"));
	gl->VertexAttribs4svNV = reinterpret_cast<gl_vertex_attribs4sv_nv_t*>(soglLoadSymbol("glVertexAttribs4svNV"));
	gl->VertexAttribs4ubvNV = reinterpret_cast<gl_vertex_attribs4ubv_nv_t*>(soglLoadSymbol("glVertexAttribs4ubvNV"));
	gl->VertexBindingDivisor = reinterpret_cast<gl_vertex_binding_divisor_t*>(soglLoadSymbol("glVertexBindingDivisor"));
	gl->VertexBlendARB = reinterpret_cast<gl_vertex_blend_arb_t*>(soglLoadSymbol("glVertexBlendARB"));
	gl->VertexBlendEnvfATI = reinterpret_cast<gl_vertex_blend_envf_ati_t*>(soglLoadSymbol("glVertexBlendEnvfATI"));
	gl->VertexBlendEnviATI = reinterpret_cast<gl_vertex_blend_envi_ati_t*>(soglLoadSymbol("glVertexBlendEnviATI"));
	gl->VertexFormatNV = reinterpret_cast<gl_vertex_format_nv_t*>(soglLoadSymbol("glVertexFormatNV"));
	gl->VertexP2ui = reinterpret_cast<gl_vertex_p2ui_t*>(soglLoadSymbol("glVertexP2ui"));
	gl->VertexP2uiv = reinterpret_cast<gl_vertex_p2uiv_t*>(soglLoadSymbol("glVertexP2uiv"));
	gl->VertexP3ui = reinterpret_cast<gl_vertex_p3ui_t*>(soglLoadSymbol("glVertexP3ui"));
	gl->VertexP3uiv = reinterpret_cast<gl_vertex_p3uiv_t*>(soglLoadSymbol("glVertexP3uiv"));
	gl->VertexP4ui = reinterpret_cast<gl_vertex_p4ui_t*>(soglLoadSymbol("glVertexP4ui"));
	gl->VertexP4uiv = reinterpret_cast<gl_vertex_p4uiv_t*>(soglLoadSymbol("glVertexP4uiv"));
	gl->VertexPointerEXT = reinterpret_cast<gl_vertex_pointer_ext_t*>(soglLoadSymbol("glVertexPointerEXT"));
	gl->VertexPointerListIBM = reinterpret_cast<gl_vertex_pointer_list_ibm_t*>(soglLoadSymbol("glVertexPointerListIBM"));
	gl->VertexPointervINTEL = reinterpret_cast<gl_vertex_pointerv_intel_t*>(soglLoadSymbol("glVertexPointervINTEL"));
	gl->VertexStream1dATI = reinterpret_cast<gl_vertex_stream1d_ati_t*>(soglLoadSymbol("glVertexStream1dATI"));
	gl->VertexStream1dvATI = reinterpret_cast<gl_vertex_stream1dv_ati_t*>(soglLoadSymbol("glVertexStream1dvATI"));
	gl->VertexStream1fATI = reinterpret_cast<gl_vertex_stream1f_ati_t*>(soglLoadSymbol("glVertexStream1fATI"));
	gl->VertexStream1fvATI = reinterpret_cast<gl_vertex_stream1fv_ati_t*>(soglLoadSymbol("glVertexStream1fvATI"));
	gl->VertexStream1iATI = reinterpret_cast<gl_vertex_stream1i_ati_t*>(soglLoadSymbol("glVertexStream1iATI"));
	gl->VertexStream1ivATI = reinterpret_cast<gl_vertex_stream1iv_ati_t*>(soglLoadSymbol("glVertexStream1ivATI"));
	gl->VertexStream1sATI = reinterpret_cast<gl_vertex_stream1s_ati_t*>(soglLoadSymbol("glVertexStream1sATI"));
	gl->VertexStream1svATI = reinterpret_cast<gl_vertex_stream1sv_ati_t*>(soglLoadSymbol("glVertexStream1svATI"));
	gl->VertexStream2dATI = reinterpret_cast<gl_vertex_stream2d_ati_t*>(soglLoadSymbol("glVertexStream2dATI"));
	gl->VertexStream2dvATI = reinterpret_cast<gl_vertex_stream2dv_ati_t*>(soglLoadSymbol("glVertexStream2dvATI"));
	gl->VertexStream2fATI = reinterpret_cast<gl_vertex_stream2f_ati_t*>(soglLoadSymbol("glVertexStream2fATI"));
	gl->VertexStream2fvATI = reinterpret_cast<gl_vertex_stream2fv_ati_t*>(soglLoadSymbol("glVertexStream2fvATI"));
	gl->VertexStream2iATI = reinterpret_cast<gl_vertex_stream2i_ati_t*>(soglLoadSymbol("glVertexStream2iATI"));
	gl->VertexStream2ivATI = reinterpret_cast<gl_vertex_stream2iv_ati_t*>(soglLoadSymbol("glVertexStream2ivATI"));
	gl->VertexStream2sATI = reinterpret_cast<gl_vertex_stream2s_ati_t*>(soglLoadSymbol("glVertexStream2sATI"));
	gl->VertexStream2svATI = reinterpret_cast<gl_vertex_stream2sv_ati_t*>(soglLoadSymbol("glVertexStream2svATI"));
	gl->VertexStream3dATI = reinterpret_cast<gl_vertex_stream3d_ati_t*>(soglLoadSymbol("glVertexStream3dATI"));
	gl->VertexStream3dvATI = reinterpret_cast<gl_vertex_stream3dv_ati_t*>(soglLoadSymbol("glVertexStream3dvATI"));
	gl->VertexStream3fATI = reinterpret_cast<gl_vertex_stream3f_ati_t*>(soglLoadSymbol("glVertexStream3fATI"));
	gl->VertexStream3fvATI = reinterpret_cast<gl_vertex_stream3fv_ati_t*>(soglLoadSymbol("glVertexStream3fvATI"));
	gl->VertexStream3iATI = reinterpret_cast<gl_vertex_stream3i_ati_t*>(soglLoadSymbol("glVertexStream3iATI"));
	gl->VertexStream3ivATI = reinterpret_cast<gl_vertex_stream3iv_ati_t*>(soglLoadSymbol("glVertexStream3ivATI"));
	gl->VertexStream3sATI = reinterpret_cast<gl_vertex_stream3s_ati_t*>(soglLoadSymbol("glVertexStream3sATI"));
	gl->VertexStream3svATI = reinterpret_cast<gl_vertex_stream3sv_ati_t*>(soglLoadSymbol("glVertexStream3svATI"));
	gl->VertexStream4dATI = reinterpret_cast<gl_vertex_stream4d_ati_t*>(soglLoadSymbol("glVertexStream4dATI"));
	gl->VertexStream4dvATI = reinterpret_cast<gl_vertex_stream4dv_ati_t*>(soglLoadSymbol("glVertexStream4dvATI"));
	gl->VertexStream4fATI = reinterpret_cast<gl_vertex_stream4f_ati_t*>(soglLoadSymbol("glVertexStream4fATI"));
	gl->VertexStream4fvATI = reinterpret_cast<gl_vertex_stream4fv_ati_t*>(soglLoadSymbol("glVertexStream4fvATI"));
	gl->VertexStream4iATI = reinterpret_cast<gl_vertex_stream4i_ati_t*>(soglLoadSymbol("glVertexStream4iATI"));
	gl->VertexStream4ivATI = reinterpret_cast<gl_vertex_stream4iv_ati_t*>(soglLoadSymbol("glVertexStream4ivATI"));
	gl->VertexStream4sATI = reinterpret_cast<gl_vertex_stream4s_ati_t*>(soglLoadSymbol("glVertexStream4sATI"));
	gl->VertexStream4svATI = reinterpret_cast<gl_vertex_stream4sv_ati_t*>(soglLoadSymbol("glVertexStream4svATI"));
	gl->VertexWeightPointerEXT = reinterpret_cast<gl_vertex_weight_pointer_ext_t*>(soglLoadSymbol("glVertexWeightPointerEXT"));
	gl->VertexWeightfEXT = reinterpret_cast<gl_vertex_weightf_ext_t*>(soglLoadSymbol("glVertexWeightfEXT"));
	gl->VertexWeightfvEXT = reinterpret_cast<gl_vertex_weightfv_ext_t*>(soglLoadSymbol("glVertexWeightfvEXT"));
	gl->VertexWeighthNV = reinterpret_cast<gl_vertex_weighth_nv_t*>(soglLoadSymbol("glVertexWeighthNV"));
	gl->VertexWeighthvNV = reinterpret_cast<gl_vertex_weighthv_nv_t*>(soglLoadSymbol("glVertexWeighthvNV"));
	gl->VideoCaptureNV = reinterpret_cast<gl_video_capture_nv_t*>(soglLoadSymbol("glVideoCaptureNV"));
	gl->VideoCaptureStreamParameterdvNV = reinterpret_cast<gl_video_capture_stream_parameterdv_nv_t*>(soglLoadSymbol("glVideoCaptureStreamParameterdvNV"));
	gl->VideoCaptureStreamParameterfvNV = reinterpret_cast<gl_video_capture_stream_parameterfv_nv_t*>(soglLoadSymbol("glVideoCaptureStreamParameterfvNV"));
	gl->VideoCaptureStreamParameterivNV = reinterpret_cast<gl_video_capture_stream_parameteriv_nv_t*>(soglLoadSymbol("glVideoCaptureStreamParameterivNV"));
	gl->ViewportArrayv = reinterpret_cast<gl_viewport_arrayv_t*>(soglLoadSymbol("glViewportArrayv"));
	gl->ViewportIndexedf = reinterpret_cast<gl_viewport_indexedf_t*>(soglLoadSymbol("glViewportIndexedf"));
	gl->ViewportIndexedfv = reinterpret_cast<gl_viewport_indexedfv_t*>(soglLoadSymbol("glViewportIndexedfv"));
	gl->ViewportPositionWScaleNV = reinterpret_cast<gl_viewport_position_wscale_nv_t*>(soglLoadSymbol("glViewportPositionWScaleNV"));
	gl->ViewportSwizzleNV = reinterpret_cast<gl_viewport_swizzle_nv_t*>(soglLoadSymbol("glViewportSwizzleNV"));
	gl->WaitSemaphoreEXT = reinterpret_cast<gl_wait_semaphore_ext_t*>(soglLoadSymbol("glWaitSemaphoreEXT"));
	gl->WaitSync = reinterpret_cast<gl_wait_sync_t*>(soglLoadSymbol("glWaitSync"));
	gl->WaitVkSemaphoreNV = reinterpret_cast<gl_wait_vk_semaphore_nv_t*>(soglLoadSymbol("glWaitVkSemaphoreNV"));
	gl->WeightPathsNV = reinterpret_cast<gl_weight_paths_nv_t*>(soglLoadSymbol("glWeightPathsNV"));
	gl->WeightPointerARB = reinterpret_cast<gl_weight_pointer_arb_t*>(soglLoadSymbol("glWeightPointerARB"));
	gl->WeightbvARB = reinterpret_cast<gl_weightbv_arb_t*>(soglLoadSymbol("glWeightbvARB"));
	gl->WeightdvARB = reinterpret_cast<gl_weightdv_arb_t*>(soglLoadSymbol("glWeightdvARB"));
	gl->WeightfvARB = reinterpret_cast<gl_weightfv_arb_t*>(soglLoadSymbol("glWeightfvARB"));
	gl->WeightivARB = reinterpret_cast<gl_weightiv_arb_t*>(soglLoadSymbol("glWeightivARB"));
	gl->WeightsvARB = reinterpret_cast<gl_weightsv_arb_t*>(soglLoadSymbol("glWeightsvARB"));
	gl->WeightubvARB = reinterpret_cast<gl_weightubv_arb_t*>(soglLoadSymbol("glWeightubvARB"));
	gl->WeightuivARB = reinterpret_cast<gl_weightuiv_arb_t*>(soglLoadSymbol("glWeightuivARB"));
	gl->WeightusvARB = reinterpret_cast<gl_weightusv_arb_t*>(soglLoadSymbol("glWeightusvARB"));
	gl->WindowPos2d = reinterpret_cast<gl_window_pos2d_t*>(soglLoadSymbol("glWindowPos2d"));
	gl->WindowPos2dARB = reinterpret_cast<gl_window_pos2d_arb_t*>(soglLoadSymbol("glWindowPos2dARB"));
	gl->WindowPos2dMESA = reinterpret_cast<gl_window_pos2d_mesa_t*>(soglLoadSymbol("glWindowPos2dMESA"));
	gl->WindowPos2dv = reinterpret_cast<gl_window_pos2dv_t*>(soglLoadSymbol("glWindowPos2dv"));
	gl->WindowPos2dvARB = reinterpret_cast<gl_window_pos2dv_arb_t*>(soglLoadSymbol("glWindowPos2dvARB"));
	gl->WindowPos2dvMESA = reinterpret_cast<gl_window_pos2dv_mesa_t*>(soglLoadSymbol("glWindowPos2dvMESA"));
	gl->WindowPos2f = reinterpret_cast<gl_window_pos2f_t*>(soglLoadSymbol("glWindowPos2f"));
	gl->WindowPos2fARB = reinterpret_cast<gl_window_pos2f_arb_t*>(soglLoadSymbol("glWindowPos2fARB"));
	gl->WindowPos2fMESA = reinterpret_cast<gl_window_pos2f_mesa_t*>(soglLoadSymbol("glWindowPos2fMESA"));
	gl->WindowPos2fv = reinterpret_cast<gl_window_pos2fv_t*>(soglLoadSymbol("glWindowPos2fv"));
	gl->WindowPos2fvARB = reinterpret_cast<gl_window_pos2fv_arb_t*>(soglLoadSymbol("glWindowPos2fvARB"));
	gl->WindowPos2fvMESA = reinterpret_cast<gl_window_pos2fv_mesa_t*>(soglLoadSymbol("glWindowPos2fvMESA"));
	gl->WindowPos2i = reinterpret_cast<gl_window_pos2i_t*>(soglLoadSymbol("glWindowPos2i"));
	gl->WindowPos2iARB = reinterpret_cast<gl_window_pos2i_arb_t*>(soglLoadSymbol("glWindowPos2iARB"));
	gl->WindowPos2iMESA = reinterpret_cast<gl_window_pos2i_mesa_t*>(soglLoadSymbol("glWindowPos2iMESA"));
	gl->WindowPos2iv = reinterpret_cast<gl_window_pos2iv_t*>(soglLoadSymbol("glWindowPos2iv"));
	gl->WindowPos2ivARB = reinterpret_cast<gl_window_pos2iv_arb_t*>(soglLoadSymbol("glWindowPos2ivARB"));
	gl->WindowPos2ivMESA = reinterpret_cast<gl_window_pos2iv_mesa_t*>(soglLoadSymbol("glWindowPos2ivMESA"));
	gl->WindowPos2s = reinterpret_cast<gl_window_pos2s_t*>(soglLoadSymbol("glWindowPos2s"));
	gl->WindowPos2sARB = reinterpret_cast<gl_window_pos2s_arb_t*>(soglLoadSymbol("glWindowPos2sARB"));
	gl->WindowPos2sMESA = reinterpret_cast<gl_window_pos2s_mesa_t*>(soglLoadSymbol("glWindowPos2sMESA"));
	gl->WindowPos2sv = reinterpret_cast<gl_window_pos2sv_t*>(soglLoadSymbol("glWindowPos2sv"));
	gl->WindowPos2svARB = reinterpret_cast<gl_window_pos2sv_arb_t*>(soglLoadSymbol("glWindowPos2svARB"));
	gl->WindowPos2svMESA = reinterpret_cast<gl_window_pos2sv_mesa_t*>(soglLoadSymbol("glWindowPos2svMESA"));
	gl->WindowPos3d = reinterpret_cast<gl_window_pos3d_t*>(soglLoadSymbol("glWindowPos3d"));
	gl->WindowPos3dARB = reinterpret_cast<gl_window_pos3d_arb_t*>(soglLoadSymbol("glWindowPos3dARB"));
	gl->WindowPos3dMESA = reinterpret_cast<gl_window_pos3d_mesa_t*>(soglLoadSymbol("glWindowPos3dMESA"));
	gl->WindowPos3dv = reinterpret_cast<gl_window_pos3dv_t*>(soglLoadSymbol("glWindowPos3dv"));
	gl->WindowPos3dvARB = reinterpret_cast<gl_window_pos3dv_arb_t*>(soglLoadSymbol("glWindowPos3dvARB"));
	gl->WindowPos3dvMESA = reinterpret_cast<gl_window_pos3dv_mesa_t*>(soglLoadSymbol("glWindowPos3dvMESA"));
	gl->WindowPos3f = reinterpret_cast<gl_window_pos3f_t*>(soglLoadSymbol("glWindowPos3f"));
	gl->WindowPos3fARB = reinterpret_cast<gl_window_pos3f_arb_t*>(soglLoadSymbol("glWindowPos3fARB"));
	gl->WindowPos3fMESA = reinterpret_cast<gl_window_pos3f_mesa_t*>(soglLoadSymbol("glWindowPos3fMESA"));
	gl->WindowPos3fv = reinterpret_cast<gl_window_pos3fv_t*>(soglLoadSymbol("glWindowPos3fv"));
	gl->WindowPos3fvARB = reinterpret_cast<gl_window_pos3fv_arb_t*>(soglLoadSymbol("glWindowPos3fvARB"));
	gl->WindowPos3fvMESA = reinterpret_cast<gl_window_pos3fv_mesa_t*>(soglLoadSymbol("glWindowPos3fvMESA"));
	gl->WindowPos3i = reinterpret_cast<gl_window_pos3i_t*>(soglLoadSymbol("glWindowPos3i"));
	gl->WindowPos3iARB = reinterpret_cast<gl_window_pos3i_arb_t*>(soglLoadSymbol("glWindowPos3iARB"));
	gl->WindowPos3iMESA = reinterpret_cast<gl_window_pos3i_mesa_t*>(soglLoadSymbol("glWindowPos3iMESA"));
	gl->WindowPos3iv = reinterpret_cast<gl_window_pos3iv_t*>(soglLoadSymbol("glWindowPos3iv"));
	gl->WindowPos3ivARB = reinterpret_cast<gl_window_pos3iv_arb_t*>(soglLoadSymbol("glWindowPos3ivARB"));
	gl->WindowPos3ivMESA = reinterpret_cast<gl_window_pos3iv_mesa_t*>(soglLoadSymbol("glWindowPos3ivMESA"));
	gl->WindowPos3s = reinterpret_cast<gl_window_pos3s_t*>(soglLoadSymbol("glWindowPos3s"));
	gl->WindowPos3sARB = reinterpret_cast<gl_window_pos3s_arb_t*>(soglLoadSymbol("glWindowPos3sARB"));
	gl->WindowPos3sMESA = reinterpret_cast<gl_window_pos3s_mesa_t*>(soglLoadSymbol("glWindowPos3sMESA"));
	gl->WindowPos3sv = reinterpret_cast<gl_window_pos3sv_t*>(soglLoadSymbol("glWindowPos3sv"));
	gl->WindowPos3svARB = reinterpret_cast<gl_window_pos3sv_arb_t*>(soglLoadSymbol("glWindowPos3svARB"));
	gl->WindowPos3svMESA = reinterpret_cast<gl_window_pos3sv_mesa_t*>(soglLoadSymbol("glWindowPos3svMESA"));
	gl->WindowPos4dMESA = reinterpret_cast<gl_window_pos4d_mesa_t*>(soglLoadSymbol("glWindowPos4dMESA"));
	gl->WindowPos4dvMESA = reinterpret_cast<gl_window_pos4dv_mesa_t*>(soglLoadSymbol("glWindowPos4dvMESA"));
	gl->WindowPos4fMESA = reinterpret_cast<gl_window_pos4f_mesa_t*>(soglLoadSymbol("glWindowPos4fMESA"));
	gl->WindowPos4fvMESA = reinterpret_cast<gl_window_pos4fv_mesa_t*>(soglLoadSymbol("glWindowPos4fvMESA"));
	gl->WindowPos4iMESA = reinterpret_cast<gl_window_pos4i_mesa_t*>(soglLoadSymbol("glWindowPos4iMESA"));
	gl->WindowPos4ivMESA = reinterpret_cast<gl_window_pos4iv_mesa_t*>(soglLoadSymbol("glWindowPos4ivMESA"));
	gl->WindowPos4sMESA = reinterpret_cast<gl_window_pos4s_mesa_t*>(soglLoadSymbol("glWindowPos4sMESA"));
	gl->WindowPos4svMESA = reinterpret_cast<gl_window_pos4sv_mesa_t*>(soglLoadSymbol("glWindowPos4svMESA"));
	gl->WindowRectanglesEXT = reinterpret_cast<gl_window_rectangles_ext_t*>(soglLoadSymbol("glWindowRectanglesEXT"));
	gl->WriteMaskEXT = reinterpret_cast<gl_write_mask_ext_t*>(soglLoadSymbol("glWriteMaskEXT"));
#if _WIN32
	return (void*)context;
#else
	return nullptr;
#endif
}

//Much needed inlined function calls
inline GLboolean glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) {
	return GLFunctions()->AcquireKeyedMutexWin32EXT(memory, key, timeout);
}

inline void glActiveProgramEXT(GLuint program) {
	return GLFunctions()->ActiveProgramEXT(program);
}

inline void glActiveShaderProgram(GLuint pipeline, GLuint program) {
	return GLFunctions()->ActiveShaderProgram(pipeline, program);
}

inline void glActiveStencilFaceEXT(GLenum face) {
	return GLFunctions()->ActiveStencilFaceEXT(face);
}

inline void glActiveTexture(GLenum texture) {
	return GLFunctions()->ActiveTexture(texture);
}

inline void glActiveTextureARB(GLenum texture) {
	return GLFunctions()->ActiveTextureARB(texture);
}

inline void glActiveVaryingNV(GLuint program, const GLchar *name) {
	return GLFunctions()->ActiveVaryingNV(program, name);
}

inline void glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
	return GLFunctions()->AlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

inline void glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
	return GLFunctions()->AlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

inline void glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
	return GLFunctions()->AlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

inline void glApplyTextureEXT(GLenum mode) {
	return GLFunctions()->ApplyTextureEXT(mode);
}

inline GLboolean glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences) {
	return GLFunctions()->AreProgramsResidentNV(n, programs, residences);
}

inline GLboolean glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences) {
	return GLFunctions()->AreTexturesResidentEXT(n, textures, residences);
}

inline void glArrayElementEXT(GLint i) {
	return GLFunctions()->ArrayElementEXT(i);
}

inline void glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
	return GLFunctions()->ArrayObjectATI(array, size, type, stride, buffer, offset);
}

inline void glAsyncMarkerSGIX(GLuint marker) {
	return GLFunctions()->AsyncMarkerSGIX(marker);
}

inline void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) {
	return GLFunctions()->AttachObjectARB(containerObj, obj);
}

inline void glAttachShader(GLuint program, GLuint shader) {
	return GLFunctions()->AttachShader(program, shader);
}

inline void glBeginConditionalRender(GLuint id, GLenum mode) {
	return GLFunctions()->BeginConditionalRender(id, mode);
}

inline void glBeginConditionalRenderNV(GLuint id, GLenum mode) {
	return GLFunctions()->BeginConditionalRenderNV(id, mode);
}

inline void glBeginConditionalRenderNVX(GLuint id) {
	return GLFunctions()->BeginConditionalRenderNVX(id);
}

inline void glBeginFragmentShaderATI(void) {
	return GLFunctions()->BeginFragmentShaderATI();
}

inline void glBeginOcclusionQueryNV(GLuint id) {
	return GLFunctions()->BeginOcclusionQueryNV(id);
}

inline void glBeginPerfMonitorAMD(GLuint monitor) {
	return GLFunctions()->BeginPerfMonitorAMD(monitor);
}

inline void glBeginPerfQueryINTEL(GLuint queryHandle) {
	return GLFunctions()->BeginPerfQueryINTEL(queryHandle);
}

inline void glBeginQuery(GLenum target, GLuint id) {
	return GLFunctions()->BeginQuery(target, id);
}

inline void glBeginQueryARB(GLenum target, GLuint id) {
	return GLFunctions()->BeginQueryARB(target, id);
}

inline void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
	return GLFunctions()->BeginQueryIndexed(target, index, id);
}

inline void glBeginTransformFeedback(GLenum primitiveMode) {
	return GLFunctions()->BeginTransformFeedback(primitiveMode);
}

inline void glBeginTransformFeedbackEXT(GLenum primitiveMode) {
	return GLFunctions()->BeginTransformFeedbackEXT(primitiveMode);
}

inline void glBeginTransformFeedbackNV(GLenum primitiveMode) {
	return GLFunctions()->BeginTransformFeedbackNV(primitiveMode);
}

inline void glBeginVertexShaderEXT(void) {
	return GLFunctions()->BeginVertexShaderEXT();
}

inline void glBeginVideoCaptureNV(GLuint video_capture_slot) {
	return GLFunctions()->BeginVideoCaptureNV(video_capture_slot);
}

inline void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {
	return GLFunctions()->BindAttribLocation(program, index, name);
}

inline void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name) {
	return GLFunctions()->BindAttribLocationARB(programObj, index, name);
}

inline void glBindBuffer(GLenum target, GLuint buffer) {
	return GLFunctions()->BindBuffer(target, buffer);
}

inline void glBindBufferARB(GLenum target, GLuint buffer) {
	return GLFunctions()->BindBufferARB(target, buffer);
}

inline void glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
	return GLFunctions()->BindBufferBase(target, index, buffer);
}

inline void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) {
	return GLFunctions()->BindBufferBaseEXT(target, index, buffer);
}

inline void glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) {
	return GLFunctions()->BindBufferBaseNV(target, index, buffer);
}

inline void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
	return GLFunctions()->BindBufferOffsetEXT(target, index, buffer, offset);
}

inline void glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
	return GLFunctions()->BindBufferOffsetNV(target, index, buffer, offset);
}

inline void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
	return GLFunctions()->BindBufferRange(target, index, buffer, offset, size);
}

inline void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
	return GLFunctions()->BindBufferRangeEXT(target, index, buffer, offset, size);
}

inline void glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
	return GLFunctions()->BindBufferRangeNV(target, index, buffer, offset, size);
}

inline void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers) {
	return GLFunctions()->BindBuffersBase(target, first, count, buffers);
}

inline void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) {
	return GLFunctions()->BindBuffersRange(target, first, count, buffers, offsets, sizes);
}

inline void glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {
	return GLFunctions()->BindFragDataLocation(program, color, name);
}

inline void glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name) {
	return GLFunctions()->BindFragDataLocationEXT(program, color, name);
}

inline void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {
	return GLFunctions()->BindFragDataLocationIndexed(program, colorNumber, index, name);
}

inline void glBindFragmentShaderATI(GLuint id) {
	return GLFunctions()->BindFragmentShaderATI(id);
}

inline void glBindFramebuffer(GLenum target, GLuint framebuffer) {
	return GLFunctions()->BindFramebuffer(target, framebuffer);
}

inline void glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
	return GLFunctions()->BindFramebufferEXT(target, framebuffer);
}

inline void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
	return GLFunctions()->BindImageTexture(unit, texture, level, layered, layer, access, format);
}

inline void glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) {
	return GLFunctions()->BindImageTextureEXT(index, texture, level, layered, layer, access, format);
}

inline void glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures) {
	return GLFunctions()->BindImageTextures(first, count, textures);
}

inline GLuint glBindLightParameterEXT(GLenum light, GLenum value) {
	return GLFunctions()->BindLightParameterEXT(light, value);
}

inline GLuint glBindMaterialParameterEXT(GLenum face, GLenum value) {
	return GLFunctions()->BindMaterialParameterEXT(face, value);
}

inline void glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) {
	return GLFunctions()->BindMultiTextureEXT(texunit, target, texture);
}

inline GLuint glBindParameterEXT(GLenum value) {
	return GLFunctions()->BindParameterEXT(value);
}

inline void glBindProgramARB(GLenum target, GLuint program) {
	return GLFunctions()->BindProgramARB(target, program);
}

inline void glBindProgramNV(GLenum target, GLuint id) {
	return GLFunctions()->BindProgramNV(target, id);
}

inline void glBindProgramPipeline(GLuint pipeline) {
	return GLFunctions()->BindProgramPipeline(pipeline);
}

inline void glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
	return GLFunctions()->BindRenderbuffer(target, renderbuffer);
}

inline void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
	return GLFunctions()->BindRenderbufferEXT(target, renderbuffer);
}

inline void glBindSampler(GLuint unit, GLuint sampler) {
	return GLFunctions()->BindSampler(unit, sampler);
}

inline void glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers) {
	return GLFunctions()->BindSamplers(first, count, samplers);
}

inline GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) {
	return GLFunctions()->BindTexGenParameterEXT(unit, coord, value);
}

inline void glBindTextureEXT(GLenum target, GLuint texture) {
	return GLFunctions()->BindTextureEXT(target, texture);
}

inline void glBindTextureUnit(GLuint unit, GLuint texture) {
	return GLFunctions()->BindTextureUnit(unit, texture);
}

inline GLuint glBindTextureUnitParameterEXT(GLenum unit, GLenum value) {
	return GLFunctions()->BindTextureUnitParameterEXT(unit, value);
}

inline void glBindTextures(GLuint first, GLsizei count, const GLuint *textures) {
	return GLFunctions()->BindTextures(first, count, textures);
}

inline void glBindTransformFeedback(GLenum target, GLuint id) {
	return GLFunctions()->BindTransformFeedback(target, id);
}

inline void glBindTransformFeedbackNV(GLenum target, GLuint id) {
	return GLFunctions()->BindTransformFeedbackNV(target, id);
}

inline void glBindVertexArray(GLuint array) {
	return GLFunctions()->BindVertexArray(array);
}

inline void glBindVertexArrayAPPLE(GLuint array) {
	return GLFunctions()->BindVertexArrayAPPLE(array);
}

inline void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
	return GLFunctions()->BindVertexBuffer(bindingindex, buffer, offset, stride);
}

inline void glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {
	return GLFunctions()->BindVertexBuffers(first, count, buffers, offsets, strides);
}

inline void glBindVertexShaderEXT(GLuint id) {
	return GLFunctions()->BindVertexShaderEXT(id);
}

inline void glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) {
	return GLFunctions()->BindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
}

inline void glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) {
	return GLFunctions()->BindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
}

inline void glBinormalPointerEXT(GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->BinormalPointerEXT(type, stride, pointer);
}

inline void glBlendBarrierKHR(void) {
	return GLFunctions()->BlendBarrierKHR();
}

inline void glBlendBarrierNV(void) {
	return GLFunctions()->BlendBarrierNV();
}

inline void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	return GLFunctions()->BlendColor(red, green, blue, alpha);
}

inline void glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	return GLFunctions()->BlendColorEXT(red, green, blue, alpha);
}

inline void glBlendEquation(GLenum mode) {
	return GLFunctions()->BlendEquation(mode);
}

inline void glBlendEquationEXT(GLenum mode) {
	return GLFunctions()->BlendEquationEXT(mode);
}

inline void glBlendEquationIndexedAMD(GLuint buf, GLenum mode) {
	return GLFunctions()->BlendEquationIndexedAMD(buf, mode);
}

inline void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
	return GLFunctions()->BlendEquationSeparate(modeRGB, modeAlpha);
}

inline void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) {
	return GLFunctions()->BlendEquationSeparateEXT(modeRGB, modeAlpha);
}

inline void glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
	return GLFunctions()->BlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
}

inline void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
	return GLFunctions()->BlendEquationSeparatei(buf, modeRGB, modeAlpha);
}

inline void glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
	return GLFunctions()->BlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
}

inline void glBlendEquationi(GLuint buf, GLenum mode) {
	return GLFunctions()->BlendEquationi(buf, mode);
}

inline void glBlendEquationiARB(GLuint buf, GLenum mode) {
	return GLFunctions()->BlendEquationiARB(buf, mode);
}

inline void glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) {
	return GLFunctions()->BlendFuncIndexedAMD(buf, src, dst);
}

inline void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
	return GLFunctions()->BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

inline void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
	return GLFunctions()->BlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

inline void glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
	return GLFunctions()->BlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

inline void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
	return GLFunctions()->BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

inline void glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
	return GLFunctions()->BlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

inline void glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
	return GLFunctions()->BlendFunci(buf, src, dst);
}

inline void glBlendFunciARB(GLuint buf, GLenum src, GLenum dst) {
	return GLFunctions()->BlendFunciARB(buf, src, dst);
}

inline void glBlendParameteriNV(GLenum pname, GLint value) {
	return GLFunctions()->BlendParameteriNV(pname, value);
}

inline void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
	return GLFunctions()->BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

inline void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
	return GLFunctions()->BlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

inline void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
	return GLFunctions()->BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

inline void glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {
	return GLFunctions()->BufferAddressRangeNV(pname, index, address, length);
}

inline void glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {
	return GLFunctions()->BufferData(target, size, data, usage);
}

inline void glBufferDataARB(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage) {
	return GLFunctions()->BufferDataARB(target, size, data, usage);
}

inline void glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) {
	return GLFunctions()->BufferPageCommitmentARB(target, offset, size, commit);
}

inline void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) {
	return GLFunctions()->BufferParameteriAPPLE(target, pname, param);
}

inline void glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) {
	return GLFunctions()->BufferStorage(target, size, data, flags);
}

inline void glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
	return GLFunctions()->BufferStorageExternalEXT(target, offset, size, clientBuffer, flags);
}

inline void glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) {
	return GLFunctions()->BufferStorageMemEXT(target, size, memory, offset);
}

inline void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {
	return GLFunctions()->BufferSubData(target, offset, size, data);
}

inline void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data) {
	return GLFunctions()->BufferSubDataARB(target, offset, size, data);
}

inline void glCallCommandListNV(GLuint list) {
	return GLFunctions()->CallCommandListNV(list);
}

inline GLenum glCheckFramebufferStatus(GLenum target) {
	return GLFunctions()->CheckFramebufferStatus(target);
}

inline GLenum glCheckFramebufferStatusEXT(GLenum target) {
	return GLFunctions()->CheckFramebufferStatusEXT(target);
}

inline GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {
	return GLFunctions()->CheckNamedFramebufferStatus(framebuffer, target);
}

inline GLenum glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) {
	return GLFunctions()->CheckNamedFramebufferStatusEXT(framebuffer, target);
}

inline void glClampColor(GLenum target, GLenum clamp) {
	return GLFunctions()->ClampColor(target, clamp);
}

inline void glClampColorARB(GLenum target, GLenum clamp) {
	return GLFunctions()->ClampColorARB(target, clamp);
}

inline void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ClearBufferData(target, internalformat, format, type, data);
}

inline void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ClearBufferSubData(target, internalformat, offset, size, format, type, data);
}

inline void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
	return GLFunctions()->ClearBufferfi(buffer, drawbuffer, depth, stencil);
}

inline void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {
	return GLFunctions()->ClearBufferfv(buffer, drawbuffer, value);
}

inline void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {
	return GLFunctions()->ClearBufferiv(buffer, drawbuffer, value);
}

inline void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {
	return GLFunctions()->ClearBufferuiv(buffer, drawbuffer, value);
}

inline void glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) {
	return GLFunctions()->ClearColorIiEXT(red, green, blue, alpha);
}

inline void glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
	return GLFunctions()->ClearColorIuiEXT(red, green, blue, alpha);
}

inline void glClearDepthdNV(GLdouble depth) {
	return GLFunctions()->ClearDepthdNV(depth);
}

inline void glClearDepthf(GLfloat d) {
	return GLFunctions()->ClearDepthf(d);
}

inline void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ClearNamedBufferData(buffer, internalformat, format, type, data);
}

inline void glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
}

inline void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
}

inline void glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
}

inline void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
	return GLFunctions()->ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
}

inline void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) {
	return GLFunctions()->ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
}

inline void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) {
	return GLFunctions()->ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
}

inline void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) {
	return GLFunctions()->ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
}

inline void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ClearTexImage(texture, level, format, type, data);
}

inline void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

inline void glClientActiveTexture(GLenum texture) {
	return GLFunctions()->ClientActiveTexture(texture);
}

inline void glClientActiveTextureARB(GLenum texture) {
	return GLFunctions()->ClientActiveTextureARB(texture);
}

inline void glClientActiveVertexStreamATI(GLenum stream) {
	return GLFunctions()->ClientActiveVertexStreamATI(stream);
}

inline void glClientAttribDefaultEXT(GLbitfield mask) {
	return GLFunctions()->ClientAttribDefaultEXT(mask);
}

inline GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
	return GLFunctions()->ClientWaitSync(sync, flags, timeout);
}

inline void glClipControl(GLenum origin, GLenum depth) {
	return GLFunctions()->ClipControl(origin, depth);
}

inline void glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->Color3fVertex3fSUN(r, g, b, x, y, z);
}

inline void glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v) {
	return GLFunctions()->Color3fVertex3fvSUN(c, v);
}

inline void glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
	return GLFunctions()->Color3hNV(red, green, blue);
}

inline void glColor3hvNV(const GLhalfNV *v) {
	return GLFunctions()->Color3hvNV(v);
}

inline void glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->Color4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
}

inline void glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->Color4fNormal3fVertex3fvSUN(c, n, v);
}

inline void glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) {
	return GLFunctions()->Color4hNV(red, green, blue, alpha);
}

inline void glColor4hvNV(const GLhalfNV *v) {
	return GLFunctions()->Color4hvNV(v);
}

inline void glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) {
	return GLFunctions()->Color4ubVertex2fSUN(r, g, b, a, x, y);
}

inline void glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v) {
	return GLFunctions()->Color4ubVertex2fvSUN(c, v);
}

inline void glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->Color4ubVertex3fSUN(r, g, b, a, x, y, z);
}

inline void glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v) {
	return GLFunctions()->Color4ubVertex3fvSUN(c, v);
}

inline void glColorFormatNV(GLint size, GLenum type, GLsizei stride) {
	return GLFunctions()->ColorFormatNV(size, type, stride);
}

inline void glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
	return GLFunctions()->ColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

inline void glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
	return GLFunctions()->ColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

inline void glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
	return GLFunctions()->ColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

inline void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
	return GLFunctions()->ColorMaskIndexedEXT(index, r, g, b, a);
}

inline void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
	return GLFunctions()->ColorMaski(index, r, g, b, a);
}

inline void glColorP3ui(GLenum type, GLuint color) {
	return GLFunctions()->ColorP3ui(type, color);
}

inline void glColorP3uiv(GLenum type, const GLuint *color) {
	return GLFunctions()->ColorP3uiv(type, color);
}

inline void glColorP4ui(GLenum type, GLuint color) {
	return GLFunctions()->ColorP4ui(type, color);
}

inline void glColorP4uiv(GLenum type, const GLuint *color) {
	return GLFunctions()->ColorP4uiv(type, color);
}

inline void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
	return GLFunctions()->ColorPointerEXT(size, type, stride, count, pointer);
}

inline void glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
	return GLFunctions()->ColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

inline void glColorPointervINTEL(GLint size, GLenum type, const void **pointer) {
	return GLFunctions()->ColorPointervINTEL(size, type, pointer);
}

inline void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ColorSubTable(target, start, count, format, type, data);
}

inline void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) {
	return GLFunctions()->ColorSubTableEXT(target, start, count, format, type, data);
}

inline void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) {
	return GLFunctions()->ColorTable(target, internalformat, width, format, type, table);
}

inline void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table) {
	return GLFunctions()->ColorTableEXT(target, internalFormat, width, format, type, table);
}

inline void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->ColorTableParameterfv(target, pname, params);
}

inline void glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->ColorTableParameterfvSGI(target, pname, params);
}

inline void glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->ColorTableParameteriv(target, pname, params);
}

inline void glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->ColorTableParameterivSGI(target, pname, params);
}

inline void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) {
	return GLFunctions()->ColorTableSGI(target, internalformat, width, format, type, table);
}

inline void glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
	return GLFunctions()->CombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
}

inline void glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) {
	return GLFunctions()->CombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

inline void glCombinerParameterfNV(GLenum pname, GLfloat param) {
	return GLFunctions()->CombinerParameterfNV(pname, param);
}

inline void glCombinerParameterfvNV(GLenum pname, const GLfloat *params) {
	return GLFunctions()->CombinerParameterfvNV(pname, params);
}

inline void glCombinerParameteriNV(GLenum pname, GLint param) {
	return GLFunctions()->CombinerParameteriNV(pname, param);
}

inline void glCombinerParameterivNV(GLenum pname, const GLint *params) {
	return GLFunctions()->CombinerParameterivNV(pname, params);
}

inline void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params) {
	return GLFunctions()->CombinerStageParameterfvNV(stage, pname, params);
}

inline void glCommandListSegmentsNV(GLuint list, GLuint segments) {
	return GLFunctions()->CommandListSegmentsNV(list, segments);
}

inline void glCompileCommandListNV(GLuint list) {
	return GLFunctions()->CompileCommandListNV(list);
}

inline void glCompileShader(GLuint shader) {
	return GLFunctions()->CompileShader(shader);
}

inline void glCompileShaderARB(GLhandleARB shaderObj) {
	return GLFunctions()->CompileShaderARB(shaderObj);
}

inline void glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length) {
	return GLFunctions()->CompileShaderIncludeARB(shader, count, path, length);
}

inline void glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
}

inline void glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
}

inline void glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

inline void glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
}

inline void glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

inline void glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}

inline void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}

inline void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
}

inline void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}

inline void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
}

inline void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}

inline void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
}

inline void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}

inline void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
}

inline void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

inline void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

inline void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

inline void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

inline void glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
}

inline void glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
}

inline void glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

inline void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
}

inline void glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
}

inline void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}

inline void glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

inline void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
	return GLFunctions()->CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

inline void glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) {
	return GLFunctions()->CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}

inline void glConservativeRasterParameterfNV(GLenum pname, GLfloat value) {
	return GLFunctions()->ConservativeRasterParameterfNV(pname, value);
}

inline void glConservativeRasterParameteriNV(GLenum pname, GLint param) {
	return GLFunctions()->ConservativeRasterParameteriNV(pname, param);
}

inline void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) {
	return GLFunctions()->ConvolutionFilter1D(target, internalformat, width, format, type, image);
}

inline void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) {
	return GLFunctions()->ConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
}

inline void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) {
	return GLFunctions()->ConvolutionFilter2D(target, internalformat, width, height, format, type, image);
}

inline void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) {
	return GLFunctions()->ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
}

inline void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) {
	return GLFunctions()->ConvolutionParameterf(target, pname, params);
}

inline void glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) {
	return GLFunctions()->ConvolutionParameterfEXT(target, pname, params);
}

inline void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->ConvolutionParameterfv(target, pname, params);
}

inline void glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->ConvolutionParameterfvEXT(target, pname, params);
}

inline void glConvolutionParameteri(GLenum target, GLenum pname, GLint params) {
	return GLFunctions()->ConvolutionParameteri(target, pname, params);
}

inline void glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) {
	return GLFunctions()->ConvolutionParameteriEXT(target, pname, params);
}

inline void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->ConvolutionParameteriv(target, pname, params);
}

inline void glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->ConvolutionParameterivEXT(target, pname, params);
}

inline void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
	return GLFunctions()->CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
}

inline void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyColorSubTable(target, start, x, y, width);
}

inline void glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyColorSubTableEXT(target, start, x, y, width);
}

inline void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyColorTable(target, internalformat, x, y, width);
}

inline void glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyColorTableSGI(target, internalformat, x, y, width);
}

inline void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyConvolutionFilter1D(target, internalformat, x, y, width);
}

inline void glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
}

inline void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyConvolutionFilter2D(target, internalformat, x, y, width, height);
}

inline void glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
}

inline void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
	return GLFunctions()->CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

inline void glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
	return GLFunctions()->CopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

inline void glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
	return GLFunctions()->CopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
}

inline void glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
	return GLFunctions()->CopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
}

inline void glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
}

inline void glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
}

inline void glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

inline void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
	return GLFunctions()->CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

inline void glCopyPathNV(GLuint resultPath, GLuint srcPath) {
	return GLFunctions()->CopyPathNV(resultPath, srcPath);
}

inline void glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
	return GLFunctions()->CopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
}

inline void glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
	return GLFunctions()->CopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
}

inline void glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
}

inline void glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
}

inline void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

inline void glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

inline void glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
	return GLFunctions()->CopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
}

inline void glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
	return GLFunctions()->CopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
}

inline void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyTextureSubImage1D(texture, level, xoffset, x, y, width);
}

inline void glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
	return GLFunctions()->CopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
}

inline void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
}

inline void glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
}

inline void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}

inline void glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->CopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

inline void glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
	return GLFunctions()->CoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

inline void glCoverFillPathNV(GLuint path, GLenum coverMode) {
	return GLFunctions()->CoverFillPathNV(path, coverMode);
}

inline void glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
	return GLFunctions()->CoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

inline void glCoverStrokePathNV(GLuint path, GLenum coverMode) {
	return GLFunctions()->CoverStrokePathNV(path, coverMode);
}

inline void glCoverageModulationNV(GLenum components) {
	return GLFunctions()->CoverageModulationNV(components);
}

inline void glCoverageModulationTableNV(GLsizei n, const GLfloat *v) {
	return GLFunctions()->CoverageModulationTableNV(n, v);
}

inline void glCreateBuffers(GLsizei n, GLuint *buffers) {
	return GLFunctions()->CreateBuffers(n, buffers);
}

inline void glCreateCommandListsNV(GLsizei n, GLuint *lists) {
	return GLFunctions()->CreateCommandListsNV(n, lists);
}

inline void glCreateFramebuffers(GLsizei n, GLuint *framebuffers) {
	return GLFunctions()->CreateFramebuffers(n, framebuffers);
}

inline void glCreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects) {
	return GLFunctions()->CreateMemoryObjectsEXT(n, memoryObjects);
}

inline void glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle) {
	return GLFunctions()->CreatePerfQueryINTEL(queryId, queryHandle);
}

inline GLuint glCreateProgram(void) {
	return GLFunctions()->CreateProgram();
}

inline GLhandleARB glCreateProgramObjectARB(void) {
	return GLFunctions()->CreateProgramObjectARB();
}

inline void glCreateProgramPipelines(GLsizei n, GLuint *pipelines) {
	return GLFunctions()->CreateProgramPipelines(n, pipelines);
}

inline void glCreateQueries(GLenum target, GLsizei n, GLuint *ids) {
	return GLFunctions()->CreateQueries(target, n, ids);
}

inline void glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers) {
	return GLFunctions()->CreateRenderbuffers(n, renderbuffers);
}

inline void glCreateSamplers(GLsizei n, GLuint *samplers) {
	return GLFunctions()->CreateSamplers(n, samplers);
}

inline GLuint glCreateShader(GLenum type) {
	return GLFunctions()->CreateShader(type);
}

inline GLhandleARB glCreateShaderObjectARB(GLenum shaderType) {
	return GLFunctions()->CreateShaderObjectARB(shaderType);
}

inline GLuint glCreateShaderProgramEXT(GLenum type, const GLchar *string) {
	return GLFunctions()->CreateShaderProgramEXT(type, string);
}

inline GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings) {
	return GLFunctions()->CreateShaderProgramv(type, count, strings);
}

inline void glCreateStatesNV(GLsizei n, GLuint *states) {
	return GLFunctions()->CreateStatesNV(n, states);
}

inline GLsync glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags) {
	return GLFunctions()->CreateSyncFromCLeventARB(context, event, flags);
}

inline void glCreateTextures(GLenum target, GLsizei n, GLuint *textures) {
	return GLFunctions()->CreateTextures(target, n, textures);
}

inline void glCreateTransformFeedbacks(GLsizei n, GLuint *ids) {
	return GLFunctions()->CreateTransformFeedbacks(n, ids);
}

inline void glCreateVertexArrays(GLsizei n, GLuint *arrays) {
	return GLFunctions()->CreateVertexArrays(n, arrays);
}

inline void glCullParameterdvEXT(GLenum pname, GLdouble *params) {
	return GLFunctions()->CullParameterdvEXT(pname, params);
}

inline void glCullParameterfvEXT(GLenum pname, GLfloat *params) {
	return GLFunctions()->CullParameterfvEXT(pname, params);
}

inline void glCurrentPaletteMatrixARB(GLint index) {
	return GLFunctions()->CurrentPaletteMatrixARB(index);
}

inline void glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) {
	return GLFunctions()->DebugMessageCallback(callback, userParam);
}

inline void glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void *userParam) {
	return GLFunctions()->DebugMessageCallbackAMD(callback, userParam);
}

inline void glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam) {
	return GLFunctions()->DebugMessageCallbackARB(callback, userParam);
}

inline void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
	return GLFunctions()->DebugMessageControl(source, type, severity, count, ids, enabled);
}

inline void glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
	return GLFunctions()->DebugMessageControlARB(source, type, severity, count, ids, enabled);
}

inline void glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
	return GLFunctions()->DebugMessageEnableAMD(category, severity, count, ids, enabled);
}

inline void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
	return GLFunctions()->DebugMessageInsert(source, type, id, severity, length, buf);
}

inline void glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf) {
	return GLFunctions()->DebugMessageInsertAMD(category, severity, id, length, buf);
}

inline void glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
	return GLFunctions()->DebugMessageInsertARB(source, type, id, severity, length, buf);
}

inline void glDeformSGIX(GLbitfield mask) {
	return GLFunctions()->DeformSGIX(mask);
}

inline void glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) {
	return GLFunctions()->DeleteAsyncMarkersSGIX(marker, range);
}

inline void glDeleteBuffers(GLsizei n, const GLuint *buffers) {
	return GLFunctions()->DeleteBuffers(n, buffers);
}

inline void glDeleteBuffersARB(GLsizei n, const GLuint *buffers) {
	return GLFunctions()->DeleteBuffersARB(n, buffers);
}

inline void glDeleteCommandListsNV(GLsizei n, const GLuint *lists) {
	return GLFunctions()->DeleteCommandListsNV(n, lists);
}

inline void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences) {
	return GLFunctions()->DeleteFencesAPPLE(n, fences);
}

inline void glDeleteFencesNV(GLsizei n, const GLuint *fences) {
	return GLFunctions()->DeleteFencesNV(n, fences);
}

inline void glDeleteFragmentShaderATI(GLuint id) {
	return GLFunctions()->DeleteFragmentShaderATI(id);
}

inline void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {
	return GLFunctions()->DeleteFramebuffers(n, framebuffers);
}

inline void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers) {
	return GLFunctions()->DeleteFramebuffersEXT(n, framebuffers);
}

inline void glDeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects) {
	return GLFunctions()->DeleteMemoryObjectsEXT(n, memoryObjects);
}

inline void glDeleteNamedStringARB(GLint namelen, const GLchar *name) {
	return GLFunctions()->DeleteNamedStringARB(namelen, name);
}

inline void glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names) {
	return GLFunctions()->DeleteNamesAMD(identifier, num, names);
}

inline void glDeleteObjectARB(GLhandleARB obj) {
	return GLFunctions()->DeleteObjectARB(obj);
}

inline void glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids) {
	return GLFunctions()->DeleteOcclusionQueriesNV(n, ids);
}

inline void glDeletePathsNV(GLuint path, GLsizei range) {
	return GLFunctions()->DeletePathsNV(path, range);
}

inline void glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors) {
	return GLFunctions()->DeletePerfMonitorsAMD(n, monitors);
}

inline void glDeletePerfQueryINTEL(GLuint queryHandle) {
	return GLFunctions()->DeletePerfQueryINTEL(queryHandle);
}

inline void glDeleteProgram(GLuint program) {
	return GLFunctions()->DeleteProgram(program);
}

inline void glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {
	return GLFunctions()->DeleteProgramPipelines(n, pipelines);
}

inline void glDeleteProgramsARB(GLsizei n, const GLuint *programs) {
	return GLFunctions()->DeleteProgramsARB(n, programs);
}

inline void glDeleteProgramsNV(GLsizei n, const GLuint *programs) {
	return GLFunctions()->DeleteProgramsNV(n, programs);
}

inline void glDeleteQueries(GLsizei n, const GLuint *ids) {
	return GLFunctions()->DeleteQueries(n, ids);
}

inline void glDeleteQueriesARB(GLsizei n, const GLuint *ids) {
	return GLFunctions()->DeleteQueriesARB(n, ids);
}

inline void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {
	return GLFunctions()->DeleteRenderbuffers(n, renderbuffers);
}

inline void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers) {
	return GLFunctions()->DeleteRenderbuffersEXT(n, renderbuffers);
}

inline void glDeleteSamplers(GLsizei count, const GLuint *samplers) {
	return GLFunctions()->DeleteSamplers(count, samplers);
}

inline void glDeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores) {
	return GLFunctions()->DeleteSemaphoresEXT(n, semaphores);
}

inline void glDeleteShader(GLuint shader) {
	return GLFunctions()->DeleteShader(shader);
}

inline void glDeleteStatesNV(GLsizei n, const GLuint *states) {
	return GLFunctions()->DeleteStatesNV(n, states);
}

inline void glDeleteSync(GLsync sync) {
	return GLFunctions()->DeleteSync(sync);
}

inline void glDeleteTexturesEXT(GLsizei n, const GLuint *textures) {
	return GLFunctions()->DeleteTexturesEXT(n, textures);
}

inline void glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {
	return GLFunctions()->DeleteTransformFeedbacks(n, ids);
}

inline void glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids) {
	return GLFunctions()->DeleteTransformFeedbacksNV(n, ids);
}

inline void glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {
	return GLFunctions()->DeleteVertexArrays(n, arrays);
}

inline void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays) {
	return GLFunctions()->DeleteVertexArraysAPPLE(n, arrays);
}

inline void glDeleteVertexShaderEXT(GLuint id) {
	return GLFunctions()->DeleteVertexShaderEXT(id);
}

inline void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax) {
	return GLFunctions()->DepthBoundsEXT(zmin, zmax);
}

inline void glDepthBoundsdNV(GLdouble zmin, GLdouble zmax) {
	return GLFunctions()->DepthBoundsdNV(zmin, zmax);
}

inline void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) {
	return GLFunctions()->DepthRangeArrayv(first, count, v);
}

inline void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {
	return GLFunctions()->DepthRangeIndexed(index, n, f);
}

inline void glDepthRangedNV(GLdouble zNear, GLdouble zFar) {
	return GLFunctions()->DepthRangedNV(zNear, zFar);
}

inline void glDepthRangef(GLfloat n, GLfloat f) {
	return GLFunctions()->DepthRangef(n, f);
}

inline void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) {
	return GLFunctions()->DetachObjectARB(containerObj, attachedObj);
}

inline void glDetachShader(GLuint program, GLuint shader) {
	return GLFunctions()->DetachShader(program, shader);
}

inline void glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points) {
	return GLFunctions()->DetailTexFuncSGIS(target, n, points);
}

inline void glDisableClientStateIndexedEXT(GLenum array, GLuint index) {
	return GLFunctions()->DisableClientStateIndexedEXT(array, index);
}

inline void glDisableClientStateiEXT(GLenum array, GLuint index) {
	return GLFunctions()->DisableClientStateiEXT(array, index);
}

inline void glDisableIndexedEXT(GLenum target, GLuint index) {
	return GLFunctions()->DisableIndexedEXT(target, index);
}

inline void glDisableVariantClientStateEXT(GLuint id) {
	return GLFunctions()->DisableVariantClientStateEXT(id);
}

inline void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {
	return GLFunctions()->DisableVertexArrayAttrib(vaobj, index);
}

inline void glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
	return GLFunctions()->DisableVertexArrayAttribEXT(vaobj, index);
}

inline void glDisableVertexArrayEXT(GLuint vaobj, GLenum array) {
	return GLFunctions()->DisableVertexArrayEXT(vaobj, array);
}

inline void glDisableVertexAttribAPPLE(GLuint index, GLenum pname) {
	return GLFunctions()->DisableVertexAttribAPPLE(index, pname);
}

inline void glDisableVertexAttribArray(GLuint index) {
	return GLFunctions()->DisableVertexAttribArray(index);
}

inline void glDisableVertexAttribArrayARB(GLuint index) {
	return GLFunctions()->DisableVertexAttribArrayARB(index);
}

inline void glDisablei(GLenum target, GLuint index) {
	return GLFunctions()->Disablei(target, index);
}

inline void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
	return GLFunctions()->DispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}

inline void glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) {
	return GLFunctions()->DispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}

inline void glDispatchComputeIndirect(GLintptr indirect) {
	return GLFunctions()->DispatchComputeIndirect(indirect);
}

inline void glDrawArraysEXT(GLenum mode, GLint first, GLsizei count) {
	return GLFunctions()->DrawArraysEXT(mode, first, count);
}

inline void glDrawArraysIndirect(GLenum mode, const void *indirect) {
	return GLFunctions()->DrawArraysIndirect(mode, indirect);
}

inline void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
	return GLFunctions()->DrawArraysInstanced(mode, first, count, instancecount);
}

inline void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
	return GLFunctions()->DrawArraysInstancedARB(mode, first, count, primcount);
}

inline void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
	return GLFunctions()->DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
}

inline void glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
	return GLFunctions()->DrawArraysInstancedEXT(mode, start, count, primcount);
}

inline void glDrawBuffers(GLsizei n, const GLenum *bufs) {
	return GLFunctions()->DrawBuffers(n, bufs);
}

inline void glDrawBuffersARB(GLsizei n, const GLenum *bufs) {
	return GLFunctions()->DrawBuffersARB(n, bufs);
}

inline void glDrawBuffersATI(GLsizei n, const GLenum *bufs) {
	return GLFunctions()->DrawBuffersATI(n, bufs);
}

inline void glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count) {
	return GLFunctions()->DrawCommandsAddressNV(primitiveMode, indirects, sizes, count);
}

inline void glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count) {
	return GLFunctions()->DrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);
}

inline void glDrawCommandsStatesAddressNV(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
	return GLFunctions()->DrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);
}

inline void glDrawCommandsStatesNV(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
	return GLFunctions()->DrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);
}

inline void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) {
	return GLFunctions()->DrawElementArrayAPPLE(mode, first, count);
}

inline void glDrawElementArrayATI(GLenum mode, GLsizei count) {
	return GLFunctions()->DrawElementArrayATI(mode, count);
}

inline void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
	return GLFunctions()->DrawElementsBaseVertex(mode, count, type, indices, basevertex);
}

inline void glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) {
	return GLFunctions()->DrawElementsIndirect(mode, type, indirect);
}

inline void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) {
	return GLFunctions()->DrawElementsInstanced(mode, count, type, indices, instancecount);
}

inline void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) {
	return GLFunctions()->DrawElementsInstancedARB(mode, count, type, indices, primcount);
}

inline void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) {
	return GLFunctions()->DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
}

inline void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) {
	return GLFunctions()->DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
}

inline void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
	return GLFunctions()->DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
}

inline void glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) {
	return GLFunctions()->DrawElementsInstancedEXT(mode, count, type, indices, primcount);
}

inline void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) {
	return GLFunctions()->DrawRangeElementArrayAPPLE(mode, start, end, first, count);
}

inline void glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) {
	return GLFunctions()->DrawRangeElementArrayATI(mode, start, end, count);
}

inline void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {
	return GLFunctions()->DrawRangeElements(mode, start, end, count, type, indices);
}

inline void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) {
	return GLFunctions()->DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}

inline void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) {
	return GLFunctions()->DrawRangeElementsEXT(mode, start, end, count, type, indices);
}

inline void glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
	return GLFunctions()->DrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

inline void glDrawTransformFeedback(GLenum mode, GLuint id) {
	return GLFunctions()->DrawTransformFeedback(mode, id);
}

inline void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {
	return GLFunctions()->DrawTransformFeedbackInstanced(mode, id, instancecount);
}

inline void glDrawTransformFeedbackNV(GLenum mode, GLuint id) {
	return GLFunctions()->DrawTransformFeedbackNV(mode, id);
}

inline void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
	return GLFunctions()->DrawTransformFeedbackStream(mode, id, stream);
}

inline void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
	return GLFunctions()->DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
}

inline void glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
	return GLFunctions()->DrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

inline void glEdgeFlagFormatNV(GLsizei stride) {
	return GLFunctions()->EdgeFlagFormatNV(stride);
}

inline void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer) {
	return GLFunctions()->EdgeFlagPointerEXT(stride, count, pointer);
}

inline void glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride) {
	return GLFunctions()->EdgeFlagPointerListIBM(stride, pointer, ptrstride);
}

inline void glElementPointerAPPLE(GLenum type, const void *pointer) {
	return GLFunctions()->ElementPointerAPPLE(type, pointer);
}

inline void glElementPointerATI(GLenum type, const void *pointer) {
	return GLFunctions()->ElementPointerATI(type, pointer);
}

inline void glEnableClientStateIndexedEXT(GLenum array, GLuint index) {
	return GLFunctions()->EnableClientStateIndexedEXT(array, index);
}

inline void glEnableClientStateiEXT(GLenum array, GLuint index) {
	return GLFunctions()->EnableClientStateiEXT(array, index);
}

inline void glEnableIndexedEXT(GLenum target, GLuint index) {
	return GLFunctions()->EnableIndexedEXT(target, index);
}

inline void glEnableVariantClientStateEXT(GLuint id) {
	return GLFunctions()->EnableVariantClientStateEXT(id);
}

inline void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {
	return GLFunctions()->EnableVertexArrayAttrib(vaobj, index);
}

inline void glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
	return GLFunctions()->EnableVertexArrayAttribEXT(vaobj, index);
}

inline void glEnableVertexArrayEXT(GLuint vaobj, GLenum array) {
	return GLFunctions()->EnableVertexArrayEXT(vaobj, array);
}

inline void glEnableVertexAttribAPPLE(GLuint index, GLenum pname) {
	return GLFunctions()->EnableVertexAttribAPPLE(index, pname);
}

inline void glEnableVertexAttribArray(GLuint index) {
	return GLFunctions()->EnableVertexAttribArray(index);
}

inline void glEnableVertexAttribArrayARB(GLuint index) {
	return GLFunctions()->EnableVertexAttribArrayARB(index);
}

inline void glEnablei(GLenum target, GLuint index) {
	return GLFunctions()->Enablei(target, index);
}

inline void glEndConditionalRender(void) {
	return GLFunctions()->EndConditionalRender();
}

inline void glEndConditionalRenderNV(void) {
	return GLFunctions()->EndConditionalRenderNV();
}

inline void glEndConditionalRenderNVX(void) {
	return GLFunctions()->EndConditionalRenderNVX();
}

inline void glEndFragmentShaderATI(void) {
	return GLFunctions()->EndFragmentShaderATI();
}

inline void glEndOcclusionQueryNV(void) {
	return GLFunctions()->EndOcclusionQueryNV();
}

inline void glEndPerfMonitorAMD(GLuint monitor) {
	return GLFunctions()->EndPerfMonitorAMD(monitor);
}

inline void glEndPerfQueryINTEL(GLuint queryHandle) {
	return GLFunctions()->EndPerfQueryINTEL(queryHandle);
}

inline void glEndQuery(GLenum target) {
	return GLFunctions()->EndQuery(target);
}

inline void glEndQueryARB(GLenum target) {
	return GLFunctions()->EndQueryARB(target);
}

inline void glEndQueryIndexed(GLenum target, GLuint index) {
	return GLFunctions()->EndQueryIndexed(target, index);
}

inline void glEndTransformFeedback(void) {
	return GLFunctions()->EndTransformFeedback();
}

inline void glEndTransformFeedbackEXT(void) {
	return GLFunctions()->EndTransformFeedbackEXT();
}

inline void glEndTransformFeedbackNV(void) {
	return GLFunctions()->EndTransformFeedbackNV();
}

inline void glEndVertexShaderEXT(void) {
	return GLFunctions()->EndVertexShaderEXT();
}

inline void glEndVideoCaptureNV(GLuint video_capture_slot) {
	return GLFunctions()->EndVideoCaptureNV(video_capture_slot);
}

inline void glEvalMapsNV(GLenum target, GLenum mode) {
	return GLFunctions()->EvalMapsNV(target, mode);
}

inline void glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params) {
	return GLFunctions()->ExecuteProgramNV(target, id, params);
}

inline void glExtractComponentEXT(GLuint res, GLuint src, GLuint num) {
	return GLFunctions()->ExtractComponentEXT(res, src, num);
}

inline GLsync glFenceSync(GLenum condition, GLbitfield flags) {
	return GLFunctions()->FenceSync(condition, flags);
}

inline void glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
	return GLFunctions()->FinalCombinerInputNV(variable, input, mapping, componentUsage);
}

inline GLint glFinishAsyncSGIX(GLuint *markerp) {
	return GLFunctions()->FinishAsyncSGIX(markerp);
}

inline void glFinishFenceAPPLE(GLuint fence) {
	return GLFunctions()->FinishFenceAPPLE(fence);
}

inline void glFinishFenceNV(GLuint fence) {
	return GLFunctions()->FinishFenceNV(fence);
}

inline void glFinishObjectAPPLE(GLenum object, GLint name) {
	return GLFunctions()->FinishObjectAPPLE(object, name);
}

inline void glFinishTextureSUNX(void) {
	return GLFunctions()->FinishTextureSUNX();
}

inline void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
	return GLFunctions()->FlushMappedBufferRange(target, offset, length);
}

inline void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) {
	return GLFunctions()->FlushMappedBufferRangeAPPLE(target, offset, size);
}

inline void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {
	return GLFunctions()->FlushMappedNamedBufferRange(buffer, offset, length);
}

inline void glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) {
	return GLFunctions()->FlushMappedNamedBufferRangeEXT(buffer, offset, length);
}

inline void glFlushPixelDataRangeNV(GLenum target) {
	return GLFunctions()->FlushPixelDataRangeNV(target);
}

inline void glFlushRasterSGIX(void) {
	return GLFunctions()->FlushRasterSGIX();
}

inline void glFlushVertexArrayRangeAPPLE(GLsizei length, void *pointer) {
	return GLFunctions()->FlushVertexArrayRangeAPPLE(length, pointer);
}

inline void glFlushVertexArrayRangeNV(void) {
	return GLFunctions()->FlushVertexArrayRangeNV();
}

inline void glFogCoordFormatNV(GLenum type, GLsizei stride) {
	return GLFunctions()->FogCoordFormatNV(type, stride);
}

inline void glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->FogCoordPointer(type, stride, pointer);
}

inline void glFogCoordPointerEXT(GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->FogCoordPointerEXT(type, stride, pointer);
}

inline void glFogCoordPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
	return GLFunctions()->FogCoordPointerListIBM(type, stride, pointer, ptrstride);
}

inline void glFogCoordd(GLdouble coord) {
	return GLFunctions()->FogCoordd(coord);
}

inline void glFogCoorddEXT(GLdouble coord) {
	return GLFunctions()->FogCoorddEXT(coord);
}

inline void glFogCoorddv(const GLdouble *coord) {
	return GLFunctions()->FogCoorddv(coord);
}

inline void glFogCoorddvEXT(const GLdouble *coord) {
	return GLFunctions()->FogCoorddvEXT(coord);
}

inline void glFogCoordf(GLfloat coord) {
	return GLFunctions()->FogCoordf(coord);
}

inline void glFogCoordfEXT(GLfloat coord) {
	return GLFunctions()->FogCoordfEXT(coord);
}

inline void glFogCoordfv(const GLfloat *coord) {
	return GLFunctions()->FogCoordfv(coord);
}

inline void glFogCoordfvEXT(const GLfloat *coord) {
	return GLFunctions()->FogCoordfvEXT(coord);
}

inline void glFogCoordhNV(GLhalfNV fog) {
	return GLFunctions()->FogCoordhNV(fog);
}

inline void glFogCoordhvNV(const GLhalfNV *fog) {
	return GLFunctions()->FogCoordhvNV(fog);
}

inline void glFogFuncSGIS(GLsizei n, const GLfloat *points) {
	return GLFunctions()->FogFuncSGIS(n, points);
}

inline void glFragmentColorMaterialSGIX(GLenum face, GLenum mode) {
	return GLFunctions()->FragmentColorMaterialSGIX(face, mode);
}

inline void glFragmentCoverageColorNV(GLuint color) {
	return GLFunctions()->FragmentCoverageColorNV(color);
}

inline void glFragmentLightModelfSGIX(GLenum pname, GLfloat param) {
	return GLFunctions()->FragmentLightModelfSGIX(pname, param);
}

inline void glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params) {
	return GLFunctions()->FragmentLightModelfvSGIX(pname, params);
}

inline void glFragmentLightModeliSGIX(GLenum pname, GLint param) {
	return GLFunctions()->FragmentLightModeliSGIX(pname, param);
}

inline void glFragmentLightModelivSGIX(GLenum pname, const GLint *params) {
	return GLFunctions()->FragmentLightModelivSGIX(pname, params);
}

inline void glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) {
	return GLFunctions()->FragmentLightfSGIX(light, pname, param);
}

inline void glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params) {
	return GLFunctions()->FragmentLightfvSGIX(light, pname, params);
}

inline void glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) {
	return GLFunctions()->FragmentLightiSGIX(light, pname, param);
}

inline void glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params) {
	return GLFunctions()->FragmentLightivSGIX(light, pname, params);
}

inline void glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) {
	return GLFunctions()->FragmentMaterialfSGIX(face, pname, param);
}

inline void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params) {
	return GLFunctions()->FragmentMaterialfvSGIX(face, pname, params);
}

inline void glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) {
	return GLFunctions()->FragmentMaterialiSGIX(face, pname, param);
}

inline void glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params) {
	return GLFunctions()->FragmentMaterialivSGIX(face, pname, params);
}

inline void glFrameTerminatorGREMEDY(void) {
	return GLFunctions()->FrameTerminatorGREMEDY();
}

inline void glFrameZoomSGIX(GLint factor) {
	return GLFunctions()->FrameZoomSGIX(factor);
}

inline void glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) {
	return GLFunctions()->FramebufferDrawBufferEXT(framebuffer, mode);
}

inline void glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
	return GLFunctions()->FramebufferDrawBuffersEXT(framebuffer, n, bufs);
}

inline void glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
	return GLFunctions()->FramebufferParameteri(target, pname, param);
}

inline void glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) {
	return GLFunctions()->FramebufferReadBufferEXT(framebuffer, mode);
}

inline void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
	return GLFunctions()->FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}

inline void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
	return GLFunctions()->FramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
}

inline void glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v) {
	return GLFunctions()->FramebufferSampleLocationsfvARB(target, start, count, v);
}

inline void glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v) {
	return GLFunctions()->FramebufferSampleLocationsfvNV(target, start, count, v);
}

inline void glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values) {
	return GLFunctions()->FramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values);
}

inline void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
	return GLFunctions()->FramebufferTexture(target, attachment, texture, level);
}

inline void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
	return GLFunctions()->FramebufferTexture1D(target, attachment, textarget, texture, level);
}

inline void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
	return GLFunctions()->FramebufferTexture1DEXT(target, attachment, textarget, texture, level);
}

inline void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
	return GLFunctions()->FramebufferTexture2D(target, attachment, textarget, texture, level);
}

inline void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
	return GLFunctions()->FramebufferTexture2DEXT(target, attachment, textarget, texture, level);
}

inline void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
	return GLFunctions()->FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
}

inline void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
	return GLFunctions()->FramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
}

inline void glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) {
	return GLFunctions()->FramebufferTextureARB(target, attachment, texture, level);
}

inline void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) {
	return GLFunctions()->FramebufferTextureEXT(target, attachment, texture, level);
}

inline void glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
	return GLFunctions()->FramebufferTextureFaceARB(target, attachment, texture, level, face);
}

inline void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
	return GLFunctions()->FramebufferTextureFaceEXT(target, attachment, texture, level, face);
}

inline void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
	return GLFunctions()->FramebufferTextureLayer(target, attachment, texture, level, layer);
}

inline void glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
	return GLFunctions()->FramebufferTextureLayerARB(target, attachment, texture, level, layer);
}

inline void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
	return GLFunctions()->FramebufferTextureLayerEXT(target, attachment, texture, level, layer);
}

inline void glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {
	return GLFunctions()->FramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
}

inline void glFreeObjectBufferATI(GLuint buffer) {
	return GLFunctions()->FreeObjectBufferATI(buffer);
}

inline GLuint glGenAsyncMarkersSGIX(GLsizei range) {
	return GLFunctions()->GenAsyncMarkersSGIX(range);
}

inline void glGenBuffers(GLsizei n, GLuint *buffers) {
	return GLFunctions()->GenBuffers(n, buffers);
}

inline void glGenBuffersARB(GLsizei n, GLuint *buffers) {
	return GLFunctions()->GenBuffersARB(n, buffers);
}

inline void glGenFencesAPPLE(GLsizei n, GLuint *fences) {
	return GLFunctions()->GenFencesAPPLE(n, fences);
}

inline void glGenFencesNV(GLsizei n, GLuint *fences) {
	return GLFunctions()->GenFencesNV(n, fences);
}

inline GLuint glGenFragmentShadersATI(GLuint range) {
	return GLFunctions()->GenFragmentShadersATI(range);
}

inline void glGenFramebuffers(GLsizei n, GLuint *framebuffers) {
	return GLFunctions()->GenFramebuffers(n, framebuffers);
}

inline void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers) {
	return GLFunctions()->GenFramebuffersEXT(n, framebuffers);
}

inline void glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names) {
	return GLFunctions()->GenNamesAMD(identifier, num, names);
}

inline void glGenOcclusionQueriesNV(GLsizei n, GLuint *ids) {
	return GLFunctions()->GenOcclusionQueriesNV(n, ids);
}

inline GLuint glGenPathsNV(GLsizei range) {
	return GLFunctions()->GenPathsNV(range);
}

inline void glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors) {
	return GLFunctions()->GenPerfMonitorsAMD(n, monitors);
}

inline void glGenProgramPipelines(GLsizei n, GLuint *pipelines) {
	return GLFunctions()->GenProgramPipelines(n, pipelines);
}

inline void glGenProgramsARB(GLsizei n, GLuint *programs) {
	return GLFunctions()->GenProgramsARB(n, programs);
}

inline void glGenProgramsNV(GLsizei n, GLuint *programs) {
	return GLFunctions()->GenProgramsNV(n, programs);
}

inline void glGenQueries(GLsizei n, GLuint *ids) {
	return GLFunctions()->GenQueries(n, ids);
}

inline void glGenQueriesARB(GLsizei n, GLuint *ids) {
	return GLFunctions()->GenQueriesARB(n, ids);
}

inline void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {
	return GLFunctions()->GenRenderbuffers(n, renderbuffers);
}

inline void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers) {
	return GLFunctions()->GenRenderbuffersEXT(n, renderbuffers);
}

inline void glGenSamplers(GLsizei count, GLuint *samplers) {
	return GLFunctions()->GenSamplers(count, samplers);
}

inline void glGenSemaphoresEXT(GLsizei n, GLuint *semaphores) {
	return GLFunctions()->GenSemaphoresEXT(n, semaphores);
}

inline GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) {
	return GLFunctions()->GenSymbolsEXT(datatype, storagetype, range, components);
}

inline void glGenTexturesEXT(GLsizei n, GLuint *textures) {
	return GLFunctions()->GenTexturesEXT(n, textures);
}

inline void glGenTransformFeedbacks(GLsizei n, GLuint *ids) {
	return GLFunctions()->GenTransformFeedbacks(n, ids);
}

inline void glGenTransformFeedbacksNV(GLsizei n, GLuint *ids) {
	return GLFunctions()->GenTransformFeedbacksNV(n, ids);
}

inline void glGenVertexArrays(GLsizei n, GLuint *arrays) {
	return GLFunctions()->GenVertexArrays(n, arrays);
}

inline void glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays) {
	return GLFunctions()->GenVertexArraysAPPLE(n, arrays);
}

inline GLuint glGenVertexShadersEXT(GLuint range) {
	return GLFunctions()->GenVertexShadersEXT(range);
}

inline void glGenerateMipmap(GLenum target) {
	return GLFunctions()->GenerateMipmap(target);
}

inline void glGenerateMipmapEXT(GLenum target) {
	return GLFunctions()->GenerateMipmapEXT(target);
}

inline void glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) {
	return GLFunctions()->GenerateMultiTexMipmapEXT(texunit, target);
}

inline void glGenerateTextureMipmap(GLuint texture) {
	return GLFunctions()->GenerateTextureMipmap(texture);
}

inline void glGenerateTextureMipmapEXT(GLuint texture, GLenum target) {
	return GLFunctions()->GenerateTextureMipmapEXT(texture, target);
}

inline void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {
	return GLFunctions()->GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}

inline void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
	return GLFunctions()->GetActiveAttrib(program, index, bufSize, length, size, type, name);
}

inline void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) {
	return GLFunctions()->GetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
}

inline void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {
	return GLFunctions()->GetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
}

inline void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) {
	return GLFunctions()->GetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
}

inline void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) {
	return GLFunctions()->GetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}

inline void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
	return GLFunctions()->GetActiveUniform(program, index, bufSize, length, size, type, name);
}

inline void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) {
	return GLFunctions()->GetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
}

inline void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {
	return GLFunctions()->GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

inline void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {
	return GLFunctions()->GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}

inline void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {
	return GLFunctions()->GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}

inline void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {
	return GLFunctions()->GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}

inline void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
	return GLFunctions()->GetActiveVaryingNV(program, index, bufSize, length, size, type, name);
}

inline void glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetArrayObjectfvATI(array, pname, params);
}

inline void glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params) {
	return GLFunctions()->GetArrayObjectivATI(array, pname, params);
}

inline void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) {
	return GLFunctions()->GetAttachedObjectsARB(containerObj, maxCount, count, obj);
}

inline void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
	return GLFunctions()->GetAttachedShaders(program, maxCount, count, shaders);
}

inline GLint glGetAttribLocation(GLuint program, const GLchar *name) {
	return GLFunctions()->GetAttribLocation(program, name);
}

inline GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name) {
	return GLFunctions()->GetAttribLocationARB(programObj, name);
}

inline void glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data) {
	return GLFunctions()->GetBooleanIndexedvEXT(target, index, data);
}

inline void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {
	return GLFunctions()->GetBooleani_v(target, index, data);
}

inline void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {
	return GLFunctions()->GetBufferParameteri64v(target, pname, params);
}

inline void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetBufferParameteriv(target, pname, params);
}

inline void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetBufferParameterivARB(target, pname, params);
}

inline void glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params) {
	return GLFunctions()->GetBufferParameterui64vNV(target, pname, params);
}

inline void glGetBufferPointerv(GLenum target, GLenum pname, void **params) {
	return GLFunctions()->GetBufferPointerv(target, pname, params);
}

inline void glGetBufferPointervARB(GLenum target, GLenum pname, void **params) {
	return GLFunctions()->GetBufferPointervARB(target, pname, params);
}

inline void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
	return GLFunctions()->GetBufferSubData(target, offset, size, data);
}

inline void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data) {
	return GLFunctions()->GetBufferSubDataARB(target, offset, size, data);
}

inline void glGetColorTable(GLenum target, GLenum format, GLenum type, void *table) {
	return GLFunctions()->GetColorTable(target, format, type, table);
}

inline void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void *data) {
	return GLFunctions()->GetColorTableEXT(target, format, type, data);
}

inline void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetColorTableParameterfv(target, pname, params);
}

inline void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetColorTableParameterfvEXT(target, pname, params);
}

inline void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetColorTableParameterfvSGI(target, pname, params);
}

inline void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetColorTableParameteriv(target, pname, params);
}

inline void glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetColorTableParameterivEXT(target, pname, params);
}

inline void glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetColorTableParameterivSGI(target, pname, params);
}

inline void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void *table) {
	return GLFunctions()->GetColorTableSGI(target, format, type, table);
}

inline void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
}

inline void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) {
	return GLFunctions()->GetCombinerInputParameterivNV(stage, portion, variable, pname, params);
}

inline void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetCombinerOutputParameterfvNV(stage, portion, pname, params);
}

inline void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params) {
	return GLFunctions()->GetCombinerOutputParameterivNV(stage, portion, pname, params);
}

inline void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetCombinerStageParameterfvNV(stage, pname, params);
}

inline GLuint glGetCommandHeaderNV(GLenum tokenID, GLuint size) {
	return GLFunctions()->GetCommandHeaderNV(tokenID, size);
}

inline void glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void *img) {
	return GLFunctions()->GetCompressedMultiTexImageEXT(texunit, target, lod, img);
}

inline void glGetCompressedTexImage(GLenum target, GLint level, void *img) {
	return GLFunctions()->GetCompressedTexImage(target, level, img);
}

inline void glGetCompressedTexImageARB(GLenum target, GLint level, void *img) {
	return GLFunctions()->GetCompressedTexImageARB(target, level, img);
}

inline void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels) {
	return GLFunctions()->GetCompressedTextureImage(texture, level, bufSize, pixels);
}

inline void glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void *img) {
	return GLFunctions()->GetCompressedTextureImageEXT(texture, target, lod, img);
}

inline void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) {
	return GLFunctions()->GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}

inline void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void *image) {
	return GLFunctions()->GetConvolutionFilter(target, format, type, image);
}

inline void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void *image) {
	return GLFunctions()->GetConvolutionFilterEXT(target, format, type, image);
}

inline void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetConvolutionParameterfv(target, pname, params);
}

inline void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetConvolutionParameterfvEXT(target, pname, params);
}

inline void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetConvolutionParameteriv(target, pname, params);
}

inline void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetConvolutionParameterivEXT(target, pname, params);
}

inline void glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat *v) {
	return GLFunctions()->GetCoverageModulationTableNV(bufsize, v);
}

inline GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
	return GLFunctions()->GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

inline GLuint glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message) {
	return GLFunctions()->GetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
}

inline GLuint glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
	return GLFunctions()->GetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

inline void glGetDetailTexFuncSGIS(GLenum target, GLfloat *points) {
	return GLFunctions()->GetDetailTexFuncSGIS(target, points);
}

inline void glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data) {
	return GLFunctions()->GetDoubleIndexedvEXT(target, index, data);
}

inline void glGetDoublei_v(GLenum target, GLuint index, GLdouble *data) {
	return GLFunctions()->GetDoublei_v(target, index, data);
}

inline void glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble *params) {
	return GLFunctions()->GetDoublei_vEXT(pname, index, params);
}

inline void glGetFenceivNV(GLuint fence, GLenum pname, GLint *params) {
	return GLFunctions()->GetFenceivNV(fence, pname, params);
}

inline void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetFinalCombinerInputParameterfvNV(variable, pname, params);
}

inline void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params) {
	return GLFunctions()->GetFinalCombinerInputParameterivNV(variable, pname, params);
}

inline void glGetFirstPerfQueryIdINTEL(GLuint *queryId) {
	return GLFunctions()->GetFirstPerfQueryIdINTEL(queryId);
}

inline void glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data) {
	return GLFunctions()->GetFloatIndexedvEXT(target, index, data);
}

inline void glGetFloati_v(GLenum target, GLuint index, GLfloat *data) {
	return GLFunctions()->GetFloati_v(target, index, data);
}

inline void glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat *params) {
	return GLFunctions()->GetFloati_vEXT(pname, index, params);
}

inline void glGetFogFuncSGIS(GLfloat *points) {
	return GLFunctions()->GetFogFuncSGIS(points);
}

inline GLint glGetFragDataIndex(GLuint program, const GLchar *name) {
	return GLFunctions()->GetFragDataIndex(program, name);
}

inline GLint glGetFragDataLocation(GLuint program, const GLchar *name) {
	return GLFunctions()->GetFragDataLocation(program, name);
}

inline GLint glGetFragDataLocationEXT(GLuint program, const GLchar *name) {
	return GLFunctions()->GetFragDataLocationEXT(program, name);
}

inline void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetFragmentLightfvSGIX(light, pname, params);
}

inline void glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params) {
	return GLFunctions()->GetFragmentLightivSGIX(light, pname, params);
}

inline void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetFragmentMaterialfvSGIX(face, pname, params);
}

inline void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params) {
	return GLFunctions()->GetFragmentMaterialivSGIX(face, pname, params);
}

inline void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
	return GLFunctions()->GetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}

inline void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
	return GLFunctions()->GetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
}

inline void glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) {
	return GLFunctions()->GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values);
}

inline void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetFramebufferParameteriv(target, pname, params);
}

inline void glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) {
	return GLFunctions()->GetFramebufferParameterivEXT(framebuffer, pname, params);
}

inline GLenum glGetGraphicsResetStatus(void) {
	return GLFunctions()->GetGraphicsResetStatus();
}

inline GLenum glGetGraphicsResetStatusARB(void) {
	return GLFunctions()->GetGraphicsResetStatusARB();
}

inline GLhandleARB glGetHandleARB(GLenum pname) {
	return GLFunctions()->GetHandleARB(pname);
}

inline void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
	return GLFunctions()->GetHistogram(target, reset, format, type, values);
}

inline void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
	return GLFunctions()->GetHistogramEXT(target, reset, format, type, values);
}

inline void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetHistogramParameterfv(target, pname, params);
}

inline void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetHistogramParameterfvEXT(target, pname, params);
}

inline void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetHistogramParameteriv(target, pname, params);
}

inline void glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetHistogramParameterivEXT(target, pname, params);
}

inline GLuint64 glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
	return GLFunctions()->GetImageHandleARB(texture, level, layered, layer, format);
}

inline GLuint64 glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
	return GLFunctions()->GetImageHandleNV(texture, level, layered, layer, format);
}

inline void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetImageTransformParameterfvHP(target, pname, params);
}

inline void glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetImageTransformParameterivHP(target, pname, params);
}

inline void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) {
	return GLFunctions()->GetInfoLogARB(obj, maxLength, length, infoLog);
}

inline void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {
	return GLFunctions()->GetInteger64i_v(target, index, data);
}

inline void glGetInteger64v(GLenum pname, GLint64 *data) {
	return GLFunctions()->GetInteger64v(pname, data);
}

inline void glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data) {
	return GLFunctions()->GetIntegerIndexedvEXT(target, index, data);
}

inline void glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {
	return GLFunctions()->GetIntegeri_v(target, index, data);
}

inline void glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result) {
	return GLFunctions()->GetIntegerui64i_vNV(value, index, result);
}

inline void glGetIntegerui64vNV(GLenum value, GLuint64EXT *result) {
	return GLFunctions()->GetIntegerui64vNV(value, result);
}

inline void glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) {
	return GLFunctions()->GetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params);
}

inline void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) {
	return GLFunctions()->GetInternalformati64v(target, internalformat, pname, bufSize, params);
}

inline void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {
	return GLFunctions()->GetInternalformativ(target, internalformat, pname, bufSize, params);
}

inline void glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
	return GLFunctions()->GetInvariantBooleanvEXT(id, value, data);
}

inline void glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
	return GLFunctions()->GetInvariantFloatvEXT(id, value, data);
}

inline void glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data) {
	return GLFunctions()->GetInvariantIntegervEXT(id, value, data);
}

inline void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
	return GLFunctions()->GetLocalConstantBooleanvEXT(id, value, data);
}

inline void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
	return GLFunctions()->GetLocalConstantFloatvEXT(id, value, data);
}

inline void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data) {
	return GLFunctions()->GetLocalConstantIntegervEXT(id, value, data);
}

inline void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetMapAttribParameterfvNV(target, index, pname, params);
}

inline void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params) {
	return GLFunctions()->GetMapAttribParameterivNV(target, index, pname, params);
}

inline void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) {
	return GLFunctions()->GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
}

inline void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetMapParameterfvNV(target, pname, params);
}

inline void glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetMapParameterivNV(target, pname, params);
}

inline void glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params) {
	return GLFunctions()->GetMemoryObjectParameterivEXT(memoryObject, pname, params);
}

inline void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
	return GLFunctions()->GetMinmax(target, reset, format, type, values);
}

inline void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) {
	return GLFunctions()->GetMinmaxEXT(target, reset, format, type, values);
}

inline void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetMinmaxParameterfv(target, pname, params);
}

inline void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetMinmaxParameterfvEXT(target, pname, params);
}

inline void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetMinmaxParameteriv(target, pname, params);
}

inline void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetMinmaxParameterivEXT(target, pname, params);
}

inline void glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetMultiTexEnvfvEXT(texunit, target, pname, params);
}

inline void glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetMultiTexEnvivEXT(texunit, target, pname, params);
}

inline void glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) {
	return GLFunctions()->GetMultiTexGendvEXT(texunit, coord, pname, params);
}

inline void glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetMultiTexGenfvEXT(texunit, coord, pname, params);
}

inline void glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params) {
	return GLFunctions()->GetMultiTexGenivEXT(texunit, coord, pname, params);
}

inline void glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
	return GLFunctions()->GetMultiTexImageEXT(texunit, target, level, format, type, pixels);
}

inline void glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
}

inline void glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) {
	return GLFunctions()->GetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
}

inline void glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetMultiTexParameterIivEXT(texunit, target, pname, params);
}

inline void glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params) {
	return GLFunctions()->GetMultiTexParameterIuivEXT(texunit, target, pname, params);
}

inline void glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetMultiTexParameterfvEXT(texunit, target, pname, params);
}

inline void glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetMultiTexParameterivEXT(texunit, target, pname, params);
}

inline void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {
	return GLFunctions()->GetMultisamplefv(pname, index, val);
}

inline void glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val) {
	return GLFunctions()->GetMultisamplefvNV(pname, index, val);
}

inline void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params) {
	return GLFunctions()->GetNamedBufferParameteri64v(buffer, pname, params);
}

inline void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedBufferParameteriv(buffer, pname, params);
}

inline void glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedBufferParameterivEXT(buffer, pname, params);
}

inline void glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params) {
	return GLFunctions()->GetNamedBufferParameterui64vNV(buffer, pname, params);
}

inline void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params) {
	return GLFunctions()->GetNamedBufferPointerv(buffer, pname, params);
}

inline void glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void **params) {
	return GLFunctions()->GetNamedBufferPointervEXT(buffer, pname, params);
}

inline void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
	return GLFunctions()->GetNamedBufferSubData(buffer, offset, size, data);
}

inline void glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) {
	return GLFunctions()->GetNamedBufferSubDataEXT(buffer, offset, size, data);
}

inline void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
}

inline void glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
}

inline void glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) {
	return GLFunctions()->GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values);
}

inline void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param) {
	return GLFunctions()->GetNamedFramebufferParameteriv(framebuffer, pname, param);
}

inline void glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedFramebufferParameterivEXT(framebuffer, pname, params);
}

inline void glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params) {
	return GLFunctions()->GetNamedProgramLocalParameterIivEXT(program, target, index, params);
}

inline void glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params) {
	return GLFunctions()->GetNamedProgramLocalParameterIuivEXT(program, target, index, params);
}

inline void glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params) {
	return GLFunctions()->GetNamedProgramLocalParameterdvEXT(program, target, index, params);
}

inline void glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params) {
	return GLFunctions()->GetNamedProgramLocalParameterfvEXT(program, target, index, params);
}

inline void glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void *string) {
	return GLFunctions()->GetNamedProgramStringEXT(program, target, pname, string);
}

inline void glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedProgramivEXT(program, target, pname, params);
}

inline void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedRenderbufferParameteriv(renderbuffer, pname, params);
}

inline void glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
}

inline void glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) {
	return GLFunctions()->GetNamedStringARB(namelen, name, bufSize, stringlen, string);
}

inline void glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params) {
	return GLFunctions()->GetNamedStringivARB(namelen, name, pname, params);
}

inline void glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId) {
	return GLFunctions()->GetNextPerfQueryIdINTEL(queryId, nextQueryId);
}

inline void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetObjectBufferfvATI(buffer, pname, params);
}

inline void glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params) {
	return GLFunctions()->GetObjectBufferivATI(buffer, pname, params);
}

inline void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
	return GLFunctions()->GetObjectLabel(identifier, name, bufSize, length, label);
}

inline void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label) {
	return GLFunctions()->GetObjectLabelEXT(type, object, bufSize, length, label);
}

inline void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetObjectParameterfvARB(obj, pname, params);
}

inline void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params) {
	return GLFunctions()->GetObjectParameterivAPPLE(objectType, name, pname, params);
}

inline void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params) {
	return GLFunctions()->GetObjectParameterivARB(obj, pname, params);
}

inline void glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
	return GLFunctions()->GetObjectPtrLabel(ptr, bufSize, length, label);
}

inline void glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params) {
	return GLFunctions()->GetOcclusionQueryivNV(id, pname, params);
}

inline void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params) {
	return GLFunctions()->GetOcclusionQueryuivNV(id, pname, params);
}

inline void glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value) {
	return GLFunctions()->GetPathColorGenfvNV(color, pname, value);
}

inline void glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value) {
	return GLFunctions()->GetPathColorGenivNV(color, pname, value);
}

inline void glGetPathCommandsNV(GLuint path, GLubyte *commands) {
	return GLFunctions()->GetPathCommandsNV(path, commands);
}

inline void glGetPathCoordsNV(GLuint path, GLfloat *coords) {
	return GLFunctions()->GetPathCoordsNV(path, coords);
}

inline void glGetPathDashArrayNV(GLuint path, GLfloat *dashArray) {
	return GLFunctions()->GetPathDashArrayNV(path, dashArray);
}

inline GLfloat glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) {
	return GLFunctions()->GetPathLengthNV(path, startSegment, numSegments);
}

inline void glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) {
	return GLFunctions()->GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
}

inline void glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) {
	return GLFunctions()->GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}

inline void glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value) {
	return GLFunctions()->GetPathParameterfvNV(path, pname, value);
}

inline void glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value) {
	return GLFunctions()->GetPathParameterivNV(path, pname, value);
}

inline void glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) {
	return GLFunctions()->GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}

inline void glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value) {
	return GLFunctions()->GetPathTexGenfvNV(texCoordSet, pname, value);
}

inline void glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value) {
	return GLFunctions()->GetPathTexGenivNV(texCoordSet, pname, value);
}

inline void glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) {
	return GLFunctions()->GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}

inline void glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) {
	return GLFunctions()->GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
}

inline void glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data) {
	return GLFunctions()->GetPerfMonitorCounterInfoAMD(group, counter, pname, data);
}

inline void glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) {
	return GLFunctions()->GetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
}

inline void glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) {
	return GLFunctions()->GetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
}

inline void glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) {
	return GLFunctions()->GetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
}

inline void glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups) {
	return GLFunctions()->GetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
}

inline void glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten) {
	return GLFunctions()->GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
}

inline void glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId) {
	return GLFunctions()->GetPerfQueryIdByNameINTEL(queryName, queryId);
}

inline void glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) {
	return GLFunctions()->GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}

inline void glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetPixelTransformParameterfvEXT(target, pname, params);
}

inline void glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetPixelTransformParameterivEXT(target, pname, params);
}

inline void glGetPointerIndexedvEXT(GLenum target, GLuint index, void **data) {
	return GLFunctions()->GetPointerIndexedvEXT(target, index, data);
}

inline void glGetPointeri_vEXT(GLenum pname, GLuint index, void **params) {
	return GLFunctions()->GetPointeri_vEXT(pname, index, params);
}

inline void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) {
	return GLFunctions()->GetProgramBinary(program, bufSize, length, binaryFormat, binary);
}

inline void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params) {
	return GLFunctions()->GetProgramEnvParameterdvARB(target, index, params);
}

inline void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params) {
	return GLFunctions()->GetProgramEnvParameterfvARB(target, index, params);
}

inline void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
	return GLFunctions()->GetProgramInfoLog(program, bufSize, length, infoLog);
}

inline void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {
	return GLFunctions()->GetProgramInterfaceiv(program, programInterface, pname, params);
}

inline void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params) {
	return GLFunctions()->GetProgramLocalParameterdvARB(target, index, params);
}

inline void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params) {
	return GLFunctions()->GetProgramLocalParameterfvARB(target, index, params);
}

inline void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params) {
	return GLFunctions()->GetProgramNamedParameterdvNV(id, len, name, params);
}

inline void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params) {
	return GLFunctions()->GetProgramNamedParameterfvNV(id, len, name, params);
}

inline void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params) {
	return GLFunctions()->GetProgramParameterdvNV(target, index, pname, params);
}

inline void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetProgramParameterfvNV(target, index, pname, params);
}

inline void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
	return GLFunctions()->GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}

inline void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {
	return GLFunctions()->GetProgramPipelineiv(pipeline, pname, params);
}

inline GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {
	return GLFunctions()->GetProgramResourceIndex(program, programInterface, name);
}

inline GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {
	return GLFunctions()->GetProgramResourceLocation(program, programInterface, name);
}

inline GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {
	return GLFunctions()->GetProgramResourceLocationIndex(program, programInterface, name);
}

inline void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
	return GLFunctions()->GetProgramResourceName(program, programInterface, index, bufSize, length, name);
}

inline void glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params) {
	return GLFunctions()->GetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params);
}

inline void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) {
	return GLFunctions()->GetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
}

inline void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) {
	return GLFunctions()->GetProgramStageiv(program, shadertype, pname, values);
}

inline void glGetProgramStringARB(GLenum target, GLenum pname, void *string) {
	return GLFunctions()->GetProgramStringARB(target, pname, string);
}

inline void glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program) {
	return GLFunctions()->GetProgramStringNV(id, pname, program);
}

inline void glGetProgramiv(GLuint program, GLenum pname, GLint *params) {
	return GLFunctions()->GetProgramiv(program, pname, params);
}

inline void glGetProgramivARB(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetProgramivARB(target, pname, params);
}

inline void glGetProgramivNV(GLuint id, GLenum pname, GLint *params) {
	return GLFunctions()->GetProgramivNV(id, pname, params);
}

inline void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
	return GLFunctions()->GetQueryBufferObjecti64v(id, buffer, pname, offset);
}

inline void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
	return GLFunctions()->GetQueryBufferObjectiv(id, buffer, pname, offset);
}

inline void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
	return GLFunctions()->GetQueryBufferObjectui64v(id, buffer, pname, offset);
}

inline void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
	return GLFunctions()->GetQueryBufferObjectuiv(id, buffer, pname, offset);
}

inline void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {
	return GLFunctions()->GetQueryIndexediv(target, index, pname, params);
}

inline void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {
	return GLFunctions()->GetQueryObjecti64v(id, pname, params);
}

inline void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params) {
	return GLFunctions()->GetQueryObjecti64vEXT(id, pname, params);
}

inline void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {
	return GLFunctions()->GetQueryObjectiv(id, pname, params);
}

inline void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params) {
	return GLFunctions()->GetQueryObjectivARB(id, pname, params);
}

inline void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {
	return GLFunctions()->GetQueryObjectui64v(id, pname, params);
}

inline void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params) {
	return GLFunctions()->GetQueryObjectui64vEXT(id, pname, params);
}

inline void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {
	return GLFunctions()->GetQueryObjectuiv(id, pname, params);
}

inline void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params) {
	return GLFunctions()->GetQueryObjectuivARB(id, pname, params);
}

inline void glGetQueryiv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetQueryiv(target, pname, params);
}

inline void glGetQueryivARB(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetQueryivARB(target, pname, params);
}

inline void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetRenderbufferParameteriv(target, pname, params);
}

inline void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetRenderbufferParameterivEXT(target, pname, params);
}

inline void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {
	return GLFunctions()->GetSamplerParameterIiv(sampler, pname, params);
}

inline void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {
	return GLFunctions()->GetSamplerParameterIuiv(sampler, pname, params);
}

inline void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetSamplerParameterfv(sampler, pname, params);
}

inline void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {
	return GLFunctions()->GetSamplerParameteriv(sampler, pname, params);
}

inline void glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params) {
	return GLFunctions()->GetSemaphoreParameterui64vEXT(semaphore, pname, params);
}

inline void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) {
	return GLFunctions()->GetSeparableFilter(target, format, type, row, column, span);
}

inline void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) {
	return GLFunctions()->GetSeparableFilterEXT(target, format, type, row, column, span);
}

inline void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
	return GLFunctions()->GetShaderInfoLog(shader, bufSize, length, infoLog);
}

inline void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {
	return GLFunctions()->GetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}

inline void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
	return GLFunctions()->GetShaderSource(shader, bufSize, length, source);
}

inline void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) {
	return GLFunctions()->GetShaderSourceARB(obj, maxLength, length, source);
}

inline void glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {
	return GLFunctions()->GetShaderiv(shader, pname, params);
}

inline void glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points) {
	return GLFunctions()->GetSharpenTexFuncSGIS(target, points);
}

inline GLushort glGetStageIndexNV(GLenum shadertype) {
	return GLFunctions()->GetStageIndexNV(shadertype);
}

inline GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) {
	return GLFunctions()->GetSubroutineIndex(program, shadertype, name);
}

inline GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) {
	return GLFunctions()->GetSubroutineUniformLocation(program, shadertype, name);
}

inline void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
	return GLFunctions()->GetSynciv(sync, pname, bufSize, length, values);
}

inline void glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param) {
	return GLFunctions()->GetTexBumpParameterfvATI(pname, param);
}

inline void glGetTexBumpParameterivATI(GLenum pname, GLint *param) {
	return GLFunctions()->GetTexBumpParameterivATI(pname, param);
}

inline void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights) {
	return GLFunctions()->GetTexFilterFuncSGIS(target, filter, weights);
}

inline void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetTexParameterIiv(target, pname, params);
}

inline void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetTexParameterIivEXT(target, pname, params);
}

inline void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {
	return GLFunctions()->GetTexParameterIuiv(target, pname, params);
}

inline void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params) {
	return GLFunctions()->GetTexParameterIuivEXT(target, pname, params);
}

inline void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void **params) {
	return GLFunctions()->GetTexParameterPointervAPPLE(target, pname, params);
}

inline GLuint64 glGetTextureHandleARB(GLuint texture) {
	return GLFunctions()->GetTextureHandleARB(texture);
}

inline GLuint64 glGetTextureHandleNV(GLuint texture) {
	return GLFunctions()->GetTextureHandleNV(texture);
}

inline void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
	return GLFunctions()->GetTextureImage(texture, level, format, type, bufSize, pixels);
}

inline void glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) {
	return GLFunctions()->GetTextureImageEXT(texture, target, level, format, type, pixels);
}

inline void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetTextureLevelParameterfv(texture, level, pname, params);
}

inline void glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetTextureLevelParameterfvEXT(texture, target, level, pname, params);
}

inline void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params) {
	return GLFunctions()->GetTextureLevelParameteriv(texture, level, pname, params);
}

inline void glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params) {
	return GLFunctions()->GetTextureLevelParameterivEXT(texture, target, level, pname, params);
}

inline void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params) {
	return GLFunctions()->GetTextureParameterIiv(texture, pname, params);
}

inline void glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetTextureParameterIivEXT(texture, target, pname, params);
}

inline void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params) {
	return GLFunctions()->GetTextureParameterIuiv(texture, pname, params);
}

inline void glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params) {
	return GLFunctions()->GetTextureParameterIuivEXT(texture, target, pname, params);
}

inline void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetTextureParameterfv(texture, pname, params);
}

inline void glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetTextureParameterfvEXT(texture, target, pname, params);
}

inline void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params) {
	return GLFunctions()->GetTextureParameteriv(texture, pname, params);
}

inline void glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) {
	return GLFunctions()->GetTextureParameterivEXT(texture, target, pname, params);
}

inline GLuint64 glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) {
	return GLFunctions()->GetTextureSamplerHandleARB(texture, sampler);
}

inline GLuint64 glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) {
	return GLFunctions()->GetTextureSamplerHandleNV(texture, sampler);
}

inline void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
	return GLFunctions()->GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}

inline void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params) {
	return GLFunctions()->GetTrackMatrixivNV(target, address, pname, params);
}

inline void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
	return GLFunctions()->GetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}

inline void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
	return GLFunctions()->GetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
}

inline void glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location) {
	return GLFunctions()->GetTransformFeedbackVaryingNV(program, index, location);
}

inline void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param) {
	return GLFunctions()->GetTransformFeedbacki64_v(xfb, pname, index, param);
}

inline void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param) {
	return GLFunctions()->GetTransformFeedbacki_v(xfb, pname, index, param);
}

inline void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param) {
	return GLFunctions()->GetTransformFeedbackiv(xfb, pname, param);
}

inline GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {
	return GLFunctions()->GetUniformBlockIndex(program, uniformBlockName);
}

inline GLint glGetUniformBufferSizeEXT(GLuint program, GLint location) {
	return GLFunctions()->GetUniformBufferSizeEXT(program, location);
}

inline void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) {
	return GLFunctions()->GetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}

inline GLint glGetUniformLocation(GLuint program, const GLchar *name) {
	return GLFunctions()->GetUniformLocation(program, name);
}

inline GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name) {
	return GLFunctions()->GetUniformLocationARB(programObj, name);
}

inline GLintptr glGetUniformOffsetEXT(GLuint program, GLint location) {
	return GLFunctions()->GetUniformOffsetEXT(program, location);
}

inline void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) {
	return GLFunctions()->GetUniformSubroutineuiv(shadertype, location, params);
}

inline void glGetUniformdv(GLuint program, GLint location, GLdouble *params) {
	return GLFunctions()->GetUniformdv(program, location, params);
}

inline void glGetUniformfv(GLuint program, GLint location, GLfloat *params) {
	return GLFunctions()->GetUniformfv(program, location, params);
}

inline void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params) {
	return GLFunctions()->GetUniformfvARB(programObj, location, params);
}

inline void glGetUniformi64vARB(GLuint program, GLint location, GLint64 *params) {
	return GLFunctions()->GetUniformi64vARB(program, location, params);
}

inline void glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params) {
	return GLFunctions()->GetUniformi64vNV(program, location, params);
}

inline void glGetUniformiv(GLuint program, GLint location, GLint *params) {
	return GLFunctions()->GetUniformiv(program, location, params);
}

inline void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params) {
	return GLFunctions()->GetUniformivARB(programObj, location, params);
}

inline void glGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params) {
	return GLFunctions()->GetUniformui64vARB(program, location, params);
}

inline void glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params) {
	return GLFunctions()->GetUniformui64vNV(program, location, params);
}

inline void glGetUniformuiv(GLuint program, GLint location, GLuint *params) {
	return GLFunctions()->GetUniformuiv(program, location, params);
}

inline void glGetUniformuivEXT(GLuint program, GLint location, GLuint *params) {
	return GLFunctions()->GetUniformuivEXT(program, location, params);
}

inline void glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data) {
	return GLFunctions()->GetUnsignedBytei_vEXT(target, index, data);
}

inline void glGetUnsignedBytevEXT(GLenum pname, GLubyte *data) {
	return GLFunctions()->GetUnsignedBytevEXT(pname, data);
}

inline void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetVariantArrayObjectfvATI(id, pname, params);
}

inline void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params) {
	return GLFunctions()->GetVariantArrayObjectivATI(id, pname, params);
}

inline void glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
	return GLFunctions()->GetVariantBooleanvEXT(id, value, data);
}

inline void glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
	return GLFunctions()->GetVariantFloatvEXT(id, value, data);
}

inline void glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data) {
	return GLFunctions()->GetVariantIntegervEXT(id, value, data);
}

inline void glGetVariantPointervEXT(GLuint id, GLenum value, void **data) {
	return GLFunctions()->GetVariantPointervEXT(id, value, data);
}

inline GLint glGetVaryingLocationNV(GLuint program, const GLchar *name) {
	return GLFunctions()->GetVaryingLocationNV(program, name);
}

inline void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) {
	return GLFunctions()->GetVertexArrayIndexed64iv(vaobj, index, pname, param);
}

inline void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
	return GLFunctions()->GetVertexArrayIndexediv(vaobj, index, pname, param);
}

inline void glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
	return GLFunctions()->GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
}

inline void glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param) {
	return GLFunctions()->GetVertexArrayIntegervEXT(vaobj, pname, param);
}

inline void glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void **param) {
	return GLFunctions()->GetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
}

inline void glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void **param) {
	return GLFunctions()->GetVertexArrayPointervEXT(vaobj, pname, param);
}

inline void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param) {
	return GLFunctions()->GetVertexArrayiv(vaobj, pname, param);
}

inline void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetVertexAttribArrayObjectfvATI(index, pname, params);
}

inline void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params) {
	return GLFunctions()->GetVertexAttribArrayObjectivATI(index, pname, params);
}

inline void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {
	return GLFunctions()->GetVertexAttribIiv(index, pname, params);
}

inline void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params) {
	return GLFunctions()->GetVertexAttribIivEXT(index, pname, params);
}

inline void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {
	return GLFunctions()->GetVertexAttribIuiv(index, pname, params);
}

inline void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params) {
	return GLFunctions()->GetVertexAttribIuivEXT(index, pname, params);
}

inline void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {
	return GLFunctions()->GetVertexAttribLdv(index, pname, params);
}

inline void glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params) {
	return GLFunctions()->GetVertexAttribLdvEXT(index, pname, params);
}

inline void glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params) {
	return GLFunctions()->GetVertexAttribLi64vNV(index, pname, params);
}

inline void glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params) {
	return GLFunctions()->GetVertexAttribLui64vARB(index, pname, params);
}

inline void glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params) {
	return GLFunctions()->GetVertexAttribLui64vNV(index, pname, params);
}

inline void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {
	return GLFunctions()->GetVertexAttribPointerv(index, pname, pointer);
}

inline void glGetVertexAttribPointervARB(GLuint index, GLenum pname, void **pointer) {
	return GLFunctions()->GetVertexAttribPointervARB(index, pname, pointer);
}

inline void glGetVertexAttribPointervNV(GLuint index, GLenum pname, void **pointer) {
	return GLFunctions()->GetVertexAttribPointervNV(index, pname, pointer);
}

inline void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {
	return GLFunctions()->GetVertexAttribdv(index, pname, params);
}

inline void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params) {
	return GLFunctions()->GetVertexAttribdvARB(index, pname, params);
}

inline void glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params) {
	return GLFunctions()->GetVertexAttribdvNV(index, pname, params);
}

inline void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetVertexAttribfv(index, pname, params);
}

inline void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetVertexAttribfvARB(index, pname, params);
}

inline void glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetVertexAttribfvNV(index, pname, params);
}

inline void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {
	return GLFunctions()->GetVertexAttribiv(index, pname, params);
}

inline void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params) {
	return GLFunctions()->GetVertexAttribivARB(index, pname, params);
}

inline void glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params) {
	return GLFunctions()->GetVertexAttribivNV(index, pname, params);
}

inline void glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) {
	return GLFunctions()->GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
}

inline void glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) {
	return GLFunctions()->GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
}

inline void glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) {
	return GLFunctions()->GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
}

inline void glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params) {
	return GLFunctions()->GetVideoCaptureivNV(video_capture_slot, pname, params);
}

inline void glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params) {
	return GLFunctions()->GetVideoi64vNV(video_slot, pname, params);
}

inline void glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params) {
	return GLFunctions()->GetVideoivNV(video_slot, pname, params);
}

inline void glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params) {
	return GLFunctions()->GetVideoui64vNV(video_slot, pname, params);
}

inline void glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params) {
	return GLFunctions()->GetVideouivNV(video_slot, pname, params);
}

inline GLVULKANPROCNV glGetVkProcAddrNV(const GLchar *name) {
	return GLFunctions()->GetVkProcAddrNV(name);
}

inline void glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) {
	return GLFunctions()->GetnColorTableARB(target, format, type, bufSize, table);
}

inline void glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels) {
	return GLFunctions()->GetnCompressedTexImage(target, lod, bufSize, pixels);
}

inline void glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img) {
	return GLFunctions()->GetnCompressedTexImageARB(target, lod, bufSize, img);
}

inline void glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) {
	return GLFunctions()->GetnConvolutionFilterARB(target, format, type, bufSize, image);
}

inline void glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
	return GLFunctions()->GetnHistogramARB(target, reset, format, type, bufSize, values);
}

inline void glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) {
	return GLFunctions()->GetnMapdvARB(target, query, bufSize, v);
}

inline void glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) {
	return GLFunctions()->GetnMapfvARB(target, query, bufSize, v);
}

inline void glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v) {
	return GLFunctions()->GetnMapivARB(target, query, bufSize, v);
}

inline void glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) {
	return GLFunctions()->GetnMinmaxARB(target, reset, format, type, bufSize, values);
}

inline void glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values) {
	return GLFunctions()->GetnPixelMapfvARB(map, bufSize, values);
}

inline void glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values) {
	return GLFunctions()->GetnPixelMapuivARB(map, bufSize, values);
}

inline void glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values) {
	return GLFunctions()->GetnPixelMapusvARB(map, bufSize, values);
}

inline void glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern) {
	return GLFunctions()->GetnPolygonStippleARB(bufSize, pattern);
}

inline void glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) {
	return GLFunctions()->GetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
}

inline void glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) {
	return GLFunctions()->GetnTexImage(target, level, format, type, bufSize, pixels);
}

inline void glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img) {
	return GLFunctions()->GetnTexImageARB(target, level, format, type, bufSize, img);
}

inline void glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
	return GLFunctions()->GetnUniformdv(program, location, bufSize, params);
}

inline void glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
	return GLFunctions()->GetnUniformdvARB(program, location, bufSize, params);
}

inline void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
	return GLFunctions()->GetnUniformfv(program, location, bufSize, params);
}

inline void glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
	return GLFunctions()->GetnUniformfvARB(program, location, bufSize, params);
}

inline void glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params) {
	return GLFunctions()->GetnUniformi64vARB(program, location, bufSize, params);
}

inline void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
	return GLFunctions()->GetnUniformiv(program, location, bufSize, params);
}

inline void glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
	return GLFunctions()->GetnUniformivARB(program, location, bufSize, params);
}

inline void glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) {
	return GLFunctions()->GetnUniformui64vARB(program, location, bufSize, params);
}

inline void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
	return GLFunctions()->GetnUniformuiv(program, location, bufSize, params);
}

inline void glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
	return GLFunctions()->GetnUniformuivARB(program, location, bufSize, params);
}

inline void glGlobalAlphaFactorbSUN(GLbyte factor) {
	return GLFunctions()->GlobalAlphaFactorbSUN(factor);
}

inline void glGlobalAlphaFactordSUN(GLdouble factor) {
	return GLFunctions()->GlobalAlphaFactordSUN(factor);
}

inline void glGlobalAlphaFactorfSUN(GLfloat factor) {
	return GLFunctions()->GlobalAlphaFactorfSUN(factor);
}

inline void glGlobalAlphaFactoriSUN(GLint factor) {
	return GLFunctions()->GlobalAlphaFactoriSUN(factor);
}

inline void glGlobalAlphaFactorsSUN(GLshort factor) {
	return GLFunctions()->GlobalAlphaFactorsSUN(factor);
}

inline void glGlobalAlphaFactorubSUN(GLubyte factor) {
	return GLFunctions()->GlobalAlphaFactorubSUN(factor);
}

inline void glGlobalAlphaFactoruiSUN(GLuint factor) {
	return GLFunctions()->GlobalAlphaFactoruiSUN(factor);
}

inline void glGlobalAlphaFactorusSUN(GLushort factor) {
	return GLFunctions()->GlobalAlphaFactorusSUN(factor);
}

inline void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
	return GLFunctions()->Histogram(target, width, internalformat, sink);
}

inline void glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
	return GLFunctions()->HistogramEXT(target, width, internalformat, sink);
}

inline void glIglooInterfaceSGIX(GLenum pname, const void *params) {
	return GLFunctions()->IglooInterfaceSGIX(pname, params);
}

inline void glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) {
	return GLFunctions()->ImageTransformParameterfHP(target, pname, param);
}

inline void glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->ImageTransformParameterfvHP(target, pname, params);
}

inline void glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) {
	return GLFunctions()->ImageTransformParameteriHP(target, pname, param);
}

inline void glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->ImageTransformParameterivHP(target, pname, params);
}

inline void glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) {
	return GLFunctions()->ImportMemoryFdEXT(memory, size, handleType, fd);
}

inline void glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void *handle) {
	return GLFunctions()->ImportMemoryWin32HandleEXT(memory, size, handleType, handle);
}

inline void glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void *name) {
	return GLFunctions()->ImportMemoryWin32NameEXT(memory, size, handleType, name);
}

inline void glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) {
	return GLFunctions()->ImportSemaphoreFdEXT(semaphore, handleType, fd);
}

inline void glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void *handle) {
	return GLFunctions()->ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle);
}

inline void glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void *name) {
	return GLFunctions()->ImportSemaphoreWin32NameEXT(semaphore, handleType, name);
}

inline GLsync glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) {
	return GLFunctions()->ImportSyncEXT(external_sync_type, external_sync, flags);
}

inline void glIndexFormatNV(GLenum type, GLsizei stride) {
	return GLFunctions()->IndexFormatNV(type, stride);
}

inline void glIndexFuncEXT(GLenum func, GLclampf ref) {
	return GLFunctions()->IndexFuncEXT(func, ref);
}

inline void glIndexMaterialEXT(GLenum face, GLenum mode) {
	return GLFunctions()->IndexMaterialEXT(face, mode);
}

inline void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
	return GLFunctions()->IndexPointerEXT(type, stride, count, pointer);
}

inline void glIndexPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
	return GLFunctions()->IndexPointerListIBM(type, stride, pointer, ptrstride);
}

inline void glInsertComponentEXT(GLuint res, GLuint src, GLuint num) {
	return GLFunctions()->InsertComponentEXT(res, src, num);
}

inline void glInsertEventMarkerEXT(GLsizei length, const GLchar *marker) {
	return GLFunctions()->InsertEventMarkerEXT(length, marker);
}

inline void glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
	return GLFunctions()->InterpolatePathsNV(resultPath, pathA, pathB, weight);
}

inline void glInvalidateBufferData(GLuint buffer) {
	return GLFunctions()->InvalidateBufferData(buffer);
}

inline void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
	return GLFunctions()->InvalidateBufferSubData(buffer, offset, length);
}

inline void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {
	return GLFunctions()->InvalidateFramebuffer(target, numAttachments, attachments);
}

inline void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) {
	return GLFunctions()->InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
}

inline void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
}

inline void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
	return GLFunctions()->InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}

inline void glInvalidateTexImage(GLuint texture, GLint level) {
	return GLFunctions()->InvalidateTexImage(texture, level);
}

inline void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
	return GLFunctions()->InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

inline GLboolean glIsAsyncMarkerSGIX(GLuint marker) {
	return GLFunctions()->IsAsyncMarkerSGIX(marker);
}

inline GLboolean glIsBuffer(GLuint buffer) {
	return GLFunctions()->IsBuffer(buffer);
}

inline GLboolean glIsBufferARB(GLuint buffer) {
	return GLFunctions()->IsBufferARB(buffer);
}

inline GLboolean glIsBufferResidentNV(GLenum target) {
	return GLFunctions()->IsBufferResidentNV(target);
}

inline GLboolean glIsCommandListNV(GLuint list) {
	return GLFunctions()->IsCommandListNV(list);
}

inline GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index) {
	return GLFunctions()->IsEnabledIndexedEXT(target, index);
}

inline GLboolean glIsEnabledi(GLenum target, GLuint index) {
	return GLFunctions()->IsEnabledi(target, index);
}

inline GLboolean glIsFenceAPPLE(GLuint fence) {
	return GLFunctions()->IsFenceAPPLE(fence);
}

inline GLboolean glIsFenceNV(GLuint fence) {
	return GLFunctions()->IsFenceNV(fence);
}

inline GLboolean glIsFramebuffer(GLuint framebuffer) {
	return GLFunctions()->IsFramebuffer(framebuffer);
}

inline GLboolean glIsFramebufferEXT(GLuint framebuffer) {
	return GLFunctions()->IsFramebufferEXT(framebuffer);
}

inline GLboolean glIsImageHandleResidentARB(GLuint64 handle) {
	return GLFunctions()->IsImageHandleResidentARB(handle);
}

inline GLboolean glIsImageHandleResidentNV(GLuint64 handle) {
	return GLFunctions()->IsImageHandleResidentNV(handle);
}

inline GLboolean glIsMemoryObjectEXT(GLuint memoryObject) {
	return GLFunctions()->IsMemoryObjectEXT(memoryObject);
}

inline GLboolean glIsNameAMD(GLenum identifier, GLuint name) {
	return GLFunctions()->IsNameAMD(identifier, name);
}

inline GLboolean glIsNamedBufferResidentNV(GLuint buffer) {
	return GLFunctions()->IsNamedBufferResidentNV(buffer);
}

inline GLboolean glIsNamedStringARB(GLint namelen, const GLchar *name) {
	return GLFunctions()->IsNamedStringARB(namelen, name);
}

inline GLboolean glIsObjectBufferATI(GLuint buffer) {
	return GLFunctions()->IsObjectBufferATI(buffer);
}

inline GLboolean glIsOcclusionQueryNV(GLuint id) {
	return GLFunctions()->IsOcclusionQueryNV(id);
}

inline GLboolean glIsPathNV(GLuint path) {
	return GLFunctions()->IsPathNV(path);
}

inline GLboolean glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) {
	return GLFunctions()->IsPointInFillPathNV(path, mask, x, y);
}

inline GLboolean glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) {
	return GLFunctions()->IsPointInStrokePathNV(path, x, y);
}

inline GLboolean glIsProgram(GLuint program) {
	return GLFunctions()->IsProgram(program);
}

inline GLboolean glIsProgramARB(GLuint program) {
	return GLFunctions()->IsProgramARB(program);
}

inline GLboolean glIsProgramNV(GLuint id) {
	return GLFunctions()->IsProgramNV(id);
}

inline GLboolean glIsProgramPipeline(GLuint pipeline) {
	return GLFunctions()->IsProgramPipeline(pipeline);
}

inline GLboolean glIsQuery(GLuint id) {
	return GLFunctions()->IsQuery(id);
}

inline GLboolean glIsQueryARB(GLuint id) {
	return GLFunctions()->IsQueryARB(id);
}

inline GLboolean glIsRenderbuffer(GLuint renderbuffer) {
	return GLFunctions()->IsRenderbuffer(renderbuffer);
}

inline GLboolean glIsRenderbufferEXT(GLuint renderbuffer) {
	return GLFunctions()->IsRenderbufferEXT(renderbuffer);
}

inline GLboolean glIsSampler(GLuint sampler) {
	return GLFunctions()->IsSampler(sampler);
}

inline GLboolean glIsSemaphoreEXT(GLuint semaphore) {
	return GLFunctions()->IsSemaphoreEXT(semaphore);
}

inline GLboolean glIsShader(GLuint shader) {
	return GLFunctions()->IsShader(shader);
}

inline GLboolean glIsStateNV(GLuint state) {
	return GLFunctions()->IsStateNV(state);
}

inline GLboolean glIsSync(GLsync sync) {
	return GLFunctions()->IsSync(sync);
}

inline GLboolean glIsTextureEXT(GLuint texture) {
	return GLFunctions()->IsTextureEXT(texture);
}

inline GLboolean glIsTextureHandleResidentARB(GLuint64 handle) {
	return GLFunctions()->IsTextureHandleResidentARB(handle);
}

inline GLboolean glIsTextureHandleResidentNV(GLuint64 handle) {
	return GLFunctions()->IsTextureHandleResidentNV(handle);
}

inline GLboolean glIsTransformFeedback(GLuint id) {
	return GLFunctions()->IsTransformFeedback(id);
}

inline GLboolean glIsTransformFeedbackNV(GLuint id) {
	return GLFunctions()->IsTransformFeedbackNV(id);
}

inline GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap) {
	return GLFunctions()->IsVariantEnabledEXT(id, cap);
}

inline GLboolean glIsVertexArray(GLuint array) {
	return GLFunctions()->IsVertexArray(array);
}

inline GLboolean glIsVertexArrayAPPLE(GLuint array) {
	return GLFunctions()->IsVertexArrayAPPLE(array);
}

inline GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) {
	return GLFunctions()->IsVertexAttribEnabledAPPLE(index, pname);
}

inline void glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
	return GLFunctions()->LGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

inline void glLGPUInterlockNVX(void) {
	return GLFunctions()->LGPUInterlockNVX();
}

inline void glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
	return GLFunctions()->LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);
}

inline void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label) {
	return GLFunctions()->LabelObjectEXT(type, object, length, label);
}

inline void glLinkProgram(GLuint program) {
	return GLFunctions()->LinkProgram(program);
}

inline void glLinkProgramARB(GLhandleARB programObj) {
	return GLFunctions()->LinkProgramARB(programObj);
}

inline void glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) {
	return GLFunctions()->ListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);
}

inline void glLoadIdentityDeformationMapSGIX(GLbitfield mask) {
	return GLFunctions()->LoadIdentityDeformationMapSGIX(mask);
}

inline void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program) {
	return GLFunctions()->LoadProgramNV(target, id, len, program);
}

inline void glLoadTransposeMatrixd(const GLdouble *m) {
	return GLFunctions()->LoadTransposeMatrixd(m);
}

inline void glLoadTransposeMatrixdARB(const GLdouble *m) {
	return GLFunctions()->LoadTransposeMatrixdARB(m);
}

inline void glLoadTransposeMatrixf(const GLfloat *m) {
	return GLFunctions()->LoadTransposeMatrixf(m);
}

inline void glLoadTransposeMatrixfARB(const GLfloat *m) {
	return GLFunctions()->LoadTransposeMatrixfARB(m);
}

inline void glLockArraysEXT(GLint first, GLsizei count) {
	return GLFunctions()->LockArraysEXT(first, count);
}

inline void glMakeBufferNonResidentNV(GLenum target) {
	return GLFunctions()->MakeBufferNonResidentNV(target);
}

inline void glMakeBufferResidentNV(GLenum target, GLenum access) {
	return GLFunctions()->MakeBufferResidentNV(target, access);
}

inline void glMakeImageHandleNonResidentARB(GLuint64 handle) {
	return GLFunctions()->MakeImageHandleNonResidentARB(handle);
}

inline void glMakeImageHandleNonResidentNV(GLuint64 handle) {
	return GLFunctions()->MakeImageHandleNonResidentNV(handle);
}

inline void glMakeImageHandleResidentARB(GLuint64 handle, GLenum access) {
	return GLFunctions()->MakeImageHandleResidentARB(handle, access);
}

inline void glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) {
	return GLFunctions()->MakeImageHandleResidentNV(handle, access);
}

inline void glMakeNamedBufferNonResidentNV(GLuint buffer) {
	return GLFunctions()->MakeNamedBufferNonResidentNV(buffer);
}

inline void glMakeNamedBufferResidentNV(GLuint buffer, GLenum access) {
	return GLFunctions()->MakeNamedBufferResidentNV(buffer, access);
}

inline void glMakeTextureHandleNonResidentARB(GLuint64 handle) {
	return GLFunctions()->MakeTextureHandleNonResidentARB(handle);
}

inline void glMakeTextureHandleNonResidentNV(GLuint64 handle) {
	return GLFunctions()->MakeTextureHandleNonResidentNV(handle);
}

inline void glMakeTextureHandleResidentARB(GLuint64 handle) {
	return GLFunctions()->MakeTextureHandleResidentARB(handle);
}

inline void glMakeTextureHandleResidentNV(GLuint64 handle) {
	return GLFunctions()->MakeTextureHandleResidentNV(handle);
}

inline void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points) {
	return GLFunctions()->MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
}

inline void glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->MapParameterfvNV(target, pname, params);
}

inline void glMapParameterivNV(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->MapParameterivNV(target, pname, params);
}

inline void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {
	return GLFunctions()->MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
}

inline void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {
	return GLFunctions()->MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
}

inline void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {
	return GLFunctions()->MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

inline void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {
	return GLFunctions()->MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

inline void glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
	return GLFunctions()->MatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
}

inline void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->MatrixIndexPointerARB(size, type, stride, pointer);
}

inline void glMatrixIndexubvARB(GLint size, const GLubyte *indices) {
	return GLFunctions()->MatrixIndexubvARB(size, indices);
}

inline void glMatrixIndexuivARB(GLint size, const GLuint *indices) {
	return GLFunctions()->MatrixIndexuivARB(size, indices);
}

inline void glMatrixIndexusvARB(GLint size, const GLushort *indices) {
	return GLFunctions()->MatrixIndexusvARB(size, indices);
}

inline void glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m) {
	return GLFunctions()->MatrixLoad3x2fNV(matrixMode, m);
}

inline void glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m) {
	return GLFunctions()->MatrixLoad3x3fNV(matrixMode, m);
}

inline void glMatrixLoadIdentityEXT(GLenum mode) {
	return GLFunctions()->MatrixLoadIdentityEXT(mode);
}

inline void glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m) {
	return GLFunctions()->MatrixLoadTranspose3x3fNV(matrixMode, m);
}

inline void glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m) {
	return GLFunctions()->MatrixLoadTransposedEXT(mode, m);
}

inline void glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m) {
	return GLFunctions()->MatrixLoadTransposefEXT(mode, m);
}

inline void glMatrixLoaddEXT(GLenum mode, const GLdouble *m) {
	return GLFunctions()->MatrixLoaddEXT(mode, m);
}

inline void glMatrixLoadfEXT(GLenum mode, const GLfloat *m) {
	return GLFunctions()->MatrixLoadfEXT(mode, m);
}

inline void glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m) {
	return GLFunctions()->MatrixMult3x2fNV(matrixMode, m);
}

inline void glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m) {
	return GLFunctions()->MatrixMult3x3fNV(matrixMode, m);
}

inline void glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m) {
	return GLFunctions()->MatrixMultTranspose3x3fNV(matrixMode, m);
}

inline void glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m) {
	return GLFunctions()->MatrixMultTransposedEXT(mode, m);
}

inline void glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m) {
	return GLFunctions()->MatrixMultTransposefEXT(mode, m);
}

inline void glMatrixMultdEXT(GLenum mode, const GLdouble *m) {
	return GLFunctions()->MatrixMultdEXT(mode, m);
}

inline void glMatrixMultfEXT(GLenum mode, const GLfloat *m) {
	return GLFunctions()->MatrixMultfEXT(mode, m);
}

inline void glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
	return GLFunctions()->MatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
}

inline void glMatrixPopEXT(GLenum mode) {
	return GLFunctions()->MatrixPopEXT(mode);
}

inline void glMatrixPushEXT(GLenum mode) {
	return GLFunctions()->MatrixPushEXT(mode);
}

inline void glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->MatrixRotatedEXT(mode, angle, x, y, z);
}

inline void glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->MatrixRotatefEXT(mode, angle, x, y, z);
}

inline void glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->MatrixScaledEXT(mode, x, y, z);
}

inline void glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->MatrixScalefEXT(mode, x, y, z);
}

inline void glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->MatrixTranslatedEXT(mode, x, y, z);
}

inline void glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->MatrixTranslatefEXT(mode, x, y, z);
}

inline void glMaxShaderCompilerThreadsARB(GLuint count) {
	return GLFunctions()->MaxShaderCompilerThreadsARB(count);
}

inline void glMaxShaderCompilerThreadsKHR(GLuint count) {
	return GLFunctions()->MaxShaderCompilerThreadsKHR(count);
}

inline void glMemoryBarrier(GLbitfield barriers) {
	return GLFunctions()->MemoryBarrier(barriers);
}

inline void glMemoryBarrierByRegion(GLbitfield barriers) {
	return GLFunctions()->MemoryBarrierByRegion(barriers);
}

inline void glMemoryBarrierEXT(GLbitfield barriers) {
	return GLFunctions()->MemoryBarrierEXT(barriers);
}

inline void glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params) {
	return GLFunctions()->MemoryObjectParameterivEXT(memoryObject, pname, params);
}

inline void glMinSampleShading(GLfloat value) {
	return GLFunctions()->MinSampleShading(value);
}

inline void glMinSampleShadingARB(GLfloat value) {
	return GLFunctions()->MinSampleShadingARB(value);
}

inline void glMinmax(GLenum target, GLenum internalformat, GLboolean sink) {
	return GLFunctions()->Minmax(target, internalformat, sink);
}

inline void glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) {
	return GLFunctions()->MinmaxEXT(target, internalformat, sink);
}

inline void glMultTransposeMatrixd(const GLdouble *m) {
	return GLFunctions()->MultTransposeMatrixd(m);
}

inline void glMultTransposeMatrixdARB(const GLdouble *m) {
	return GLFunctions()->MultTransposeMatrixdARB(m);
}

inline void glMultTransposeMatrixf(const GLfloat *m) {
	return GLFunctions()->MultTransposeMatrixf(m);
}

inline void glMultTransposeMatrixfARB(const GLfloat *m) {
	return GLFunctions()->MultTransposeMatrixfARB(m);
}

inline void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {
	return GLFunctions()->MultiDrawArrays(mode, first, count, drawcount);
}

inline void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {
	return GLFunctions()->MultiDrawArraysEXT(mode, first, count, primcount);
}

inline void glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) {
	return GLFunctions()->MultiDrawArraysIndirect(mode, indirect, drawcount, stride);
}

inline void glMultiDrawArraysIndirectAMD(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride) {
	return GLFunctions()->MultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
}

inline void glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
	return GLFunctions()->MultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}

inline void glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
	return GLFunctions()->MultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);
}

inline void glMultiDrawArraysIndirectCount(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
	return GLFunctions()->MultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
}

inline void glMultiDrawArraysIndirectCountARB(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
	return GLFunctions()->MultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
}

inline void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {
	return GLFunctions()->MultiDrawElementArrayAPPLE(mode, first, count, primcount);
}

inline void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) {
	return GLFunctions()->MultiDrawElements(mode, count, type, indices, drawcount);
}

inline void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) {
	return GLFunctions()->MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
}

inline void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount) {
	return GLFunctions()->MultiDrawElementsEXT(mode, count, type, indices, primcount);
}

inline void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) {
	return GLFunctions()->MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
}

inline void glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride) {
	return GLFunctions()->MultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
}

inline void glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
	return GLFunctions()->MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
}

inline void glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
	return GLFunctions()->MultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);
}

inline void glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
	return GLFunctions()->MultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
}

inline void glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
	return GLFunctions()->MultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
}

inline void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount) {
	return GLFunctions()->MultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
}

inline void glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) {
	return GLFunctions()->MultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
}

inline void glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride) {
	return GLFunctions()->MultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
}

inline void glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {
	return GLFunctions()->MultiTexBufferEXT(texunit, target, internalformat, buffer);
}

inline void glMultiTexCoord1d(GLenum target, GLdouble s) {
	return GLFunctions()->MultiTexCoord1d(target, s);
}

inline void glMultiTexCoord1dARB(GLenum target, GLdouble s) {
	return GLFunctions()->MultiTexCoord1dARB(target, s);
}

inline void glMultiTexCoord1dv(GLenum target, const GLdouble *v) {
	return GLFunctions()->MultiTexCoord1dv(target, v);
}

inline void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v) {
	return GLFunctions()->MultiTexCoord1dvARB(target, v);
}

inline void glMultiTexCoord1f(GLenum target, GLfloat s) {
	return GLFunctions()->MultiTexCoord1f(target, s);
}

inline void glMultiTexCoord1fARB(GLenum target, GLfloat s) {
	return GLFunctions()->MultiTexCoord1fARB(target, s);
}

inline void glMultiTexCoord1fv(GLenum target, const GLfloat *v) {
	return GLFunctions()->MultiTexCoord1fv(target, v);
}

inline void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v) {
	return GLFunctions()->MultiTexCoord1fvARB(target, v);
}

inline void glMultiTexCoord1hNV(GLenum target, GLhalfNV s) {
	return GLFunctions()->MultiTexCoord1hNV(target, s);
}

inline void glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v) {
	return GLFunctions()->MultiTexCoord1hvNV(target, v);
}

inline void glMultiTexCoord1i(GLenum target, GLint s) {
	return GLFunctions()->MultiTexCoord1i(target, s);
}

inline void glMultiTexCoord1iARB(GLenum target, GLint s) {
	return GLFunctions()->MultiTexCoord1iARB(target, s);
}

inline void glMultiTexCoord1iv(GLenum target, const GLint *v) {
	return GLFunctions()->MultiTexCoord1iv(target, v);
}

inline void glMultiTexCoord1ivARB(GLenum target, const GLint *v) {
	return GLFunctions()->MultiTexCoord1ivARB(target, v);
}

inline void glMultiTexCoord1s(GLenum target, GLshort s) {
	return GLFunctions()->MultiTexCoord1s(target, s);
}

inline void glMultiTexCoord1sARB(GLenum target, GLshort s) {
	return GLFunctions()->MultiTexCoord1sARB(target, s);
}

inline void glMultiTexCoord1sv(GLenum target, const GLshort *v) {
	return GLFunctions()->MultiTexCoord1sv(target, v);
}

inline void glMultiTexCoord1svARB(GLenum target, const GLshort *v) {
	return GLFunctions()->MultiTexCoord1svARB(target, v);
}

inline void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
	return GLFunctions()->MultiTexCoord2d(target, s, t);
}

inline void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) {
	return GLFunctions()->MultiTexCoord2dARB(target, s, t);
}

inline void glMultiTexCoord2dv(GLenum target, const GLdouble *v) {
	return GLFunctions()->MultiTexCoord2dv(target, v);
}

inline void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v) {
	return GLFunctions()->MultiTexCoord2dvARB(target, v);
}

inline void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
	return GLFunctions()->MultiTexCoord2f(target, s, t);
}

inline void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) {
	return GLFunctions()->MultiTexCoord2fARB(target, s, t);
}

inline void glMultiTexCoord2fv(GLenum target, const GLfloat *v) {
	return GLFunctions()->MultiTexCoord2fv(target, v);
}

inline void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v) {
	return GLFunctions()->MultiTexCoord2fvARB(target, v);
}

inline void glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) {
	return GLFunctions()->MultiTexCoord2hNV(target, s, t);
}

inline void glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v) {
	return GLFunctions()->MultiTexCoord2hvNV(target, v);
}

inline void glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
	return GLFunctions()->MultiTexCoord2i(target, s, t);
}

inline void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t) {
	return GLFunctions()->MultiTexCoord2iARB(target, s, t);
}

inline void glMultiTexCoord2iv(GLenum target, const GLint *v) {
	return GLFunctions()->MultiTexCoord2iv(target, v);
}

inline void glMultiTexCoord2ivARB(GLenum target, const GLint *v) {
	return GLFunctions()->MultiTexCoord2ivARB(target, v);
}

inline void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
	return GLFunctions()->MultiTexCoord2s(target, s, t);
}

inline void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) {
	return GLFunctions()->MultiTexCoord2sARB(target, s, t);
}

inline void glMultiTexCoord2sv(GLenum target, const GLshort *v) {
	return GLFunctions()->MultiTexCoord2sv(target, v);
}

inline void glMultiTexCoord2svARB(GLenum target, const GLshort *v) {
	return GLFunctions()->MultiTexCoord2svARB(target, v);
}

inline void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
	return GLFunctions()->MultiTexCoord3d(target, s, t, r);
}

inline void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
	return GLFunctions()->MultiTexCoord3dARB(target, s, t, r);
}

inline void glMultiTexCoord3dv(GLenum target, const GLdouble *v) {
	return GLFunctions()->MultiTexCoord3dv(target, v);
}

inline void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v) {
	return GLFunctions()->MultiTexCoord3dvARB(target, v);
}

inline void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
	return GLFunctions()->MultiTexCoord3f(target, s, t, r);
}

inline void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
	return GLFunctions()->MultiTexCoord3fARB(target, s, t, r);
}

inline void glMultiTexCoord3fv(GLenum target, const GLfloat *v) {
	return GLFunctions()->MultiTexCoord3fv(target, v);
}

inline void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v) {
	return GLFunctions()->MultiTexCoord3fvARB(target, v);
}

inline void glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) {
	return GLFunctions()->MultiTexCoord3hNV(target, s, t, r);
}

inline void glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v) {
	return GLFunctions()->MultiTexCoord3hvNV(target, v);
}

inline void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
	return GLFunctions()->MultiTexCoord3i(target, s, t, r);
}

inline void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) {
	return GLFunctions()->MultiTexCoord3iARB(target, s, t, r);
}

inline void glMultiTexCoord3iv(GLenum target, const GLint *v) {
	return GLFunctions()->MultiTexCoord3iv(target, v);
}

inline void glMultiTexCoord3ivARB(GLenum target, const GLint *v) {
	return GLFunctions()->MultiTexCoord3ivARB(target, v);
}

inline void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
	return GLFunctions()->MultiTexCoord3s(target, s, t, r);
}

inline void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) {
	return GLFunctions()->MultiTexCoord3sARB(target, s, t, r);
}

inline void glMultiTexCoord3sv(GLenum target, const GLshort *v) {
	return GLFunctions()->MultiTexCoord3sv(target, v);
}

inline void glMultiTexCoord3svARB(GLenum target, const GLshort *v) {
	return GLFunctions()->MultiTexCoord3svARB(target, v);
}

inline void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
	return GLFunctions()->MultiTexCoord4d(target, s, t, r, q);
}

inline void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
	return GLFunctions()->MultiTexCoord4dARB(target, s, t, r, q);
}

inline void glMultiTexCoord4dv(GLenum target, const GLdouble *v) {
	return GLFunctions()->MultiTexCoord4dv(target, v);
}

inline void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v) {
	return GLFunctions()->MultiTexCoord4dvARB(target, v);
}

inline void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
	return GLFunctions()->MultiTexCoord4f(target, s, t, r, q);
}

inline void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
	return GLFunctions()->MultiTexCoord4fARB(target, s, t, r, q);
}

inline void glMultiTexCoord4fv(GLenum target, const GLfloat *v) {
	return GLFunctions()->MultiTexCoord4fv(target, v);
}

inline void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v) {
	return GLFunctions()->MultiTexCoord4fvARB(target, v);
}

inline void glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
	return GLFunctions()->MultiTexCoord4hNV(target, s, t, r, q);
}

inline void glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v) {
	return GLFunctions()->MultiTexCoord4hvNV(target, v);
}

inline void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
	return GLFunctions()->MultiTexCoord4i(target, s, t, r, q);
}

inline void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) {
	return GLFunctions()->MultiTexCoord4iARB(target, s, t, r, q);
}

inline void glMultiTexCoord4iv(GLenum target, const GLint *v) {
	return GLFunctions()->MultiTexCoord4iv(target, v);
}

inline void glMultiTexCoord4ivARB(GLenum target, const GLint *v) {
	return GLFunctions()->MultiTexCoord4ivARB(target, v);
}

inline void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
	return GLFunctions()->MultiTexCoord4s(target, s, t, r, q);
}

inline void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
	return GLFunctions()->MultiTexCoord4sARB(target, s, t, r, q);
}

inline void glMultiTexCoord4sv(GLenum target, const GLshort *v) {
	return GLFunctions()->MultiTexCoord4sv(target, v);
}

inline void glMultiTexCoord4svARB(GLenum target, const GLshort *v) {
	return GLFunctions()->MultiTexCoord4svARB(target, v);
}

inline void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {
	return GLFunctions()->MultiTexCoordP1ui(texture, type, coords);
}

inline void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) {
	return GLFunctions()->MultiTexCoordP1uiv(texture, type, coords);
}

inline void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {
	return GLFunctions()->MultiTexCoordP2ui(texture, type, coords);
}

inline void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) {
	return GLFunctions()->MultiTexCoordP2uiv(texture, type, coords);
}

inline void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {
	return GLFunctions()->MultiTexCoordP3ui(texture, type, coords);
}

inline void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) {
	return GLFunctions()->MultiTexCoordP3uiv(texture, type, coords);
}

inline void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {
	return GLFunctions()->MultiTexCoordP4ui(texture, type, coords);
}

inline void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) {
	return GLFunctions()->MultiTexCoordP4uiv(texture, type, coords);
}

inline void glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->MultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
}

inline void glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
	return GLFunctions()->MultiTexEnvfEXT(texunit, target, pname, param);
}

inline void glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->MultiTexEnvfvEXT(texunit, target, pname, params);
}

inline void glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
	return GLFunctions()->MultiTexEnviEXT(texunit, target, pname, param);
}

inline void glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->MultiTexEnvivEXT(texunit, target, pname, params);
}

inline void glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {
	return GLFunctions()->MultiTexGendEXT(texunit, coord, pname, param);
}

inline void glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) {
	return GLFunctions()->MultiTexGendvEXT(texunit, coord, pname, params);
}

inline void glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {
	return GLFunctions()->MultiTexGenfEXT(texunit, coord, pname, param);
}

inline void glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) {
	return GLFunctions()->MultiTexGenfvEXT(texunit, coord, pname, params);
}

inline void glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) {
	return GLFunctions()->MultiTexGeniEXT(texunit, coord, pname, param);
}

inline void glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params) {
	return GLFunctions()->MultiTexGenivEXT(texunit, coord, pname, params);
}

inline void glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
}

inline void glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}

inline void glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

inline void glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->MultiTexParameterIivEXT(texunit, target, pname, params);
}

inline void glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params) {
	return GLFunctions()->MultiTexParameterIuivEXT(texunit, target, pname, params);
}

inline void glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
	return GLFunctions()->MultiTexParameterfEXT(texunit, target, pname, param);
}

inline void glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->MultiTexParameterfvEXT(texunit, target, pname, params);
}

inline void glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
	return GLFunctions()->MultiTexParameteriEXT(texunit, target, pname, param);
}

inline void glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->MultiTexParameterivEXT(texunit, target, pname, params);
}

inline void glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) {
	return GLFunctions()->MultiTexRenderbufferEXT(texunit, target, renderbuffer);
}

inline void glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
}

inline void glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

inline void glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

inline void glMulticastBarrierNV(void) {
	return GLFunctions()->MulticastBarrierNV();
}

inline void glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
	return GLFunctions()->MulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

inline void glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
	return GLFunctions()->MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data);
}

inline void glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
	return GLFunctions()->MulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
}

inline void glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
	return GLFunctions()->MulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

inline void glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {
	return GLFunctions()->MulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v);
}

inline void glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 *params) {
	return GLFunctions()->MulticastGetQueryObjecti64vNV(gpu, id, pname, params);
}

inline void glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint *params) {
	return GLFunctions()->MulticastGetQueryObjectivNV(gpu, id, pname, params);
}

inline void glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 *params) {
	return GLFunctions()->MulticastGetQueryObjectui64vNV(gpu, id, pname, params);
}

inline void glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint *params) {
	return GLFunctions()->MulticastGetQueryObjectuivNV(gpu, id, pname, params);
}

inline void glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) {
	return GLFunctions()->MulticastWaitSyncNV(signalGpu, waitGpuMask);
}

inline void glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {
	return GLFunctions()->NamedBufferData(buffer, size, data, usage);
}

inline void glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) {
	return GLFunctions()->NamedBufferDataEXT(buffer, size, data, usage);
}

inline void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {
	return GLFunctions()->NamedBufferStorage(buffer, size, data, flags);
}

inline void glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) {
	return GLFunctions()->NamedBufferStorageEXT(buffer, size, data, flags);
}

inline void glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
	return GLFunctions()->NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);
}

inline void glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) {
	return GLFunctions()->NamedBufferStorageMemEXT(buffer, size, memory, offset);
}

inline void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
	return GLFunctions()->NamedBufferSubData(buffer, offset, size, data);
}

inline void glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) {
	return GLFunctions()->NamedBufferSubDataEXT(buffer, offset, size, data);
}

inline void glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
	return GLFunctions()->NamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

inline void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {
	return GLFunctions()->NamedFramebufferDrawBuffer(framebuffer, buf);
}

inline void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
	return GLFunctions()->NamedFramebufferDrawBuffers(framebuffer, n, bufs);
}

inline void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {
	return GLFunctions()->NamedFramebufferParameteri(framebuffer, pname, param);
}

inline void glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) {
	return GLFunctions()->NamedFramebufferParameteriEXT(framebuffer, pname, param);
}

inline void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {
	return GLFunctions()->NamedFramebufferReadBuffer(framebuffer, src);
}

inline void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
	return GLFunctions()->NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

inline void glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
	return GLFunctions()->NamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

inline void glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {
	return GLFunctions()->NamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);
}

inline void glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) {
	return GLFunctions()->NamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);
}

inline void glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values) {
	return GLFunctions()->NamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values);
}

inline void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
	return GLFunctions()->NamedFramebufferTexture(framebuffer, attachment, texture, level);
}

inline void glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
	return GLFunctions()->NamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
}

inline void glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
	return GLFunctions()->NamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
}

inline void glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
	return GLFunctions()->NamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
}

inline void glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
	return GLFunctions()->NamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
}

inline void glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {
	return GLFunctions()->NamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
}

inline void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
	return GLFunctions()->NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
}

inline void glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
	return GLFunctions()->NamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
}

inline void glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->NamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
}

inline void glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params) {
	return GLFunctions()->NamedProgramLocalParameter4dvEXT(program, target, index, params);
}

inline void glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->NamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
}

inline void glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params) {
	return GLFunctions()->NamedProgramLocalParameter4fvEXT(program, target, index, params);
}

inline void glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
	return GLFunctions()->NamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
}

inline void glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params) {
	return GLFunctions()->NamedProgramLocalParameterI4ivEXT(program, target, index, params);
}

inline void glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
	return GLFunctions()->NamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
}

inline void glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params) {
	return GLFunctions()->NamedProgramLocalParameterI4uivEXT(program, target, index, params);
}

inline void glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
	return GLFunctions()->NamedProgramLocalParameters4fvEXT(program, target, index, count, params);
}

inline void glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) {
	return GLFunctions()->NamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
}

inline void glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) {
	return GLFunctions()->NamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
}

inline void glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) {
	return GLFunctions()->NamedProgramStringEXT(program, target, format, len, string);
}

inline void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->NamedRenderbufferStorage(renderbuffer, internalformat, width, height);
}

inline void glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->NamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
}

inline void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
}

inline void glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}

inline void glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->NamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
}

inline void glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) {
	return GLFunctions()->NamedStringARB(type, namelen, name, stringlen, string);
}

inline GLuint glNewObjectBufferATI(GLsizei size, const void *pointer, GLenum usage) {
	return GLFunctions()->NewObjectBufferATI(size, pointer, usage);
}

inline void glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->Normal3fVertex3fSUN(nx, ny, nz, x, y, z);
}

inline void glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->Normal3fVertex3fvSUN(n, v);
}

inline void glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) {
	return GLFunctions()->Normal3hNV(nx, ny, nz);
}

inline void glNormal3hvNV(const GLhalfNV *v) {
	return GLFunctions()->Normal3hvNV(v);
}

inline void glNormalFormatNV(GLenum type, GLsizei stride) {
	return GLFunctions()->NormalFormatNV(type, stride);
}

inline void glNormalP3ui(GLenum type, GLuint coords) {
	return GLFunctions()->NormalP3ui(type, coords);
}

inline void glNormalP3uiv(GLenum type, const GLuint *coords) {
	return GLFunctions()->NormalP3uiv(type, coords);
}

inline void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
	return GLFunctions()->NormalPointerEXT(type, stride, count, pointer);
}

inline void glNormalPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
	return GLFunctions()->NormalPointerListIBM(type, stride, pointer, ptrstride);
}

inline void glNormalPointervINTEL(GLenum type, const void **pointer) {
	return GLFunctions()->NormalPointervINTEL(type, pointer);
}

inline void glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) {
	return GLFunctions()->NormalStream3bATI(stream, nx, ny, nz);
}

inline void glNormalStream3bvATI(GLenum stream, const GLbyte *coords) {
	return GLFunctions()->NormalStream3bvATI(stream, coords);
}

inline void glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) {
	return GLFunctions()->NormalStream3dATI(stream, nx, ny, nz);
}

inline void glNormalStream3dvATI(GLenum stream, const GLdouble *coords) {
	return GLFunctions()->NormalStream3dvATI(stream, coords);
}

inline void glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) {
	return GLFunctions()->NormalStream3fATI(stream, nx, ny, nz);
}

inline void glNormalStream3fvATI(GLenum stream, const GLfloat *coords) {
	return GLFunctions()->NormalStream3fvATI(stream, coords);
}

inline void glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) {
	return GLFunctions()->NormalStream3iATI(stream, nx, ny, nz);
}

inline void glNormalStream3ivATI(GLenum stream, const GLint *coords) {
	return GLFunctions()->NormalStream3ivATI(stream, coords);
}

inline void glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) {
	return GLFunctions()->NormalStream3sATI(stream, nx, ny, nz);
}

inline void glNormalStream3svATI(GLenum stream, const GLshort *coords) {
	return GLFunctions()->NormalStream3svATI(stream, coords);
}

inline void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {
	return GLFunctions()->ObjectLabel(identifier, name, length, label);
}

inline void glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) {
	return GLFunctions()->ObjectPtrLabel(ptr, length, label);
}

inline GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
	return GLFunctions()->ObjectPurgeableAPPLE(objectType, name, option);
}

inline GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
	return GLFunctions()->ObjectUnpurgeableAPPLE(objectType, name, option);
}

inline void glPNTrianglesfATI(GLenum pname, GLfloat param) {
	return GLFunctions()->PNTrianglesfATI(pname, param);
}

inline void glPNTrianglesiATI(GLenum pname, GLint param) {
	return GLFunctions()->PNTrianglesiATI(pname, param);
}

inline void glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) {
	return GLFunctions()->PassTexCoordATI(dst, coord, swizzle);
}

inline void glPatchParameterfv(GLenum pname, const GLfloat *values) {
	return GLFunctions()->PatchParameterfv(pname, values);
}

inline void glPatchParameteri(GLenum pname, GLint value) {
	return GLFunctions()->PatchParameteri(pname, value);
}

inline void glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs) {
	return GLFunctions()->PathColorGenNV(color, genMode, colorFormat, coeffs);
}

inline void glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {
	return GLFunctions()->PathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
}

inline void glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) {
	return GLFunctions()->PathCoordsNV(path, numCoords, coordType, coords);
}

inline void glPathCoverDepthFuncNV(GLenum func) {
	return GLFunctions()->PathCoverDepthFuncNV(func);
}

inline void glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray) {
	return GLFunctions()->PathDashArrayNV(path, dashCount, dashArray);
}

inline void glPathFogGenNV(GLenum genMode) {
	return GLFunctions()->PathFogGenNV(genMode);
}

inline GLenum glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
	return GLFunctions()->PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}

inline GLenum glPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) {
	return GLFunctions()->PathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, GLuint baseAndCount[2]);
}

inline void glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
	return GLFunctions()->PathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}

inline void glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
	return GLFunctions()->PathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}

inline GLenum glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
	return GLFunctions()->PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
}

inline void glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) {
	return GLFunctions()->PathParameterfNV(path, pname, value);
}

inline void glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value) {
	return GLFunctions()->PathParameterfvNV(path, pname, value);
}

inline void glPathParameteriNV(GLuint path, GLenum pname, GLint value) {
	return GLFunctions()->PathParameteriNV(path, pname, value);
}

inline void glPathParameterivNV(GLuint path, GLenum pname, const GLint *value) {
	return GLFunctions()->PathParameterivNV(path, pname, value);
}

inline void glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) {
	return GLFunctions()->PathStencilDepthOffsetNV(factor, units);
}

inline void glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) {
	return GLFunctions()->PathStencilFuncNV(func, ref, mask);
}

inline void glPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString) {
	return GLFunctions()->PathStringNV(path, format, length, pathString);
}

inline void glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) {
	return GLFunctions()->PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}

inline void glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) {
	return GLFunctions()->PathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
}

inline void glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs) {
	return GLFunctions()->PathTexGenNV(texCoordSet, genMode, components, coeffs);
}

inline void glPauseTransformFeedback(void) {
	return GLFunctions()->PauseTransformFeedback();
}

inline void glPauseTransformFeedbackNV(void) {
	return GLFunctions()->PauseTransformFeedbackNV();
}

inline void glPixelDataRangeNV(GLenum target, GLsizei length, const void *pointer) {
	return GLFunctions()->PixelDataRangeNV(target, length, pointer);
}

inline void glPixelTexGenSGIX(GLenum mode) {
	return GLFunctions()->PixelTexGenSGIX(mode);
}

inline void glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) {
	return GLFunctions()->PixelTransformParameterfEXT(target, pname, param);
}

inline void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->PixelTransformParameterfvEXT(target, pname, params);
}

inline void glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) {
	return GLFunctions()->PixelTransformParameteriEXT(target, pname, param);
}

inline void glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->PixelTransformParameterivEXT(target, pname, params);
}

inline GLboolean glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) {
	return GLFunctions()->PointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
}

inline void glPointParameterf(GLenum pname, GLfloat param) {
	return GLFunctions()->PointParameterf(pname, param);
}

inline void glPointParameterfARB(GLenum pname, GLfloat param) {
	return GLFunctions()->PointParameterfARB(pname, param);
}

inline void glPointParameterfEXT(GLenum pname, GLfloat param) {
	return GLFunctions()->PointParameterfEXT(pname, param);
}

inline void glPointParameterfv(GLenum pname, const GLfloat *params) {
	return GLFunctions()->PointParameterfv(pname, params);
}

inline void glPointParameterfvARB(GLenum pname, const GLfloat *params) {
	return GLFunctions()->PointParameterfvARB(pname, params);
}

inline void glPointParameterfvEXT(GLenum pname, const GLfloat *params) {
	return GLFunctions()->PointParameterfvEXT(pname, params);
}

inline void glPointParameteri(GLenum pname, GLint param) {
	return GLFunctions()->PointParameteri(pname, param);
}

inline void glPointParameteriNV(GLenum pname, GLint param) {
	return GLFunctions()->PointParameteriNV(pname, param);
}

inline void glPointParameteriv(GLenum pname, const GLint *params) {
	return GLFunctions()->PointParameteriv(pname, params);
}

inline void glPointParameterivNV(GLenum pname, const GLint *params) {
	return GLFunctions()->PointParameterivNV(pname, params);
}

inline GLint glPollAsyncSGIX(GLuint *markerp) {
	return GLFunctions()->PollAsyncSGIX(markerp);
}

inline void glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {
	return GLFunctions()->PolygonOffsetClamp(factor, units, clamp);
}

inline void glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) {
	return GLFunctions()->PolygonOffsetClampEXT(factor, units, clamp);
}

inline void glPolygonOffsetEXT(GLfloat factor, GLfloat bias) {
	return GLFunctions()->PolygonOffsetEXT(factor, bias);
}

inline void glPopDebugGroup(void) {
	return GLFunctions()->PopDebugGroup();
}

inline void glPopGroupMarkerEXT(void) {
	return GLFunctions()->PopGroupMarkerEXT();
}

inline void glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) {
	return GLFunctions()->PresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}

inline void glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) {
	return GLFunctions()->PresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}

inline void glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
	return GLFunctions()->PrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

inline void glPrimitiveRestartIndex(GLuint index) {
	return GLFunctions()->PrimitiveRestartIndex(index);
}

inline void glPrimitiveRestartIndexNV(GLuint index) {
	return GLFunctions()->PrimitiveRestartIndexNV(index);
}

inline void glPrimitiveRestartNV(void) {
	return GLFunctions()->PrimitiveRestartNV();
}

inline void glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities) {
	return GLFunctions()->PrioritizeTexturesEXT(n, textures, priorities);
}

inline void glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) {
	return GLFunctions()->ProgramBinary(program, binaryFormat, binary, length);
}

inline void glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params) {
	return GLFunctions()->ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params);
}

inline void glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params) {
	return GLFunctions()->ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params);
}

inline void glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params) {
	return GLFunctions()->ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params);
}

inline void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->ProgramEnvParameter4dARB(target, index, x, y, z, w);
}

inline void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params) {
	return GLFunctions()->ProgramEnvParameter4dvARB(target, index, params);
}

inline void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->ProgramEnvParameter4fARB(target, index, x, y, z, w);
}

inline void glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params) {
	return GLFunctions()->ProgramEnvParameter4fvARB(target, index, params);
}

inline void glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
	return GLFunctions()->ProgramEnvParameterI4iNV(target, index, x, y, z, w);
}

inline void glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params) {
	return GLFunctions()->ProgramEnvParameterI4ivNV(target, index, params);
}

inline void glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
	return GLFunctions()->ProgramEnvParameterI4uiNV(target, index, x, y, z, w);
}

inline void glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params) {
	return GLFunctions()->ProgramEnvParameterI4uivNV(target, index, params);
}

inline void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
	return GLFunctions()->ProgramEnvParameters4fvEXT(target, index, count, params);
}

inline void glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params) {
	return GLFunctions()->ProgramEnvParametersI4ivNV(target, index, count, params);
}

inline void glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params) {
	return GLFunctions()->ProgramEnvParametersI4uivNV(target, index, count, params);
}

inline void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->ProgramLocalParameter4dARB(target, index, x, y, z, w);
}

inline void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params) {
	return GLFunctions()->ProgramLocalParameter4dvARB(target, index, params);
}

inline void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->ProgramLocalParameter4fARB(target, index, x, y, z, w);
}

inline void glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params) {
	return GLFunctions()->ProgramLocalParameter4fvARB(target, index, params);
}

inline void glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
	return GLFunctions()->ProgramLocalParameterI4iNV(target, index, x, y, z, w);
}

inline void glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params) {
	return GLFunctions()->ProgramLocalParameterI4ivNV(target, index, params);
}

inline void glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
	return GLFunctions()->ProgramLocalParameterI4uiNV(target, index, x, y, z, w);
}

inline void glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params) {
	return GLFunctions()->ProgramLocalParameterI4uivNV(target, index, params);
}

inline void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
	return GLFunctions()->ProgramLocalParameters4fvEXT(target, index, count, params);
}

inline void glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params) {
	return GLFunctions()->ProgramLocalParametersI4ivNV(target, index, count, params);
}

inline void glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params) {
	return GLFunctions()->ProgramLocalParametersI4uivNV(target, index, count, params);
}

inline void glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->ProgramNamedParameter4dNV(id, len, name, x, y, z, w);
}

inline void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v) {
	return GLFunctions()->ProgramNamedParameter4dvNV(id, len, name, v);
}

inline void glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->ProgramNamedParameter4fNV(id, len, name, x, y, z, w);
}

inline void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v) {
	return GLFunctions()->ProgramNamedParameter4fvNV(id, len, name, v);
}

inline void glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->ProgramParameter4dNV(target, index, x, y, z, w);
}

inline void glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v) {
	return GLFunctions()->ProgramParameter4dvNV(target, index, v);
}

inline void glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->ProgramParameter4fNV(target, index, x, y, z, w);
}

inline void glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v) {
	return GLFunctions()->ProgramParameter4fvNV(target, index, v);
}

inline void glProgramParameteri(GLuint program, GLenum pname, GLint value) {
	return GLFunctions()->ProgramParameteri(program, pname, value);
}

inline void glProgramParameteriARB(GLuint program, GLenum pname, GLint value) {
	return GLFunctions()->ProgramParameteriARB(program, pname, value);
}

inline void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value) {
	return GLFunctions()->ProgramParameteriEXT(program, pname, value);
}

inline void glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v) {
	return GLFunctions()->ProgramParameters4dvNV(target, index, count, v);
}

inline void glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v) {
	return GLFunctions()->ProgramParameters4fvNV(target, index, count, v);
}

inline void glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs) {
	return GLFunctions()->ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);
}

inline void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void *string) {
	return GLFunctions()->ProgramStringARB(target, format, len, string);
}

inline void glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {
	return GLFunctions()->ProgramUniform1d(program, location, v0);
}

inline void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
	return GLFunctions()->ProgramUniform1dv(program, location, count, value);
}

inline void glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
	return GLFunctions()->ProgramUniform1f(program, location, v0);
}

inline void glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) {
	return GLFunctions()->ProgramUniform1fEXT(program, location, v0);
}

inline void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->ProgramUniform1fv(program, location, count, value);
}

inline void glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->ProgramUniform1fvEXT(program, location, count, value);
}

inline void glProgramUniform1i(GLuint program, GLint location, GLint v0) {
	return GLFunctions()->ProgramUniform1i(program, location, v0);
}

inline void glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) {
	return GLFunctions()->ProgramUniform1i64ARB(program, location, x);
}

inline void glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) {
	return GLFunctions()->ProgramUniform1i64NV(program, location, x);
}

inline void glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
	return GLFunctions()->ProgramUniform1i64vARB(program, location, count, value);
}

inline void glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
	return GLFunctions()->ProgramUniform1i64vNV(program, location, count, value);
}

inline void glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) {
	return GLFunctions()->ProgramUniform1iEXT(program, location, v0);
}

inline void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->ProgramUniform1iv(program, location, count, value);
}

inline void glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->ProgramUniform1ivEXT(program, location, count, value);
}

inline void glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
	return GLFunctions()->ProgramUniform1ui(program, location, v0);
}

inline void glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) {
	return GLFunctions()->ProgramUniform1ui64ARB(program, location, x);
}

inline void glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) {
	return GLFunctions()->ProgramUniform1ui64NV(program, location, x);
}

inline void glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->ProgramUniform1ui64vARB(program, location, count, value);
}

inline void glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->ProgramUniform1ui64vNV(program, location, count, value);
}

inline void glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) {
	return GLFunctions()->ProgramUniform1uiEXT(program, location, v0);
}

inline void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->ProgramUniform1uiv(program, location, count, value);
}

inline void glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->ProgramUniform1uivEXT(program, location, count, value);
}

inline void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {
	return GLFunctions()->ProgramUniform2d(program, location, v0, v1);
}

inline void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
	return GLFunctions()->ProgramUniform2dv(program, location, count, value);
}

inline void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
	return GLFunctions()->ProgramUniform2f(program, location, v0, v1);
}

inline void glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
	return GLFunctions()->ProgramUniform2fEXT(program, location, v0, v1);
}

inline void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->ProgramUniform2fv(program, location, count, value);
}

inline void glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->ProgramUniform2fvEXT(program, location, count, value);
}

inline void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
	return GLFunctions()->ProgramUniform2i(program, location, v0, v1);
}

inline void glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) {
	return GLFunctions()->ProgramUniform2i64ARB(program, location, x, y);
}

inline void glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
	return GLFunctions()->ProgramUniform2i64NV(program, location, x, y);
}

inline void glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
	return GLFunctions()->ProgramUniform2i64vARB(program, location, count, value);
}

inline void glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
	return GLFunctions()->ProgramUniform2i64vNV(program, location, count, value);
}

inline void glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) {
	return GLFunctions()->ProgramUniform2iEXT(program, location, v0, v1);
}

inline void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->ProgramUniform2iv(program, location, count, value);
}

inline void glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->ProgramUniform2ivEXT(program, location, count, value);
}

inline void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
	return GLFunctions()->ProgramUniform2ui(program, location, v0, v1);
}

inline void glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) {
	return GLFunctions()->ProgramUniform2ui64ARB(program, location, x, y);
}

inline void glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
	return GLFunctions()->ProgramUniform2ui64NV(program, location, x, y);
}

inline void glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->ProgramUniform2ui64vARB(program, location, count, value);
}

inline void glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->ProgramUniform2ui64vNV(program, location, count, value);
}

inline void glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) {
	return GLFunctions()->ProgramUniform2uiEXT(program, location, v0, v1);
}

inline void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->ProgramUniform2uiv(program, location, count, value);
}

inline void glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->ProgramUniform2uivEXT(program, location, count, value);
}

inline void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
	return GLFunctions()->ProgramUniform3d(program, location, v0, v1, v2);
}

inline void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
	return GLFunctions()->ProgramUniform3dv(program, location, count, value);
}

inline void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
	return GLFunctions()->ProgramUniform3f(program, location, v0, v1, v2);
}

inline void glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
	return GLFunctions()->ProgramUniform3fEXT(program, location, v0, v1, v2);
}

inline void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->ProgramUniform3fv(program, location, count, value);
}

inline void glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->ProgramUniform3fvEXT(program, location, count, value);
}

inline void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
	return GLFunctions()->ProgramUniform3i(program, location, v0, v1, v2);
}

inline void glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) {
	return GLFunctions()->ProgramUniform3i64ARB(program, location, x, y, z);
}

inline void glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
	return GLFunctions()->ProgramUniform3i64NV(program, location, x, y, z);
}

inline void glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
	return GLFunctions()->ProgramUniform3i64vARB(program, location, count, value);
}

inline void glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
	return GLFunctions()->ProgramUniform3i64vNV(program, location, count, value);
}

inline void glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
	return GLFunctions()->ProgramUniform3iEXT(program, location, v0, v1, v2);
}

inline void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->ProgramUniform3iv(program, location, count, value);
}

inline void glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->ProgramUniform3ivEXT(program, location, count, value);
}

inline void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
	return GLFunctions()->ProgramUniform3ui(program, location, v0, v1, v2);
}

inline void glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
	return GLFunctions()->ProgramUniform3ui64ARB(program, location, x, y, z);
}

inline void glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
	return GLFunctions()->ProgramUniform3ui64NV(program, location, x, y, z);
}

inline void glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->ProgramUniform3ui64vARB(program, location, count, value);
}

inline void glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->ProgramUniform3ui64vNV(program, location, count, value);
}

inline void glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
	return GLFunctions()->ProgramUniform3uiEXT(program, location, v0, v1, v2);
}

inline void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->ProgramUniform3uiv(program, location, count, value);
}

inline void glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->ProgramUniform3uivEXT(program, location, count, value);
}

inline void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
	return GLFunctions()->ProgramUniform4d(program, location, v0, v1, v2, v3);
}

inline void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
	return GLFunctions()->ProgramUniform4dv(program, location, count, value);
}

inline void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
	return GLFunctions()->ProgramUniform4f(program, location, v0, v1, v2, v3);
}

inline void glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
	return GLFunctions()->ProgramUniform4fEXT(program, location, v0, v1, v2, v3);
}

inline void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->ProgramUniform4fv(program, location, count, value);
}

inline void glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->ProgramUniform4fvEXT(program, location, count, value);
}

inline void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
	return GLFunctions()->ProgramUniform4i(program, location, v0, v1, v2, v3);
}

inline void glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
	return GLFunctions()->ProgramUniform4i64ARB(program, location, x, y, z, w);
}

inline void glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
	return GLFunctions()->ProgramUniform4i64NV(program, location, x, y, z, w);
}

inline void glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) {
	return GLFunctions()->ProgramUniform4i64vARB(program, location, count, value);
}

inline void glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
	return GLFunctions()->ProgramUniform4i64vNV(program, location, count, value);
}

inline void glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
	return GLFunctions()->ProgramUniform4iEXT(program, location, v0, v1, v2, v3);
}

inline void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->ProgramUniform4iv(program, location, count, value);
}

inline void glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->ProgramUniform4ivEXT(program, location, count, value);
}

inline void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
	return GLFunctions()->ProgramUniform4ui(program, location, v0, v1, v2, v3);
}

inline void glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
	return GLFunctions()->ProgramUniform4ui64ARB(program, location, x, y, z, w);
}

inline void glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
	return GLFunctions()->ProgramUniform4ui64NV(program, location, x, y, z, w);
}

inline void glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->ProgramUniform4ui64vARB(program, location, count, value);
}

inline void glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->ProgramUniform4ui64vNV(program, location, count, value);
}

inline void glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
	return GLFunctions()->ProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
}

inline void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->ProgramUniform4uiv(program, location, count, value);
}

inline void glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->ProgramUniform4uivEXT(program, location, count, value);
}

inline void glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) {
	return GLFunctions()->ProgramUniformHandleui64ARB(program, location, value);
}

inline void glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) {
	return GLFunctions()->ProgramUniformHandleui64NV(program, location, value);
}

inline void glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {
	return GLFunctions()->ProgramUniformHandleui64vARB(program, location, count, values);
}

inline void glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {
	return GLFunctions()->ProgramUniformHandleui64vNV(program, location, count, values);
}

inline void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix2dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix2fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix3dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix3fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix4dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix4fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->ProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}

inline void glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
}

inline void glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) {
	return GLFunctions()->ProgramUniformui64NV(program, location, value);
}

inline void glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->ProgramUniformui64vNV(program, location, count, value);
}

inline void glProgramVertexLimitNV(GLenum target, GLint limit) {
	return GLFunctions()->ProgramVertexLimitNV(target, limit);
}

inline void glProvokingVertex(GLenum mode) {
	return GLFunctions()->ProvokingVertex(mode);
}

inline void glProvokingVertexEXT(GLenum mode) {
	return GLFunctions()->ProvokingVertexEXT(mode);
}

inline void glPushClientAttribDefaultEXT(GLbitfield mask) {
	return GLFunctions()->PushClientAttribDefaultEXT(mask);
}

inline void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {
	return GLFunctions()->PushDebugGroup(source, id, length, message);
}

inline void glPushGroupMarkerEXT(GLsizei length, const GLchar *marker) {
	return GLFunctions()->PushGroupMarkerEXT(length, marker);
}

inline void glQueryCounter(GLuint id, GLenum target) {
	return GLFunctions()->QueryCounter(id, target);
}

inline void glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) {
	return GLFunctions()->QueryObjectParameteruiAMD(target, id, pname, param);
}

inline void glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) {
	return GLFunctions()->RasterSamplesEXT(samples, fixedsamplelocations);
}

inline void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
	return GLFunctions()->ReadnPixels(x, y, width, height, format, type, bufSize, data);
}

inline void glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) {
	return GLFunctions()->ReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
}

inline void glReferencePlaneSGIX(const GLdouble *equation) {
	return GLFunctions()->ReferencePlaneSGIX(equation);
}

inline GLboolean glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) {
	return GLFunctions()->ReleaseKeyedMutexWin32EXT(memory, key);
}

inline void glReleaseShaderCompiler(void) {
	return GLFunctions()->ReleaseShaderCompiler();
}

inline void glRenderGpuMaskNV(GLbitfield mask) {
	return GLFunctions()->RenderGpuMaskNV(mask);
}

inline void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->RenderbufferStorage(target, internalformat, width, height);
}

inline void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->RenderbufferStorageEXT(target, internalformat, width, height);
}

inline void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->RenderbufferStorageMultisample(target, samples, internalformat, width, height);
}

inline void glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->RenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
}

inline void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->RenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
}

inline void glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void **pointer) {
	return GLFunctions()->ReplacementCodePointerSUN(type, stride, pointer);
}

inline void glReplacementCodeubSUN(GLubyte code) {
	return GLFunctions()->ReplacementCodeubSUN(code);
}

inline void glReplacementCodeubvSUN(const GLubyte *code) {
	return GLFunctions()->ReplacementCodeubvSUN(code);
}

inline void glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->ReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
}

inline void glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v) {
	return GLFunctions()->ReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
}

inline void glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
}

inline void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
}

inline void glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->ReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
}

inline void glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v) {
	return GLFunctions()->ReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
}

inline void glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->ReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
}

inline void glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->ReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
}

inline void glReplacementCodeuiSUN(GLuint code) {
	return GLFunctions()->ReplacementCodeuiSUN(code);
}

inline void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

inline void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
}

inline void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
}

inline void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
}

inline void glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->ReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
}

inline void glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v) {
	return GLFunctions()->ReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
}

inline void glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->ReplacementCodeuiVertex3fSUN(rc, x, y, z);
}

inline void glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v) {
	return GLFunctions()->ReplacementCodeuiVertex3fvSUN(rc, v);
}

inline void glReplacementCodeuivSUN(const GLuint *code) {
	return GLFunctions()->ReplacementCodeuivSUN(code);
}

inline void glReplacementCodeusSUN(GLushort code) {
	return GLFunctions()->ReplacementCodeusSUN(code);
}

inline void glReplacementCodeusvSUN(const GLushort *code) {
	return GLFunctions()->ReplacementCodeusvSUN(code);
}

inline void glRequestResidentProgramsNV(GLsizei n, const GLuint *programs) {
	return GLFunctions()->RequestResidentProgramsNV(n, programs);
}

inline void glResetHistogram(GLenum target) {
	return GLFunctions()->ResetHistogram(target);
}

inline void glResetHistogramEXT(GLenum target) {
	return GLFunctions()->ResetHistogramEXT(target);
}

inline void glResetMinmax(GLenum target) {
	return GLFunctions()->ResetMinmax(target);
}

inline void glResetMinmaxEXT(GLenum target) {
	return GLFunctions()->ResetMinmaxEXT(target);
}

inline void glResizeBuffersMESA(void) {
	return GLFunctions()->ResizeBuffersMESA();
}

inline void glResumeTransformFeedback(void) {
	return GLFunctions()->ResumeTransformFeedback();
}

inline void glResumeTransformFeedbackNV(void) {
	return GLFunctions()->ResumeTransformFeedbackNV();
}

inline void glSampleCoverage(GLfloat value, GLboolean invert) {
	return GLFunctions()->SampleCoverage(value, invert);
}

inline void glSampleCoverageARB(GLfloat value, GLboolean invert) {
	return GLFunctions()->SampleCoverageARB(value, invert);
}

inline void glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) {
	return GLFunctions()->SampleMapATI(dst, interp, swizzle);
}

inline void glSampleMaskEXT(GLclampf value, GLboolean invert) {
	return GLFunctions()->SampleMaskEXT(value, invert);
}

inline void glSampleMaskIndexedNV(GLuint index, GLbitfield mask) {
	return GLFunctions()->SampleMaskIndexedNV(index, mask);
}

inline void glSampleMaskSGIS(GLclampf value, GLboolean invert) {
	return GLFunctions()->SampleMaskSGIS(value, invert);
}

inline void glSampleMaski(GLuint maskNumber, GLbitfield mask) {
	return GLFunctions()->SampleMaski(maskNumber, mask);
}

inline void glSamplePatternEXT(GLenum pattern) {
	return GLFunctions()->SamplePatternEXT(pattern);
}

inline void glSamplePatternSGIS(GLenum pattern) {
	return GLFunctions()->SamplePatternSGIS(pattern);
}

inline void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) {
	return GLFunctions()->SamplerParameterIiv(sampler, pname, param);
}

inline void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) {
	return GLFunctions()->SamplerParameterIuiv(sampler, pname, param);
}

inline void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
	return GLFunctions()->SamplerParameterf(sampler, pname, param);
}

inline void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) {
	return GLFunctions()->SamplerParameterfv(sampler, pname, param);
}

inline void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
	return GLFunctions()->SamplerParameteri(sampler, pname, param);
}

inline void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) {
	return GLFunctions()->SamplerParameteriv(sampler, pname, param);
}

inline void glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {
	return GLFunctions()->ScissorArrayv(first, count, v);
}

inline void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
	return GLFunctions()->ScissorIndexed(index, left, bottom, width, height);
}

inline void glScissorIndexedv(GLuint index, const GLint *v) {
	return GLFunctions()->ScissorIndexedv(index, v);
}

inline void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
	return GLFunctions()->SecondaryColor3b(red, green, blue);
}

inline void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) {
	return GLFunctions()->SecondaryColor3bEXT(red, green, blue);
}

inline void glSecondaryColor3bv(const GLbyte *v) {
	return GLFunctions()->SecondaryColor3bv(v);
}

inline void glSecondaryColor3bvEXT(const GLbyte *v) {
	return GLFunctions()->SecondaryColor3bvEXT(v);
}

inline void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
	return GLFunctions()->SecondaryColor3d(red, green, blue);
}

inline void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) {
	return GLFunctions()->SecondaryColor3dEXT(red, green, blue);
}

inline void glSecondaryColor3dv(const GLdouble *v) {
	return GLFunctions()->SecondaryColor3dv(v);
}

inline void glSecondaryColor3dvEXT(const GLdouble *v) {
	return GLFunctions()->SecondaryColor3dvEXT(v);
}

inline void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
	return GLFunctions()->SecondaryColor3f(red, green, blue);
}

inline void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) {
	return GLFunctions()->SecondaryColor3fEXT(red, green, blue);
}

inline void glSecondaryColor3fv(const GLfloat *v) {
	return GLFunctions()->SecondaryColor3fv(v);
}

inline void glSecondaryColor3fvEXT(const GLfloat *v) {
	return GLFunctions()->SecondaryColor3fvEXT(v);
}

inline void glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
	return GLFunctions()->SecondaryColor3hNV(red, green, blue);
}

inline void glSecondaryColor3hvNV(const GLhalfNV *v) {
	return GLFunctions()->SecondaryColor3hvNV(v);
}

inline void glSecondaryColor3i(GLint red, GLint green, GLint blue) {
	return GLFunctions()->SecondaryColor3i(red, green, blue);
}

inline void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue) {
	return GLFunctions()->SecondaryColor3iEXT(red, green, blue);
}

inline void glSecondaryColor3iv(const GLint *v) {
	return GLFunctions()->SecondaryColor3iv(v);
}

inline void glSecondaryColor3ivEXT(const GLint *v) {
	return GLFunctions()->SecondaryColor3ivEXT(v);
}

inline void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
	return GLFunctions()->SecondaryColor3s(red, green, blue);
}

inline void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) {
	return GLFunctions()->SecondaryColor3sEXT(red, green, blue);
}

inline void glSecondaryColor3sv(const GLshort *v) {
	return GLFunctions()->SecondaryColor3sv(v);
}

inline void glSecondaryColor3svEXT(const GLshort *v) {
	return GLFunctions()->SecondaryColor3svEXT(v);
}

inline void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
	return GLFunctions()->SecondaryColor3ub(red, green, blue);
}

inline void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) {
	return GLFunctions()->SecondaryColor3ubEXT(red, green, blue);
}

inline void glSecondaryColor3ubv(const GLubyte *v) {
	return GLFunctions()->SecondaryColor3ubv(v);
}

inline void glSecondaryColor3ubvEXT(const GLubyte *v) {
	return GLFunctions()->SecondaryColor3ubvEXT(v);
}

inline void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
	return GLFunctions()->SecondaryColor3ui(red, green, blue);
}

inline void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) {
	return GLFunctions()->SecondaryColor3uiEXT(red, green, blue);
}

inline void glSecondaryColor3uiv(const GLuint *v) {
	return GLFunctions()->SecondaryColor3uiv(v);
}

inline void glSecondaryColor3uivEXT(const GLuint *v) {
	return GLFunctions()->SecondaryColor3uivEXT(v);
}

inline void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
	return GLFunctions()->SecondaryColor3us(red, green, blue);
}

inline void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) {
	return GLFunctions()->SecondaryColor3usEXT(red, green, blue);
}

inline void glSecondaryColor3usv(const GLushort *v) {
	return GLFunctions()->SecondaryColor3usv(v);
}

inline void glSecondaryColor3usvEXT(const GLushort *v) {
	return GLFunctions()->SecondaryColor3usvEXT(v);
}

inline void glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) {
	return GLFunctions()->SecondaryColorFormatNV(size, type, stride);
}

inline void glSecondaryColorP3ui(GLenum type, GLuint color) {
	return GLFunctions()->SecondaryColorP3ui(type, color);
}

inline void glSecondaryColorP3uiv(GLenum type, const GLuint *color) {
	return GLFunctions()->SecondaryColorP3uiv(type, color);
}

inline void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->SecondaryColorPointer(size, type, stride, pointer);
}

inline void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->SecondaryColorPointerEXT(size, type, stride, pointer);
}

inline void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
	return GLFunctions()->SecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

inline void glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) {
	return GLFunctions()->SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
}

inline void glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params) {
	return GLFunctions()->SemaphoreParameterui64vEXT(semaphore, pname, params);
}

inline void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) {
	return GLFunctions()->SeparableFilter2D(target, internalformat, width, height, format, type, row, column);
}

inline void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) {
	return GLFunctions()->SeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
}

inline void glSetFenceAPPLE(GLuint fence) {
	return GLFunctions()->SetFenceAPPLE(fence);
}

inline void glSetFenceNV(GLuint fence, GLenum condition) {
	return GLFunctions()->SetFenceNV(fence, condition);
}

inline void glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value) {
	return GLFunctions()->SetFragmentShaderConstantATI(dst, value);
}

inline void glSetInvariantEXT(GLuint id, GLenum type, const void *addr) {
	return GLFunctions()->SetInvariantEXT(id, type, addr);
}

inline void glSetLocalConstantEXT(GLuint id, GLenum type, const void *addr) {
	return GLFunctions()->SetLocalConstantEXT(id, type, addr);
}

inline void glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val) {
	return GLFunctions()->SetMultisamplefvAMD(pname, index, val);
}

inline void glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) {
	return GLFunctions()->ShaderBinary(count, shaders, binaryformat, binary, length);
}

inline void glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) {
	return GLFunctions()->ShaderOp1EXT(op, res, arg1);
}

inline void glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) {
	return GLFunctions()->ShaderOp2EXT(op, res, arg1, arg2);
}

inline void glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) {
	return GLFunctions()->ShaderOp3EXT(op, res, arg1, arg2, arg3);
}

inline void glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) {
	return GLFunctions()->ShaderSource(shader, count, string, length);
}

inline void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length) {
	return GLFunctions()->ShaderSourceARB(shaderObj, count, string, length);
}

inline void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
	return GLFunctions()->ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}

inline void glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points) {
	return GLFunctions()->SharpenTexFuncSGIS(target, n, points);
}

inline void glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts) {
	return GLFunctions()->SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}

inline void glSignalVkFenceNV(GLuint64 vkFence) {
	return GLFunctions()->SignalVkFenceNV(vkFence);
}

inline void glSignalVkSemaphoreNV(GLuint64 vkSemaphore) {
	return GLFunctions()->SignalVkSemaphoreNV(vkSemaphore);
}

inline void glSpecializeShader(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue) {
	return GLFunctions()->SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}

inline void glSpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue) {
	return GLFunctions()->SpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}

inline void glSpriteParameterfSGIX(GLenum pname, GLfloat param) {
	return GLFunctions()->SpriteParameterfSGIX(pname, param);
}

inline void glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params) {
	return GLFunctions()->SpriteParameterfvSGIX(pname, params);
}

inline void glSpriteParameteriSGIX(GLenum pname, GLint param) {
	return GLFunctions()->SpriteParameteriSGIX(pname, param);
}

inline void glSpriteParameterivSGIX(GLenum pname, const GLint *params) {
	return GLFunctions()->SpriteParameterivSGIX(pname, params);
}

inline void glStateCaptureNV(GLuint state, GLenum mode) {
	return GLFunctions()->StateCaptureNV(state, mode);
}

inline void glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) {
	return GLFunctions()->StencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}

inline void glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) {
	return GLFunctions()->StencilFillPathNV(path, fillMode, mask);
}

inline void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
	return GLFunctions()->StencilFuncSeparate(face, func, ref, mask);
}

inline void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) {
	return GLFunctions()->StencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
}

inline void glStencilMaskSeparate(GLenum face, GLuint mask) {
	return GLFunctions()->StencilMaskSeparate(face, mask);
}

inline void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
	return GLFunctions()->StencilOpSeparate(face, sfail, dpfail, dppass);
}

inline void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
	return GLFunctions()->StencilOpSeparateATI(face, sfail, dpfail, dppass);
}

inline void glStencilOpValueAMD(GLenum face, GLuint value) {
	return GLFunctions()->StencilOpValueAMD(face, value);
}

inline void glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) {
	return GLFunctions()->StencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}

inline void glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) {
	return GLFunctions()->StencilStrokePathNV(path, reference, mask);
}

inline void glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
	return GLFunctions()->StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
}

inline void glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {
	return GLFunctions()->StencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
}

inline void glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
	return GLFunctions()->StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
}

inline void glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) {
	return GLFunctions()->StencilThenCoverStrokePathNV(path, reference, mask, coverMode);
}

inline void glStringMarkerGREMEDY(GLsizei len, const void *string) {
	return GLFunctions()->StringMarkerGREMEDY(len, string);
}

inline void glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) {
	return GLFunctions()->SubpixelPrecisionBiasNV(xbits, ybits);
}

inline void glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
	return GLFunctions()->SwizzleEXT(res, in, outX, outY, outZ, outW);
}

inline void glSyncTextureINTEL(GLuint texture) {
	return GLFunctions()->SyncTextureINTEL(texture);
}

inline void glTagSampleBufferSGIX(void) {
	return GLFunctions()->TagSampleBufferSGIX();
}

inline void glTangentPointerEXT(GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->TangentPointerEXT(type, stride, pointer);
}

inline void glTbufferMask3DFX(GLuint mask) {
	return GLFunctions()->TbufferMask3DFX(mask);
}

inline void glTessellationFactorAMD(GLfloat factor) {
	return GLFunctions()->TessellationFactorAMD(factor);
}

inline void glTessellationModeAMD(GLenum mode) {
	return GLFunctions()->TessellationModeAMD(mode);
}

inline GLboolean glTestFenceAPPLE(GLuint fence) {
	return GLFunctions()->TestFenceAPPLE(fence);
}

inline GLboolean glTestFenceNV(GLuint fence) {
	return GLFunctions()->TestFenceNV(fence);
}

inline GLboolean glTestObjectAPPLE(GLenum object, GLuint name) {
	return GLFunctions()->TestObjectAPPLE(object, name);
}

inline void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
	return GLFunctions()->TexBuffer(target, internalformat, buffer);
}

inline void glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) {
	return GLFunctions()->TexBufferARB(target, internalformat, buffer);
}

inline void glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) {
	return GLFunctions()->TexBufferEXT(target, internalformat, buffer);
}

inline void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
	return GLFunctions()->TexBufferRange(target, internalformat, buffer, offset, size);
}

inline void glTexBumpParameterfvATI(GLenum pname, const GLfloat *param) {
	return GLFunctions()->TexBumpParameterfvATI(pname, param);
}

inline void glTexBumpParameterivATI(GLenum pname, const GLint *param) {
	return GLFunctions()->TexBumpParameterivATI(pname, param);
}

inline void glTexCoord1hNV(GLhalfNV s) {
	return GLFunctions()->TexCoord1hNV(s);
}

inline void glTexCoord1hvNV(const GLhalfNV *v) {
	return GLFunctions()->TexCoord1hvNV(v);
}

inline void glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->TexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
}

inline void glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v) {
	return GLFunctions()->TexCoord2fColor3fVertex3fvSUN(tc, c, v);
}

inline void glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->TexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

inline void glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->TexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
}

inline void glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->TexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
}

inline void glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v) {
	return GLFunctions()->TexCoord2fColor4ubVertex3fvSUN(tc, c, v);
}

inline void glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->TexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
}

inline void glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->TexCoord2fNormal3fVertex3fvSUN(tc, n, v);
}

inline void glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->TexCoord2fVertex3fSUN(s, t, x, y, z);
}

inline void glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v) {
	return GLFunctions()->TexCoord2fVertex3fvSUN(tc, v);
}

inline void glTexCoord2hNV(GLhalfNV s, GLhalfNV t) {
	return GLFunctions()->TexCoord2hNV(s, t);
}

inline void glTexCoord2hvNV(const GLhalfNV *v) {
	return GLFunctions()->TexCoord2hvNV(v);
}

inline void glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) {
	return GLFunctions()->TexCoord3hNV(s, t, r);
}

inline void glTexCoord3hvNV(const GLhalfNV *v) {
	return GLFunctions()->TexCoord3hvNV(v);
}

inline void glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->TexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}

inline void glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
	return GLFunctions()->TexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
}

inline void glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->TexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
}

inline void glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v) {
	return GLFunctions()->TexCoord4fVertex4fvSUN(tc, v);
}

inline void glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
	return GLFunctions()->TexCoord4hNV(s, t, r, q);
}

inline void glTexCoord4hvNV(const GLhalfNV *v) {
	return GLFunctions()->TexCoord4hvNV(v);
}

inline void glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) {
	return GLFunctions()->TexCoordFormatNV(size, type, stride);
}

inline void glTexCoordP1ui(GLenum type, GLuint coords) {
	return GLFunctions()->TexCoordP1ui(type, coords);
}

inline void glTexCoordP1uiv(GLenum type, const GLuint *coords) {
	return GLFunctions()->TexCoordP1uiv(type, coords);
}

inline void glTexCoordP2ui(GLenum type, GLuint coords) {
	return GLFunctions()->TexCoordP2ui(type, coords);
}

inline void glTexCoordP2uiv(GLenum type, const GLuint *coords) {
	return GLFunctions()->TexCoordP2uiv(type, coords);
}

inline void glTexCoordP3ui(GLenum type, GLuint coords) {
	return GLFunctions()->TexCoordP3ui(type, coords);
}

inline void glTexCoordP3uiv(GLenum type, const GLuint *coords) {
	return GLFunctions()->TexCoordP3uiv(type, coords);
}

inline void glTexCoordP4ui(GLenum type, GLuint coords) {
	return GLFunctions()->TexCoordP4ui(type, coords);
}

inline void glTexCoordP4uiv(GLenum type, const GLuint *coords) {
	return GLFunctions()->TexCoordP4uiv(type, coords);
}

inline void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
	return GLFunctions()->TexCoordPointerEXT(size, type, stride, count, pointer);
}

inline void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
	return GLFunctions()->TexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
}

inline void glTexCoordPointervINTEL(GLint size, GLenum type, const void **pointer) {
	return GLFunctions()->TexCoordPointervINTEL(size, type, pointer);
}

inline void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights) {
	return GLFunctions()->TexFilterFuncSGIS(target, filter, n, weights);
}

inline void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
	return GLFunctions()->TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

inline void glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
	return GLFunctions()->TexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

inline void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

inline void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

inline void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
	return GLFunctions()->TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

inline void glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
	return GLFunctions()->TexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

inline void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}

inline void glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
	return GLFunctions()->TexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

inline void glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->TexParameterIiv(target, pname, params);
}

inline void glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->TexParameterIivEXT(target, pname, params);
}

inline void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {
	return GLFunctions()->TexParameterIuiv(target, pname, params);
}

inline void glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params) {
	return GLFunctions()->TexParameterIuivEXT(target, pname, params);
}

inline void glTexRenderbufferNV(GLenum target, GLuint renderbuffer) {
	return GLFunctions()->TexRenderbufferNV(target, renderbuffer);
}

inline void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
	return GLFunctions()->TexStorage1D(target, levels, internalformat, width);
}

inline void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->TexStorage2D(target, levels, internalformat, width, height);
}

inline void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
	return GLFunctions()->TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

inline void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
	return GLFunctions()->TexStorage3D(target, levels, internalformat, width, height, depth);
}

inline void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
	return GLFunctions()->TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

inline void glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset);
}

inline void glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);
}

inline void glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}

inline void glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);
}

inline void glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}

inline void glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
	return GLFunctions()->TexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
}

inline void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
}

inline void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

inline void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

inline void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

inline void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
}

inline void glTextureBarrier(void) {
	return GLFunctions()->TextureBarrier();
}

inline void glTextureBarrierNV(void) {
	return GLFunctions()->TextureBarrierNV();
}

inline void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {
	return GLFunctions()->TextureBuffer(texture, internalformat, buffer);
}

inline void glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) {
	return GLFunctions()->TextureBufferEXT(texture, target, internalformat, buffer);
}

inline void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
	return GLFunctions()->TextureBufferRange(texture, internalformat, buffer, offset, size);
}

inline void glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
	return GLFunctions()->TextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
}

inline void glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
}

inline void glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
}

inline void glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
	return GLFunctions()->TextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

inline void glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
	return GLFunctions()->TextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}

inline void glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

inline void glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
	return GLFunctions()->TextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

inline void glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
	return GLFunctions()->TextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}

inline void glTextureLightEXT(GLenum pname) {
	return GLFunctions()->TextureLightEXT(pname);
}

inline void glTextureMaterialEXT(GLenum face, GLenum mode) {
	return GLFunctions()->TextureMaterialEXT(face, mode);
}

inline void glTextureNormalEXT(GLenum mode) {
	return GLFunctions()->TextureNormalEXT(mode);
}

inline void glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
	return GLFunctions()->TexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

inline void glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params) {
	return GLFunctions()->TextureParameterIiv(texture, pname, params);
}

inline void glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->TextureParameterIivEXT(texture, target, pname, params);
}

inline void glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params) {
	return GLFunctions()->TextureParameterIuiv(texture, pname, params);
}

inline void glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params) {
	return GLFunctions()->TextureParameterIuivEXT(texture, target, pname, params);
}

inline void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {
	return GLFunctions()->TextureParameterf(texture, pname, param);
}

inline void glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) {
	return GLFunctions()->TextureParameterfEXT(texture, target, pname, param);
}

inline void glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param) {
	return GLFunctions()->TextureParameterfv(texture, pname, param);
}

inline void glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params) {
	return GLFunctions()->TextureParameterfvEXT(texture, target, pname, params);
}

inline void glTextureParameteri(GLuint texture, GLenum pname, GLint param) {
	return GLFunctions()->TextureParameteri(texture, pname, param);
}

inline void glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) {
	return GLFunctions()->TextureParameteriEXT(texture, target, pname, param);
}

inline void glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param) {
	return GLFunctions()->TextureParameteriv(texture, pname, param);
}

inline void glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) {
	return GLFunctions()->TextureParameterivEXT(texture, target, pname, params);
}

inline void glTextureRangeAPPLE(GLenum target, GLsizei length, const void *pointer) {
	return GLFunctions()->TextureRangeAPPLE(target, length, pointer);
}

inline void glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) {
	return GLFunctions()->TextureRenderbufferEXT(texture, target, renderbuffer);
}

inline void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {
	return GLFunctions()->TextureStorage1D(texture, levels, internalformat, width);
}

inline void glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
	return GLFunctions()->TextureStorage1DEXT(texture, target, levels, internalformat, width);
}

inline void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->TextureStorage2D(texture, levels, internalformat, width, height);
}

inline void glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
	return GLFunctions()->TextureStorage2DEXT(texture, target, levels, internalformat, width, height);
}

inline void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
	return GLFunctions()->TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
}

inline void glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
	return GLFunctions()->TextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}

inline void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
	return GLFunctions()->TextureStorage3D(texture, levels, internalformat, width, height, depth);
}

inline void glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
	return GLFunctions()->TextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
}

inline void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
	return GLFunctions()->TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}

inline void glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
	return GLFunctions()->TextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

inline void glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset);
}

inline void glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);
}

inline void glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}

inline void glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);
}

inline void glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
	return GLFunctions()->TextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}

inline void glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
	return GLFunctions()->TextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
}

inline void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
}

inline void glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
}

inline void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}

inline void glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

inline void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

inline void glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) {
	return GLFunctions()->TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

inline void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
	return GLFunctions()->TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

inline void glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) {
	return GLFunctions()->TrackMatrixNV(target, address, matrix, transform);
}

inline void glTransformFeedbackAttribsNV(GLsizei count, const GLint *attribs, GLenum bufferMode) {
	return GLFunctions()->TransformFeedbackAttribsNV(count, attribs, bufferMode);
}

inline void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {
	return GLFunctions()->TransformFeedbackBufferBase(xfb, index, buffer);
}

inline void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
	return GLFunctions()->TransformFeedbackBufferRange(xfb, index, buffer, offset, size);
}

inline void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {
	return GLFunctions()->TransformFeedbackVaryings(program, count, varyings, bufferMode);
}

inline void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) {
	return GLFunctions()->TransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
}

inline void glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode) {
	return GLFunctions()->TransformFeedbackVaryingsNV(program, count, locations, bufferMode);
}

inline void glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) {
	return GLFunctions()->TransformPathNV(resultPath, srcPath, transformType, transformValues);
}

inline void glUniform1d(GLint location, GLdouble x) {
	return GLFunctions()->Uniform1d(location, x);
}

inline void glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {
	return GLFunctions()->Uniform1dv(location, count, value);
}

inline void glUniform1f(GLint location, GLfloat v0) {
	return GLFunctions()->Uniform1f(location, v0);
}

inline void glUniform1fARB(GLint location, GLfloat v0) {
	return GLFunctions()->Uniform1fARB(location, v0);
}

inline void glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->Uniform1fv(location, count, value);
}

inline void glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->Uniform1fvARB(location, count, value);
}

inline void glUniform1i(GLint location, GLint v0) {
	return GLFunctions()->Uniform1i(location, v0);
}

inline void glUniform1i64ARB(GLint location, GLint64 x) {
	return GLFunctions()->Uniform1i64ARB(location, x);
}

inline void glUniform1i64NV(GLint location, GLint64EXT x) {
	return GLFunctions()->Uniform1i64NV(location, x);
}

inline void glUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value) {
	return GLFunctions()->Uniform1i64vARB(location, count, value);
}

inline void glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
	return GLFunctions()->Uniform1i64vNV(location, count, value);
}

inline void glUniform1iARB(GLint location, GLint v0) {
	return GLFunctions()->Uniform1iARB(location, v0);
}

inline void glUniform1iv(GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->Uniform1iv(location, count, value);
}

inline void glUniform1ivARB(GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->Uniform1ivARB(location, count, value);
}

inline void glUniform1ui(GLint location, GLuint v0) {
	return GLFunctions()->Uniform1ui(location, v0);
}

inline void glUniform1ui64ARB(GLint location, GLuint64 x) {
	return GLFunctions()->Uniform1ui64ARB(location, x);
}

inline void glUniform1ui64NV(GLint location, GLuint64EXT x) {
	return GLFunctions()->Uniform1ui64NV(location, x);
}

inline void glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->Uniform1ui64vARB(location, count, value);
}

inline void glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->Uniform1ui64vNV(location, count, value);
}

inline void glUniform1uiEXT(GLint location, GLuint v0) {
	return GLFunctions()->Uniform1uiEXT(location, v0);
}

inline void glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->Uniform1uiv(location, count, value);
}

inline void glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->Uniform1uivEXT(location, count, value);
}

inline void glUniform2d(GLint location, GLdouble x, GLdouble y) {
	return GLFunctions()->Uniform2d(location, x, y);
}

inline void glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {
	return GLFunctions()->Uniform2dv(location, count, value);
}

inline void glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
	return GLFunctions()->Uniform2f(location, v0, v1);
}

inline void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1) {
	return GLFunctions()->Uniform2fARB(location, v0, v1);
}

inline void glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->Uniform2fv(location, count, value);
}

inline void glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->Uniform2fvARB(location, count, value);
}

inline void glUniform2i(GLint location, GLint v0, GLint v1) {
	return GLFunctions()->Uniform2i(location, v0, v1);
}

inline void glUniform2i64ARB(GLint location, GLint64 x, GLint64 y) {
	return GLFunctions()->Uniform2i64ARB(location, x, y);
}

inline void glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) {
	return GLFunctions()->Uniform2i64NV(location, x, y);
}

inline void glUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value) {
	return GLFunctions()->Uniform2i64vARB(location, count, value);
}

inline void glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
	return GLFunctions()->Uniform2i64vNV(location, count, value);
}

inline void glUniform2iARB(GLint location, GLint v0, GLint v1) {
	return GLFunctions()->Uniform2iARB(location, v0, v1);
}

inline void glUniform2iv(GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->Uniform2iv(location, count, value);
}

inline void glUniform2ivARB(GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->Uniform2ivARB(location, count, value);
}

inline void glUniform2ui(GLint location, GLuint v0, GLuint v1) {
	return GLFunctions()->Uniform2ui(location, v0, v1);
}

inline void glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) {
	return GLFunctions()->Uniform2ui64ARB(location, x, y);
}

inline void glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) {
	return GLFunctions()->Uniform2ui64NV(location, x, y);
}

inline void glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->Uniform2ui64vARB(location, count, value);
}

inline void glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->Uniform2ui64vNV(location, count, value);
}

inline void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1) {
	return GLFunctions()->Uniform2uiEXT(location, v0, v1);
}

inline void glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->Uniform2uiv(location, count, value);
}

inline void glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->Uniform2uivEXT(location, count, value);
}

inline void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->Uniform3d(location, x, y, z);
}

inline void glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {
	return GLFunctions()->Uniform3dv(location, count, value);
}

inline void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
	return GLFunctions()->Uniform3f(location, v0, v1, v2);
}

inline void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
	return GLFunctions()->Uniform3fARB(location, v0, v1, v2);
}

inline void glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->Uniform3fv(location, count, value);
}

inline void glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->Uniform3fvARB(location, count, value);
}

inline void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
	return GLFunctions()->Uniform3i(location, v0, v1, v2);
}

inline void glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) {
	return GLFunctions()->Uniform3i64ARB(location, x, y, z);
}

inline void glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
	return GLFunctions()->Uniform3i64NV(location, x, y, z);
}

inline void glUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value) {
	return GLFunctions()->Uniform3i64vARB(location, count, value);
}

inline void glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
	return GLFunctions()->Uniform3i64vNV(location, count, value);
}

inline void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) {
	return GLFunctions()->Uniform3iARB(location, v0, v1, v2);
}

inline void glUniform3iv(GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->Uniform3iv(location, count, value);
}

inline void glUniform3ivARB(GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->Uniform3ivARB(location, count, value);
}

inline void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
	return GLFunctions()->Uniform3ui(location, v0, v1, v2);
}

inline void glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
	return GLFunctions()->Uniform3ui64ARB(location, x, y, z);
}

inline void glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
	return GLFunctions()->Uniform3ui64NV(location, x, y, z);
}

inline void glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->Uniform3ui64vARB(location, count, value);
}

inline void glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->Uniform3ui64vNV(location, count, value);
}

inline void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) {
	return GLFunctions()->Uniform3uiEXT(location, v0, v1, v2);
}

inline void glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->Uniform3uiv(location, count, value);
}

inline void glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->Uniform3uivEXT(location, count, value);
}

inline void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->Uniform4d(location, x, y, z, w);
}

inline void glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {
	return GLFunctions()->Uniform4dv(location, count, value);
}

inline void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
	return GLFunctions()->Uniform4f(location, v0, v1, v2, v3);
}

inline void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
	return GLFunctions()->Uniform4fARB(location, v0, v1, v2, v3);
}

inline void glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->Uniform4fv(location, count, value);
}

inline void glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value) {
	return GLFunctions()->Uniform4fvARB(location, count, value);
}

inline void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
	return GLFunctions()->Uniform4i(location, v0, v1, v2, v3);
}

inline void glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
	return GLFunctions()->Uniform4i64ARB(location, x, y, z, w);
}

inline void glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
	return GLFunctions()->Uniform4i64NV(location, x, y, z, w);
}

inline void glUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value) {
	return GLFunctions()->Uniform4i64vARB(location, count, value);
}

inline void glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
	return GLFunctions()->Uniform4i64vNV(location, count, value);
}

inline void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
	return GLFunctions()->Uniform4iARB(location, v0, v1, v2, v3);
}

inline void glUniform4iv(GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->Uniform4iv(location, count, value);
}

inline void glUniform4ivARB(GLint location, GLsizei count, const GLint *value) {
	return GLFunctions()->Uniform4ivARB(location, count, value);
}

inline void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
	return GLFunctions()->Uniform4ui(location, v0, v1, v2, v3);
}

inline void glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
	return GLFunctions()->Uniform4ui64ARB(location, x, y, z, w);
}

inline void glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
	return GLFunctions()->Uniform4ui64NV(location, x, y, z, w);
}

inline void glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->Uniform4ui64vARB(location, count, value);
}

inline void glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->Uniform4ui64vNV(location, count, value);
}

inline void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
	return GLFunctions()->Uniform4uiEXT(location, v0, v1, v2, v3);
}

inline void glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->Uniform4uiv(location, count, value);
}

inline void glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value) {
	return GLFunctions()->Uniform4uivEXT(location, count, value);
}

inline void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
	return GLFunctions()->UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}

inline void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer) {
	return GLFunctions()->UniformBufferEXT(program, location, buffer);
}

inline void glUniformHandleui64ARB(GLint location, GLuint64 value) {
	return GLFunctions()->UniformHandleui64ARB(location, value);
}

inline void glUniformHandleui64NV(GLint location, GLuint64 value) {
	return GLFunctions()->UniformHandleui64NV(location, value);
}

inline void glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->UniformHandleui64vARB(location, count, value);
}

inline void glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value) {
	return GLFunctions()->UniformHandleui64vNV(location, count, value);
}

inline void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix2dv(location, count, transpose, value);
}

inline void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix2fv(location, count, transpose, value);
}

inline void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix2fvARB(location, count, transpose, value);
}

inline void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix2x3dv(location, count, transpose, value);
}

inline void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix2x3fv(location, count, transpose, value);
}

inline void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix2x4dv(location, count, transpose, value);
}

inline void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix2x4fv(location, count, transpose, value);
}

inline void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix3dv(location, count, transpose, value);
}

inline void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix3fv(location, count, transpose, value);
}

inline void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix3fvARB(location, count, transpose, value);
}

inline void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix3x2dv(location, count, transpose, value);
}

inline void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix3x2fv(location, count, transpose, value);
}

inline void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix3x4dv(location, count, transpose, value);
}

inline void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix3x4fv(location, count, transpose, value);
}

inline void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix4dv(location, count, transpose, value);
}

inline void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix4fv(location, count, transpose, value);
}

inline void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix4fvARB(location, count, transpose, value);
}

inline void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix4x2dv(location, count, transpose, value);
}

inline void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix4x2fv(location, count, transpose, value);
}

inline void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
	return GLFunctions()->UniformMatrix4x3dv(location, count, transpose, value);
}

inline void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
	return GLFunctions()->UniformMatrix4x3fv(location, count, transpose, value);
}

inline void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) {
	return GLFunctions()->UniformSubroutinesuiv(shadertype, count, indices);
}

inline void glUniformui64NV(GLint location, GLuint64EXT value) {
	return GLFunctions()->Uniformui64NV(location, value);
}

inline void glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
	return GLFunctions()->Uniformui64vNV(location, count, value);
}

inline void glUnlockArraysEXT(void) {
	return GLFunctions()->UnlockArraysEXT();
}

inline GLboolean glUnmapBuffer(GLenum target) {
	return GLFunctions()->UnmapBuffer(target);
}

inline GLboolean glUnmapBufferARB(GLenum target) {
	return GLFunctions()->UnmapBufferARB(target);
}

inline GLboolean glUnmapNamedBuffer(GLuint buffer) {
	return GLFunctions()->UnmapNamedBuffer(buffer);
}

inline GLboolean glUnmapNamedBufferEXT(GLuint buffer) {
	return GLFunctions()->UnmapNamedBufferEXT(buffer);
}

inline void glUnmapObjectBufferATI(GLuint buffer) {
	return GLFunctions()->UnmapObjectBufferATI(buffer);
}

inline void glUnmapTexture2DINTEL(GLuint texture, GLint level) {
	return GLFunctions()->UnmapTexture2DINTEL(texture, level);
}

inline void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve) {
	return GLFunctions()->UpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
}

inline void glUseProgram(GLuint program) {
	return GLFunctions()->UseProgram(program);
}

inline void glUseProgramObjectARB(GLhandleARB programObj) {
	return GLFunctions()->UseProgramObjectARB(programObj);
}

inline void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
	return GLFunctions()->UseProgramStages(pipeline, stages, program);
}

inline void glUseShaderProgramEXT(GLenum type, GLuint program) {
	return GLFunctions()->UseShaderProgramEXT(type, program);
}

inline void glVDPAUFiniNV(void) {
	return GLFunctions()->VDPAUFiniNV();
}

inline void glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
	return GLFunctions()->VDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
}

inline void glVDPAUInitNV(const void *vdpDevice, const void *getProcAddress) {
	return GLFunctions()->VDPAUInitNV(vdpDevice, getProcAddress);
}

inline GLboolean glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) {
	return GLFunctions()->VDPAUIsSurfaceNV(surface);
}

inline void glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) {
	return GLFunctions()->VDPAUMapSurfacesNV(numSurfaces, surfaces);
}

inline GLvdpauSurfaceNV glVDPAURegisterOutputSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {
	return GLFunctions()->VDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

inline GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {
	return GLFunctions()->VDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

inline void glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) {
	return GLFunctions()->VDPAUSurfaceAccessNV(surface, access);
}

inline void glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces) {
	return GLFunctions()->VDPAUUnmapSurfacesNV(numSurface, surfaces);
}

inline void glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) {
	return GLFunctions()->VDPAUUnregisterSurfaceNV(surface);
}

inline void glValidateProgram(GLuint program) {
	return GLFunctions()->ValidateProgram(program);
}

inline void glValidateProgramARB(GLhandleARB programObj) {
	return GLFunctions()->ValidateProgramARB(programObj);
}

inline void glValidateProgramPipeline(GLuint pipeline) {
	return GLFunctions()->ValidateProgramPipeline(pipeline);
}

inline void glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
	return GLFunctions()->VariantArrayObjectATI(id, type, stride, buffer, offset);
}

inline void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void *addr) {
	return GLFunctions()->VariantPointerEXT(id, type, stride, addr);
}

inline void glVariantbvEXT(GLuint id, const GLbyte *addr) {
	return GLFunctions()->VariantbvEXT(id, addr);
}

inline void glVariantdvEXT(GLuint id, const GLdouble *addr) {
	return GLFunctions()->VariantdvEXT(id, addr);
}

inline void glVariantfvEXT(GLuint id, const GLfloat *addr) {
	return GLFunctions()->VariantfvEXT(id, addr);
}

inline void glVariantivEXT(GLuint id, const GLint *addr) {
	return GLFunctions()->VariantivEXT(id, addr);
}

inline void glVariantsvEXT(GLuint id, const GLshort *addr) {
	return GLFunctions()->VariantsvEXT(id, addr);
}

inline void glVariantubvEXT(GLuint id, const GLubyte *addr) {
	return GLFunctions()->VariantubvEXT(id, addr);
}

inline void glVariantuivEXT(GLuint id, const GLuint *addr) {
	return GLFunctions()->VariantuivEXT(id, addr);
}

inline void glVariantusvEXT(GLuint id, const GLushort *addr) {
	return GLFunctions()->VariantusvEXT(id, addr);
}

inline void glVertex2hNV(GLhalfNV x, GLhalfNV y) {
	return GLFunctions()->Vertex2hNV(x, y);
}

inline void glVertex2hvNV(const GLhalfNV *v) {
	return GLFunctions()->Vertex2hvNV(v);
}

inline void glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) {
	return GLFunctions()->Vertex3hNV(x, y, z);
}

inline void glVertex3hvNV(const GLhalfNV *v) {
	return GLFunctions()->Vertex3hvNV(v);
}

inline void glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
	return GLFunctions()->Vertex4hNV(x, y, z, w);
}

inline void glVertex4hvNV(const GLhalfNV *v) {
	return GLFunctions()->Vertex4hvNV(v);
}

inline void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
	return GLFunctions()->VertexArrayAttribBinding(vaobj, attribindex, bindingindex);
}

inline void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
	return GLFunctions()->VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
}

inline void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
	return GLFunctions()->VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
}

inline void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
	return GLFunctions()->VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
}

inline void glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
	return GLFunctions()->VertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
}

inline void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
	return GLFunctions()->VertexArrayBindingDivisor(vaobj, bindingindex, divisor);
}

inline void glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

inline void glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
}

inline void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {
	return GLFunctions()->VertexArrayElementBuffer(vaobj, buffer);
}

inline void glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
}

inline void glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
}

inline void glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
}

inline void glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
}

inline void glVertexArrayParameteriAPPLE(GLenum pname, GLint param) {
	return GLFunctions()->VertexArrayParameteriAPPLE(pname, param);
}

inline void glVertexArrayRangeAPPLE(GLsizei length, void *pointer) {
	return GLFunctions()->VertexArrayRangeAPPLE(length, pointer);
}

inline void glVertexArrayRangeNV(GLsizei length, const void *pointer) {
	return GLFunctions()->VertexArrayRangeNV(length, pointer);
}

inline void glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

inline void glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

inline void glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
	return GLFunctions()->VertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
}

inline void glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) {
	return GLFunctions()->VertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
}

inline void glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
	return GLFunctions()->VertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
}

inline void glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
	return GLFunctions()->VertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
}

inline void glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

inline void glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
	return GLFunctions()->VertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
}

inline void glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

inline void glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
}

inline void glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
	return GLFunctions()->VertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
}

inline void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
	return GLFunctions()->VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
}

inline void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) {
	return GLFunctions()->VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
}

inline void glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
	return GLFunctions()->VertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

inline void glVertexAttrib1d(GLuint index, GLdouble x) {
	return GLFunctions()->VertexAttrib1d(index, x);
}

inline void glVertexAttrib1dARB(GLuint index, GLdouble x) {
	return GLFunctions()->VertexAttrib1dARB(index, x);
}

inline void glVertexAttrib1dNV(GLuint index, GLdouble x) {
	return GLFunctions()->VertexAttrib1dNV(index, x);
}

inline void glVertexAttrib1dv(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib1dv(index, v);
}

inline void glVertexAttrib1dvARB(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib1dvARB(index, v);
}

inline void glVertexAttrib1dvNV(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib1dvNV(index, v);
}

inline void glVertexAttrib1f(GLuint index, GLfloat x) {
	return GLFunctions()->VertexAttrib1f(index, x);
}

inline void glVertexAttrib1fARB(GLuint index, GLfloat x) {
	return GLFunctions()->VertexAttrib1fARB(index, x);
}

inline void glVertexAttrib1fNV(GLuint index, GLfloat x) {
	return GLFunctions()->VertexAttrib1fNV(index, x);
}

inline void glVertexAttrib1fv(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib1fv(index, v);
}

inline void glVertexAttrib1fvARB(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib1fvARB(index, v);
}

inline void glVertexAttrib1fvNV(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib1fvNV(index, v);
}

inline void glVertexAttrib1hNV(GLuint index, GLhalfNV x) {
	return GLFunctions()->VertexAttrib1hNV(index, x);
}

inline void glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v) {
	return GLFunctions()->VertexAttrib1hvNV(index, v);
}

inline void glVertexAttrib1s(GLuint index, GLshort x) {
	return GLFunctions()->VertexAttrib1s(index, x);
}

inline void glVertexAttrib1sARB(GLuint index, GLshort x) {
	return GLFunctions()->VertexAttrib1sARB(index, x);
}

inline void glVertexAttrib1sNV(GLuint index, GLshort x) {
	return GLFunctions()->VertexAttrib1sNV(index, x);
}

inline void glVertexAttrib1sv(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib1sv(index, v);
}

inline void glVertexAttrib1svARB(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib1svARB(index, v);
}

inline void glVertexAttrib1svNV(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib1svNV(index, v);
}

inline void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
	return GLFunctions()->VertexAttrib2d(index, x, y);
}

inline void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) {
	return GLFunctions()->VertexAttrib2dARB(index, x, y);
}

inline void glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) {
	return GLFunctions()->VertexAttrib2dNV(index, x, y);
}

inline void glVertexAttrib2dv(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib2dv(index, v);
}

inline void glVertexAttrib2dvARB(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib2dvARB(index, v);
}

inline void glVertexAttrib2dvNV(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib2dvNV(index, v);
}

inline void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
	return GLFunctions()->VertexAttrib2f(index, x, y);
}

inline void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) {
	return GLFunctions()->VertexAttrib2fARB(index, x, y);
}

inline void glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) {
	return GLFunctions()->VertexAttrib2fNV(index, x, y);
}

inline void glVertexAttrib2fv(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib2fv(index, v);
}

inline void glVertexAttrib2fvARB(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib2fvARB(index, v);
}

inline void glVertexAttrib2fvNV(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib2fvNV(index, v);
}

inline void glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) {
	return GLFunctions()->VertexAttrib2hNV(index, x, y);
}

inline void glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v) {
	return GLFunctions()->VertexAttrib2hvNV(index, v);
}

inline void glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
	return GLFunctions()->VertexAttrib2s(index, x, y);
}

inline void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) {
	return GLFunctions()->VertexAttrib2sARB(index, x, y);
}

inline void glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) {
	return GLFunctions()->VertexAttrib2sNV(index, x, y);
}

inline void glVertexAttrib2sv(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib2sv(index, v);
}

inline void glVertexAttrib2svARB(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib2svARB(index, v);
}

inline void glVertexAttrib2svNV(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib2svNV(index, v);
}

inline void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->VertexAttrib3d(index, x, y, z);
}

inline void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->VertexAttrib3dARB(index, x, y, z);
}

inline void glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->VertexAttrib3dNV(index, x, y, z);
}

inline void glVertexAttrib3dv(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib3dv(index, v);
}

inline void glVertexAttrib3dvARB(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib3dvARB(index, v);
}

inline void glVertexAttrib3dvNV(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib3dvNV(index, v);
}

inline void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->VertexAttrib3f(index, x, y, z);
}

inline void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->VertexAttrib3fARB(index, x, y, z);
}

inline void glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->VertexAttrib3fNV(index, x, y, z);
}

inline void glVertexAttrib3fv(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib3fv(index, v);
}

inline void glVertexAttrib3fvARB(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib3fvARB(index, v);
}

inline void glVertexAttrib3fvNV(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib3fvNV(index, v);
}

inline void glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) {
	return GLFunctions()->VertexAttrib3hNV(index, x, y, z);
}

inline void glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v) {
	return GLFunctions()->VertexAttrib3hvNV(index, v);
}

inline void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
	return GLFunctions()->VertexAttrib3s(index, x, y, z);
}

inline void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) {
	return GLFunctions()->VertexAttrib3sARB(index, x, y, z);
}

inline void glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) {
	return GLFunctions()->VertexAttrib3sNV(index, x, y, z);
}

inline void glVertexAttrib3sv(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib3sv(index, v);
}

inline void glVertexAttrib3svARB(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib3svARB(index, v);
}

inline void glVertexAttrib3svNV(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib3svNV(index, v);
}

inline void glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {
	return GLFunctions()->VertexAttrib4Nbv(index, v);
}

inline void glVertexAttrib4NbvARB(GLuint index, const GLbyte *v) {
	return GLFunctions()->VertexAttrib4NbvARB(index, v);
}

inline void glVertexAttrib4Niv(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttrib4Niv(index, v);
}

inline void glVertexAttrib4NivARB(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttrib4NivARB(index, v);
}

inline void glVertexAttrib4Nsv(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib4Nsv(index, v);
}

inline void glVertexAttrib4NsvARB(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib4NsvARB(index, v);
}

inline void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
	return GLFunctions()->VertexAttrib4Nub(index, x, y, z, w);
}

inline void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
	return GLFunctions()->VertexAttrib4NubARB(index, x, y, z, w);
}

inline void glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {
	return GLFunctions()->VertexAttrib4Nubv(index, v);
}

inline void glVertexAttrib4NubvARB(GLuint index, const GLubyte *v) {
	return GLFunctions()->VertexAttrib4NubvARB(index, v);
}

inline void glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttrib4Nuiv(index, v);
}

inline void glVertexAttrib4NuivARB(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttrib4NuivARB(index, v);
}

inline void glVertexAttrib4Nusv(GLuint index, const GLushort *v) {
	return GLFunctions()->VertexAttrib4Nusv(index, v);
}

inline void glVertexAttrib4NusvARB(GLuint index, const GLushort *v) {
	return GLFunctions()->VertexAttrib4NusvARB(index, v);
}

inline void glVertexAttrib4bv(GLuint index, const GLbyte *v) {
	return GLFunctions()->VertexAttrib4bv(index, v);
}

inline void glVertexAttrib4bvARB(GLuint index, const GLbyte *v) {
	return GLFunctions()->VertexAttrib4bvARB(index, v);
}

inline void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->VertexAttrib4d(index, x, y, z, w);
}

inline void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->VertexAttrib4dARB(index, x, y, z, w);
}

inline void glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->VertexAttrib4dNV(index, x, y, z, w);
}

inline void glVertexAttrib4dv(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib4dv(index, v);
}

inline void glVertexAttrib4dvARB(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib4dvARB(index, v);
}

inline void glVertexAttrib4dvNV(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttrib4dvNV(index, v);
}

inline void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->VertexAttrib4f(index, x, y, z, w);
}

inline void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->VertexAttrib4fARB(index, x, y, z, w);
}

inline void glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->VertexAttrib4fNV(index, x, y, z, w);
}

inline void glVertexAttrib4fv(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib4fv(index, v);
}

inline void glVertexAttrib4fvARB(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib4fvARB(index, v);
}

inline void glVertexAttrib4fvNV(GLuint index, const GLfloat *v) {
	return GLFunctions()->VertexAttrib4fvNV(index, v);
}

inline void glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
	return GLFunctions()->VertexAttrib4hNV(index, x, y, z, w);
}

inline void glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v) {
	return GLFunctions()->VertexAttrib4hvNV(index, v);
}

inline void glVertexAttrib4iv(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttrib4iv(index, v);
}

inline void glVertexAttrib4ivARB(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttrib4ivARB(index, v);
}

inline void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
	return GLFunctions()->VertexAttrib4s(index, x, y, z, w);
}

inline void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
	return GLFunctions()->VertexAttrib4sARB(index, x, y, z, w);
}

inline void glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
	return GLFunctions()->VertexAttrib4sNV(index, x, y, z, w);
}

inline void glVertexAttrib4sv(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib4sv(index, v);
}

inline void glVertexAttrib4svARB(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib4svARB(index, v);
}

inline void glVertexAttrib4svNV(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttrib4svNV(index, v);
}

inline void glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
	return GLFunctions()->VertexAttrib4ubNV(index, x, y, z, w);
}

inline void glVertexAttrib4ubv(GLuint index, const GLubyte *v) {
	return GLFunctions()->VertexAttrib4ubv(index, v);
}

inline void glVertexAttrib4ubvARB(GLuint index, const GLubyte *v) {
	return GLFunctions()->VertexAttrib4ubvARB(index, v);
}

inline void glVertexAttrib4ubvNV(GLuint index, const GLubyte *v) {
	return GLFunctions()->VertexAttrib4ubvNV(index, v);
}

inline void glVertexAttrib4uiv(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttrib4uiv(index, v);
}

inline void glVertexAttrib4uivARB(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttrib4uivARB(index, v);
}

inline void glVertexAttrib4usv(GLuint index, const GLushort *v) {
	return GLFunctions()->VertexAttrib4usv(index, v);
}

inline void glVertexAttrib4usvARB(GLuint index, const GLushort *v) {
	return GLFunctions()->VertexAttrib4usvARB(index, v);
}

inline void glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) {
	return GLFunctions()->VertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
}

inline void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
	return GLFunctions()->VertexAttribBinding(attribindex, bindingindex);
}

inline void glVertexAttribDivisor(GLuint index, GLuint divisor) {
	return GLFunctions()->VertexAttribDivisor(index, divisor);
}

inline void glVertexAttribDivisorARB(GLuint index, GLuint divisor) {
	return GLFunctions()->VertexAttribDivisorARB(index, divisor);
}

inline void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
	return GLFunctions()->VertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}

inline void glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) {
	return GLFunctions()->VertexAttribFormatNV(index, size, type, normalized, stride);
}

inline void glVertexAttribI1i(GLuint index, GLint x) {
	return GLFunctions()->VertexAttribI1i(index, x);
}

inline void glVertexAttribI1iEXT(GLuint index, GLint x) {
	return GLFunctions()->VertexAttribI1iEXT(index, x);
}

inline void glVertexAttribI1iv(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttribI1iv(index, v);
}

inline void glVertexAttribI1ivEXT(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttribI1ivEXT(index, v);
}

inline void glVertexAttribI1ui(GLuint index, GLuint x) {
	return GLFunctions()->VertexAttribI1ui(index, x);
}

inline void glVertexAttribI1uiEXT(GLuint index, GLuint x) {
	return GLFunctions()->VertexAttribI1uiEXT(index, x);
}

inline void glVertexAttribI1uiv(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttribI1uiv(index, v);
}

inline void glVertexAttribI1uivEXT(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttribI1uivEXT(index, v);
}

inline void glVertexAttribI2i(GLuint index, GLint x, GLint y) {
	return GLFunctions()->VertexAttribI2i(index, x, y);
}

inline void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y) {
	return GLFunctions()->VertexAttribI2iEXT(index, x, y);
}

inline void glVertexAttribI2iv(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttribI2iv(index, v);
}

inline void glVertexAttribI2ivEXT(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttribI2ivEXT(index, v);
}

inline void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
	return GLFunctions()->VertexAttribI2ui(index, x, y);
}

inline void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) {
	return GLFunctions()->VertexAttribI2uiEXT(index, x, y);
}

inline void glVertexAttribI2uiv(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttribI2uiv(index, v);
}

inline void glVertexAttribI2uivEXT(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttribI2uivEXT(index, v);
}

inline void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
	return GLFunctions()->VertexAttribI3i(index, x, y, z);
}

inline void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) {
	return GLFunctions()->VertexAttribI3iEXT(index, x, y, z);
}

inline void glVertexAttribI3iv(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttribI3iv(index, v);
}

inline void glVertexAttribI3ivEXT(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttribI3ivEXT(index, v);
}

inline void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
	return GLFunctions()->VertexAttribI3ui(index, x, y, z);
}

inline void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) {
	return GLFunctions()->VertexAttribI3uiEXT(index, x, y, z);
}

inline void glVertexAttribI3uiv(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttribI3uiv(index, v);
}

inline void glVertexAttribI3uivEXT(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttribI3uivEXT(index, v);
}

inline void glVertexAttribI4bv(GLuint index, const GLbyte *v) {
	return GLFunctions()->VertexAttribI4bv(index, v);
}

inline void glVertexAttribI4bvEXT(GLuint index, const GLbyte *v) {
	return GLFunctions()->VertexAttribI4bvEXT(index, v);
}

inline void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
	return GLFunctions()->VertexAttribI4i(index, x, y, z, w);
}

inline void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) {
	return GLFunctions()->VertexAttribI4iEXT(index, x, y, z, w);
}

inline void glVertexAttribI4iv(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttribI4iv(index, v);
}

inline void glVertexAttribI4ivEXT(GLuint index, const GLint *v) {
	return GLFunctions()->VertexAttribI4ivEXT(index, v);
}

inline void glVertexAttribI4sv(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttribI4sv(index, v);
}

inline void glVertexAttribI4svEXT(GLuint index, const GLshort *v) {
	return GLFunctions()->VertexAttribI4svEXT(index, v);
}

inline void glVertexAttribI4ubv(GLuint index, const GLubyte *v) {
	return GLFunctions()->VertexAttribI4ubv(index, v);
}

inline void glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v) {
	return GLFunctions()->VertexAttribI4ubvEXT(index, v);
}

inline void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
	return GLFunctions()->VertexAttribI4ui(index, x, y, z, w);
}

inline void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
	return GLFunctions()->VertexAttribI4uiEXT(index, x, y, z, w);
}

inline void glVertexAttribI4uiv(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttribI4uiv(index, v);
}

inline void glVertexAttribI4uivEXT(GLuint index, const GLuint *v) {
	return GLFunctions()->VertexAttribI4uivEXT(index, v);
}

inline void glVertexAttribI4usv(GLuint index, const GLushort *v) {
	return GLFunctions()->VertexAttribI4usv(index, v);
}

inline void glVertexAttribI4usvEXT(GLuint index, const GLushort *v) {
	return GLFunctions()->VertexAttribI4usvEXT(index, v);
}

inline void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
	return GLFunctions()->VertexAttribIFormat(attribindex, size, type, relativeoffset);
}

inline void glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
	return GLFunctions()->VertexAttribIFormatNV(index, size, type, stride);
}

inline void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->VertexAttribIPointer(index, size, type, stride, pointer);
}

inline void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->VertexAttribIPointerEXT(index, size, type, stride, pointer);
}

inline void glVertexAttribL1d(GLuint index, GLdouble x) {
	return GLFunctions()->VertexAttribL1d(index, x);
}

inline void glVertexAttribL1dEXT(GLuint index, GLdouble x) {
	return GLFunctions()->VertexAttribL1dEXT(index, x);
}

inline void glVertexAttribL1dv(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttribL1dv(index, v);
}

inline void glVertexAttribL1dvEXT(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttribL1dvEXT(index, v);
}

inline void glVertexAttribL1i64NV(GLuint index, GLint64EXT x) {
	return GLFunctions()->VertexAttribL1i64NV(index, x);
}

inline void glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v) {
	return GLFunctions()->VertexAttribL1i64vNV(index, v);
}

inline void glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) {
	return GLFunctions()->VertexAttribL1ui64ARB(index, x);
}

inline void glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) {
	return GLFunctions()->VertexAttribL1ui64NV(index, x);
}

inline void glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v) {
	return GLFunctions()->VertexAttribL1ui64vARB(index, v);
}

inline void glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v) {
	return GLFunctions()->VertexAttribL1ui64vNV(index, v);
}

inline void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
	return GLFunctions()->VertexAttribL2d(index, x, y);
}

inline void glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) {
	return GLFunctions()->VertexAttribL2dEXT(index, x, y);
}

inline void glVertexAttribL2dv(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttribL2dv(index, v);
}

inline void glVertexAttribL2dvEXT(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttribL2dvEXT(index, v);
}

inline void glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) {
	return GLFunctions()->VertexAttribL2i64NV(index, x, y);
}

inline void glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v) {
	return GLFunctions()->VertexAttribL2i64vNV(index, v);
}

inline void glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) {
	return GLFunctions()->VertexAttribL2ui64NV(index, x, y);
}

inline void glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v) {
	return GLFunctions()->VertexAttribL2ui64vNV(index, v);
}

inline void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->VertexAttribL3d(index, x, y, z);
}

inline void glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->VertexAttribL3dEXT(index, x, y, z);
}

inline void glVertexAttribL3dv(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttribL3dv(index, v);
}

inline void glVertexAttribL3dvEXT(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttribL3dvEXT(index, v);
}

inline void glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
	return GLFunctions()->VertexAttribL3i64NV(index, x, y, z);
}

inline void glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v) {
	return GLFunctions()->VertexAttribL3i64vNV(index, v);
}

inline void glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
	return GLFunctions()->VertexAttribL3ui64NV(index, x, y, z);
}

inline void glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v) {
	return GLFunctions()->VertexAttribL3ui64vNV(index, v);
}

inline void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->VertexAttribL4d(index, x, y, z, w);
}

inline void glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->VertexAttribL4dEXT(index, x, y, z, w);
}

inline void glVertexAttribL4dv(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttribL4dv(index, v);
}

inline void glVertexAttribL4dvEXT(GLuint index, const GLdouble *v) {
	return GLFunctions()->VertexAttribL4dvEXT(index, v);
}

inline void glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
	return GLFunctions()->VertexAttribL4i64NV(index, x, y, z, w);
}

inline void glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v) {
	return GLFunctions()->VertexAttribL4i64vNV(index, v);
}

inline void glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
	return GLFunctions()->VertexAttribL4ui64NV(index, x, y, z, w);
}

inline void glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v) {
	return GLFunctions()->VertexAttribL4ui64vNV(index, v);
}

inline void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
	return GLFunctions()->VertexAttribLFormat(attribindex, size, type, relativeoffset);
}

inline void glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
	return GLFunctions()->VertexAttribLFormatNV(index, size, type, stride);
}

inline void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->VertexAttribLPointer(index, size, type, stride, pointer);
}

inline void glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->VertexAttribLPointerEXT(index, size, type, stride, pointer);
}

inline void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
	return GLFunctions()->VertexAttribP1ui(index, type, normalized, value);
}

inline void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
	return GLFunctions()->VertexAttribP1uiv(index, type, normalized, value);
}

inline void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
	return GLFunctions()->VertexAttribP2ui(index, type, normalized, value);
}

inline void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
	return GLFunctions()->VertexAttribP2uiv(index, type, normalized, value);
}

inline void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
	return GLFunctions()->VertexAttribP3ui(index, type, normalized, value);
}

inline void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
	return GLFunctions()->VertexAttribP3uiv(index, type, normalized, value);
}

inline void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
	return GLFunctions()->VertexAttribP4ui(index, type, normalized, value);
}

inline void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
	return GLFunctions()->VertexAttribP4uiv(index, type, normalized, value);
}

inline void glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) {
	return GLFunctions()->VertexAttribParameteriAMD(index, pname, param);
}

inline void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {
	return GLFunctions()->VertexAttribPointer(index, size, type, normalized, stride, pointer);
}

inline void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) {
	return GLFunctions()->VertexAttribPointerARB(index, size, type, normalized, stride, pointer);
}

inline void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->VertexAttribPointerNV(index, fsize, type, stride, pointer);
}

inline void glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v) {
	return GLFunctions()->VertexAttribs1dvNV(index, count, v);
}

inline void glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v) {
	return GLFunctions()->VertexAttribs1fvNV(index, count, v);
}

inline void glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v) {
	return GLFunctions()->VertexAttribs1hvNV(index, n, v);
}

inline void glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v) {
	return GLFunctions()->VertexAttribs1svNV(index, count, v);
}

inline void glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v) {
	return GLFunctions()->VertexAttribs2dvNV(index, count, v);
}

inline void glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v) {
	return GLFunctions()->VertexAttribs2fvNV(index, count, v);
}

inline void glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v) {
	return GLFunctions()->VertexAttribs2hvNV(index, n, v);
}

inline void glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v) {
	return GLFunctions()->VertexAttribs2svNV(index, count, v);
}

inline void glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v) {
	return GLFunctions()->VertexAttribs3dvNV(index, count, v);
}

inline void glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v) {
	return GLFunctions()->VertexAttribs3fvNV(index, count, v);
}

inline void glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v) {
	return GLFunctions()->VertexAttribs3hvNV(index, n, v);
}

inline void glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v) {
	return GLFunctions()->VertexAttribs3svNV(index, count, v);
}

inline void glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v) {
	return GLFunctions()->VertexAttribs4dvNV(index, count, v);
}

inline void glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v) {
	return GLFunctions()->VertexAttribs4fvNV(index, count, v);
}

inline void glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v) {
	return GLFunctions()->VertexAttribs4hvNV(index, n, v);
}

inline void glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v) {
	return GLFunctions()->VertexAttribs4svNV(index, count, v);
}

inline void glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v) {
	return GLFunctions()->VertexAttribs4ubvNV(index, count, v);
}

inline void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
	return GLFunctions()->VertexBindingDivisor(bindingindex, divisor);
}

inline void glVertexBlendARB(GLint count) {
	return GLFunctions()->VertexBlendARB(count);
}

inline void glVertexBlendEnvfATI(GLenum pname, GLfloat param) {
	return GLFunctions()->VertexBlendEnvfATI(pname, param);
}

inline void glVertexBlendEnviATI(GLenum pname, GLint param) {
	return GLFunctions()->VertexBlendEnviATI(pname, param);
}

inline void glVertexFormatNV(GLint size, GLenum type, GLsizei stride) {
	return GLFunctions()->VertexFormatNV(size, type, stride);
}

inline void glVertexP2ui(GLenum type, GLuint value) {
	return GLFunctions()->VertexP2ui(type, value);
}

inline void glVertexP2uiv(GLenum type, const GLuint *value) {
	return GLFunctions()->VertexP2uiv(type, value);
}

inline void glVertexP3ui(GLenum type, GLuint value) {
	return GLFunctions()->VertexP3ui(type, value);
}

inline void glVertexP3uiv(GLenum type, const GLuint *value) {
	return GLFunctions()->VertexP3uiv(type, value);
}

inline void glVertexP4ui(GLenum type, GLuint value) {
	return GLFunctions()->VertexP4ui(type, value);
}

inline void glVertexP4uiv(GLenum type, const GLuint *value) {
	return GLFunctions()->VertexP4uiv(type, value);
}

inline void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) {
	return GLFunctions()->VertexPointerEXT(size, type, stride, count, pointer);
}

inline void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) {
	return GLFunctions()->VertexPointerListIBM(size, type, stride, pointer, ptrstride);
}

inline void glVertexPointervINTEL(GLint size, GLenum type, const void **pointer) {
	return GLFunctions()->VertexPointervINTEL(size, type, pointer);
}

inline void glVertexStream1dATI(GLenum stream, GLdouble x) {
	return GLFunctions()->VertexStream1dATI(stream, x);
}

inline void glVertexStream1dvATI(GLenum stream, const GLdouble *coords) {
	return GLFunctions()->VertexStream1dvATI(stream, coords);
}

inline void glVertexStream1fATI(GLenum stream, GLfloat x) {
	return GLFunctions()->VertexStream1fATI(stream, x);
}

inline void glVertexStream1fvATI(GLenum stream, const GLfloat *coords) {
	return GLFunctions()->VertexStream1fvATI(stream, coords);
}

inline void glVertexStream1iATI(GLenum stream, GLint x) {
	return GLFunctions()->VertexStream1iATI(stream, x);
}

inline void glVertexStream1ivATI(GLenum stream, const GLint *coords) {
	return GLFunctions()->VertexStream1ivATI(stream, coords);
}

inline void glVertexStream1sATI(GLenum stream, GLshort x) {
	return GLFunctions()->VertexStream1sATI(stream, x);
}

inline void glVertexStream1svATI(GLenum stream, const GLshort *coords) {
	return GLFunctions()->VertexStream1svATI(stream, coords);
}

inline void glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) {
	return GLFunctions()->VertexStream2dATI(stream, x, y);
}

inline void glVertexStream2dvATI(GLenum stream, const GLdouble *coords) {
	return GLFunctions()->VertexStream2dvATI(stream, coords);
}

inline void glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) {
	return GLFunctions()->VertexStream2fATI(stream, x, y);
}

inline void glVertexStream2fvATI(GLenum stream, const GLfloat *coords) {
	return GLFunctions()->VertexStream2fvATI(stream, coords);
}

inline void glVertexStream2iATI(GLenum stream, GLint x, GLint y) {
	return GLFunctions()->VertexStream2iATI(stream, x, y);
}

inline void glVertexStream2ivATI(GLenum stream, const GLint *coords) {
	return GLFunctions()->VertexStream2ivATI(stream, coords);
}

inline void glVertexStream2sATI(GLenum stream, GLshort x, GLshort y) {
	return GLFunctions()->VertexStream2sATI(stream, x, y);
}

inline void glVertexStream2svATI(GLenum stream, const GLshort *coords) {
	return GLFunctions()->VertexStream2svATI(stream, coords);
}

inline void glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->VertexStream3dATI(stream, x, y, z);
}

inline void glVertexStream3dvATI(GLenum stream, const GLdouble *coords) {
	return GLFunctions()->VertexStream3dvATI(stream, coords);
}

inline void glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->VertexStream3fATI(stream, x, y, z);
}

inline void glVertexStream3fvATI(GLenum stream, const GLfloat *coords) {
	return GLFunctions()->VertexStream3fvATI(stream, coords);
}

inline void glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) {
	return GLFunctions()->VertexStream3iATI(stream, x, y, z);
}

inline void glVertexStream3ivATI(GLenum stream, const GLint *coords) {
	return GLFunctions()->VertexStream3ivATI(stream, coords);
}

inline void glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) {
	return GLFunctions()->VertexStream3sATI(stream, x, y, z);
}

inline void glVertexStream3svATI(GLenum stream, const GLshort *coords) {
	return GLFunctions()->VertexStream3svATI(stream, coords);
}

inline void glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->VertexStream4dATI(stream, x, y, z, w);
}

inline void glVertexStream4dvATI(GLenum stream, const GLdouble *coords) {
	return GLFunctions()->VertexStream4dvATI(stream, coords);
}

inline void glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->VertexStream4fATI(stream, x, y, z, w);
}

inline void glVertexStream4fvATI(GLenum stream, const GLfloat *coords) {
	return GLFunctions()->VertexStream4fvATI(stream, coords);
}

inline void glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) {
	return GLFunctions()->VertexStream4iATI(stream, x, y, z, w);
}

inline void glVertexStream4ivATI(GLenum stream, const GLint *coords) {
	return GLFunctions()->VertexStream4ivATI(stream, coords);
}

inline void glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) {
	return GLFunctions()->VertexStream4sATI(stream, x, y, z, w);
}

inline void glVertexStream4svATI(GLenum stream, const GLshort *coords) {
	return GLFunctions()->VertexStream4svATI(stream, coords);
}

inline void glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->VertexWeightPointerEXT(size, type, stride, pointer);
}

inline void glVertexWeightfEXT(GLfloat weight) {
	return GLFunctions()->VertexWeightfEXT(weight);
}

inline void glVertexWeightfvEXT(const GLfloat *weight) {
	return GLFunctions()->VertexWeightfvEXT(weight);
}

inline void glVertexWeighthNV(GLhalfNV weight) {
	return GLFunctions()->VertexWeighthNV(weight);
}

inline void glVertexWeighthvNV(const GLhalfNV *weight) {
	return GLFunctions()->VertexWeighthvNV(weight);
}

inline GLenum glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) {
	return GLFunctions()->VideoCaptureNV(video_capture_slot, sequence_num, capture_time);
}

inline void glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params) {
	return GLFunctions()->VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
}

inline void glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params) {
	return GLFunctions()->VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
}

inline void glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params) {
	return GLFunctions()->VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
}

inline void glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {
	return GLFunctions()->ViewportArrayv(first, count, v);
}

inline void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
	return GLFunctions()->ViewportIndexedf(index, x, y, w, h);
}

inline void glViewportIndexedfv(GLuint index, const GLfloat *v) {
	return GLFunctions()->ViewportIndexedfv(index, v);
}

inline void glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
	return GLFunctions()->ViewportPositionWScaleNV(index, xcoeff, ycoeff);
}

inline void glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {
	return GLFunctions()->ViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
}

inline void glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts) {
	return GLFunctions()->WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}

inline void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
	return GLFunctions()->WaitSync(sync, flags, timeout);
}

inline void glWaitVkSemaphoreNV(GLuint64 vkSemaphore) {
	return GLFunctions()->WaitVkSemaphoreNV(vkSemaphore);
}

inline void glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) {
	return GLFunctions()->WeightPathsNV(resultPath, numPaths, paths, weights);
}

inline void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer) {
	return GLFunctions()->WeightPointerARB(size, type, stride, pointer);
}

inline void glWeightbvARB(GLint size, const GLbyte *weights) {
	return GLFunctions()->WeightbvARB(size, weights);
}

inline void glWeightdvARB(GLint size, const GLdouble *weights) {
	return GLFunctions()->WeightdvARB(size, weights);
}

inline void glWeightfvARB(GLint size, const GLfloat *weights) {
	return GLFunctions()->WeightfvARB(size, weights);
}

inline void glWeightivARB(GLint size, const GLint *weights) {
	return GLFunctions()->WeightivARB(size, weights);
}

inline void glWeightsvARB(GLint size, const GLshort *weights) {
	return GLFunctions()->WeightsvARB(size, weights);
}

inline void glWeightubvARB(GLint size, const GLubyte *weights) {
	return GLFunctions()->WeightubvARB(size, weights);
}

inline void glWeightuivARB(GLint size, const GLuint *weights) {
	return GLFunctions()->WeightuivARB(size, weights);
}

inline void glWeightusvARB(GLint size, const GLushort *weights) {
	return GLFunctions()->WeightusvARB(size, weights);
}

inline void glWindowPos2d(GLdouble x, GLdouble y) {
	return GLFunctions()->WindowPos2d(x, y);
}

inline void glWindowPos2dARB(GLdouble x, GLdouble y) {
	return GLFunctions()->WindowPos2dARB(x, y);
}

inline void glWindowPos2dMESA(GLdouble x, GLdouble y) {
	return GLFunctions()->WindowPos2dMESA(x, y);
}

inline void glWindowPos2dv(const GLdouble *v) {
	return GLFunctions()->WindowPos2dv(v);
}

inline void glWindowPos2dvARB(const GLdouble *v) {
	return GLFunctions()->WindowPos2dvARB(v);
}

inline void glWindowPos2dvMESA(const GLdouble *v) {
	return GLFunctions()->WindowPos2dvMESA(v);
}

inline void glWindowPos2f(GLfloat x, GLfloat y) {
	return GLFunctions()->WindowPos2f(x, y);
}

inline void glWindowPos2fARB(GLfloat x, GLfloat y) {
	return GLFunctions()->WindowPos2fARB(x, y);
}

inline void glWindowPos2fMESA(GLfloat x, GLfloat y) {
	return GLFunctions()->WindowPos2fMESA(x, y);
}

inline void glWindowPos2fv(const GLfloat *v) {
	return GLFunctions()->WindowPos2fv(v);
}

inline void glWindowPos2fvARB(const GLfloat *v) {
	return GLFunctions()->WindowPos2fvARB(v);
}

inline void glWindowPos2fvMESA(const GLfloat *v) {
	return GLFunctions()->WindowPos2fvMESA(v);
}

inline void glWindowPos2i(GLint x, GLint y) {
	return GLFunctions()->WindowPos2i(x, y);
}

inline void glWindowPos2iARB(GLint x, GLint y) {
	return GLFunctions()->WindowPos2iARB(x, y);
}

inline void glWindowPos2iMESA(GLint x, GLint y) {
	return GLFunctions()->WindowPos2iMESA(x, y);
}

inline void glWindowPos2iv(const GLint *v) {
	return GLFunctions()->WindowPos2iv(v);
}

inline void glWindowPos2ivARB(const GLint *v) {
	return GLFunctions()->WindowPos2ivARB(v);
}

inline void glWindowPos2ivMESA(const GLint *v) {
	return GLFunctions()->WindowPos2ivMESA(v);
}

inline void glWindowPos2s(GLshort x, GLshort y) {
	return GLFunctions()->WindowPos2s(x, y);
}

inline void glWindowPos2sARB(GLshort x, GLshort y) {
	return GLFunctions()->WindowPos2sARB(x, y);
}

inline void glWindowPos2sMESA(GLshort x, GLshort y) {
	return GLFunctions()->WindowPos2sMESA(x, y);
}

inline void glWindowPos2sv(const GLshort *v) {
	return GLFunctions()->WindowPos2sv(v);
}

inline void glWindowPos2svARB(const GLshort *v) {
	return GLFunctions()->WindowPos2svARB(v);
}

inline void glWindowPos2svMESA(const GLshort *v) {
	return GLFunctions()->WindowPos2svMESA(v);
}

inline void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->WindowPos3d(x, y, z);
}

inline void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->WindowPos3dARB(x, y, z);
}

inline void glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) {
	return GLFunctions()->WindowPos3dMESA(x, y, z);
}

inline void glWindowPos3dv(const GLdouble *v) {
	return GLFunctions()->WindowPos3dv(v);
}

inline void glWindowPos3dvARB(const GLdouble *v) {
	return GLFunctions()->WindowPos3dvARB(v);
}

inline void glWindowPos3dvMESA(const GLdouble *v) {
	return GLFunctions()->WindowPos3dvMESA(v);
}

inline void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->WindowPos3f(x, y, z);
}

inline void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->WindowPos3fARB(x, y, z);
}

inline void glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) {
	return GLFunctions()->WindowPos3fMESA(x, y, z);
}

inline void glWindowPos3fv(const GLfloat *v) {
	return GLFunctions()->WindowPos3fv(v);
}

inline void glWindowPos3fvARB(const GLfloat *v) {
	return GLFunctions()->WindowPos3fvARB(v);
}

inline void glWindowPos3fvMESA(const GLfloat *v) {
	return GLFunctions()->WindowPos3fvMESA(v);
}

inline void glWindowPos3i(GLint x, GLint y, GLint z) {
	return GLFunctions()->WindowPos3i(x, y, z);
}

inline void glWindowPos3iARB(GLint x, GLint y, GLint z) {
	return GLFunctions()->WindowPos3iARB(x, y, z);
}

inline void glWindowPos3iMESA(GLint x, GLint y, GLint z) {
	return GLFunctions()->WindowPos3iMESA(x, y, z);
}

inline void glWindowPos3iv(const GLint *v) {
	return GLFunctions()->WindowPos3iv(v);
}

inline void glWindowPos3ivARB(const GLint *v) {
	return GLFunctions()->WindowPos3ivARB(v);
}

inline void glWindowPos3ivMESA(const GLint *v) {
	return GLFunctions()->WindowPos3ivMESA(v);
}

inline void glWindowPos3s(GLshort x, GLshort y, GLshort z) {
	return GLFunctions()->WindowPos3s(x, y, z);
}

inline void glWindowPos3sARB(GLshort x, GLshort y, GLshort z) {
	return GLFunctions()->WindowPos3sARB(x, y, z);
}

inline void glWindowPos3sMESA(GLshort x, GLshort y, GLshort z) {
	return GLFunctions()->WindowPos3sMESA(x, y, z);
}

inline void glWindowPos3sv(const GLshort *v) {
	return GLFunctions()->WindowPos3sv(v);
}

inline void glWindowPos3svARB(const GLshort *v) {
	return GLFunctions()->WindowPos3svARB(v);
}

inline void glWindowPos3svMESA(const GLshort *v) {
	return GLFunctions()->WindowPos3svMESA(v);
}

inline void glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	return GLFunctions()->WindowPos4dMESA(x, y, z, w);
}

inline void glWindowPos4dvMESA(const GLdouble *v) {
	return GLFunctions()->WindowPos4dvMESA(v);
}

inline void glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	return GLFunctions()->WindowPos4fMESA(x, y, z, w);
}

inline void glWindowPos4fvMESA(const GLfloat *v) {
	return GLFunctions()->WindowPos4fvMESA(v);
}

inline void glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) {
	return GLFunctions()->WindowPos4iMESA(x, y, z, w);
}

inline void glWindowPos4ivMESA(const GLint *v) {
	return GLFunctions()->WindowPos4ivMESA(v);
}

inline void glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) {
	return GLFunctions()->WindowPos4sMESA(x, y, z, w);
}

inline void glWindowPos4svMESA(const GLshort *v) {
	return GLFunctions()->WindowPos4svMESA(v);
}

inline void glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box) {
	return GLFunctions()->WindowRectanglesEXT(mode, count, box);
}

inline void glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
	return GLFunctions()->WriteMaskEXT(res, in, outX, outY, outZ, outW);
}

#if defined(SOGL_WINDOWS)

inline BOOL wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count) {
	return WGLFunctions()->AssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count);
}

inline BOOL wglBeginFrameTrackingI3D(void) {
	return WGLFunctions()->BeginFrameTrackingI3D();
}

inline GLboolean wglBindDisplayColorTableEXT(GLushort id) {
	return WGLFunctions()->BindDisplayColorTableEXT(id);
}

inline BOOL wglBindSwapBarrierNV(GLuint group, GLuint barrier) {
	return WGLFunctions()->BindSwapBarrierNV(group, barrier);
}

inline BOOL wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer) {
	return WGLFunctions()->BindTexImageARB(hPbuffer, iBuffer);
}

inline BOOL wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice) {
	return WGLFunctions()->BindVideoCaptureDeviceNV(uVideoSlot, hDevice);
}

inline BOOL wglBindVideoDeviceNV(HDC hDc, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList) {
	return WGLFunctions()->BindVideoDeviceNV(hDc, uVideoSlot, hVideoDevice, piAttribList);
}

inline BOOL wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer) {
	return WGLFunctions()->BindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer);
}

inline VOID wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
	return WGLFunctions()->BlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

inline BOOL wglChoosePixelFormatARB(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats) {
	return WGLFunctions()->ChoosePixelFormatARB(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
}

inline BOOL wglChoosePixelFormatEXT(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats) {
	return WGLFunctions()->ChoosePixelFormatEXT(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
}

inline BOOL wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
	return WGLFunctions()->CopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

inline HDC wglCreateAffinityDCNV(const HGPUNV *phGpuList) {
	return WGLFunctions()->CreateAffinityDCNV(phGpuList);
}

inline HGLRC wglCreateAssociatedContextAMD(UINT id) {
	return WGLFunctions()->CreateAssociatedContextAMD(id);
}

inline HGLRC wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int *attribList) {
	return WGLFunctions()->CreateAssociatedContextAttribsAMD(id, hShareContext, attribList);
}

inline HANDLE wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType) {
	return WGLFunctions()->CreateBufferRegionARB(hDC, iLayerPlane, uType);
}

inline HGLRC wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *attribList) {
	return WGLFunctions()->CreateContextAttribsARB(hDC, hShareContext, attribList);
}

inline GLboolean wglCreateDisplayColorTableEXT(GLushort id) {
	return WGLFunctions()->CreateDisplayColorTableEXT(id);
}

inline LPVOID wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags) {
	return WGLFunctions()->CreateImageBufferI3D(hDC, dwSize, uFlags);
}

inline HPBUFFERARB wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList) {
	return WGLFunctions()->CreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
}

inline HPBUFFEREXT wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList) {
	return WGLFunctions()->CreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
}

inline BOOL wglDXCloseDeviceNV(HANDLE hDevice) {
	return WGLFunctions()->DXCloseDeviceNV(hDevice);
}

inline BOOL wglDXLockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects) {
	return WGLFunctions()->DXLockObjectsNV(hDevice, count, hObjects);
}

inline BOOL wglDXObjectAccessNV(HANDLE hObject, GLenum access) {
	return WGLFunctions()->DXObjectAccessNV(hObject, access);
}

inline HANDLE wglDXOpenDeviceNV(void *dxDevice) {
	return WGLFunctions()->DXOpenDeviceNV(dxDevice);
}

inline HANDLE wglDXRegisterObjectNV(HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access) {
	return WGLFunctions()->DXRegisterObjectNV(hDevice, dxObject, name, type, access);
}

inline BOOL wglDXSetResourceShareHandleNV(void *dxObject, HANDLE shareHandle) {
	return WGLFunctions()->DXSetResourceShareHandleNV(dxObject, shareHandle);
}

inline BOOL wglDXUnlockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects) {
	return WGLFunctions()->DXUnlockObjectsNV(hDevice, count, hObjects);
}

inline BOOL wglDXUnregisterObjectNV(HANDLE hDevice, HANDLE hObject) {
	return WGLFunctions()->DXUnregisterObjectNV(hDevice, hObject);
}

inline BOOL wglDelayBeforeSwapNV(HDC hDC, GLfloat seconds) {
	return WGLFunctions()->DelayBeforeSwapNV(hDC, seconds);
}

inline BOOL wglDeleteAssociatedContextAMD(HGLRC hglrc) {
	return WGLFunctions()->DeleteAssociatedContextAMD(hglrc);
}

inline VOID wglDeleteBufferRegionARB(HANDLE hRegion) {
	return WGLFunctions()->DeleteBufferRegionARB(hRegion);
}

inline BOOL wglDeleteDCNV(HDC hdc) {
	return WGLFunctions()->DeleteDCNV(hdc);
}

inline VOID wglDestroyDisplayColorTableEXT(GLushort id) {
	return WGLFunctions()->DestroyDisplayColorTableEXT(id);
}

inline BOOL wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress) {
	return WGLFunctions()->DestroyImageBufferI3D(hDC, pAddress);
}

inline BOOL wglDestroyPbufferARB(HPBUFFERARB hPbuffer) {
	return WGLFunctions()->DestroyPbufferARB(hPbuffer);
}

inline BOOL wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer) {
	return WGLFunctions()->DestroyPbufferEXT(hPbuffer);
}

inline BOOL wglDisableFrameLockI3D(void) {
	return WGLFunctions()->DisableFrameLockI3D();
}

inline BOOL wglDisableGenlockI3D(HDC hDC) {
	return WGLFunctions()->DisableGenlockI3D(hDC);
}

inline BOOL wglEnableFrameLockI3D(void) {
	return WGLFunctions()->EnableFrameLockI3D();
}

inline BOOL wglEnableGenlockI3D(HDC hDC) {
	return WGLFunctions()->EnableGenlockI3D(hDC);
}

inline BOOL wglEndFrameTrackingI3D(void) {
	return WGLFunctions()->EndFrameTrackingI3D();
}

inline BOOL wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice) {
	return WGLFunctions()->EnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice);
}

inline BOOL wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu) {
	return WGLFunctions()->EnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu);
}

inline BOOL wglEnumGpusNV(UINT iGpuIndex, HGPUNV *phGpu) {
	return WGLFunctions()->EnumGpusNV(iGpuIndex, phGpu);
}

inline UINT wglEnumerateVideoCaptureDevicesNV(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList) {
	return WGLFunctions()->EnumerateVideoCaptureDevicesNV(hDc, phDeviceList);
}

inline int wglEnumerateVideoDevicesNV(HDC hDc, HVIDEOOUTPUTDEVICENV *phDeviceList) {
	return WGLFunctions()->EnumerateVideoDevicesNV(hDc, phDeviceList);
}

inline void wglFreeMemoryNV(void *pointer) {
	return WGLFunctions()->FreeMemoryNV(pointer);
}

inline BOOL wglGenlockSampleRateI3D(HDC hDC, UINT uRate) {
	return WGLFunctions()->GenlockSampleRateI3D(hDC, uRate);
}

inline BOOL wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay) {
	return WGLFunctions()->GenlockSourceDelayI3D(hDC, uDelay);
}

inline BOOL wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge) {
	return WGLFunctions()->GenlockSourceEdgeI3D(hDC, uEdge);
}

inline BOOL wglGenlockSourceI3D(HDC hDC, UINT uSource) {
	return WGLFunctions()->GenlockSourceI3D(hDC, uSource);
}

inline UINT wglGetContextGPUIDAMD(HGLRC hglrc) {
	return WGLFunctions()->GetContextGPUIDAMD(hglrc);
}

inline HGLRC wglGetCurrentAssociatedContextAMD(void) {
	return WGLFunctions()->GetCurrentAssociatedContextAMD();
}

inline HDC wglGetCurrentReadDCARB(void) {
	return WGLFunctions()->GetCurrentReadDCARB();
}

inline HDC wglGetCurrentReadDCEXT(void) {
	return WGLFunctions()->GetCurrentReadDCEXT();
}

inline BOOL wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int *piValue) {
	return WGLFunctions()->GetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
}

inline BOOL wglGetFrameUsageI3D(float *pUsage) {
	return WGLFunctions()->GetFrameUsageI3D(pUsage);
}

inline UINT wglGetGPUIDsAMD(UINT maxCount, UINT *ids) {
	return WGLFunctions()->GetGPUIDsAMD(maxCount, ids);
}

inline INT wglGetGPUInfoAMD(UINT id, INT property, GLenum dataType, UINT size, void *data) {
	return WGLFunctions()->GetGPUInfoAMD(id, property, dataType, size, data);
}

inline BOOL wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue) {
	return WGLFunctions()->GetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
}

inline BOOL wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int *piValue) {
	return WGLFunctions()->GetGammaTableParametersI3D(hDC, iAttribute, piValue);
}

inline BOOL wglGetGenlockSampleRateI3D(HDC hDC, UINT *uRate) {
	return WGLFunctions()->GetGenlockSampleRateI3D(hDC, uRate);
}

inline BOOL wglGetGenlockSourceDelayI3D(HDC hDC, UINT *uDelay) {
	return WGLFunctions()->GetGenlockSourceDelayI3D(hDC, uDelay);
}

inline BOOL wglGetGenlockSourceEdgeI3D(HDC hDC, UINT *uEdge) {
	return WGLFunctions()->GetGenlockSourceEdgeI3D(hDC, uEdge);
}

inline BOOL wglGetGenlockSourceI3D(HDC hDC, UINT *uSource) {
	return WGLFunctions()->GetGenlockSourceI3D(hDC, uSource);
}

inline BOOL wglGetMscRateOML(HDC hdc, INT32 *numerator, INT32 *denominator) {
	return WGLFunctions()->GetMscRateOML(hdc, numerator, denominator);
}

inline HDC wglGetPbufferDCARB(HPBUFFERARB hPbuffer) {
	return WGLFunctions()->GetPbufferDCARB(hPbuffer);
}

inline HDC wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer) {
	return WGLFunctions()->GetPbufferDCEXT(hPbuffer);
}

inline BOOL wglGetPixelFormatAttribfvARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues) {
	return WGLFunctions()->GetPixelFormatAttribfvARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
}

inline BOOL wglGetPixelFormatAttribfvEXT(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues) {
	return WGLFunctions()->GetPixelFormatAttribfvEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
}

inline BOOL wglGetPixelFormatAttribivARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues) {
	return WGLFunctions()->GetPixelFormatAttribivARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
}

inline BOOL wglGetPixelFormatAttribivEXT(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues) {
	return WGLFunctions()->GetPixelFormatAttribivEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
}

inline int wglGetSwapIntervalEXT(void) {
	return WGLFunctions()->GetSwapIntervalEXT();
}

inline BOOL wglGetSyncValuesOML(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc) {
	return WGLFunctions()->GetSyncValuesOML(hdc, ust, msc, sbc);
}

inline BOOL wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice) {
	return WGLFunctions()->GetVideoDeviceNV(hDC, numDevices, hVideoDevice);
}

inline BOOL wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo) {
	return WGLFunctions()->GetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
}

inline BOOL wglIsEnabledFrameLockI3D(BOOL *pFlag) {
	return WGLFunctions()->IsEnabledFrameLockI3D(pFlag);
}

inline BOOL wglIsEnabledGenlockI3D(HDC hDC, BOOL *pFlag) {
	return WGLFunctions()->IsEnabledGenlockI3D(hDC, pFlag);
}

inline BOOL wglJoinSwapGroupNV(HDC hDC, GLuint group) {
	return WGLFunctions()->JoinSwapGroupNV(hDC, group);
}

inline GLboolean wglLoadDisplayColorTableEXT(const GLushort *table, GLuint length) {
	return WGLFunctions()->LoadDisplayColorTableEXT(table, length);
}

inline BOOL wglLockVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice) {
	return WGLFunctions()->LockVideoCaptureDeviceNV(hDc, hDevice);
}

inline BOOL wglMakeAssociatedContextCurrentAMD(HGLRC hglrc) {
	return WGLFunctions()->MakeAssociatedContextCurrentAMD(hglrc);
}

inline BOOL wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc) {
	return WGLFunctions()->MakeContextCurrentARB(hDrawDC, hReadDC, hglrc);
}

inline BOOL wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc) {
	return WGLFunctions()->MakeContextCurrentEXT(hDrawDC, hReadDC, hglrc);
}

inline BOOL wglQueryCurrentContextNV(int iAttribute, int *piValue) {
	return WGLFunctions()->QueryCurrentContextNV(iAttribute, piValue);
}

inline BOOL wglQueryFrameCountNV(HDC hDC, GLuint *count) {
	return WGLFunctions()->QueryFrameCountNV(hDC, count);
}

inline BOOL wglQueryFrameLockMasterI3D(BOOL *pFlag) {
	return WGLFunctions()->QueryFrameLockMasterI3D(pFlag);
}

inline BOOL wglQueryFrameTrackingI3D(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage) {
	return WGLFunctions()->QueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage);
}

inline BOOL wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay) {
	return WGLFunctions()->QueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay);
}

inline BOOL wglQueryMaxSwapGroupsNV(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers) {
	return WGLFunctions()->QueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers);
}

inline BOOL wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int *piValue) {
	return WGLFunctions()->QueryPbufferARB(hPbuffer, iAttribute, piValue);
}

inline BOOL wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue) {
	return WGLFunctions()->QueryPbufferEXT(hPbuffer, iAttribute, piValue);
}

inline BOOL wglQuerySwapGroupNV(HDC hDC, GLuint *group, GLuint *barrier) {
	return WGLFunctions()->QuerySwapGroupNV(hDC, group, barrier);
}

inline BOOL wglQueryVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue) {
	return WGLFunctions()->QueryVideoCaptureDeviceNV(hDc, hDevice, iAttribute, piValue);
}

inline BOOL wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID *pAddress, UINT count) {
	return WGLFunctions()->ReleaseImageBufferEventsI3D(hDC, pAddress, count);
}

inline int wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC) {
	return WGLFunctions()->ReleasePbufferDCARB(hPbuffer, hDC);
}

inline int wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC) {
	return WGLFunctions()->ReleasePbufferDCEXT(hPbuffer, hDC);
}

inline BOOL wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer) {
	return WGLFunctions()->ReleaseTexImageARB(hPbuffer, iBuffer);
}

inline BOOL wglReleaseVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice) {
	return WGLFunctions()->ReleaseVideoCaptureDeviceNV(hDc, hDevice);
}

inline BOOL wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice) {
	return WGLFunctions()->ReleaseVideoDeviceNV(hVideoDevice);
}

inline BOOL wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer) {
	return WGLFunctions()->ReleaseVideoImageNV(hPbuffer, iVideoBuffer);
}

inline BOOL wglResetFrameCountNV(HDC hDC) {
	return WGLFunctions()->ResetFrameCountNV(hDC);
}

inline BOOL wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc) {
	return WGLFunctions()->RestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc);
}

inline BOOL wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height) {
	return WGLFunctions()->SaveBufferRegionARB(hRegion, x, y, width, height);
}

inline BOOL wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock) {
	return WGLFunctions()->SendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
}

inline BOOL wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int *piValue) {
	return WGLFunctions()->SetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
}

inline BOOL wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue) {
	return WGLFunctions()->SetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
}

inline BOOL wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int *piValue) {
	return WGLFunctions()->SetGammaTableParametersI3D(hDC, iAttribute, piValue);
}

inline BOOL wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int *piAttribList) {
	return WGLFunctions()->SetPbufferAttribARB(hPbuffer, piAttribList);
}

inline BOOL wglSetStereoEmitterState3DL(HDC hDC, UINT uState) {
	return WGLFunctions()->SetStereoEmitterState3DL(hDC, uState);
}

inline INT64 wglSwapBuffersMscOML(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder) {
	return WGLFunctions()->SwapBuffersMscOML(hdc, target_msc, divisor, remainder);
}

inline BOOL wglSwapIntervalEXT(int interval) {
	return WGLFunctions()->SwapIntervalEXT(interval);
}

inline INT64 wglSwapLayerBuffersMscOML(HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder) {
	return WGLFunctions()->SwapLayerBuffersMscOML(hdc, fuPlanes, target_msc, divisor, remainder);
}

inline BOOL wglWaitForMscOML(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc) {
	return WGLFunctions()->WaitForMscOML(hdc, target_msc, divisor, remainder, ust, msc, sbc);
}

inline BOOL wglWaitForSbcOML(HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc) {
	return WGLFunctions()->WaitForSbcOML(hdc, target_sbc, ust, msc, sbc);
}

#endif

#if defined(SOGL_LINUX)

inline int glXBindChannelToWindowSGIX(Display *display, int screen, int channel, Window window) {
	return GLXFunctions()->BindChannelToWindowSGIX(display, screen, channel, window);
}

inline int glXBindHyperpipeSGIX(Display *dpy, int hpId) {
	return GLXFunctions()->BindHyperpipeSGIX(dpy, hpId);
}

inline Bool glXBindSwapBarrierNV(Display *dpy, GLuint group, GLuint barrier) {
	return GLXFunctions()->BindSwapBarrierNV(dpy, group, barrier);
}

inline void glXBindSwapBarrierSGIX(Display *dpy, GLXDrawable drawable, int barrier) {
	return GLXFunctions()->BindSwapBarrierSGIX(dpy, drawable, barrier);
}

inline void glXBindTexImageEXT(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list) {
	return GLXFunctions()->BindTexImageEXT(dpy, drawable, buffer, attrib_list);
}

inline int glXBindVideoCaptureDeviceNV(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device) {
	return GLXFunctions()->BindVideoCaptureDeviceNV(dpy, video_capture_slot, device);
}

inline int glXBindVideoDeviceNV(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list) {
	return GLXFunctions()->BindVideoDeviceNV(dpy, video_slot, video_device, attrib_list);
}

inline int glXBindVideoImageNV(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer) {
	return GLXFunctions()->BindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer);
}

inline void glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
	return GLXFunctions()->BlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

inline int glXChannelRectSGIX(Display *display, int screen, int channel, int x, int y, int w, int h) {
	return GLXFunctions()->ChannelRectSGIX(display, screen, channel, x, y, w, h);
}

inline int glXChannelRectSyncSGIX(Display *display, int screen, int channel, GLenum synctype) {
	return GLXFunctions()->ChannelRectSyncSGIX(display, screen, channel, synctype);
}

inline void glXCopyBufferSubDataNV(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
	return GLXFunctions()->CopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size);
}

inline void glXCopyImageSubDataNV(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
	return GLXFunctions()->CopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

inline void glXCopySubBufferMESA(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height) {
	return GLXFunctions()->CopySubBufferMESA(dpy, drawable, x, y, width, height);
}

inline GLXContext glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list) {
	return GLXFunctions()->CreateAssociatedContextAMD(id, share_list);
}

inline GLXContext glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int *attribList) {
	return GLXFunctions()->CreateAssociatedContextAttribsAMD(id, share_context, attribList);
}

inline GLXContext glXCreateContextAttribsARB(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list) {
	return GLXFunctions()->CreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
}

inline GLXContext glXCreateContextWithConfigSGIX(Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct) {
	return GLXFunctions()->CreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct);
}

inline GLXPbufferSGIX glXCreateGLXPbufferSGIX(Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list) {
	return GLXFunctions()->CreateGLXPbufferSGIX(dpy, config, width, height, attrib_list);
}

inline GLXPixmap glXCreateGLXPixmapMESA(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap) {
	return GLXFunctions()->CreateGLXPixmapMESA(dpy, visual, pixmap, cmap);
}

inline GLXPixmap glXCreateGLXPixmapWithConfigSGIX(Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap) {
	return GLXFunctions()->CreateGLXPixmapWithConfigSGIX(dpy, config, pixmap);
}

inline GLXContext glXCreateNewContext(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct) {
	return GLXFunctions()->CreateNewContext(dpy, config, render_type, share_list, direct);
}

inline GLXPbuffer glXCreatePbuffer(Display *dpy, GLXFBConfig config, const int *attrib_list) {
	return GLXFunctions()->CreatePbuffer(dpy, config, attrib_list);
}

inline GLXPixmap glXCreatePixmap(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list) {
	return GLXFunctions()->CreatePixmap(dpy, config, pixmap, attrib_list);
}

inline GLXWindow glXCreateWindow(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list) {
	return GLXFunctions()->CreateWindow(dpy, config, win, attrib_list);
}

inline void glXCushionSGI(Display *dpy, Window window, float cushion) {
	return GLXFunctions()->CushionSGI(dpy, window, cushion);
}

inline Bool glXDelayBeforeSwapNV(Display *dpy, GLXDrawable drawable, GLfloat seconds) {
	return GLXFunctions()->DelayBeforeSwapNV(dpy, drawable, seconds);
}

inline Bool glXDeleteAssociatedContextAMD(GLXContext ctx) {
	return GLXFunctions()->DeleteAssociatedContextAMD(ctx);
}

inline void glXDestroyGLXPbufferSGIX(Display *dpy, GLXPbufferSGIX pbuf) {
	return GLXFunctions()->DestroyGLXPbufferSGIX(dpy, pbuf);
}

inline int glXDestroyHyperpipeConfigSGIX(Display *dpy, int hpId) {
	return GLXFunctions()->DestroyHyperpipeConfigSGIX(dpy, hpId);
}

inline void glXDestroyPbuffer(Display *dpy, GLXPbuffer pbuf) {
	return GLXFunctions()->DestroyPbuffer(dpy, pbuf);
}

inline void glXDestroyPixmap(Display *dpy, GLXPixmap pixmap) {
	return GLXFunctions()->DestroyPixmap(dpy, pixmap);
}

inline void glXDestroyWindow(Display *dpy, GLXWindow win) {
	return GLXFunctions()->DestroyWindow(dpy, win);
}

inline void glXFreeContextEXT(Display *dpy, GLXContext context) {
	return GLXFunctions()->FreeContextEXT(dpy, context);
}

inline GLXContextID glXGetContextIDEXT(const GLXContext context) {
	return GLXFunctions()->GetContextIDEXT(context);
}

inline GLXContext glXGetCurrentAssociatedContextAMD(void) {
	return GLXFunctions()->GetCurrentAssociatedContextAMD();
}

inline GLXDrawable glXGetCurrentReadDrawable(void) {
	return GLXFunctions()->GetCurrentReadDrawable();
}

inline GLXDrawable glXGetCurrentReadDrawableSGI(void) {
	return GLXFunctions()->GetCurrentReadDrawableSGI();
}

inline int glXGetFBConfigAttrib(Display *dpy, GLXFBConfig config, int attribute, int *value) {
	return GLXFunctions()->GetFBConfigAttrib(dpy, config, attribute, value);
}

inline int glXGetFBConfigAttribSGIX(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value) {
	return GLXFunctions()->GetFBConfigAttribSGIX(dpy, config, attribute, value);
}

inline GLXFBConfigSGIX glXGetFBConfigFromVisualSGIX(Display *dpy, XVisualInfo *vis) {
	return GLXFunctions()->GetFBConfigFromVisualSGIX(dpy, vis);
}

inline int glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, void *data) {
	return GLXFunctions()->GetGPUInfoAMD(id, property, dataType, size, data);
}

inline Bool glXGetMscRateOML(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator) {
	return GLXFunctions()->GetMscRateOML(dpy, drawable, numerator, denominator);
}

inline __GLXextFuncPtr glXGetProcAddressARB(const GLubyte *procName) {
	return GLXFunctions()->GetProcAddressARB(procName);
}

inline void glXGetSelectedEvent(Display *dpy, GLXDrawable draw, unsigned long *event_mask) {
	return GLXFunctions()->GetSelectedEvent(dpy, draw, event_mask);
}

inline void glXGetSelectedEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long *mask) {
	return GLXFunctions()->GetSelectedEventSGIX(dpy, drawable, mask);
}

inline int glXGetSwapIntervalMESA(void) {
	return GLXFunctions()->GetSwapIntervalMESA();
}

inline Bool glXGetSyncValuesOML(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc) {
	return GLXFunctions()->GetSyncValuesOML(dpy, drawable, ust, msc, sbc);
}

inline Status glXGetTransparentIndexSUN(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex) {
	return GLXFunctions()->GetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex);
}

inline int glXGetVideoDeviceNV(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice) {
	return GLXFunctions()->GetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice);
}

inline int glXGetVideoInfoNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo) {
	return GLXFunctions()->GetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
}

inline int glXGetVideoSyncSGI(unsigned int *count) {
	return GLXFunctions()->GetVideoSyncSGI(count);
}

inline int glXHyperpipeAttribSGIX(Display *dpy, int timeSlice, int attrib, int size, void *attribList) {
	return GLXFunctions()->HyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList);
}

inline int glXHyperpipeConfigSGIX(Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId) {
	return GLXFunctions()->HyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId);
}

inline GLXContext glXImportContextEXT(Display *dpy, GLXContextID contextID) {
	return GLXFunctions()->ImportContextEXT(dpy, contextID);
}

inline Bool glXJoinSwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint group) {
	return GLXFunctions()->JoinSwapGroupNV(dpy, drawable, group);
}

inline void glXJoinSwapGroupSGIX(Display *dpy, GLXDrawable drawable, GLXDrawable member) {
	return GLXFunctions()->JoinSwapGroupSGIX(dpy, drawable, member);
}

inline void glXLockVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device) {
	return GLXFunctions()->LockVideoCaptureDeviceNV(dpy, device);
}

inline Bool glXMakeAssociatedContextCurrentAMD(GLXContext ctx) {
	return GLXFunctions()->MakeAssociatedContextCurrentAMD(ctx);
}

inline Bool glXMakeContextCurrent(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) {
	return GLXFunctions()->MakeContextCurrent(dpy, draw, read, ctx);
}

inline Bool glXMakeCurrentReadSGI(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) {
	return GLXFunctions()->MakeCurrentReadSGI(dpy, draw, read, ctx);
}

inline void glXNamedCopyBufferSubDataNV(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
	return GLXFunctions()->NamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size);
}

inline int glXQueryChannelDeltasSGIX(Display *display, int screen, int channel, int *x, int *y, int *w, int *h) {
	return GLXFunctions()->QueryChannelDeltasSGIX(display, screen, channel, x, y, w, h);
}

inline int glXQueryChannelRectSGIX(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh) {
	return GLXFunctions()->QueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh);
}

inline int glXQueryContext(Display *dpy, GLXContext ctx, int attribute, int *value) {
	return GLXFunctions()->QueryContext(dpy, ctx, attribute, value);
}

inline int glXQueryContextInfoEXT(Display *dpy, GLXContext context, int attribute, int *value) {
	return GLXFunctions()->QueryContextInfoEXT(dpy, context, attribute, value);
}

inline Bool glXQueryCurrentRendererIntegerMESA(int attribute, unsigned int *value) {
	return GLXFunctions()->QueryCurrentRendererIntegerMESA(attribute, value);
}

inline void glXQueryDrawable(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value) {
	return GLXFunctions()->QueryDrawable(dpy, draw, attribute, value);
}

inline Bool glXQueryFrameCountNV(Display *dpy, int screen, GLuint *count) {
	return GLXFunctions()->QueryFrameCountNV(dpy, screen, count);
}

inline void glXQueryGLXPbufferSGIX(Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value) {
	return GLXFunctions()->QueryGLXPbufferSGIX(dpy, pbuf, attribute, value);
}

inline int glXQueryHyperpipeAttribSGIX(Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList) {
	return GLXFunctions()->QueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList);
}

inline int glXQueryHyperpipeBestAttribSGIX(Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList) {
	return GLXFunctions()->QueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList);
}

inline Bool glXQueryMaxSwapBarriersSGIX(Display *dpy, int screen, int *max) {
	return GLXFunctions()->QueryMaxSwapBarriersSGIX(dpy, screen, max);
}

inline Bool glXQueryMaxSwapGroupsNV(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers) {
	return GLXFunctions()->QueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers);
}

inline Bool glXQueryRendererIntegerMESA(Display *dpy, int screen, int renderer, int attribute, unsigned int *value) {
	return GLXFunctions()->QueryRendererIntegerMESA(dpy, screen, renderer, attribute, value);
}

inline Bool glXQuerySwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier) {
	return GLXFunctions()->QuerySwapGroupNV(dpy, drawable, group, barrier);
}

inline int glXQueryVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value) {
	return GLXFunctions()->QueryVideoCaptureDeviceNV(dpy, device, attribute, value);
}

inline Bool glXReleaseBuffersMESA(Display *dpy, GLXDrawable drawable) {
	return GLXFunctions()->ReleaseBuffersMESA(dpy, drawable);
}

inline void glXReleaseTexImageEXT(Display *dpy, GLXDrawable drawable, int buffer) {
	return GLXFunctions()->ReleaseTexImageEXT(dpy, drawable, buffer);
}

inline void glXReleaseVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device) {
	return GLXFunctions()->ReleaseVideoCaptureDeviceNV(dpy, device);
}

inline int glXReleaseVideoDeviceNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice) {
	return GLXFunctions()->ReleaseVideoDeviceNV(dpy, screen, VideoDevice);
}

inline int glXReleaseVideoImageNV(Display *dpy, GLXPbuffer pbuf) {
	return GLXFunctions()->ReleaseVideoImageNV(dpy, pbuf);
}

inline Bool glXResetFrameCountNV(Display *dpy, int screen) {
	return GLXFunctions()->ResetFrameCountNV(dpy, screen);
}

inline void glXSelectEvent(Display *dpy, GLXDrawable draw, unsigned long event_mask) {
	return GLXFunctions()->SelectEvent(dpy, draw, event_mask);
}

inline void glXSelectEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long mask) {
	return GLXFunctions()->SelectEventSGIX(dpy, drawable, mask);
}

inline int glXSendPbufferToVideoNV(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock) {
	return GLXFunctions()->SendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
}

inline GLboolean glXSet3DfxModeMESA(GLint mode) {
	return GLXFunctions()->Set3DfxModeMESA(mode);
}

inline int64_t glXSwapBuffersMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder) {
	return GLXFunctions()->SwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder);
}

inline void glXSwapIntervalEXT(Display *dpy, GLXDrawable drawable, int interval) {
	return GLXFunctions()->SwapIntervalEXT(dpy, drawable, interval);
}

inline int glXSwapIntervalMESA(unsigned int interval) {
	return GLXFunctions()->SwapIntervalMESA(interval);
}

inline int glXSwapIntervalSGI(int interval) {
	return GLXFunctions()->SwapIntervalSGI(interval);
}

inline Bool glXWaitForMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc) {
	return GLXFunctions()->WaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
}

inline Bool glXWaitForSbcOML(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc) {
	return GLXFunctions()->WaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc);
}

inline int glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *count) {
	return GLXFunctions()->WaitVideoSyncSGI(divisor, remainder, count);
}

#endif

#ifdef _WIN32
#pragma pop_macro("MemoryBarrier")
#endif

#endif // SOGL_HPP
